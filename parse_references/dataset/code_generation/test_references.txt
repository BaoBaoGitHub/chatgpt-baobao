void function ( ScriptOrFnNode arg0 ) { int loc0 = - 1 ; collectFuncNodes ( arg0 , loc0 , null ) ; }
Sha256Hash function ( File arg0 ) { FileInputStream loc0 = new FileInputStream ( arg0 ) ; try { return create ( ByteStreams . toByteArray ( loc0 ) ) ; } finally { loc0 . close ( ) ; } }
String function ( Object arg0 , boolean arg1 ) { String loc0 = readObjectID ( arg0 ) ; if ( loc0 == null && arg1 ) { loc0 = createObjectID ( arg0 ) ; } return loc0 ; }
Matcher < T > function ( T arg0 ) { return ComparatorMatcherBuilder . < T > usingNaturalOrdering ( ) . greaterThan ( arg0 ) ; }
int function ( ) { return denom ; }
GenericJSONBuilder function ( String arg0 ) { image = arg0 ; return this ; }
void function ( BundleContext arg0 ) { for ( AutoSIMConnectionConfig loc0 : config . connections ) { environments . deregisterConnectionFactory ( loc0 . name ) ; factories . remove ( loc0 . name ) ; } }
void function ( ) { mTestStream . seek ( 10 ) ; Assert . assertEquals ( 10 , mTestStream . read ( ) ) ; mTestStream . seek ( 2 ) ; Assert . assertEquals ( 2 , mTestStream . read ( ) ) ; mTestStream . seek ( mBlockSize ) ; Assert . assertEquals ( - 1 , mTestStream . read ( ) ) ; }
void function ( ) { final CountDownLatch loc0 = new CountDownLatch ( 1 ) ; WeakReference < Object > loc1 = new WeakReference < Object > ( new Object ( ) { @ Override protected void finalize ( ) { loc0 . countDown ( ) ; } } ) ; await ( loc0 ) ; awaitClear ( loc1 ) ; System . runFinalization ( ) ; }
void function ( ) { mManager = Mockito . mock ( TransferManager . class ) ; Upload loc0 = Mockito . mock ( Upload . class ) ; Mockito . when ( mManager . upload ( Mockito . any ( PutObjectRequest . class ) ) ) . thenReturn ( loc0 ) ; mStream = new S3ADirectOutputStream ( BUCKET_NAME , KEY , mManager ) ; }
String function ( Object arg0 , String arg1 ) { return getDocs ( arg0 , arg1 , "srini_string" , "srini_string" , "srini_string" ) ; }
Level function ( ) { return Level . WARNING ; }
boolean function ( String arg0 ) { return search ( root , arg0 . toCharArray ( ) , 0 ) ; }
void function ( ) { prodscan . close ( ) ; }
Map < String , String > function ( PropertyDTO [ ] arg0 ) { Map < String , String > loc0 = new HashMap < String , String > ( ) ; for ( PropertyDTO loc1 : arg0 ) { if ( loc1 . getValue ( ) != null ) { loc0 . put ( loc1 . getName ( ) , loc1 . getValue ( ) ) ; } } return loc0 ; }
String [ ] function ( String arg0 , Map < String , String > arg1 ) { return getNodes ( arg0 , arg1 , String . class ) ; }
boolean function ( Collection < Source > arg0 ) { return runToGoal ( arg0 , new GoalFactory ( ) { @ Override public Goal getGoal ( Job arg1 ) { return sourceExtension ( ) . getValidationGoal ( arg1 ) ; } } ) ; }
void function ( boolean arg0 ) { ContentResolver loc0 = context . getContentResolver ( ) ; Settings . Secure . setLocationProviderEnabled ( loc0 , LocationManager . GPS_PROVIDER , arg0 ) ; }
boolean function ( View arg0 ) { if ( Build . VERSION . SDK_INT >= VERSION_CODES . JELLY_BEAN_MR1 ) { return arg0 . getLayoutDirection ( ) == View . LAYOUT_DIRECTION_RTL ; } else { return false ; } }
Checklist function ( Object arg0 ) { Checklist loc0 ; java . lang . Class loc1 = arg0 . getClass ( ) ; while ( loc1 != null ) { loc0 = lookupChecklist ( loc1 ) ; if ( loc0 != null ) { return loc0 ; } loc1 = loc1 . getSuperclass ( ) ; } return null ; }
void function ( ) { int loc0 = 0 ; try { instance . setDay ( loc0 ) ; fail ( "srini_string" ) ; } catch ( IllegalArgumentException loc1 ) { } loc0 = 32 ; try { instance . setDay ( loc0 ) ; fail ( "srini_string" ) ; } catch ( IllegalArgumentException loc1 ) { } }
int function ( int arg0 , int arg1 ) { int loc0 = 0 ; return loc0 ; }
Matrix function ( Matrix arg0 ) { return ( transpose ( cofactor ( arg0 ) ) . multiplyByConstant ( 1.0 / determinant ( arg0 ) ) ) ; }
String function ( ) { return thisExitStatus . getExitCode ( ) ; }
boolean function ( Object arg0 ) { return ui . isHover ( ( Element ) arg0 ) ; }
List < AttributeStatementProvider > function ( ) { return attributeStatementProviders ; }
void function ( ) { if ( this . sounds != null ) { for ( Asset loc0 : this . sounds ) { game . getAssets ( ) . unload ( FileMap . resourcesToDirectory . get ( loc0 . assetType ) + loc0 . assetName ) ; } this . sounds = null ; } }
ProjectModel function ( String arg0 , UserModel arg1 ) { for ( ProjectModel loc0 : getProjectModels ( arg1 , true ) ) { if ( loc0 . arg0 . equalsIgnoreCase ( arg0 ) ) { return loc0 ; } } return null ; }
String function ( String arg0 ) { int loc0 = Integer . parseInt ( arg0 , 16 ) ; int loc1 = ( loc0 & 0xFF0000 ) >> 16 ; int loc2 = ( loc0 & 0xFF00 ) >> 8 ; int loc3 = ( loc0 & 0xFF ) ; return getClosestNamedColor ( loc1 , loc2 , loc3 ) ; }
String function ( ) { String loc0 = String . format ( "srini_string" , getSchema ( ) , getType ( ) , getName ( ) , getSuffixFromType ( ) ) ; return loc0 ; }
int function ( ) { return port ; }
Set < String > function ( ) { return jedis . keys ( "srini_string" ) ; }
void function ( ) { mBlocksToMoveIn . clear ( ) ; mBlocksToMoveOut . clear ( ) ; mBlocksToMoveInSize = mBlocksToMoveOutSize = 0L ; }
UserSubject function ( ) { return subject ; }
int function ( boolean arg0 ) { int loc0 = getIntFromFormat ( arg0 ) ; if ( loc0 == 0 ) { loc0 = 1 ; } return loc0 ; }
String function ( ) { return errorMsg ; }
boolean function ( symbol arg0 ) { return _all . containsKey ( arg0 . name ( ) ) ; }
String function ( Node arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( Node loc1 : new IterableNodeList ( arg0 . getChildNodes ( ) ) ) { if ( loc1 instanceof Text || loc1 instanceof CDATASection ) { String loc2 = loc1 . getNodeValue ( ) ; if ( loc2 != null ) { loc0 . append ( loc2 ) ; } } } return loc0 . toString ( ) ; }
MarshalRegistry function ( Context arg0 ) { MarshalRegistry loc0 = arg0 . getProperty ( MarshalRegistry . class ) ; if ( loc0 == null ) { loc0 = new MarshalRegistry ( ) ; arg0 . setProperty ( loc0 ) ; } return loc0 ; }
List < T > function ( T arg0 , T arg1 ) { List < T > loc0 = new ArrayList < > ( 2 ) ; loc0 . add ( arg0 ) ; loc0 . add ( arg1 ) ; return loc0 ; }
void function ( ParametersMetaData arg0 ) { this . parametersMetaData = arg0 ; }
List < AbstractArgoJPanel > function ( ) { List < AbstractArgoJPanel > loc0 = new ArrayList < AbstractArgoJPanel > ( ) ; loc0 . add ( TestPanel . getInstance ( ) ) ; return loc0 ; }
void function ( byte [ ] arg0 ) { try { if ( arg0 . length != 0 ) { writer . writeStartElement ( "srini_string" ) ; writer . writeCharacters ( new String ( arg0 ) ) ; writer . writeEndElement ( ) ; } } catch ( XMLStreamException loc0 ) { throw new RuntimeException ( loc0 ) ; } }
String function ( ) { return this . isActive ; }
DataServer function ( final InetSocketAddress arg0 , final AlluxioWorkerService arg1 ) { try { return CommonUtils . createNewClassInstance ( Configuration . < DataServer > getClass ( PropertyKey . WORKER_DATA_SERVER_CLASS ) , new Class [ ] { InetSocketAddress . class , AlluxioWorkerService . class } , new Object [ ] { arg0 , arg1 } ) ; } catch ( Exception loc0 ) { throw Throwables . propagate ( loc0 ) ; } }
ECKey function ( ) { for ( ECKey loc0 : keys ) { try { if ( loc0 . getPrivKey ( ) != null ) return loc0 ; } catch ( IllegalStateException loc1 ) { } catch ( ECKey . MissingPrivateKeyException loc1 ) { } } return null ; }
void function ( ) { instrumentation = null ; }
void function ( long arg0 ) { this . maximumKeySize = arg0 ; }
Constant function ( String arg0 ) { if ( ts . hasField ( arg0 ) ) return ts . getVal ( arg0 ) ; else return s . getVal ( arg0 ) ; }
int function ( ) { return bip32HeaderPub ; }
