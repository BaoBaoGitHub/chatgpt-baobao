 @ Override public void Serialize ( ILittleEndianOutput out1 )  { out1 . WriteShort ( field_1_vcenter )  ;  } Note: Java is case-sensitive ,  so the method name "WriteShort" should be capitalized as "writeShort" in Java convention .  Also ,  make sure to import the necessary classes for ILittleEndianOutput and field_1_vcenter . 
public void addAll ( BlockList < T >  src )  { if  ( src . size == 0 )  { return ;  } int srcDirIdx = 0 ;  for  (  ;  srcDirIdx  <  src . tailDirIdx ;  srcDirIdx ++  )  { addAll ( src . directory [ srcDirIdx ]  ,  0 ,  BLOCK_SIZE )  ;  } if  ( src . tailBlkIdx != 0 )  { addAll ( src . tailBlock ,  0 ,  src . tailBlkIdx )  ;  } } protected void addAll ( Block < T >  [  ]  directory ,  int startIdx ,  int endIdx )  { for  ( int i = startIdx ;  i  <  endIdx ;  i ++  )  { Block < T >  block = directory [ i ]  ;  if  ( block != null )  { addAll ( block . buffer (  )  ,  0 ,  block . length (  )  )  ;  } } } protected abstract void addAll ( T [  ]  buffer ,  int offset ,  int length )  ; 
 @ Override public void write ( byte b )  { if  ( outerInstance . upto == outerInstance . blockSize )  { if  ( outerInstance . currentBlock != null )  { outerInstance . blocks . add ( outerInstance . currentBlock )  ;  outerInstance . blockEnd . add ( outerInstance . upto )  ;  } outerInstance . currentBlock = new byte [ outerInstance . blockSize ]  ;  outerInstance . upto = 0 ;  } outerInstance . currentBlock [ outerInstance . upto ++  ]  = b ;  }
public ObjectId GetObjectId (  )  { return objectId ;  }
public DeleteDomainEntryResponse deleteDomainEntry ( DeleteDomainEntryRequest request )  { InvokeOptions options = new InvokeOptions (  )  ;  options . setRequestMarshaller ( DeleteDomainEntryRequestMarshaller . getInstance (  )  )  ;  options . setResponseUnmarshaller ( DeleteDomainEntryResponseUnmarshaller . getInstance (  )  )  ;  return invoke ( request ,  options ,  DeleteDomainEntryResponse . class )  ;  } private  < T >  T invoke ( Object request ,  InvokeOptions options ,  Class < T >  clazz )  { // Implementation of the invoke method depends on the specific AWS SDK being used // You'll need to use the appropriate SDK-specific client object and method to make the API call // For example ,  if using the AWS SDK for Java: // AmazonWebServiceResult < T >  result = client . invoke ( request ,  options )  ;  // return result . getResult (  )  ;  }
public long ramBytesUsed (  )  { return fst == null ? 0 : fst . getSizeInBytes (  )  ;  }
public String getFullMessage (  )  { byte [  ]  raw = buffer ;  int msgB = RawParseUtils . tagMessage ( raw ,  0 )  ;  if  ( msgB  <  0 )  { return "" ;  } Encoding enc = RawParseUtils . parseEncoding ( raw )  ;  return RawParseUtils . decode ( enc ,  raw ,  msgB ,  raw . length )  ;  }
public POIFSFileSystem (  )  { HeaderBlock headerBlock = new HeaderBlock ( bigBlockSize )  ;  _property_table = new PropertyTable ( headerBlock )  ;  _documents = new ArrayList <  >  (  )  ;  _root = null ;  }
public void init ( int address )  { slice = pool . buffers [ address  >  >  ByteBlockPool . BYTE_BLOCK_SHIFT ]  ;  assert slice != null ;  upto = address & ByteBlockPool . BYTE_BLOCK_MASK ;  offset0 = address ;  assert upto  <  slice . length ;  }
public NGit . Api . SubmoduleAddCommand setPath ( String path )  { this . path = path ;  return this ;  }
public ListIngestionsResponse listIngestions ( ListIngestionsRequest request )  { InvokeOptions options = new InvokeOptions (  )  ;  options . setRequestMarshaller ( ListIngestionsRequestMarshaller . getInstance (  )  )  ;  options . setResponseUnmarshaller ( ListIngestionsResponseUnmarshaller . getInstance (  )  )  ;  return invoke ( request ,  options ,  ListIngestionsResponse . class )  ;  } private  < T >  T invoke ( Object request ,  InvokeOptions options ,  Class < T >  responseClass )  { // Implementation of the invoke method depends on the specific framework or library used for making API requests in Java // You can use your preferred library ,  such as Apache HttpClient ,  OkHttp ,  or Retrofit ,  to send HTTP requests and handle responses // Here's a simple example using HttpURLConnection: try { URL url = new URL ( "https://api . example . com/listIngestions" )  ;  // Replace with the actual API endpoint URL HttpURLConnection connection =  ( HttpURLConnection )  url . openConnection (  )  ;  connection . setRequestMethod ( "POST" )  ;  connection . setDoOutput ( true )  ;  // Set request body by marshalling the request object String requestBody = ListIngestionsRequestMarshaller . getInstance (  )  . marshall ( request )  ;  connection . getOutputStream (  )  . write ( requestBody . getBytes (  )  )  ;  // Read response body int responseCode = connection . getResponseCode (  )  ;  String responseBody = "" ;  if  ( responseCode == HttpURLConnection . HTTP_OK )  { BufferedReader reader = new BufferedReader ( new InputStreamReader ( connection . getInputStream (  )  )  )  ;  String line ;  while  (  ( line = reader . readLine (  )  )  != null )  { responseBody += line ;  } reader . close (  )  ;  } else { // Handle error response //  .  .  .  } // Unmarshal response body to response object return ListIngestionsResponseUnmarshaller . getInstance (  )  . unmarshall ( responseBody ,  responseClass )  ;  } catch  ( IOException e )  { // Handle exception //  .  .  .  } return null ;  }
public class QueryParserTokenManager { public QueryParserTokenManager ( ICharStream stream ,  int lexState )  { this ( stream )  ;  SwitchTo ( lexState )  ;  } }
public GetShardIteratorResponse getShardIterator ( GetShardIteratorRequest request )  { InvokeOptions options = new InvokeOptions (  )  ;  options . setRequestMarshaller ( GetShardIteratorRequestMarshaller . getInstance (  )  )  ;  options . setResponseUnmarshaller ( GetShardIteratorResponseUnmarshaller . getInstance (  )  )  ;  return invoke ( request ,  options ,  GetShardIteratorResponse . class )  ;  } private  < T >  T invoke ( Object request ,  InvokeOptions options ,  Class < T >  responseClass )  { // Implementation of the `invoke` method depends on the context and is not provided in the C# code .  // You need to implement it based on your specific use case and the SDK that you're using .  }
public ModifyStrategyRequest (  )  { super ( "aegis" ,  "2016-11-11" ,  "ModifyStrategy" ,  "vipaegis" ,  "openAPI" )  ;  setMethod ( MethodType . POST )  ;  }
public synchronized boolean ready (  )  throws IOException { if  (  @ in == null )  { throw new IOException ( "InputStreamReader is closed" )  ;  } try { return bytes . hasRemaining (  )  ||  @ in . available (  )   >  0 ;  } catch  ( IOException e )  { return false ;  } }
protected EscherOptRecord getOptRecord (  )  { return _optRecord ;  }
 @ Override public int read ( byte [  ]  buffer ,  int offset ,  int length )  { synchronized  ( this )  { if  ( buffer == null )  { throw new NullPointerException ( "buffer == null" )  ;  } java . util . Arrays . checkOffsetAndCount ( buffer . length ,  offset ,  length )  ;  if  ( length == 0 )  { return 0 ;  } int copylen = count - pos  <  length ? count - pos : length ;  for  ( int i = 0 ;  i  <  copylen ;  i ++  )  { buffer [ offset + i ]  =  ( byte )  buffer [ pos + i ]  ;  } pos += copylen ;  return copylen ;  } }
public OpenNLPSentenceBreakIterator ( NLPSentenceDetectorOp sentenceOp )  { this . sentenceOp = sentenceOp ;  }
public void print ( String str )  { write ( str != null ? str : StringHelper . getValueOf (  ( Object ) null )  )  ;  }
public class NotImplementedFunctionException extends Exception { private String functionName ;  public NotImplementedFunctionException ( String functionName ,  NotImplementedFunctionException cause )  { super ( functionName ,  cause )  ;  this . functionName = functionName ;  } }
 @ Override public V next (  )  { return this . nextEntry (  )  . value ;  }
 @ Override public synchronized void readBytes ( byte [  ]  b ,  int offset ,  int len ,  boolean useBuffer )  throws IOException { int available = bufferLength - bufferPosition ;  if  ( len  < = available )  { if  ( len  >  0 )  { System . arraycopy ( m_buffer ,  bufferPosition ,  b ,  offset ,  len )  ;  } bufferPosition += len ;  } else { if  ( available  >  0 )  { System . arraycopy ( m_buffer ,  bufferPosition ,  b ,  offset ,  available )  ;  offset += available ;  len -= available ;  bufferPosition += available ;  } if  ( useBuffer && len  <  bufferSize )  { refill (  )  ;  if  ( bufferLength  <  len )  { System . arraycopy ( m_buffer ,  0 ,  b ,  offset ,  bufferLength )  ;  throw new EOFException ( "read past EOF: " + this )  ;  } else { System . arraycopy ( m_buffer ,  0 ,  b ,  offset ,  len )  ;  bufferPosition = len ;  } } else { long after = bufferStart + bufferPosition + len ;  if  ( after  >  length (  )  )  { throw new EOFException ( "read past EOF: " + this )  ;  } readInternal ( b ,  offset ,  len )  ;  bufferStart = after ;  bufferPosition = 0 ;  bufferLength = 0 ;  } } }
public TagQueueResponse tagQueue ( TagQueueRequest request )  { InvokeOptions options = new InvokeOptions (  )  ;  options . setRequestMarshaller ( TagQueueRequestMarshaller . getInstance (  )  )  ;  options . setResponseUnmarshaller ( TagQueueResponseUnmarshaller . getInstance (  )  )  ;  return invoke ( request ,  options ,  TagQueueResponse . class )  ;  } private  < T >  T invoke ( Object request ,  InvokeOptions options ,  Class < T >  responseType )  { // Your implementation for invoking the request }
 @ Override public void Remove (  )  throws NotSupportedException { throw new NotSupportedException (  )  ;  }
public ModifyCacheSubnetGroupResponse ModifyCacheSubnetGroup ( ModifyCacheSubnetGroupRequest request )  { InvokeOptions options = new InvokeOptions (  )  ;  options . setRequestMarshaller ( ModifyCacheSubnetGroupRequestMarshaller . getInstance (  )  )  ;  options . setResponseUnmarshaller ( ModifyCacheSubnetGroupResponseUnmarshaller . getInstance (  )  )  ;  return invoke ( request ,  options ,  ModifyCacheSubnetGroupResponse . class )  ;  } private  < T >  T invoke ( Request request ,  InvokeOptions options ,  Class < T >  clazz )  { // implementation of the invoke method goes here }
 @ Override public void setParams ( String params )  { super . setParams ( params )  ;  culture = "" ;  String ignore ;  StringTokenizer st = new StringTokenizer ( params ,  " , " )  ;  if  ( st . hasMoreTokens (  )  )  { culture = st . nextToken (  )  ;  } if  ( st . hasMoreTokens (  )  )  { culture += "-" + st . nextToken (  )  ;  } if  ( st . hasMoreTokens (  )  )  { ignore = st . nextToken (  )  ;  } }
public DeleteDocumentationVersionResponse deleteDocumentationVersion ( DeleteDocumentationVersionRequest request )  { InvokeOptions options = new InvokeOptions (  )  ;  options . setRequestMarshaller ( DeleteDocumentationVersionRequestMarshaller . getInstance (  )  )  ;  options . setResponseUnmarshaller ( DeleteDocumentationVersionResponseUnmarshaller . getInstance (  )  )  ;  return invoke ( request ,  options ,  DeleteDocumentationVersionResponse . class )  ;  } private  < T >  T invoke ( Object request ,  InvokeOptions options ,  Class < T >  responseType )  { // Code to perform the actual invocation goes here .  // This method is not provided in the original C# code .  // It should be implemented based on the specific requirements of the project .  }
 @ Override public boolean equals ( Object obj )  { if  ( ! ( obj instanceof FacetLabel )  )  { return false ;  } FacetLabel other =  ( FacetLabel )  obj ;  if  ( length != other . length )  { return false ;  } for  ( int i = length - 1 ;  i  > = 0 ;  i --  )  { if  ( !components [ i ]  . equals ( other . components [ i ]  ,  StringComparison . Ordinal )  )  { return false ;  } } return true ;  } Note: You may need to adjust the variable names according to your Java class . 
public GetInstanceAccessDetailsResponse getInstanceAccessDetails ( GetInstanceAccessDetailsRequest request )  { InvokeOptions options = new InvokeOptions (  )  ;  options . setRequestMarshaller ( GetInstanceAccessDetailsRequestMarshaller . getInstance (  )  )  ;  options . setResponseUnmarshaller ( GetInstanceAccessDetailsResponseUnmarshaller . getInstance (  )  )  ;  return invoke ( request ,  options ,  GetInstanceAccessDetailsResponse . class )  ;  } private  < T >  T invoke ( GetInstanceAccessDetailsRequest request ,  InvokeOptions options ,  Class < T >  responseClass )  { // implementation of the invoke method }
public HSSFPolygon createPolygon ( HSSFChildAnchor anchor )  { HSSFPolygon shape = new HSSFPolygon ( this ,  anchor )  ;  shape . setParent ( this )  ;  shape . setAnchor ( anchor )  ;  shapes . add ( shape )  ;  onCreate ( shape )  ;  return shape ;  }
public String GetSheetName ( int sheetIndex )  { return GetBoundSheetRec ( sheetIndex )  . Sheetname ;  }
public GetDashboardResponse getDashboard ( GetDashboardRequest request )  { InvokeOptions options = new InvokeOptions (  )  ;  options . setRequestMarshaller ( GetDashboardRequestMarshaller . getInstance (  )  )  ;  options . setResponseUnmarshaller ( GetDashboardResponseUnmarshaller . getInstance (  )  )  ;  return invoke ( request ,  options ,  GetDashboardResponse . class )  ;  } private  < T >  T invoke ( Object request ,  InvokeOptions options ,  Class < T >  responseType )  { // Implementation of the `invoke` method is not provided in the original code snippet ,  // so you will need to provide your own implementation of this method .  // The method should make a remote procedure call using the provided `request` and `options` ,  // and return the response of type `responseType` .  }
public AssociateSigninDelegateGroupsWithAccountResponse associateSigninDelegateGroupsWithAccount ( AssociateSigninDelegateGroupsWithAccountRequest request )  { InvokeOptions options = new InvokeOptions (  )  ;  options . setRequestMarshaller ( AssociateSigninDelegateGroupsWithAccountRequestMarshaller . getInstance (  )  )  ;  options . setResponseUnmarshaller ( AssociateSigninDelegateGroupsWithAccountResponseUnmarshaller . getInstance (  )  )  ;  return invoke ( request ,  options ,  AssociateSigninDelegateGroupsWithAccountResponse . class )  ;  } private  < T >  T invoke ( AssociateSigninDelegateGroupsWithAccountRequest request ,  InvokeOptions options ,  Class < T >  responseType )  { // implementation of the "invoke" method ,  which is not shown in the original code snippet }
public void addMultipleBlanks ( MulBlankRecord mbr )  { for  ( int j = 0 ;  j  <  mbr . getNumColumns (  )  ;  j ++  )  { BlankRecord br = new BlankRecord (  )  ;  br . setColumn ( j + mbr . getFirstColumn (  )  )  ;  br . setRow ( mbr . getRow (  )  )  ;  br . setXFIndex ( mbr . getXFAt ( j )  )  ;  insertCell ( br )  ;  } }
public static String quote ( String string )  { StringBuilder sb = new StringBuilder (  )  ;  sb . append ( "\\Q" )  ;  int apos = 0 ;  int k ;  while  (  ( k = string . indexOf ( "\\E" ,  apos )  )   > = 0 )  { sb . append ( string . substring ( apos ,  k + 2 )  )  . append ( "\\\\E\\Q" )  ;  apos = k + 2 ;  } return sb . append ( string . substring ( apos )  )  . append ( "\\E" )  . toString (  )  ;  }
 @ Override public java . nio . ByteBuffer putInt ( int value )  throws java . nio . ReadOnlyBufferException { throw new java . nio . ReadOnlyBufferException (  )  ;  }
public ArrayPtg ( Object [  ]  [  ]  values2d )  { int nColumns = values2d [ 0 ]  . length ;  int nRows = values2d . length ;  _nColumns =  ( short )  nColumns ;  _nRows =  ( short )  nRows ;  Object [  ]  vv = new Object [ _nColumns * _nRows ]  ;  for  ( int r = 0 ;  r  <  nRows ;  r ++  )  { Object [  ]  rowData = values2d [ r ]  ;  for  ( int c = 0 ;  c  <  nColumns ;  c ++  )  { vv [ getValueIndex ( c ,  r )  ]  = rowData [ c ]  ;  } } _arrayValues = vv ;  _reserved0Int = 0 ;  _reserved1Short = 0 ;  _reserved2Byte = 0 ;  } private int getValueIndex ( int col ,  int row )  { return row * _nColumns + col ;  } private short _nColumns ;  private short _nRows ;  private Object [  ]  _arrayValues ;  private int _reserved0Int ;  private short _reserved1Short ;  private byte _reserved2Byte ; 
public GetIceServerConfigResponse getIceServerConfig ( GetIceServerConfigRequest request )  { InvokeOptions options = new InvokeOptions (  )  ;  options . setRequestMarshaller ( GetIceServerConfigRequestMarshaller . getInstance (  )  )  ;  options . setResponseUnmarshaller ( GetIceServerConfigResponseUnmarshaller . getInstance (  )  )  ;  return invoke ( request ,  options ,  GetIceServerConfigResponse . class )  ;  } private  < T >  T invoke ( Object request ,  InvokeOptions options ,  Class < T >  responseType )  { // Implementation of the 'invoke' method goes here }
 @ Override public String toString (  )  { StringBuilder sb = new StringBuilder ( 64 )  ;  sb . append ( getClass (  )  . getSimpleName (  )  )  . append ( "  [ " )  ;  sb . append ( getValueAsString (  )  )  ;  sb . append ( " ] " )  ;  return sb . toString (  )  ;  }
 @ Override public String toString (  )  { return "ToChildBlockJoinQuery  ( " + parentQuery + " ) " ;  }
public void incRef (  )  { refCount . incrementAndGet (  )  ;  }
public UpdateConfigurationSetSendingEnabledResponse updateConfigurationSetSendingEnabled ( UpdateConfigurationSetSendingEnabledRequest request )  { InvokeOptions options = new InvokeOptions (  )  ;  options . setRequestMarshaller ( UpdateConfigurationSetSendingEnabledRequestMarshaller . getInstance (  )  )  ;  options . setResponseUnmarshaller ( UpdateConfigurationSetSendingEnabledResponseUnmarshaller . getInstance (  )  )  ;  return invoke ( request ,  options )  ;  } private  < T >  T invoke ( UpdateConfigurationSetSendingEnabledRequest request ,  InvokeOptions options )  { // Implementation of the invoke method ,  which handles the actual invocation // of the request and unmarshalling of the response .  // You can implement this method based on your use case and the AWS SDK you are using .  // It may involve making an HTTP request to the AWS service and parsing the response .  // The return type T should be replaced with the actual response type of the AWS SDK being used .  // For example ,  if you are using the AWS SDK for Java v2 ,  the return type should be SdkResponse .  // You can refer to the documentation of the AWS SDK you are using for more details .  }
public int getNextXBATChainOffset (  )  { return getXBATEntriesPerBlock (  )  * LittleEndianConsts . INT_SIZE ;  }
public void multiplyByPowerOfTen ( int pow10 )  { TenPower tp = TenPower . getInstance ( Math . abs ( pow10 )  )  ;  if  ( pow10  <  0 )  { mulShift ( tp . _divisor ,  tp . _divisorShift )  ;  } else { mulShift ( tp . _multiplicand ,  tp . _multiplierShift )  ;  } }
 @ Override public String toString (  )  { StringBuilder builder = new StringBuilder (  )  ;  int length = this . length (  )  ;  builder . append ( File . separator )  ;  for  ( int i = 0 ;  i  <  length ;  i ++  )  { builder . append ( this . getComponent ( i )  )  ;  if  ( i  <   ( length - 1 )  )  { builder . append ( File . separator )  ;  } } return builder . toString (  )  ;  }
public void withFetcher ( ECSMetadataServiceCredentialsFetcher fetcher )  { this . fetcher = fetcher ;  this . fetcher . setRoleName ( roleName )  ;  }
public void setProgressMonitor ( ProgressMonitor pm )  { progressMonitor = pm ;  }
Here's the equivalent Java code for the given C# code:  @ Override public void Reset (  )  { if  ( !First )  { ptr = 0 ;  if  ( !Eof )  { ParseEntry (  )  ;  } } } Note: Please make sure to add the necessary imports and declarations before using this code snippet . 
public E previous (  )  { if  ( iterator . previousIndex (  )   > = start )  { return iterator . previous (  )  ;  } throw new java . util . NoSuchElementException (  )  ;  }
public String GetNewPrefix (  )  { return this . newPrefix ;  }
public int indexOfValue ( int value )  { for  ( int i = 0 ;  i  <  mSize ;  i ++  )  { if  ( mValues [ i ]  == value )  { return i ;  } } return -1 ;  }
public List < CharsRef >  UniqueStems ( char [  ]  word ,  int length )  { List < CharsRef >  stems = Stem ( word ,  length )  ;  if  ( stems . size (  )   <  2 )  { return stems ;  } CharArraySet terms = new CharArraySet ( LuceneVersion . LUCENE_CURRENT ,  8 ,  dictionary . ignoreCase )  ;  List < CharsRef >  deduped = new ArrayList < CharsRef >  (  )  ;  for  ( CharsRef s : stems )  { if  ( !terms . contains ( s )  )  { deduped . add ( s )  ;  terms . add ( s )  ;  } } return deduped ;  }
public GetGatewayResponsesResponse getGatewayResponses ( GetGatewayResponsesRequest request )  { InvokeOptions options = new InvokeOptions (  )  ;  options . setRequestMarshaller ( GetGatewayResponsesRequestMarshaller . getInstance (  )  )  ;  options . setResponseUnmarshaller ( GetGatewayResponsesResponseUnmarshaller . getInstance (  )  )  ;  return invoke ( request ,  options ,  GetGatewayResponsesResponse . class )  ;  } private  < T >  T invoke ( GetGatewayResponsesRequest request ,  InvokeOptions options ,  Class < T >  responseType )  { // Implement the logic for invoking the request and handling the response in Java // and return the response of type T }
public void setPosition ( long position )  { currentBlockIndex =  ( int )   ( position  >  >  outerInstance . blockBits )  ;  currentBlock = outerInstance . blocks [ currentBlockIndex ]  ;  currentBlockUpto =  ( int )   ( position & outerInstance . blockMask )  ;  }
 @ Override public long skip ( long n )  { int s =  ( int )  Math . min ( available (  )  ,  Math . max ( 0 ,  n )  )  ;  ptr += s ;  return s ;  }
public class BootstrapActionDetail { private BootstrapActionConfig _bootstrapActionConfig ;  public BootstrapActionDetail ( BootstrapActionConfig bootstrapActionConfig )  { _bootstrapActionConfig = bootstrapActionConfig ;  } }
 @ Override public void serialize ( ILittleEndianOutput out1 )  { out1 . writeShort ( field_1_row )  ;  out1 . writeShort ( field_2_col )  ;  out1 . writeShort ( field_3_flags )  ;  out1 . writeShort ( field_4_shapeid )  ;  out1 . writeShort ( field_6_author . length )  ;  out1 . writeByte ( field_5_hasMultibyte ? 0x01 : 0x00 )  ;  if  ( field_5_hasMultibyte )  { StringUtil . putUnicodeLE ( field_6_author ,  out1 )  ;  } else { StringUtil . putCompressedUnicode ( field_6_author ,  out1 )  ;  } if  ( field_7_padding != null )  { out1 . writeByte ( Integer . parseInt ( field_7_padding ,  10 )  )  ;  } }
public int lastIndexOf ( String str )  { return lastIndexOf ( str ,  count )  ;  }
 @ Override public boolean add ( E object )  { return addLastImpl ( object )  ;  }
public void UnsetSection ( String section ,  String subsection )  { ConfigSnapshot src ;  ConfigSnapshot res ;  do { src = state . get (  )  ;  res = UnsetSection ( src ,  section ,  subsection )  ;  } while  ( !state . compareAndSet ( src ,  res )  )  ;  }
public String getTagName (  )  { return tagName ;  }
public void addSubRecord ( int index ,  SubRecord element )  { subrecords . insert ( index ,  element )  ;  }
public synchronized boolean remove ( Object object )  { synchronized  ( mutex )  { return c . remove ( object )  ;  } }
 @ Override public TokenStream create ( TokenStream input )  { return new DoubleMetaphoneFilter ( input ,  maxCodeLength ,  inject )  ;  } Note: In Java ,  method names are in camelCase and it is a convention to use the first letter in lowercase for method names ,  whereas in C# ,  PascalCase is used for method names .  Additionally ,  in Java ,  the override annotation goes before the method signature . 
public long Length (  )  { return InCoreLength (  )  ;  } protected long InCoreLength (  )  { // Code to return the length of the object }
public void setValue ( boolean newValue )  { value = newValue ;  }
public Pair ( ContentSource oldSource ,  ContentSource newSource )  { this . oldSource = oldSource ;  this . newSource = newSource ;  }
public int Get ( int i )  { if  ( count  < = i )  { throw new IndexOutOfRangeException ( i )  ;  } return entries [ i ]  ;  }
public class CreateRepoRequest extends BaseRequest { public CreateRepoRequest (  )  { super ( "cr" ,  "2016-06-07" ,  "CreateRepo" ,  "cr" ,  "openAPI" )  ;  setUriPattern ( "/repos" )  ;  setMethod ( MethodType . PUT )  ;  } }
public boolean isDeltaBaseAsOffset (  )  { return deltaBaseAsOffset ;  }
public void remove (  )  { if  ( expectedModCount == list . modCount )  { if  ( lastLink != null )  { java . util . LinkedList . Link < ET >  next_1 = lastLink . next ;  java . util . LinkedList . Link < ET >  previous_1 = lastLink . previous ;  next_1 . previous = previous_1 ;  previous_1 . next = next_1 ;  if  ( lastLink == link )  { pos --  ;  } link = previous_1 ;  lastLink = null ;  expectedModCount ++  ;  list . _size --  ;  list . modCount ++  ;  } else { throw new java . lang . UnsupportedOperationException (  )  ;  } } else { throw new java . util . ConcurrentModificationException (  )  ;  } }
public MergeShardsResponse mergeShards ( MergeShardsRequest request )  { InvokeOptions options = new InvokeOptions (  )  ;  options . setRequestMarshaller ( MergeShardsRequestMarshaller . getInstance (  )  )  ;  options . setResponseUnmarshaller ( MergeShardsResponseUnmarshaller . getInstance (  )  )  ;  return invoke ( request ,  options ,  MergeShardsResponse . class )  ;  } private  < T >  T invoke ( MergeShardsRequest request ,  InvokeOptions options ,  Class < T >  responseType )  { // implementation details for invoking the request //  .  .  .  }
public AllocateHostedConnectionResponse allocateHostedConnection ( AllocateHostedConnectionRequest request )  { InvokeOptions options = new InvokeOptions (  )  ;  options . setRequestMarshaller ( AllocateHostedConnectionRequestMarshaller . getInstance (  )  )  ;  options . setResponseUnmarshaller ( AllocateHostedConnectionResponseUnmarshaller . getInstance (  )  )  ;  return invoke ( request ,  options ,  AllocateHostedConnectionResponse . class )  ;  } private  < T >  T invoke ( Object request ,  InvokeOptions options ,  Class < T >  responseType )  { // implementation details of the 'invoke' method }
public int getBeginIndex (  )  { return start ;  }
public static WeightedTerm [  ]  GetTerms ( Query query )  { return GetTerms ( query ,  false )  ;  } private static WeightedTerm [  ]  GetTerms ( Query query ,  boolean value )  { // your implementation here }
 @ Override public java . nio . ByteBuffer compact (  )  { throw new java . nio . ReadOnlyBufferException (  )  ;  }
public void Decode ( byte [  ]  blocks ,  int blocksOffset ,  int [  ]  values ,  int valuesOffset ,  int iterations )  { for  ( int i = 0 ;  i  <  iterations ;   ++ i )  { int byte0 = blocks [ blocksOffset ++  ]  & 0xFF ;  values [ valuesOffset ++  ]  =  ( byte0  >  >  >  2 )  & 0x3F ;  int byte1 = blocks [ blocksOffset ++  ]  & 0xFF ;  values [ valuesOffset ++  ]  =  (  ( byte0 & 0x3 )   <  <  4 )  |  (  ( byte1  >  >  >  4 )  & 0xF )  ;  int byte2 = blocks [ blocksOffset ++  ]  & 0xFF ;  values [ valuesOffset ++  ]  =  (  ( byte1 & 0xF )   <  <  2 )  |  (  ( byte2  >  >  >  6 )  & 0x3 )  ;  values [ valuesOffset ++  ]  = byte2 & 0x3F ;  } }
public String getHumanishName (  )  { if  ( "" . equals ( getPath (  )  )  || getPath (  )  == null )  { throw new IllegalArgumentException (  )  ;  } String s = getPath (  )  ;  String [  ]  elements ;  if  ( "file" . equals ( scheme )  || LOCAL_FILE . matcher ( s )  . matches (  )  )  { elements = s . split ( " [ \\" + java . io . File . separator + "/ ] " )  ;  } else { elements = s . split ( "/" )  ;  } if  ( elements . length == 0 )  { throw new IllegalArgumentException (  )  ;  } String result = elements [ elements . length - 1 ]  ;  if  ( Constants . DOT_GIT . equals ( result )  )  { result = elements [ elements . length - 2 ]  ;  } else { if  ( result . endsWith ( Constants . DOT_GIT_EXT )  )  { result = result . substring ( 0 ,  result . length (  )  - Constants . DOT_GIT_EXT . length (  )  )  ;  } } return result ;  }
public DescribeNotebookInstanceLifecycleConfigResponse describeNotebookInstanceLifecycleConfig ( DescribeNotebookInstanceLifecycleConfigRequest request )  { InvokeOptions options = new InvokeOptions (  )  ;  options . setRequestMarshaller ( DescribeNotebookInstanceLifecycleConfigRequestMarshaller . getInstance (  )  )  ;  options . setResponseUnmarshaller ( DescribeNotebookInstanceLifecycleConfigResponseUnmarshaller . getInstance (  )  )  ;  return invoke ( request ,  options ,  DescribeNotebookInstanceLifecycleConfigResponse . class )  ;  }  @ SuppressWarnings ( "unchecked" )  private  < T >  T invoke ( Object request ,  InvokeOptions options ,  Class < T >  responseClass )  { try { AWSClient awsClient = AWSClientBuilder . standard (  )  . build (  )  ;  return  ( T )  awsClient . invoke ( request ,  options ,  responseClass )  ;  } catch  ( AwsServiceException | SdkClientException e )  { throw new RuntimeException ( e )  ;  } }
public String getAccessKeySecret (  )  { return AccessSecret ;  }
public CreateVpnConnectionResponse createVpnConnection ( CreateVpnConnectionRequest request )  { InvokeOptions options = new InvokeOptions (  )  ;  options . setRequestMarshaller ( CreateVpnConnectionRequestMarshaller . getInstance (  )  )  ;  options . setResponseUnmarshaller ( CreateVpnConnectionResponseUnmarshaller . getInstance (  )  )  ;  return invoke ( request ,  options ,  CreateVpnConnectionResponse . class )  ;  } private  < T >  T invoke ( Object request ,  InvokeOptions options ,  Class < T >  responseClass )  { // Implementation of the invoke method //  .  .  .  }
public DescribeVoicesResponse describeVoices ( DescribeVoicesRequest request )  { InvokeOptions options = new InvokeOptions (  )  ;  options . setRequestMarshaller ( DescribeVoicesRequestMarshaller . getInstance (  )  )  ;  options . setResponseUnmarshaller ( DescribeVoicesResponseUnmarshaller . getInstance (  )  )  ;  return invoke ( request ,  options ,  DescribeVoicesResponse . class )  ;  } private  < T >  T invoke ( DescribeVoicesRequest request ,  InvokeOptions options ,  Class < T >  responseClass )  { // Implementation of the invoke method //  .  .  .  }
public ListMonitoringExecutionsResponse listMonitoringExecutions ( ListMonitoringExecutionsRequest request )  { InvokeOptions options = new InvokeOptions (  )  ;  options . setRequestMarshaller ( ListMonitoringExecutionsRequestMarshaller . getInstance (  )  )  ;  options . setResponseUnmarshaller ( ListMonitoringExecutionsResponseUnmarshaller . getInstance (  )  )  ;  return invoke ( request ,  options ,  ListMonitoringExecutionsResponse . class )  ;  } private  < T >  T invoke ( Object request ,  InvokeOptions options ,  Class < T >  clazz )  { // implementation details for invoking the request with the provided options // and unmarshalling the response to the specified class }
public class DescribeJobRequest { private String vaultName ;  private String jobId ;  public DescribeJobRequest ( String vaultName ,  String jobId )  { this . vaultName = vaultName ;  this . jobId = jobId ;  } }
public EscherRecord getEscherRecord ( int index )  { return escherRecords [ index ]  ;  }
public GetApisResponse getApis ( GetApisRequest request )  { InvokeOptions options = new InvokeOptions (  )  ;  options . setRequestMarshaller ( GetApisRequestMarshaller . getInstance (  )  )  ;  options . setResponseUnmarshaller ( GetApisResponseUnmarshaller . getInstance (  )  )  ;  return invoke ( request ,  options ,  GetApisResponse . class )  ;  } private  < T >  T invoke ( Object request ,  InvokeOptions options ,  Class < T >  responseType )  { // implementation of the invoke method ,  which is not provided in the C# code // and depends on the AWS SDK used in the project // the implementation will need to use the options and request objects to make // an AWS service call and return the response in the specified responseType }
public DeleteSmsChannelResponse deleteSmsChannel ( DeleteSmsChannelRequest request )  { InvokeOptions options = new InvokeOptions (  )  ;  options . setRequestMarshaller ( DeleteSmsChannelRequestMarshaller . getInstance (  )  )  ;  options . setResponseUnmarshaller ( DeleteSmsChannelResponseUnmarshaller . getInstance (  )  )  ;  return invoke ( request ,  options ,  DeleteSmsChannelResponse . class )  ;  }
public TrackingRefUpdate GetTrackingRefUpdate (  )  { return trackingRefUpdate ;  }
public void print ( boolean b )  { print ( Boolean . toString ( b )  )  ;  } protected void print ( String str )  { // implementation of print method }
public IQueryNode GetChild (  )  { return GetChildren (  )  [ 0 ]  ;  } protected IQueryNode [  ]  GetChildren (  )  { // return an array of IQueryNode objects }
public NotIgnoredFilter ( int workdirTreeIndex )  { this . index = workdirTreeIndex ;  }
public AreaRecord ( RecordInputStream in1 )  { field_1_formatFlags = in1 . readShort (  )  ;  }
public GetThumbnailRequest (  )  { super ( "CloudPhoto" ,  "2017-07-11" ,  "GetThumbnail" ,  "cloudphoto" ,  "openAPI" )  ;  setProtocol ( ProtocolType . HTTPS )  ;  }
public DescribeTransitGatewayVpcAttachmentsResponse describeTransitGatewayVpcAttachments ( DescribeTransitGatewayVpcAttachmentsRequest request )  { InvokeOptions options = new InvokeOptions (  )  ;  options . setRequestMarshaller ( DescribeTransitGatewayVpcAttachmentsRequestMarshaller . getInstance (  )  )  ;  options . setResponseUnmarshaller ( DescribeTransitGatewayVpcAttachmentsResponseUnmarshaller . getInstance (  )  )  ;  return invoke ( request ,  options ,  DescribeTransitGatewayVpcAttachmentsResponse . class )  ;  } private  < T >  T invoke ( Request < ? >  request ,  InvokeOptions options ,  Class < T >  responseClass )  { // Your implementation here }
public PutVoiceConnectorStreamingConfigurationResponse PutVoiceConnectorStreamingConfiguration ( PutVoiceConnectorStreamingConfigurationRequest request )  { InvokeOptions options = new InvokeOptions (  )  ;  options . setRequestMarshaller ( PutVoiceConnectorStreamingConfigurationRequestMarshaller . getInstance (  )  )  ;  options . setResponseUnmarshaller ( PutVoiceConnectorStreamingConfigurationResponseUnmarshaller . getInstance (  )  )  ;  return invoke ( request ,  options ,  PutVoiceConnectorStreamingConfigurationResponse . class )  ;  }
public OrdRange getOrdRange ( String dim )  { OrdRange result ;  prefixToOrdRange . TryGetValue ( dim ,  result )  ;  return result ;  }
 @ Override public String toString (  )  { String symbol = "" ;  if  ( startIndex  > = 0 && startIndex  <   (  ( ICharStream ) InputStream )  . size (  )  )  { symbol =  (  ( ICharStream ) InputStream )  . getText ( Interval . of ( startIndex ,  startIndex )  )  ;  symbol = Utils . escapeWhitespace ( symbol ,  false )  ;  } return String . format ( Locale . getDefault (  )  ,  "%s ( '%s' ) " ,  Antlr4 . Runtime . LexerNoViableAltException . class . getName (  )  ,  symbol )  ;  }
public E peek (  )  { return peekFirstImpl (  )  ;  } protected E peekFirstImpl (  )  { // Implementation of peekFirstImpl (  )  method }
public CreateWorkspacesResponse createWorkspaces ( CreateWorkspacesRequest request )  { InvokeOptions options = new InvokeOptions (  )  ;  options . setRequestMarshaller ( CreateWorkspacesRequestMarshaller . getInstance (  )  )  ;  options . setResponseUnmarshaller ( CreateWorkspacesResponseUnmarshaller . getInstance (  )  )  ;  return invoke ( request ,  options ,  CreateWorkspacesResponse . class )  ;  } private  < T >  T invoke ( Object request ,  InvokeOptions options ,  Class < T >  clazz )  { // implementation of invoke method }
 @ Override public Object clone (  )  { NumberFormatIndexRecord rec = new NumberFormatIndexRecord (  )  ;  rec . field_1_formatIndex = this . field_1_formatIndex ;  return rec ;  }
