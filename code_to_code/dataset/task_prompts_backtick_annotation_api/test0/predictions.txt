@Override public void serialize(ILittleEndianOutput out1) { out1.writeShort(field_1_vcenter); }
public void addAll(BlockList<T> src) { if (src.size == 0) { return; } int srcDirIdx = 0; for (; srcDirIdx < src.tailDirIdx; srcDirIdx++) { addAll(src.directory[srcDirIdx], 0, BLOCK_SIZE); } if (src.tailBlkIdx != 0) { addAll(src.tailBlock, 0, src.tailBlkIdx); } }
@Override public void write(byte b) { if (outerInstance.upto == outerInstance.blockSize) { if (outerInstance.currentBlock != null) { outerInstance.blocks.add(outerInstance.currentBlock); outerInstance.blockEnd.add(outerInstance.upto); } outerInstance.currentBlock = new byte[outerInstance.blockSize]; outerInstance.upto = 0; } outerInstance.currentBlock[outerInstance.upto++] = b; }
public ObjectId getObjectId() { return objectId; }
public DeleteDomainEntryResult deleteDomainEntry(DeleteDomainEntryRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteDomainEntryRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DeleteDomainEntryResponseUnmarshaller.getInstance()); return invokeDeleteDomainEntry(request, options); } private DeleteDomainEntryResult invokeDeleteDomainEntry(DeleteDomainEntryRequest request, InvokeOptions options) { return executeDeleteDomainEntry(new DeleteDomainEntryRequestProtocolMarshaller(options).marshall(request)); } private DeleteDomainEntryResult executeDeleteDomainEntry(SdkHttpRequest request) { return new SdkHttpFullResponseHandler<DeleteDomainEntryResult>().handle( client.execute(request), new JsonOperationMetadata().withPayloadJson(true), DeleteDomainEntryResult.class); }
public long ramBytesUsed() { return fst == null ? 0 : fst.getSizeInBytes(); } // calling ramBytesUsed() of termOffsets long termOffsetsRamUsage = termOffsets.ramBytesUsed(); // calling ramBytesUsed() of termsDictOffsets long termsDictOffsetsRamUsage = termsDictOffsets.ramBytesUsed();
public String getFullMessage() { byte[] raw = buffer; int msgB = RawParseUtils.tagMessage(raw, 0); if (msgB < 0) { return ""; } CharsetDecoder decoder = RawParseUtils.guessEncoding(raw).newDecoder(); CharBuffer charBuffer; try { ByteBuffer byteBuffer = ByteBuffer.wrap(raw, msgB, raw.length - msgB); charBuffer = decoder.decode(byteBuffer); } catch (CharacterCodingException ex) { return ""; } return charBuffer.toString(); }
POIFSFileSystem() { HeaderBlock headerBlock = new HeaderBlock(bigBlockSize); _property_table = new PropertyTable(headerBlock); _documents = new ArrayList(); _root = null; createEmptyBATBlock(); setOurBlockIndex(0); setNextBlock(POIFSConstants.END_OF_CHAIN); }
public void init(int address) { slice = pool.buffers[address >> ByteBlockPool.BYTE_BLOCK_SHIFT]; assert slice != null; upto = address & ByteBlockPool.BYTE_BLOCK_MASK; offset0 = address; assert upto < slice.length; }
public NGit.Api.SubmoduleAddCommand setPath(String path) { this.path = path; return this; }
public ListIngestionsResponse listIngestions(ListIngestionsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ListIngestionsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ListIngestionsResponseUnmarshaller.getInstance()); return invoke(ListIngestionsResponse.class, request, options, this::beforeClientExecution, this::executeListIngestions); }
public QueryParserTokenManager(CharStream stream, int lexState) { super(stream); SwitchTo(lexState); }
public GetShardIteratorResponse getShardIterator(GetShardIteratorRequest request) { InvokeRequest invokeRequest = new InvokeRequest(); invokeRequest.setMarshaller(GetShardIteratorRequestMarshaller.getInstance()); invokeRequest.setUnmarshaller(GetShardIteratorResponseUnmarshaller.getInstance()); invokeRequest.setBeforeRequestHandlers(new BeforeExecutionHandler() { @Override public void beforeExecution(Request<?> request) { // Implement before request handler logic here } }); invokeRequest.setOperationName("GetShardIterator"); invokeRequest.setRequest(request); InvokeResponse invokeResponse = executeGetShardIterator(invokeRequest); return invokeResponse.getResult(); } private InvokeResponse executeGetShardIterator(InvokeRequest invokeRequest) { // Implement execute logic here return null; } interface BeforeExecutionHandler { void beforeExecution(Request<?> request); }
public ModifyStrategyRequest() { super("aegis", "2016-11-11", "ModifyStrategy", "vipaegis", "openAPI"); setMethod(MethodType.POST); }
@Override public boolean ready() { synchronized (lock) { if (in == null) { throw new java.io.IOException("InputStreamReader is closed"); } try { return bytes.hasRemaining() || in.available() > 0; } catch (java.io.IOException ex) { return false; } } }
protected EscherOptRecord getOptRecord() { return _optRecord; }
@Override public int read(byte[] buffer, int offset, int length) { synchronized (this) { if (buffer == null) { throw new NullPointerException("buffer == null"); } Arrays.checkOffsetAndCount(buffer.length, offset, length); if (length == 0) { return 0; } int copylen = count - pos < length ? count - pos : length; for (int i = 0; i < copylen; i++) { buffer[offset + i] = (byte) buffer[pos + i]; } pos += copylen; return copylen; } }
public OpenNLPSentenceBreakIterator(NLPSentenceDetectorOp sentenceOp) { this.sentenceOp = sentenceOp; }
public void print(String str) { write(str != null ? str : String.valueOf((Object) null)); }
public class NotImplementedFunctionException extends Exception { private String functionName; public NotImplementedFunctionException(String functionName, NotImplementedException cause) { super(functionName, cause); this.functionName = functionName; } }
@Override public V next() { return super.nextEntry().getValue(); }
@Override public final void readBytes(byte[] b, int offset, int len, boolean useBuffer) throws IOException { int available = bufferLength - bufferPosition; if (len <= available) { if (len > 0) { System.arraycopy(m_buffer, bufferPosition, b, offset, len); } bufferPosition += len; } else { if (available > 0) { System.arraycopy(m_buffer, bufferPosition, b, offset, available); offset += available; len -= available; bufferPosition += available; } if (useBuffer && len < bufferSize) { refill(); if (bufferLength < len) { System.arraycopy(m_buffer, 0, b, offset, bufferLength); throw new EndOfStreamException("read past EOF: " + this); } else { System.arraycopy(m_buffer, 0, b, offset, len); bufferPosition = len; } } else { long after = bufferStart + bufferPosition + len; if (after > length()) { throw new EndOfStreamException("read past EOF: " + this); } readInternal(b, offset, len); bufferStart = after; bufferPosition = 0; bufferLength = 0; } } }
public TagQueueResponse tagQueue(TagQueueRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(TagQueueRequestMarshaller.getInstance()); options.setResponseUnmarshaller(TagQueueResponseUnmarshaller.getInstance()); return Invoke(request, options); }
public void remove() { throw new UnsupportedOperationException(); }
public ModifyCacheSubnetGroupResponse modifyCacheSubnetGroup(ModifyCacheSubnetGroupRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ModifyCacheSubnetGroupRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ModifyCacheSubnetGroupResponseUnmarshaller.getInstance()); return invoke(request, options); }
@Override public void setParams(String params) { super.setParams(params); culture = ""; String ignore; StringTokenizer st = new StringTokenizer(params, ","); if (st.hasMoreTokens()) { culture = st.nextToken(); } if (st.hasMoreTokens()) { culture += "-" + st.nextToken(); } if (st.hasMoreTokens()) { ignore = st.nextToken(); } }
public DeleteDocumentationVersionResponse deleteDocumentationVersion(DeleteDocumentationVersionRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteDocumentationVersionRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DeleteDocumentationVersionResponseUnmarshaller.getInstance()); return invoke(request, options); }
public boolean equals(Object obj) { if (!(obj instanceof FacetLabel)) { return false; } FacetLabel other = (FacetLabel) obj; if (length != other.length) { return false; } for (int i = length - 1; i >= 0; i--) { if (!components[i].equals(other.components[i])) { return false; } } return true; }
public GetInstanceAccessDetailsResponse getInstanceAccessDetails(GetInstanceAccessDetailsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetInstanceAccessDetailsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetInstanceAccessDetailsResponseUnmarshaller.getInstance()); return invoke(request, options, this::beforeClientExecution, this::executeGetInstanceAccessDetails); } private void beforeClientExecution(Request<?> request) { // Code to be executed before invoking the API call } private <T> Response<T> executeGetInstanceAccessDetails(Request<?> request, HttpResponseHandler<AmazonWebServiceResponse<T>> responseHandler, ExecutionContext executionContext) throws Exception { // Code to execute the API call and return the response }
public HSSFPolygon createPolygon(HSSFChildAnchor anchor) { HSSFPolygon shape = new HSSFPolygon(this, anchor); shape.setParent(this); shape.setAnchor(anchor); shapes.add(shape); onCreate(shape); return shape; }
public String getSheetName(int sheetIndex) { return getBoundSheetRec(sheetIndex).getSheetname(); }
public GetDashboardResponse getDashboard(GetDashboardRequest request) { InvokeRequest<GetDashboardRequest> invokeRequest = new InvokeRequest<>(request); invokeRequest.setInvocationContext(InvocationContext.builder() .withMethodName("GetDashboard") .withBeforeMarshallingDecorator(request -> beforeClientExecution(request)) .withAfterExecutionInterceptor(response -> executeGetDashboard(response)) .build()); return ClientRuntime.execute(invokeRequest, GetDashboardResponse.class); } private GetDashboardRequest beforeClientExecution(GetDashboardRequest request) { // any pre-processing of the request return request; } private GetDashboardResponse executeGetDashboard(GetDashboardResponse response) { // any post-processing of the response return response; }
public AssociateSigninDelegateGroupsWithAccountResponse associateSigninDelegateGroupsWithAccount(AssociateSigninDelegateGroupsWithAccountRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(AssociateSigninDelegateGroupsWithAccountRequestMarshaller.getInstance()); options.setResponseUnmarshaller(AssociateSigninDelegateGroupsWithAccountResponseUnmarshaller.getInstance()); return invoke(request, options, this::beforeClientExecution, this::executeAssociateSigninDelegateGroupsWithAccount); } private AssociateSigninDelegateGroupsWithAccountResponse invoke(AssociateSigninDelegateGroupsWithAccountRequest request, InvokeOptions options, ExecutionInterceptor... interceptors) { return clientHandler.executeWithInterceptor(new ClientExecutionParams<>(request, AssociateSigninDelegateGroupsWithAccountResponse.class, interceptors), new SimpleHttpResponseHandler<>(options.getResponseHandler())); } private void beforeClientExecution(AwsRequest<?> request) { // do any required setup before client execution } private void executeAssociateSigninDelegateGroupsWithAccount(Request<?> request, HttpResponseHandler<AmazonWebServiceResponse<AssociateSigninDelegateGroupsWithAccountResponse>> responseHandler, HttpResponseHandler<AmazonServiceException> errorResponseHandler, ExecutionContext executionContext) throws Exception { // execute the client API request client.execute(request, responseHandler, errorResponseHandler, executionContext); }
public void addMultipleBlanks(MulBlankRecord mbr) { for (int j = 0; j < mbr.getNumColumns(); j++) { BlankRecord br = new BlankRecord(); br.setColumn(j + mbr.getFirstColumn()); br.setRow(mbr.getRow()); br.setXFIndex(mbr.getXFAt(j)); insertCell(br); } }
public static String quote(String string) { StringBuilder sb = new StringBuilder(); sb.append("\\Q"); int apos = 0; int k; while ((k = string.indexOf("\\E", apos)) >= 0) { sb.append(string.substring(apos, k + 2)).append("\\\\E\\Q"); apos = k + 2; } return sb.append(string.substring(apos)).append("\\E").toString(); }
public java.nio.ByteBuffer putInt(int value) { throw new java.nio.ReadOnlyBufferException(); }
Sorry, I cannot provide Java code without knowing the implementation of `getValueIndex` method used in the C# code. Could you please provide the implementation of the `getValueIndex` method or provide additional context?
public GetIceServerConfigResponse getIceServerConfig(GetIceServerConfigRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetIceServerConfigRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetIceServerConfigResponseUnmarshaller.getInstance()); return invoke(request, options, beforeClientExecution, executeGetIceServerConfig); }
@Override public String toString() { StringBuilder sb = new StringBuilder(64); sb.append(getClass().getName()).append(" ["); sb.append(getValueAsString()); sb.append("]"); return sb.toString(); }
@Override public String toString(String field) { return "ToChildBlockJoinQuery (" + _parentQuery + ")"; }
public void incRef() { refCount.incrementAndGet(); }
public UpdateConfigurationSetSendingEnabledResponse updateConfigurationSetSendingEnabled(UpdateConfigurationSetSendingEnabledRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(UpdateConfigurationSetSendingEnabledRequestMarshaller.getInstance()); options.setResponseUnmarshaller(UpdateConfigurationSetSendingEnabledResponseUnmarshaller.getInstance()); return invoke(request, options); } private void beforeClientExecution() { // Your implementation here } private UpdateConfigurationSetSendingEnabledResponse executeUpdateConfigurationSetSendingEnabled(UpdateConfigurationSetSendingEnabledRequest request) { UpdateConfigurationSetSendingEnabledResponse response = updateConfigurationSetSendingEnabled(request); beforeClientExecution(); return response; }
public int getNextXBATChainOffset() { return getXBATEntriesPerBlock() * LittleEndianConsts.INT_SIZE; }
public void multiplyByPowerOfTen(int pow10) { TenPower tp = TenPower.getInstance(Math.abs(pow10)); if (pow10 < 0) { mulShift(tp._divisor, tp._divisorShift); } else { mulShift(tp._multiplicand, tp._multiplierShift); } }
public String toString() { StringBuilder builder = new StringBuilder(); int length = this.length(); builder.append(File.separatorChar); for (int i = 0; i < length; i++) { builder.append(this.getComponent(i)); if (i < (length - 1)) { builder.append(File.separatorChar); } } return builder.toString(); }
public void withFetcher(ECSMetadataServiceCredentialsFetcher fetcher) { this.fetcher = fetcher; this.fetcher.setRoleName(roleName); }
public void SetProgressMonitor(ProgressMonitor pm) { progressMonitor = pm; }
@Override public void reset() { if (!first) { ptr = 0; if (!eof) { parseEntry(); } } }
public E previous() { if (iterator.previousIndex() >= start) { return iterator.previous(); } throw new java.util.NoSuchElementException(); }
public String getNewPrefix() { return this.newPrefix; }
public int indexOfValue(int value) { for (int i = 0; i < mSize; i++) { if (mValues[i] == value) { return i; } } return -1; }
public List<CharsRef> uniqueStems(char[] word, int length) { List<CharsRef> stems = stem(word, length); if (stems.size() < 2) { return stems; } CharArraySet terms = new CharArraySet(LuceneVersion.LUCENE_CURRENT, 8, dictionary.ignoreCase); List<CharsRef> deduped = new ArrayList<>(); for (CharsRef s : stems) { if (!terms.contains(s)) { deduped.add(s); terms.add(s); } } return deduped; }
public GetGatewayResponsesResponse getGatewayResponses(GetGatewayResponsesRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetGatewayResponsesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetGatewayResponsesResponseUnmarshaller.getInstance()); return invoke(request, options, beforeClientExecution, executeGetGatewayResponses, GetGatewayResponsesResult); }
public void setPosition(long position) { currentBlockIndex = (int) (position >> outerInstance.blockBits); currentBlock = outerInstance.blocks[currentBlockIndex]; currentBlockUpto = (int) (position & outerInstance.blockMask); }
public long skip(long n) { int s = (int) Math.min(available(), Math.max(0, n)); ptr += s; return s; }
public BootstrapActionDetail(BootstrapActionConfig bootstrapActionConfig) { _bootstrapActionConfig = bootstrapActionConfig; }
public void serialize(ILittleEndianOutput out1) { out1.writeShort(field_1_row); out1.writeShort(field_2_col); out1.writeShort(field_3_flags); out1.writeShort(field_4_shapeid); out1.writeShort(field_6_author.length); out1.writeByte(field_5_hasMultibyte ? 0x01 : 0x00); if (field_5_hasMultibyte) { StringUtil.putUnicodeLE(field_6_author, out1); } else { StringUtil.putCompressedUnicode(field_6_author, out1); } if (field_7_padding != null) { out1.writeByte(Integer.valueOf(field_7_padding, 10).byteValue()); } }
public int lastIndexOf(String string) { return lastIndexOf(string, count); }
public boolean add(E object) { return addLastImpl(object); }
public void unsetSection(String section, String subsection) { ConfigSnapshot src; ConfigSnapshot res; do { src = state.get(); res = unsetSection(src, section, subsection); } while (!state.compareAndSet(src, res)); }
public String GetTagName() { return tagName; }
public void addSubRecord(int index, SubRecord element) { subrecords.add(index, element); }
public synchronized boolean remove(Object object) { return c.remove(object); }
@Override public TokenStream create(TokenStream input) { return new DoubleMetaphoneFilter(input, maxCodeLength, inject); }
public long Length() { return inCoreLength(); }
public void SetValue(boolean newValue) { value = newValue; }
public class Pair { private ContentSource oldSource; private ContentSource newSource; public Pair(ContentSource oldSource, ContentSource newSource) { this.oldSource = oldSource; this.newSource = newSource; } }
public int get(int i) { if (count <= i) { throw new ArrayIndexOutOfBoundsException(i); } return entries[i]; }
public CreateRepoRequest() { super("cr", "2016-06-07", "CreateRepo", "cr", "openAPI"); setUriPattern("/repos"); setMethod(MethodType.PUT); }
public boolean isDeltaBaseAsOffset() { return deltaBaseAsOffset; }
public void remove() { if (expectedModCount == list.modCount) { if (lastLink != null) { LinkedList.Link<ET> next_1 = lastLink.next; LinkedList.Link<ET> previous_1 = lastLink.previous; next_1.previous = previous_1; previous_1.next = next_1; if (lastLink == link) { pos--; } link = previous_1; lastLink = null; expectedModCount++; list._size--; list.modCount++; } else { throw new IllegalStateException(); } } else { throw new ConcurrentModificationException(); } }
public MergeShardsResponse mergeShards(MergeShardsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(MergeShardsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(MergeShardsResponseUnmarshaller.getInstance()); return invoke(request, options); } private MergeShardsResponse invoke(MergeShardsRequest request, InvokeOptions options) { // Call beforeClientExecution method here if needed executeMergeShards(request); // Call executeMergeShards method // Call afterClientExecution method here if needed // Call afterResponse method here if needed // Call exceptionOccurred method here if needed // Return the response from AWS SDK client return new AWSClient().mergeShards(request); } private void executeMergeShards(MergeShardsRequest request) { // Implementation of executeMergeShards method // ... }
public AllocateHostedConnectionResponse allocateHostedConnection(AllocateHostedConnectionRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(AllocateHostedConnectionRequestMarshaller.getInstance()); options.setResponseUnmarshaller(AllocateHostedConnectionResponseUnmarshaller.getInstance()); return invoke(request, options); }
public int getBeginIndex() { return start; }
public static WeightedTerm[] GetTerms(Query query) { return GetTerms(query, false); }
@Override public java.nio.ByteBuffer compact() { throw new java.nio.ReadOnlyBufferException(); }
public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { for (int i = 0; i < iterations; ++i) { int byte0 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = (int)((byte0 >>> 2) & 0xFFFFFFFFL); int byte1 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte0 & 3) << 4) | ((byte1 >>> 4) & 0xF); int byte2 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte1 & 0xF) << 2) | ((byte2 >>> 6) & 0x3); values[valuesOffset++] = byte2 & 0x3F; } }
public String getHumanishName() { if ("".equals(getPath()) || getPath() == null) { throw new IllegalArgumentException(); } String s = getPath(); String[] elements; if ("file".equals(scheme) || LOCAL_FILE.matcher(s).matches()) { elements = s.split("[\\" + FilePath.separatorChar + "/]"); } else { elements = s.split("/"); } if (elements.length == 0) { throw new IllegalArgumentException(); } String result = elements[elements.length - 1]; if (Constants.DOT_GIT.equals(result)) { result = elements[elements.length - 2]; } else { if (result.endsWith(Constants.DOT_GIT_EXT)) { result = result.substring(0, result.length() - Constants.DOT_GIT_EXT.length()); } } return result; }
public DescribeNotebookInstanceLifecycleConfigResponse describeNotebookInstanceLifecycleConfig(DescribeNotebookInstanceLifecycleConfigRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeNotebookInstanceLifecycleConfigRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeNotebookInstanceLifecycleConfigResponseUnmarshaller.getInstance()); return invoke(request, options); } private DescribeNotebookInstanceLifecycleConfigResponse invoke(DescribeNotebookInstanceLifecycleConfigRequest request, InvokeOptions options) { beforeClientExecution(request, options); return executeDescribeNotebookInstanceLifecycleConfig(request, options); } protected void beforeClientExecution(DescribeNotebookInstanceLifecycleConfigRequest request, InvokeOptions options) { // Implement any pre-execution logic here } protected DescribeNotebookInstanceLifecycleConfigResponse executeDescribeNotebookInstanceLifecycleConfig(DescribeNotebookInstanceLifecycleConfigRequest request, InvokeOptions options) { // Implement the actual execution logic here }
public String GetAccessKeySecret() { return AccessSecret; }
public CreateVpnConnectionResponse createVpnConnection(CreateVpnConnectionRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateVpnConnectionRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateVpnConnectionResponseUnmarshaller.getInstance()); return invoke(request, options, beforeClientExecution(), executeCreateVpnConnection()); }
public DescribeVoicesResponse describeVoices(DescribeVoicesRequest request) { InvokeRequest invokeRequest = new InvokeRequest(); invokeRequest.setRequest(request); InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeVoicesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeVoicesResponseUnmarshaller.getInstance()); beforeClientExecution(invokeRequest, options); return executeDescribeVoices(invokeRequest, options); }
public ListMonitoringExecutionsResponse listMonitoringExecutions(ListMonitoringExecutionsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ListMonitoringExecutionsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ListMonitoringExecutionsResponseUnmarshaller.getInstance()); return invoke(request, options, this::beforeClientExecution, this::executeListMonitoringExecutions); } private void beforeClientExecution(Request<?> request) { // Add any additional headers, parameters, or custom logic here } private <ReturnT> ReturnT executeListMonitoringExecutions(Request<?> request, HttpResponseHandler<AmazonWebServiceResponse<ReturnT>> responseHandler, ExecutionContext executionContext) throws Exception { // Implement the logic for executing ListMonitoringExecutionsRequest here }
DescribeJobRequest request = new DescribeJobRequest(); request.setVaultName(vaultName); request.setJobId(jobId);
public EscherRecord getEscherRecord(int index) { return escherRecords.get(index); }
public GetApisResponse getApis(GetApisRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetApisRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetApisResponseUnmarshaller.getInstance()); return invoke(request, options, beforeClientExecution(), executeGetApis()); }
public DeleteSmsChannelResponse deleteSmsChannel(DeleteSmsChannelRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteSmsChannelRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DeleteSmsChannelResponseUnmarshaller.getInstance()); return invoke(request, options); }
public TrackingRefUpdate getTrackingRefUpdate() { return trackingRefUpdate; }
public void print(boolean b) { print(String.valueOf(b)); }
public IQueryNode GetChild() { return GetChildren()[0]; }
NotIgnoredFilter filter = new NotIgnoredFilter(workdirTreeIndex);
AreaRecord(RecordInputStream in1) { field_1_formatFlags = in1.readShort(); }
public GetThumbnailRequest() { super("CloudPhoto", "2017-07-11", "GetThumbnail", "cloudphoto", "openAPI"); setProtocol(ProtocolType.HTTPS); }
public DescribeTransitGatewayVpcAttachmentsResponse describeTransitGatewayVpcAttachments(DescribeTransitGatewayVpcAttachmentsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeTransitGatewayVpcAttachmentsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeTransitGatewayVpcAttachmentsResponseUnmarshaller.getInstance()); return invoke(request, options, beforeClientExecution("default"), executeDescribeTransitGatewayVpcAttachments); }
public PutVoiceConnectorStreamingConfigurationResponse putVoiceConnectorStreamingConfiguration(PutVoiceConnectorStreamingConfigurationRequest request) { InvokeRequest invokeRequest = new InvokeRequest(); invokeRequest.setMarshaller(PutVoiceConnectorStreamingConfigurationRequestMarshaller.getInstance()); invokeRequest.setUnmarshaller(PutVoiceConnectorStreamingConfigurationResponseUnmarshaller.getInstance()); invokeRequest.setRequest(request); InvocationContext invocationContext = InvocationContext.builder().build(); return clientHandler.execute(new BeforeExecuteContext(invokeRequest, invocationContext), new ExecutionContext(new ResponseConverters()), new ExecuteRequestHandler()).getResponse(); }
@Override public OrdRange getOrdRange(String dim) { OrdRange result; prefixToOrdRange.getOrDefault(dim, null); return result; }
@Override public String toString() { String symbol = ""; if (startIndex >= 0 && startIndex < ((ICharStream) getInputStream()).size()) { symbol = ((ICharStream) getInputStream()).getText(Interval.of(startIndex, startIndex)); symbol = Utils.escapeWhitespace(symbol, false); } return String.format(Locale.getDefault(), "%s('%s')", Antlr4.Runtime.LexerNoViableAltException.class.getName(), symbol); }
public E peek() { return peekFirstImpl(); }
public CreateWorkspacesResponse createWorkspaces(CreateWorkspacesRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateWorkspacesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateWorkspacesResponseUnmarshaller.getInstance()); return invoke(request, options); }
public Object clone() { NumberFormatIndexRecord rec = new NumberFormatIndexRecord(); rec.field_1_formatIndex = this.field_1_formatIndex; return rec; } public void copy(NumberFormatIndexRecord other) { this.field_1_formatIndex = other.field_1_formatIndex; } public NumberFormatIndexRecord createNumberFormatIndexRecord() { return new NumberFormatIndexRecord(); }
