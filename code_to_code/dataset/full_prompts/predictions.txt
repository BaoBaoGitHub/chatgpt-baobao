public void serialize(ILittleEndianOutput out1) { out1.writeShort(field_1_vcenter); }
public void AddAll(BlockList<T> src) { if (src.size == 0) { return; } int srcDirIdx = 0; for (; srcDirIdx < src.tailDirIdx; srcDirIdx++) { AddAll(src.directory[srcDirIdx], 0, BLOCK_SIZE); } if (src.tailBlkIdx != 0) { AddAll(src.tailBlock, 0, src.tailBlkIdx); } } protected void AddAll(Block<T>[] directory, int startIndex, int endIndex) { for (int i = startIndex; i < endIndex; i++) { Block<T> block = directory[i]; if (block == null) { continue; } for (int j = 0; j < BLOCK_SIZE; j++) { T entry = block.Get(j); if (entry == null) { continue; } Add(entry); } } }
public void write(byte b) { if (outerInstance.upto == outerInstance.blockSize) { if (outerInstance.currentBlock != null) { outerInstance.blocks.add(outerInstance.currentBlock); outerInstance.blockEnd.add(outerInstance.upto); } outerInstance.currentBlock = new byte[outerInstance.blockSize]; outerInstance.upto = 0; } outerInstance.currentBlock[outerInstance.upto++] = b; }
public ObjectId getObjectId() { return objectId; }
public DeleteDomainEntryResponse deleteDomainEntry(DeleteDomainEntryRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteDomainEntryRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DeleteDomainEntryResponseUnmarshaller.getInstance()); return invoke(request, options, DeleteDomainEntryResponse.class); }
public long ramBytesUsed() { return fst == null ? 0 : fst.getSizeInBytes(); }
public String getFullMessage() { byte[] raw = buffer; int msgB = RawParseUtils.tagMessage(raw, 0); if (msgB < 0) { return ""; } Charset charset = RawParseUtils.parseEncoding(raw); return RawParseUtils.decode(charset, raw, msgB, raw.length); }
public POIFSFileSystem() { HeaderBlock headerBlock = new HeaderBlock(bigBlockSize); _property_table = new PropertyTable(headerBlock); _documents = new ArrayList<>(); _root = null; }
public void init(int address) { slice = pool.getBuffers()[address >> ByteBlockPool.BYTE_BLOCK_SHIFT]; assert (slice != null); upto = address & ByteBlockPool.BYTE_BLOCK_MASK; offset0 = address; assert (upto < slice.length); }
public NGit.Api.SubmoduleAddCommand setPath(String path) { this.path = path; return this; }
