@Override    public void serialize(ILittleEndianOutput out1) {        out1.writeShort(field_1_vcenter);    }
public void AddAll(BlockList<T> src) {        if (src.size == 0) {            return;        }        int srcDirIdx = 0;        for (; srcDirIdx < src.tailDirIdx; srcDirIdx++) {            AddAll(src.directory[srcDirIdx], 0, BLOCK_SIZE);        }        if (src.tailBlkIdx != 0) {            AddAll(src.tailBlock, 0, src.tailBlkIdx);        }    }    public void AddAll(T[] src, int offset, int length) {        // implementation code here    }
@Override    public void write(byte[] b, int off, int len) throws IOException {        if (outerInstance.upto == outerInstance.blockSize) {            if (outerInstance.currentBlock != null) {                outerInstance.blocks.add(outerInstance.currentBlock);                outerInstance.blockEnd.add(outerInstance.upto);            }            outerInstance.currentBlock = new byte[outerInstance.blockSize];            outerInstance.upto = 0;        }        outerInstance.currentBlock[outerInstance.upto++] = b[off];    }
public ObjectId GetObjectId() {        return objectId;    }
public DeleteDomainEntryResponse deleteDomainEntry(DeleteDomainEntryRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteDomainEntryRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteDomainEntryResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteDomainEntryResponse.class);    }
public long RamBytesUsed() {        return fst == null ? 0 : fst.GetSizeInBytes();    }
public String getFullMessage(){        byte[] raw = buffer;        int msgB = RawParseUtils.TagMessage(raw, 0);        if (msgB < 0){            return "";        }        Encoding enc = RawParseUtils.ParseEncoding(raw);        return RawParseUtils.Decode(enc, raw, msgB, raw.length);    }
public POIFSFileSystem() {        HeaderBlock headerBlock = new HeaderBlock(bigBlockSize);        _property_table = new PropertyTable(headerBlock);        _documents = new ArrayList();        _root = null;    }
public void init(int address) {        slice = pool.buffers[address >>> ByteBlockPool.BYTE_BLOCK_SHIFT];        assert slice != null;        upto = address & ByteBlockPool.BYTE_BLOCK_MASK;        offset0 = address;        assert upto < slice.length;    }
public NGit.Api.SubmoduleAddCommand setPath(String path) {        this.path = path;        return this;    }
public ListIngestionsResponse listIngestions(ListIngestionsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ListIngestionsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ListIngestionsResponseUnmarshaller.getInstance());        return invoke(ListIngestionsResponse.class, request, options);    }
public QueryParserTokenManager(ICharStream stream, int lexState) {        super(stream);        SwitchTo(lexState);    }
public GetShardIteratorResponse getShardIterator(GetShardIteratorRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetShardIteratorRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetShardIteratorResponseUnmarshaller.getInstance());        return invoke(request, options, GetShardIteratorResponse.class);    }    private <T> T invoke(Request request, InvokeOptions options, Class<T> responseType) {        // implementation for invoking the request using the options and returning the response of the specified type        // ...    }
public ModifyStrategyRequest() {        super("aegis", "2016-11-11", "ModifyStrategy", "vipaegis", "openAPI");        setMethod(MethodType.POST);    }
public synchronized boolean ready() throws IOException {        if (in == null) {            throw new IOException("InputStreamReader is closed");        }        try {            return bytes.hasRemaining() || in.available() > 0;        } catch (IOException e) {            return false;        }    }
protected EscherOptRecord GetOptRecord() {        return _optRecord;    }
public synchronized int read(byte[] buffer, int offset, int length) {        if (buffer == null) {            throw new NullPointerException("buffer == null");        }        java.util.Arrays.checkOffsetAndCount(buffer.length, offset, length);        if (length == 0) {            return 0;        }        int copylen = count - pos < length ? count - pos : length;        if (copylen > 0) {            System.arraycopy(this.buffer, pos, buffer, offset, copylen);            pos += copylen;        }        return copylen;    }
public OpenNLPSentenceBreakIterator(NLPSentenceDetectorOp sentenceOp) {        this.sentenceOp = sentenceOp;    }
public void print(String str) {        write(str != null ? str : String.valueOf((Object) null));    }
public class NotImplementedFunctionException extends Exception {        private String functionName;        public NotImplementedFunctionException(String functionName, NotImplementedException cause) {            super(functionName, cause);            this.functionName = functionName;        }    }
@Override    public V next() {        return this.nextEntry().value;    }
@Override    public void readBytes(byte[] b, int offset, int len, boolean useBuffer) throws IOException {        int available = bufferLength - bufferPosition;                if (len <= available) {            if (len > 0) {                System.arraycopy(m_buffer, bufferPosition, b, offset, len);            }                        bufferPosition += len;        } else {            if (available > 0) {                System.arraycopy(m_buffer, bufferPosition, b, offset, available);                offset += available;                len -= available;                bufferPosition += available;            }                        if (useBuffer && len < bufferSize) {                refill();                                if (bufferLength < len) {                    System.arraycopy(m_buffer, 0, b, offset, bufferLength);                    throw new EOFException("read past EOF: " + this);                } else {                    System.arraycopy(m_buffer, 0, b, offset, len);                    bufferPosition = len;                }            } else {                long after = bufferStart + bufferPosition + len;                                if (after > Length) {                    throw new EOFException("read past EOF: " + this);                }                                readInternal(b, offset, len);                bufferStart = after;                bufferPosition = 0;                bufferLength = 0;            }        }    }
public TagQueueResponse tagQueue(TagQueueRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(TagQueueRequestMarshaller.getInstance());        options.setResponseUnmarshaller(TagQueueResponseUnmarshaller.getInstance());        return invoke(request, options, TagQueueResponse.class);    }
@Override    public void Remove() throws NotSupportedException {        throw new NotSupportedException();    }
public ModifyCacheSubnetGroupResponse modifyCacheSubnetGroup(ModifyCacheSubnetGroupRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ModifyCacheSubnetGroupRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ModifyCacheSubnetGroupResponseUnmarshaller.getInstance());        return invoke(request, options, ModifyCacheSubnetGroupResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> responseType) {        // Implementation of the invoke method        // ...    }
public void setParams(String params) {        super.setParams(params);        culture = "";        String ignore;        StringTokenizer st = new StringTokenizer(params, ",");        if (st.hasMoreTokens())            culture = st.nextToken();        if (st.hasMoreTokens())            culture += "-" + st.nextToken();        if (st.hasMoreTokens())            ignore = st.nextToken();    }
public DeleteDocumentationVersionResponse deleteDocumentationVersion(DeleteDocumentationVersionRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteDocumentationVersionRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteDocumentationVersionResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteDocumentationVersionResponse.class);    }    private <T> T invoke(Request<?> request, InvokeOptions options, Class<T> responseType) {        // implementation of the 'invoke' method        // ...    }
@Override    public boolean equals(Object obj) {        if (!(obj instanceof FacetLabel)) {            return false;        }        FacetLabel other = (FacetLabel) obj;        if (length != other.length) {            return false;        }        for (int i = length - 1; i >= 0; i--) {            if (!components[i].equals(other.components[i], StringComparison.Ordinal)) {                return false;            }        }        return true;    }
public GetInstanceAccessDetailsResponse getInstanceAccessDetails(GetInstanceAccessDetailsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetInstanceAccessDetailsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetInstanceAccessDetailsResponseUnmarshaller.getInstance());        return invoke(request, options, GetInstanceAccessDetailsResponse.class);    }
public HSSFPolygon createPolygon(HSSFChildAnchor anchor) {        HSSFPolygon shape = new HSSFPolygon(this, anchor);        shape.setParent(this);        shape.setAnchor(anchor);        shapes.add(shape);        onCreate(shape);        return shape;    }
public String GetSheetName(int sheetIndex) {        return GetBoundSheetRec(sheetIndex).Sheetname;    }
public GetDashboardResponse getDashboard(GetDashboardRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetDashboardRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetDashboardResponseUnmarshaller.getInstance());        return invoke(request, options, GetDashboardResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> responseType) {        // implementation of the invoke method    }
public AssociateSigninDelegateGroupsWithAccountResponse associateSigninDelegateGroupsWithAccount(AssociateSigninDelegateGroupsWithAccountRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(AssociateSigninDelegateGroupsWithAccountRequestMarshaller.getInstance());        options.setResponseUnmarshaller(AssociateSigninDelegateGroupsWithAccountResponseUnmarshaller.getInstance());        return invoke(request, options, AssociateSigninDelegateGroupsWithAccountResponse.class);    }
public void addMultipleBlanks(MulBlankRecord mbr) {        for (int j = 0; j < mbr.getNumColumns(); j++) {            BlankRecord br = new BlankRecord();            br.setColumn(j + mbr.getFirstColumn());            br.setRow(mbr.getRow());            br.setXFIndex(mbr.getXFAt(j));            insertCell(br);        }    }
public static String quote(String string) {        StringBuilder sb = new StringBuilder();        sb.append("\\Q");        int apos = 0;        int k;        while ((k = string.indexOf("\\E", apos)) >= 0) {            sb.append(string.substring(apos, k + 2)).append("\\\\E\\Q");            apos = k + 2;        }        return sb.append(string.substring(apos)).append("\\E").toString();    }
@Override    public java.nio.ByteBuffer putInt(int value) {        throw new java.nio.ReadOnlyBufferException();    }
public ArrayPtg(Object[][] values2d) {        int nColumns = values2d[0].length;        int nRows = values2d.length;        _nColumns = (short) nColumns;        _nRows = (short) nRows;        Object[] vv = new Object[_nColumns * _nRows];        for (int r = 0; r < nRows; r++) {            Object[] rowData = values2d[r];            for (int c = 0; c < nColumns; c++) {                vv[getValueIndex(c, r)] = rowData[c];            }        }        _arrayValues = vv;        _reserved0Int = 0;        _reserved1Short = 0;        _reserved2Byte = 0;    }
public GetIceServerConfigResponse getIceServerConfig(GetIceServerConfigRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetIceServerConfigRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetIceServerConfigResponseUnmarshaller.getInstance());        return invoke(request, options, GetIceServerConfigResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> responseClass) {        // implementation of the invoke method    }
@Override    public String toString() {        StringBuilder sb = new StringBuilder(64);        sb.append(getClass().getSimpleName()).append(" [");        sb.append(getValueAsString());        sb.append("]");        return sb.toString();    }
@Override    public String toString(String field) {        return "ToChildBlockJoinQuery (" + _parentQuery + ")";    }
public void IncRef() {        refCount.incrementAndGet();    }
public UpdateConfigurationSetSendingEnabledResponse updateConfigurationSetSendingEnabled(UpdateConfigurationSetSendingEnabledRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(UpdateConfigurationSetSendingEnabledRequestMarshaller.getInstance());        options.setResponseUnmarshaller(UpdateConfigurationSetSendingEnabledResponseUnmarshaller.getInstance());        return invoke(request, options, UpdateConfigurationSetSendingEnabledResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> responseType) {        // implementation of the invoke method    }
public int GetNextXBATChainOffset() {        return GetXBATEntriesPerBlock() * LittleEndianConsts.INT_SIZE;    }
public void multiplyByPowerOfTen(int pow10) {        TenPower tp = TenPower.getInstance(Math.abs(pow10));        if (pow10 < 0) {            mulShift(tp.getDivisor(), tp.getDivisorShift());        } else {            mulShift(tp.getMultiplicand(), tp.getMultiplierShift());        }    }
public String toString() {        StringBuilder builder = new StringBuilder();        int length = this.length;        builder.append(File.separator);        for (int i = 0; i < length; i++) {            builder.append(this.getComponent(i));            if (i < (length - 1)) {                builder.append(File.separator);            }        }        return builder.toString();    }
public void withFetcher(ECSMetadataServiceCredentialsFetcher fetcher) {        this.fetcher = fetcher;        this.fetcher.setRoleName(roleName);    }
public void SetProgressMonitor(ProgressMonitor pm) {        progressMonitor = pm;    }
@Override    public void reset() {        if (!first) {            ptr = 0;            if (!eof) {                parseEntry();            }        }    }
public E previous() {        if (iterator.previousIndex() >= start) {            return iterator.previous();        }        throw new java.util.NoSuchElementException();    }
public String getNewPrefix() {        return this.newPrefix;    }
public int indexOfValue(int value) {        for (int i = 0; i < mSize; i++) {            if (mValues[i] == value) {                return i;            }        }        return -1;    }
public List<CharsRef> UniqueStems(char[] word, int length) {        List<CharsRef> stems = Stem(word, length);        if (stems.size() < 2) {            return stems;        }        CharArraySet terms = new CharArraySet(LuceneVersion.LUCENE_CURRENT, 8, dictionary.ignoreCase);        List<CharsRef> deduped = new ArrayList<>();        for (CharsRef s : stems) {            if (!terms.contains(s)) {                deduped.add(s);                terms.add(s);            }        }        return deduped;    }
public GetGatewayResponsesResponse getGatewayResponses(GetGatewayResponsesRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetGatewayResponsesRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetGatewayResponsesResponseUnmarshaller.getInstance());        return invoke(request, options, GetGatewayResponsesResponse.class);    }
public void setPosition(long position) {        currentBlockIndex = (int) (position >> outerInstance.blockBits);        currentBlock = outerInstance.blocks[currentBlockIndex];        currentBlockUpto = (int) (position & outerInstance.blockMask);    }
public long skip(long n) {        int s = (int) Math.min(available(), Math.max(0, n));        ptr += s;        return s;    }
public BootstrapActionDetail(BootstrapActionConfig bootstrapActionConfig){        _bootstrapActionConfig = bootstrapActionConfig;    }
@Override    public void Serialize(ILittleEndianOutput out1) {        out1.WriteShort(field_1_row);        out1.WriteShort(field_2_col);        out1.WriteShort(field_3_flags);        out1.WriteShort(field_4_shapeid);        out1.WriteShort(field_6_author.length);        out1.WriteByte(field_5_hasMultibyte ? 0x01 : 0x00);        if (field_5_hasMultibyte) {            StringUtil.PutUnicodeLE(field_6_author, out1);        } else {            StringUtil.PutCompressedUnicode(field_6_author, out1);        }        if (field_7_padding != null) {            out1.WriteByte(Integer.parseInt(field_7_padding, 10));        }    }
public int lastIndexOf(String str) {        return lastIndexOf(str, count);    }
public boolean add(E object) {        return addLastImpl(object);    }
public virtual void UnsetSection(string section, string subsection){        ConfigSnapshot src;        ConfigSnapshot res;        do {            src = state.Get();            res = UnsetSection(src, section, subsection);        } while (!state.CompareAndSet(src, res));    }
public String getTagName() {        return tagName;    }
public void addSubRecord(int index, SubRecord element) {        subrecords.add(index, element);    }
public synchronized boolean remove(Object object) {        synchronized (mutex) {            return c.remove(object);        }    }
@Override    public TokenStream create(TokenStream input) {        return new DoubleMetaphoneFilter(input, maxCodeLength, inject);    }
public long Length() {        return InCoreLength();    }    public long InCoreLength() {        // implementation code here    }
public void SetValue(boolean newValue) {        value = newValue;    }
public Pair(ContentSource oldSource, ContentSource newSource) {        this.oldSource = oldSource;        this.newSource = newSource;    }
public int Get(int i) {        if (count <= i) {            throw new IndexOutOfRangeException(i);        }        return entries[i];    }
public CreateRepoRequest() {        super("cr", "2016-06-07", "CreateRepo", "cr", "openAPI");        setUriPattern("/repos");        setMethod(MethodType.PUT);    }
public boolean IsDeltaBaseAsOffset() {        return deltaBaseAsOffset;    }
public void remove() {        if (expectedModCount == list.modCount) {            if (lastLink != null) {                LinkedList.Link<ET> next_1 = lastLink.next;                LinkedList.Link<ET> previous_1 = lastLink.previous;                next_1.previous = previous_1;                previous_1.next = next_1;                if (lastLink == link) {                    pos--;                }                link = previous_1;                lastLink = null;                expectedModCount++;                list._size--;                list.modCount++;            } else {                throw new java.lang.UnsupportedOperationException();            }        } else {            throw new java.util.ConcurrentModificationException();        }    }
public MergeShardsResponse mergeShards(MergeShardsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(MergeShardsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(MergeShardsResponseUnmarshaller.getInstance());        return invoke(request, options, MergeShardsResponse.class);    }
public AllocateHostedConnectionResponse allocateHostedConnection(AllocateHostedConnectionRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(AllocateHostedConnectionRequestMarshaller.getInstance());        options.setResponseUnmarshaller(AllocateHostedConnectionResponseUnmarshaller.getInstance());        return invoke(request, options, AllocateHostedConnectionResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> responseType) {        // Add your implementation here        // This method should invoke the request using the provided options        // and return the response in the specified response type    }
public int getBeginIndex() {        return start;    }
public static WeightedTerm[] GetTerms(Query query) {        return GetTerms(query, false);    }
public java.nio.ByteBuffer compact() throws java.nio.ReadOnlyBufferException {        throw new java.nio.ReadOnlyBufferException();    }
public void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {        for (int i = 0; i < iterations; ++i) {            int byte0 = blocks[blocksOffset++] & 0xFF;            values[valuesOffset++] = (byte0 >>> 2) & 0x3F;            int byte1 = blocks[blocksOffset++] & 0xFF;            values[valuesOffset++] = ((byte0 & 0x3) << 4) | ((byte1 >>> 4) & 0xF);            int byte2 = blocks[blocksOffset++] & 0xFF;            values[valuesOffset++] = ((byte1 & 0xF) << 2) | ((byte2 >>> 6) & 0x3);            values[valuesOffset++] = byte2 & 0x3F;        }    }
public String getHumanishName() {        if ("".equals(getPath()) || getPath() == null) {            throw new IllegalArgumentException();        }        String s = getPath();        String[] elements;        if ("file".equals(scheme) || LOCAL_FILE.matcher(s).matches()) {            elements = s.split("[\\\\" + FilePath.separatorChar + "/]");        } else {            elements = s.split("/");        }        if (elements.length == 0) {            throw new IllegalArgumentException();        }        String result = elements[elements.length - 1];        if (Constants.DOT_GIT.equals(result)) {            result = elements[elements.length - 2];        } else {            if (result.endsWith(Constants.DOT_GIT_EXT)) {                result = result.substring(0, result.length() - Constants.DOT_GIT_EXT.length());            }        }        return result;    }
public DescribeNotebookInstanceLifecycleConfigResponse describeNotebookInstanceLifecycleConfig(DescribeNotebookInstanceLifecycleConfigRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeNotebookInstanceLifecycleConfigRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeNotebookInstanceLifecycleConfigResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeNotebookInstanceLifecycleConfigResponse.class);    }
public String getAccessKeySecret() {        return AccessSecret;    }
public CreateVpnConnectionResponse createVpnConnection(CreateVpnConnectionRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateVpnConnectionRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateVpnConnectionResponseUnmarshaller.getInstance());        return invoke(CreateVpnConnectionResponse.class, request, options);    }
public DescribeVoicesResponse describeVoices(DescribeVoicesRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeVoicesRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeVoicesResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeVoicesResponse.class);    }    private <T> T invoke(Request<?> request, InvokeOptions options, Class<T> clazz) {        // implementation of the invoke method    }
public ListMonitoringExecutionsResponse listMonitoringExecutions(ListMonitoringExecutionsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ListMonitoringExecutionsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ListMonitoringExecutionsResponseUnmarshaller.getInstance());        return invoke(request, options, ListMonitoringExecutionsResponse.class);    }
public class DescribeJobRequest {        private String vaultName;        private String jobId;                public DescribeJobRequest(String vaultName, String jobId) {            this.vaultName = vaultName;            this.jobId = jobId;        }    }
public EscherRecord getEscherRecord(int index) {        return escherRecords[index];    }
public GetApisResponse getApis(GetApisRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetApisRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetApisResponseUnmarshaller.getInstance());        return invoke(request, options, GetApisResponse.class);    }
public DeleteSmsChannelResponse deleteSmsChannel(DeleteSmsChannelRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteSmsChannelRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteSmsChannelResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteSmsChannelResponse.class);    }
public TrackingRefUpdate GetTrackingRefUpdate() {        return trackingRefUpdate;    }
public void print(boolean b) {        print(Boolean.toString(b));    }
public IQueryNode getChild() {        return getChildren()[0];    }
public NotIgnoredFilter(int workdirTreeIndex) {        this.index = workdirTreeIndex;    }
public AreaRecord(RecordInputStream in1) {        field_1_formatFlags = in1.readShort();    }
public GetThumbnailRequest() {      super("CloudPhoto", "2017-07-11", "GetThumbnail", "cloudphoto", "openAPI");      setProtocol(ProtocolType.HTTPS);    }
public DescribeTransitGatewayVpcAttachmentsResponse describeTransitGatewayVpcAttachments(DescribeTransitGatewayVpcAttachmentsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeTransitGatewayVpcAttachmentsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeTransitGatewayVpcAttachmentsResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeTransitGatewayVpcAttachmentsResponse.class);    }
public PutVoiceConnectorStreamingConfigurationResponse PutVoiceConnectorStreamingConfiguration(PutVoiceConnectorStreamingConfigurationRequest request){        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(PutVoiceConnectorStreamingConfigurationRequestMarshaller.getInstance());        options.setResponseUnmarshaller(PutVoiceConnectorStreamingConfigurationResponseUnmarshaller.getInstance());        return invoke(request, options, PutVoiceConnectorStreamingConfigurationResponse.class);    }
public OrdRange getOrdRange(String dim) {        OrdRange result;        prefixToOrdRange.TryGetValue(dim, result);        return result;    }
@Override    public String toString() {        String symbol = "";        if (startIndex >= 0 && startIndex < ((ICharStream)InputStream).size()) {            symbol = ((ICharStream)InputStream).getText(Interval.of(startIndex, startIndex));            symbol = Utils.escapeWhitespace(symbol, false);        }        return String.format(Locale.getDefault(), "%s('%s')", Antlr4.Runtime.LexerNoViableAltException.class.getName(), symbol);    }
public E peek() {        return peekFirstImpl();    }
public CreateWorkspacesResponse createWorkspaces(CreateWorkspacesRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateWorkspacesRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateWorkspacesResponseUnmarshaller.getInstance());        return invoke(request, options, CreateWorkspacesResponse.class);    }
@Override    public Object clone() throws CloneNotSupportedException {        NumberFormatIndexRecord rec = new NumberFormatIndexRecord();        rec.field_1_formatIndex = field_1_formatIndex;        return rec;    }
public DescribeRepositoriesResponse describeRepositories(DescribeRepositoriesRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeRepositoriesRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeRepositoriesResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeRepositoriesResponse.class);    }    private <T> T invoke(DescribeRepositoriesRequest request, InvokeOptions options, Class<T> responseClass) {        // Your implementation for invoking the request with the given options and returning the response of type T.    }
public SparseIntArray(int initialCapacity) {        initialCapacity = android.util.@internal.ArrayUtils.idealIntArraySize(initialCapacity);        mKeys = new int[initialCapacity];        mValues = new int[initialCapacity];        mSize = 0;    }
@Override    public TokenStream create(TokenStream input) {        return new HyphenatedWordsFilter(input);    }
public CreateDistributionWithTagsResponse createDistributionWithTags(CreateDistributionWithTagsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateDistributionWithTagsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateDistributionWithTagsResponseUnmarshaller.getInstance());        return invoke(request, options, CreateDistributionWithTagsResponse.class);    }
public RandomAccessFile(String fileName, String mode) throws FileNotFoundException {        this(new java.io.File(fileName), mode);        throw new UnsupportedOperationException();    }
public DeleteWorkspaceImageResponse deleteWorkspaceImage(DeleteWorkspaceImageRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteWorkspaceImageRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteWorkspaceImageResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteWorkspaceImageResponse.class);    }
public static String toHex(int value) {        return toHex((long) value, 8);    }    public static String toHex(long value, int length) {        String hex = Long.toHexString(value);        while (hex.length() < length) {            hex = "0" + hex;        }        return hex;    }
public UpdateDistributionResponse updateDistribution(UpdateDistributionRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(UpdateDistributionRequestMarshaller.getInstance());        options.setResponseUnmarshaller(UpdateDistributionResponseUnmarshaller.getInstance());        return invoke(request, options, UpdateDistributionResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> responseType) {        // TODO: Implement the invoke method.    }
public HSSFColor GetColor(short index) {        if (index == HSSFColor.Automatic.Index) {            return HSSFColor.Automatic.GetInstance();        } else {            byte[] b = palette.GetColor(index);            if (b != null) {                return new CustomColor(index, b);            }        }        return null;    }
public ValueEval evaluate(ValueEval[] operands, int srcRow, int srcCol) {        throw new NotImplementedFunctionException(_functionName);    }
@Override    public void serialize(ILittleEndianOutput out1) {        out1.writeShort((short)field_1_number_crn_records);        out1.writeShort((short)field_2_sheet_table_index);    }
public DescribeDBEngineVersionsResponse describeDBEngineVersions() {        return describeDBEngineVersions(new DescribeDBEngineVersionsRequest());    }    public DescribeDBEngineVersionsResponse describeDBEngineVersions(DescribeDBEngineVersionsRequest request) {        // implementation goes here    }
public FormatRun(short character, short fontIndex) {        this._character = character;        this._fontIndex = fontIndex;    }
public static byte[] toBigEndianUtf16Bytes(char[] chars, int offset, int length) {        byte[] result = new byte[length * 2];        int end = offset + length;        int resultIndex = 0;        for (int i = offset; i < end; ++i) {            char ch = chars[i];            result[resultIndex++] = (byte)(ch >> 8);            result[resultIndex++] = (byte)ch;        }        return result;    }
public UploadArchiveResponse uploadArchive(UploadArchiveRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(UploadArchiveRequestMarshaller.getInstance());        options.setResponseUnmarshaller(UploadArchiveResponseUnmarshaller.getInstance());        return invoke(request, options, UploadArchiveResponse.class);    }
public List<IToken> GetHiddenTokensToLeft(int tokenIndex) {        return GetHiddenTokensToLeft(tokenIndex, -1);    }    public List<IToken> GetHiddenTokensToLeft(int tokenIndex, int channel) {        // implementation here    }
@Override    public boolean equals(Object obj) {        if (this == obj) {            return true;        }        if (!(obj instanceof AutomatonQuery)) {            return false;        }        AutomatonQuery other = (AutomatonQuery) obj;        if (!super.equals(obj)) {            return false;        }        if (!m_compiled.equals(other.m_compiled)) {            return false;        }        if (m_term == null) {            if (other.m_term != null) {                return false;            }        } else if (!m_term.equals(other.m_term)) {            return false;        }        return true;    }
public SpanQuery makeSpanClause() {        List<SpanQuery> spanQueries = new ArrayList<>();        for (Map.Entry<SpanQuery, Float> wsq : weightBySpanQuery.entrySet()) {            wsq.getKey().setBoost(wsq.getValue());            spanQueries.add(wsq.getKey());        }        if (spanQueries.size() == 1)            return spanQueries.get(0);        else            return new SpanOrQuery(spanQueries.toArray(new SpanQuery[spanQueries.size()]));    }
public StashCreateCommand stashCreate() {        return new StashCreateCommand(repo);    }
public FieldInfo FieldInfo(String fieldName){        FieldInfo ret;        byName.TryGetValue(fieldName, ret);        return ret;    }
public DescribeEventSourceResponse describeEventSource(DescribeEventSourceRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeEventSourceRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeEventSourceResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeEventSourceResponse.class);    }    @SuppressWarnings("unchecked")    private <T> T invoke(DescribeEventSourceRequest request, InvokeOptions options, Class<T> responseClass) {        // Implement the logic for invoking the service API with the given request and options,        // and returning the response of the specified class.        // This implementation is left as an exercise for the reader.    }
public GetDocumentAnalysisResponse getDocumentAnalysis(GetDocumentAnalysisRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetDocumentAnalysisRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetDocumentAnalysisResponseUnmarshaller.getInstance());        return invoke(request, options, GetDocumentAnalysisResponse.class);    }
public CancelUpdateStackResponse cancelUpdateStack(CancelUpdateStackRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CancelUpdateStackRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CancelUpdateStackResponseUnmarshaller.getInstance());        return invoke(request, options, CancelUpdateStackResponse.class);    }
public ModifyLoadBalancerAttributesResponse modifyLoadBalancerAttributes(ModifyLoadBalancerAttributesRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ModifyLoadBalancerAttributesRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ModifyLoadBalancerAttributesResponseUnmarshaller.getInstance());        return invoke(ModifyLoadBalancerAttributesResponse.class, request, options);    }
public SetInstanceProtectionResponse setInstanceProtection(SetInstanceProtectionRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(SetInstanceProtectionRequestMarshaller.getInstance());        options.setResponseUnmarshaller(SetInstanceProtectionResponseUnmarshaller.getInstance());        return invoke(request, options, SetInstanceProtectionResponse.class);    }
public ModifyDBProxyResponse modifyDBProxy(ModifyDBProxyRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ModifyDBProxyRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ModifyDBProxyResponseUnmarshaller.getInstance());        return invoke(request, options, ModifyDBProxyResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> responseType) {        // implement the invoke method here    }
public void Add(char[] output, int offset, int len, int endOffset, int posLength) {        if (count == outputs.length) {            CharsRef[] next = new CharsRef[ArrayUtil.oversize(1 + count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];            System.arraycopy(outputs, 0, next, 0, count);            outputs = next;        }        if (count == endOffsets.length) {            int[] next = new int[ArrayUtil.oversize(1 + count, RamUsageEstimator.NUM_BYTES_INT32)];            System.arraycopy(endOffsets, 0, next, 0, count);            endOffsets = next;        }        if (count == posLengths.length) {            int[] next = new int[ArrayUtil.oversize(1 + count, RamUsageEstimator.NUM_BYTES_INT32)];            System.arraycopy(posLengths, 0, next, 0, count);            posLengths = next;        }        if (outputs[count] == null) {            outputs[count] = new CharsRef();        }        outputs[count].copyChars(output, offset, len);        endOffsets[count] = endOffset;        posLengths[count] = posLength;        count++;    }
public FetchLibrariesRequest() {        super("CloudPhoto", "2017-07-11", "FetchLibraries", "cloudphoto", "openAPI");        setProtocol(ProtocolType.HTTPS);    }
@Override    public boolean exists() {        return objects.exists();    }
public FilterOutputStream(OutputStream out) {        this.out = out;    }
public class ScaleClusterRequest extends ApiRequest {        public ScaleClusterRequest() {            super("CS", "2015-12-15", "ScaleCluster", "cs", "openAPI");            UriPattern = "/clusters/[ClusterId]";            Method = MethodType.PUT;        }    }
public IDataValidationConstraint createTimeConstraint(int operatorType, String formula1, String formula2) {        return DVConstraint.createTimeConstraint(operatorType, formula1, formula2);    }
public ListObjectParentPathsResponse listObjectParentPaths(ListObjectParentPathsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ListObjectParentPathsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ListObjectParentPathsResponseUnmarshaller.getInstance());        return invoke(ListObjectParentPathsResponse.class, request, options);    }
public DescribeCacheSubnetGroupsResponse describeCacheSubnetGroups(DescribeCacheSubnetGroupsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeCacheSubnetGroupsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeCacheSubnetGroupsResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeCacheSubnetGroupsResponse.class);    }
public void setSharedFormula(boolean flag) {        field_5_options = sharedFormula.setShortBoolean(field_5_options, flag);    }
public boolean IsReuseObjects() {        return reuseObjects;    }
public IErrorNode addErrorNode(IToken badToken) {        ErrorNodeImpl t = new ErrorNodeImpl(badToken);        addChild(t);        t.setParent(this);        return t;    }
public LatvianStemFilterFactory(IDictionary<String, String> args) {        super(args);        if (args.size() > 0) {            throw new IllegalArgumentException("Unknown parameters: " + args);        }    }
public RemoveSourceIdentifierFromSubscriptionResponse RemoveSourceIdentifierFromSubscription(RemoveSourceIdentifierFromSubscriptionRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(RemoveSourceIdentifierFromSubscriptionRequestMarshaller.getInstance());        options.setResponseUnmarshaller(RemoveSourceIdentifierFromSubscriptionResponseUnmarshaller.getInstance());        return invoke(request, options, RemoveSourceIdentifierFromSubscriptionResponse.class);    }
public static TokenFilterFactory forName(String name, Map<String, String> args) {        return loader.newInstance(name, args);    }
public class AddAlbumPhotosRequest extends CloudPhotoRequest {        public AddAlbumPhotosRequest() {            super("CloudPhoto", "2017-07-11", "AddAlbumPhotos", "cloudphoto", "openAPI");            setProtocol(ProtocolType.HTTPS);        }    }
public GetThreatIntelSetResponse getThreatIntelSet(GetThreatIntelSetRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetThreatIntelSetRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetThreatIntelSetResponseUnmarshaller.getInstance());        return invoke(request, options, GetThreatIntelSetResponse.class);    }
public TreeFilter clone() {        return new AndTreeFilter.Binary(a.clone(), b.clone());    }
@Override    public boolean equals(Object o) {        return o instanceof ArmenianStemmer;    }
@Override    public final boolean hasArray() {        return protectedHasArray();    }
public UpdateContributorInsightsResponse updateContributorInsights(UpdateContributorInsightsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(UpdateContributorInsightsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(UpdateContributorInsightsResponseUnmarshaller.getInstance());        return invoke(request, options, UpdateContributorInsightsResponse.class);    }
public void UnwriteProtectWorkbook() {        records.remove(fileShare);        records.remove(writeProtect);        fileShare = null;        writeProtect = null;    }
public SolrSynonymParser(boolean dedup, boolean expand, Analyzer analyzer) {        super(dedup, analyzer);        this.expand = expand;    }
public RequestSpotInstancesResponse requestSpotInstances(RequestSpotInstancesRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(RequestSpotInstancesRequestMarshaller.getInstance());        options.setResponseUnmarshaller(RequestSpotInstancesResponseUnmarshaller.getInstance());        return invoke(request, options, RequestSpotInstancesResponse.class);    }
public byte[] getObjectData() {        return findObjectRecord().getObjectData();    }
public GetContactAttributesResponse getContactAttributes(GetContactAttributesRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetContactAttributesRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetContactAttributesResponseUnmarshaller.getInstance());        return invoke(request, options, GetContactAttributesResponse.class);    }
@Override    public String toString() {        return getKey() + ": " + getValue();    }
public ListTextTranslationJobsResponse listTextTranslationJobs(ListTextTranslationJobsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ListTextTranslationJobsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ListTextTranslationJobsResponseUnmarshaller.getInstance());        return invoke(request, options, ListTextTranslationJobsResponse.class);    }
public GetContactMethodsResponse getContactMethods(GetContactMethodsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetContactMethodsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetContactMethodsResponseUnmarshaller.getInstance());        return invoke(request, options, GetContactMethodsResponse.class);    }
public static short LookupIndexByName(String name){        FunctionMetadata fd = GetInstance().GetFunctionByNameInternal(name);        if (fd == null){            return -1;        }        return (short)fd.Index;    }
public DescribeAnomalyDetectorsResponse describeAnomalyDetectors(DescribeAnomalyDetectorsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeAnomalyDetectorsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeAnomalyDetectorsResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeAnomalyDetectorsResponse.class);    }
public static String InsertId(String message, ObjectId changeId) {        return InsertId(message, changeId, false);    }    private static String InsertId(String message, ObjectId changeId, boolean flag) {        // implementation code here    }
@Override    public long getObjectSize(AnyObjectId objectId, int typeHint) throws IOException, MissingObjectException {        long sz = db.getObjectSize(this, objectId);        if (sz < 0) {            if (typeHint == OBJ_ANY) {                throw new MissingObjectException(objectId.copy(), "unknown");            }            throw new MissingObjectException(objectId.copy(), typeHint);        }        return sz;    }
public ImportInstallationMediaResponse importInstallationMedia(ImportInstallationMediaRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ImportInstallationMediaRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ImportInstallationMediaResponseUnmarshaller.getInstance());        return invoke(request, options, ImportInstallationMediaResponse.class);    }
public PutLifecycleEventHookExecutionStatusResponse putLifecycleEventHookExecutionStatus(PutLifecycleEventHookExecutionStatusRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(PutLifecycleEventHookExecutionStatusRequestMarshaller.getInstance());        options.setResponseUnmarshaller(PutLifecycleEventHookExecutionStatusResponseUnmarshaller.getInstance());        return invoke(request, options, PutLifecycleEventHookExecutionStatusResponse.class);    }    private <T> T invoke(Request request, InvokeOptions options, Class<T> responseClass) {        // Your code to make the actual request and return the response        // It's not clear from the given code how the request is being sent, so I'm omitting that part.    }
// Java equivalent code    public NumberPtg(ILittleEndianInput in1){        field_1_value = in1.readDouble();    }
public GetFieldLevelEncryptionConfigResponse getFieldLevelEncryptionConfig(GetFieldLevelEncryptionConfigRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetFieldLevelEncryptionConfigRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetFieldLevelEncryptionConfigResponseUnmarshaller.getInstance());        return invoke(request, options, GetFieldLevelEncryptionConfigResponse.class);    }
public DescribeDetectorResponse describeDetector(DescribeDetectorRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeDetectorRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeDetectorResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeDetectorResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> responseType) {        // Implementation of the invoke method goes here.        // This code is not provided in the original C# code.    }
public ReportInstanceStatusResponse reportInstanceStatus(ReportInstanceStatusRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ReportInstanceStatusRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ReportInstanceStatusResponseUnmarshaller.getInstance());        return invoke(request, options, ReportInstanceStatusResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> responseClass) {        // Implementation of the 'invoke' method is omitted as it depends on the specifics of your codebase        // and the libraries you are using for web service communication.        // It should call the appropriate method to send the request and receive the response using the        // provided options and return the unmarshalled response object.        // The response object should be an instance of the specified response class (ReportInstanceStatusResponse in this case).        return null;    }
public DeleteAlarmResponse deleteAlarm(DeleteAlarmRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteAlarmRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteAlarmResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteAlarmResponse.class);    }
@Override    public TokenStream create(TokenStream input) {        return new PortugueseStemFilter(input);    }
public FtCblsSubRecord() {        reserved = new byte[ENCODED_SIZE];    }
public synchronized boolean remove(Object object) {        return c.remove(object);    }
public GetDedicatedIpResponse getDedicatedIp(GetDedicatedIpRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetDedicatedIpRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetDedicatedIpResponseUnmarshaller.getInstance());        return invoke(request, options, GetDedicatedIpResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> clazz) {        // implementation of the invoke method        // ...    }
@Override    public String toString() {        return precedence + " >= _p";    }
public ListStreamProcessorsResponse listStreamProcessors(ListStreamProcessorsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ListStreamProcessorsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ListStreamProcessorsResponseUnmarshaller.getInstance());        return invoke(request, options, ListStreamProcessorsResponse.class);    }    private <T> T invoke(Request request, InvokeOptions options, Class<T> clazz) {        // Add implementation for invoke() method    }
public class DeleteLoadBalancerPolicyRequest {        private String loadBalancerName;        private String policyName;        public DeleteLoadBalancerPolicyRequest(String loadBalancerName, String policyName) {            this.loadBalancerName = loadBalancerName;            this.policyName = policyName;        }    }
public class WindowProtectRecord {        private int _options;                public WindowProtectRecord(int options) {            _options = options;        }    }
public UnbufferedCharStream(int bufferSize){        n = 0;        data = new int[bufferSize];    }
public GetOperationsResponse getOperations(GetOperationsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetOperationsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetOperationsResponseUnmarshaller.getInstance());        return invoke(request, options, GetOperationsResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> responseType) {        // implementation of invoke method    }
public void copyRawTo(byte[] b, int o) {        NB.encodeInt32(b, o, w1);        NB.encodeInt32(b, o + 4, w2);        NB.encodeInt32(b, o + 8, w3);        NB.encodeInt32(b, o + 12, w4);        NB.encodeInt32(b, o + 16, w5);    }
public WindowOneRecord(RecordInputStream in1) {        field_1_h_hold = in1.readShort();        field_2_v_hold = in1.readShort();        field_3_width = in1.readShort();        field_4_height = in1.readShort();        field_5_options = in1.readShort();        field_6_active_sheet = in1.readShort();        field_7_first_visible_tab = in1.readShort();        field_8_num_selected_tabs = in1.readShort();        field_9_tab_width_ratio = in1.readShort();    }
public StopWorkspacesResponse stopWorkspaces(StopWorkspacesRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(StopWorkspacesRequestMarshaller.getInstance());        options.setResponseUnmarshaller(StopWorkspacesResponseUnmarshaller.getInstance());        return invoke(request, options, StopWorkspacesResponse.class);    }
public void close() throws IOException {        if (isOpen) {            isOpen = false;            try {                dump();            } finally {                try {                    channel.truncate(fileLength);                } finally {                    try {                        channel.close();                    } finally {                        fos.close();                    }                }            }        }    }
public DescribeMatchmakingRuleSetsResponse describeMatchmakingRuleSets(DescribeMatchmakingRuleSetsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeMatchmakingRuleSetsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeMatchmakingRuleSetsResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeMatchmakingRuleSetsResponse.class);    }
public String GetPronunciation(int wordId, char[] surface, int off, int len) {        return null;    }
public String GetPath() {        return pathStr;    }
public static double devsq(double[] v) {        double r = Double.NaN;        if (v != null && v.length >= 1) {            double m = 0;            double s = 0;            int n = v.length;            for (int i = 0; i < n; i++) {                s += v[i];            }            m = s / n;            s = 0;            for (int i = 0; i < n; i++) {                s += (v[i] - m) * (v[i] - m);            }            r = (n == 1) ? 0 : s;        }        return r;    }
public DescribeResizeResponse describeResize(DescribeResizeRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeResizeRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeResizeResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeResizeResponse.class);    }
public boolean hasPassedThroughNonGreedyDecision() {        return passedThroughNonGreedyDecision;    }
public int end() {        return end(0);    }
public void traverse(ICellHandler handler) {        int firstRow = range.getFirstRow();        int lastRow = range.getLastRow();        int firstColumn = range.getFirstColumn();        int lastColumn = range.getLastColumn();        int width = lastColumn - firstColumn + 1;        SimpleCellWalkContext ctx = new SimpleCellWalkContext();        IRow currentRow = null;        ICell currentCell = null;        for (ctx.rowNumber = firstRow; ctx.rowNumber <= lastRow; ++ctx.rowNumber) {            currentRow = sheet.getRow(ctx.rowNumber);            if (currentRow == null) {                continue;            }            for (ctx.colNumber = firstColumn; ctx.colNumber <= lastColumn; ++ctx.colNumber) {                currentCell = currentRow.getCell(ctx.colNumber);                if (currentCell == null) {                    continue;                }                if (isEmpty(currentCell) && !traverseEmptyCells) {                    continue;                }                ctx.ordinalNumber = (ctx.rowNumber - firstRow) * width + (ctx.colNumber - firstColumn + 1);                handler.onCell(currentCell, ctx);            }        }    }
public int GetReadIndex() {        return _ReadIndex;    }
public int compareTo(ScoreTerm other) {        if (Term.bytesEquals(other.Term)) {            return 0;        }        if (this.Boost == other.Boost) {            return other.Term.compareTo(this.Term);        } else {            return this.Boost.compareTo(other.Boost);        }    }
public int Normalize(char[] s, int len) {        for (int i = 0; i < len; i++) {            switch (s[i]) {                case FARSI_YEH:                case YEH_BARREE:                    s[i] = YEH;                    break;                case KEHEH:                    s[i] = KAF;                    break;                case HEH_YEH:                case HEH_GOAL:                    s[i] = HEH;                    break;                case HAMZA_ABOVE:                    len = StemmerUtil.Delete(s, i, len);                    i--;                    break;                default:                    break;            }        }        return len;    }
@Override    public void Serialize(ILittleEndianOutput out1) {        out1.WriteShort(_options);    }
public DiagnosticErrorListener(boolean exactOnly){        this.exactOnly = exactOnly;    }
public KeySchemaElement(String attributeName, KeyType keyType) {        _attributeName = attributeName;        _keyType = keyType;    }
public GetAssignmentResponse getAssignment(GetAssignmentRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetAssignmentRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetAssignmentResponseUnmarshaller.getInstance());        return invoke(request, options, GetAssignmentResponse.class);    }
public boolean hasObject(AnyObjectId id) {        return findOffset(id) != -1;    }    public int findOffset(AnyObjectId id) {        //implementation of findOffset method    }
public GroupingSearch setAllGroups(boolean allGroups) {        this.allGroups = allGroups;        return this;    }
public void setMultiValued(String dimName, boolean v) {        synchronized (this) {            DimConfig fieldType = fieldTypes.get(dimName);            if (fieldType == null) {                fieldTypes.put(dimName, new DimConfig(v));            } else {                fieldType.setMultiValued(v);            }        }    }    private static class DimConfig {        private boolean isMultiValued;        public DimConfig(boolean isMultiValued) {            this.isMultiValued = isMultiValued;        }        public boolean isMultiValued() {            return isMultiValued;        }        public void setMultiValued(boolean isMultiValued) {            this.isMultiValued = isMultiValued;        }    }    private Map<String, DimConfig> fieldTypes = new HashMap<>();
public int GetCellsVal() {        int size = 0;        for (char c : cells.keySet()) {            Cell e = At(c);            if (e.cmd >= 0) {                size++;            }        }        return size;    }
public DeleteVoiceConnectorResponse deleteVoiceConnector(DeleteVoiceConnectorRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteVoiceConnectorRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteVoiceConnectorResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteVoiceConnectorResponse.class);    }
public DeleteLifecyclePolicyResponse deleteLifecyclePolicy(DeleteLifecyclePolicyRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteLifecyclePolicyRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteLifecyclePolicyResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteLifecyclePolicyResponse.class);    }    private <T> T invoke(Request request, InvokeOptions options, Class<T> responseClass) {        // Implementation of the `invoke` method goes here.    }
public void Write(byte[] b) {        int len = b.length;        CheckPosition(len);        System.arraycopy(b, 0, _buf, _writeIndex, len);        _writeIndex += len;    }
public RebaseResult GetRebaseResult() {        return this.rebaseResult;    }
public static int getNearestSetSize(int maxNumberOfValuesExpected, float desiredSaturation) {        for (int t : _usableBitSetSizes) {            int numSetBitsAtDesiredSaturation = (int) (t * desiredSaturation);            int estimatedNumUniqueValues = getEstimatedNumberUniqueValuesAllowingForCollisions(t, numSetBitsAtDesiredSaturation);            if (estimatedNumUniqueValues > maxNumberOfValuesExpected) {                return t;            }        }        return -1;    }
public DescribeDashboardResponse describeDashboard(DescribeDashboardRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeDashboardRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeDashboardResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeDashboardResponse.class);    }    private <T> T invoke(DescribeDashboardRequest request, InvokeOptions options, Class<T> clazz) {        // implementation details    }
public CreateSegmentResponse createSegment(CreateSegmentRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateSegmentRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateSegmentResponseUnmarshaller.getInstance());        return invoke(request, options, CreateSegmentResponse.class);    }
@Override    public String toString() {        StringBuilder buffer = new StringBuilder();        buffer.append("[DBCELL]\n");        buffer.append("    .rowoffset       = ").append(StringUtil.toHexString(RowOffset)).append("\n");        for (int k = 0; k < field_2_cell_offsets.length; k++) {            buffer.append("    .cell_").append(k).append(" = ").append(HexDump.shortToHex(field_2_cell_offsets[k])).append("\n");        }        buffer.append("[/DBCELL]\n");        return buffer.toString();    }
public List<String> GetUndeletedList() {        return undeletedList;    }
@Override    public String toString() {        return "[INTERFACEEND/]\n";    }
@Override    public Object clone() throws CloneNotSupportedException {        return super.clone();    }
public PlainTextDictionary(TextReader reader) {        in = reader;    }
public StringBuilder append(CharSequence csq) {        if (csq == null) {            appendNull();        } else {            append0(csq, 0, csq.length());        }        return this;    }
public ListAssociatedStacksResponse listAssociatedStacks(ListAssociatedStacksRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ListAssociatedStacksRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ListAssociatedStacksResponseUnmarshaller.getInstance());        return invoke(request, options, ListAssociatedStacksResponse.class);    }
public static double avedev(double[] v) {        double r = 0;        double m = 0;        double s = 0;        for (int i = 0, iSize = v.length; i < iSize; i++) {            s += v[i];        }        m = s / v.length;        s = 0;        for (int i = 0, iSize = v.length; i < iSize; i++) {            s += Math.abs(v[i] - m);        }        r = s / v.length;        return r;    }
public DescribeByoipCidrsResponse describeByoipCidrs(DescribeByoipCidrsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeByoipCidrsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeByoipCidrsResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeByoipCidrsResponse.class);    }
public GetDiskResponse getDisk(GetDiskRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetDiskRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetDiskResponseUnmarshaller.getInstance());        return invoke(request, options, GetDiskResponse.class);    }    @SuppressWarnings("unchecked")    private <T> T invoke(Object request, InvokeOptions options, Class<T> responseType) {        // your implementation for invoking the request goes here    }
public CreateDBClusterParameterGroupResponse createDBClusterParameterGroup(CreateDBClusterParameterGroupRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateDBClusterParameterGroupRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateDBClusterParameterGroupResponseUnmarshaller.getInstance());        return invoke(request, options, CreateDBClusterParameterGroupResponse.class);    }    private <T> T invoke(Request<T> request, InvokeOptions options, Class<T> responseClass) {        // implementation of the invoke method goes here    }
public static java.nio.CharBuffer wrap(char[] array_1, int start, int charCount) {        java.util.Arrays.checkOffsetAndCount(array_1.length, start, charCount);        java.nio.CharBuffer buf = java.nio.ReadWriteCharArrayBuffer.wrap(array_1);        buf.position(start);        buf.limit(start + charCount);        return buf;    }
public SubmoduleStatusType getType() {        return type;    }
public DescribeGameServerGroupResponse describeGameServerGroup(DescribeGameServerGroupRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeGameServerGroupRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeGameServerGroupResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeGameServerGroupResponse.class);    }
public java.util.regex.Pattern pattern() {        return _pattern;    }
public V setValue(V object) {        throw new UnsupportedOperationException();    }
public StringBuilder stem(String word) {        String cmd = stemmer.getLastOnPath(word);        if (cmd == null)            return null;        buffer.setLength(0);        buffer.append(word);        diff.apply(buffer, cmd);        if (buffer.length() > 0)            return buffer;        else            return null;    }
public RenameFaceRequest() {        super("CloudPhoto", "2017-07-11", "RenameFace", "cloudphoto", "openAPI");        setProtocol(ProtocolType.HTTPS);    }
public char requireChar(Map<String, String> args, String name) {        return require(args, name).charAt(0);    }    private String require(Map<String, String> args, String name) {        String value = args.get(name);        if (value == null) {            throw new IllegalArgumentException("Argument '" + name + "' is required.");        }        return value;    }
public static String toStringTree(ITree t) {        return toStringTree(t, (List<String>)null);    }    public static String toStringTree(ITree t, List<String> ruleNames) {        // implementation here    }
@Override    public String toString() {        return "<deleted/>";    }
public class GetRepoWebhookLogListRequest extends BaseRequest {        public GetRepoWebhookLogListRequest() {            super("cr", "2016-06-07", "GetRepoWebhookLogList", "cr", "openAPI");            setUriPattern("/repos/[RepoNamespace]/[RepoName]/webhooks/[WebhookId]/logs");            setMethod(MethodType.GET);        }    }
public GetJobUnlockCodeResponse getJobUnlockCode(GetJobUnlockCodeRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetJobUnlockCodeRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetJobUnlockCodeResponseUnmarshaller.getInstance());        return invoke(request, options, GetJobUnlockCodeResponse.class);    }
public class RemoveTagsRequest {        private String resourceId;        public RemoveTagsRequest(String resourceId) {            this.resourceId = resourceId;        }    }
public short getGB2312Id(char ch) throws Exception {        try {            byte[] buffer = Charset.forName("GB2312").encode(String.valueOf(ch)).array();            if (buffer.length != 2) {                return -1;            }            int b0 = (buffer[0] & 0x0FF) - 161;            int b1 = (buffer[1] & 0x0FF) - 161;            return (short)(b0 * 94 + b1);        } catch (Exception e) {            throw new Exception(e);        }    }
public NGit.BatchRefUpdate addCommand(Collection<ReceiveCommand> cmd) {        commands.addAll(cmd);        return this;    }
public int CheckExternSheet(int sheetNumber) {        return OrCreateLinkTable.CheckExternSheet(sheetNumber);    }
@Override    public boolean equals(Object object) {        return c.equals(object);    }
public Query build(IQueryNode queryNode) {        AnyQueryNode andNode = (AnyQueryNode) queryNode;        BooleanQuery bQuery = new BooleanQuery();        List<IQueryNode> children = andNode.getChildren();        if (children != null) {            for (IQueryNode child : children) {                Object obj = child.getTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);                if (obj != null) {                    Query query = (Query) obj;                    try {                        bQuery.add(query, Occur.SHOULD);                    } catch (BooleanQuery.TooManyClausesException ex) {                        throw new QueryNodeException(new Message(QueryParserMessages.EMPTY_MESSAGE), ex);                    }                }            }        }        bQuery.setMinimumNumberShouldMatch(andNode.getMinimumMatchingElements());        return bQuery;    }
public DescribeStreamProcessorResponse describeStreamProcessor(DescribeStreamProcessorRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeStreamProcessorRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeStreamProcessorResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeStreamProcessorResponse.class);    }
public DescribeDashboardPermissionsResponse describeDashboardPermissions(DescribeDashboardPermissionsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeDashboardPermissionsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeDashboardPermissionsResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeDashboardPermissionsResponse.class);    }
public Ref peel(Ref ref) {        try {            return RefDatabase.peel(ref);        } catch (IOException e) {            return ref;        }    }
public long RamBytesUsed() {        return RamUsageEstimator.AlignObjectSize(RamUsageEstimator.NUM_BYTES_OBJECT_HEADER + 2 * RamUsageEstimator.NUM_BYTES_INT32 + RamUsageEstimator.NUM_BYTES_OBJECT_REF) + RamUsageEstimator.SizeOf(blocks);    }
public GetDomainSuggestionsResponse getDomainSuggestions(GetDomainSuggestionsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetDomainSuggestionsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetDomainSuggestionsResponseUnmarshaller.getInstance());        return invoke(request, options, GetDomainSuggestionsResponse.class);    }    private <T> T invoke(GetDomainSuggestionsRequest request, InvokeOptions options, Class<T> responseType) {        // Implementation of the invoke method in Java, which corresponds to the C# Invoke<T> method.        // Add your implementation here.        // ...    }
public DescribeStackEventsResponse describeStackEvents(DescribeStackEventsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeStackEventsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeStackEventsResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeStackEventsResponse.class);    }
public void setRule(int idx, IConditionalFormattingRule cfRule) {        setRule(idx, (HSSFConditionalFormattingRule)cfRule);    }
public CreateResolverRuleResponse createResolverRule(CreateResolverRuleRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateResolverRuleRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateResolverRuleResponseUnmarshaller.getInstance());        return invoke(request, options, CreateResolverRuleResponse.class);    }    public <T> T invoke(CreateResolverRuleRequest request, InvokeOptions options, Class<T> responseClass) {        // Implementation of the invoke method here        // ...    }
public SeriesIndexRecord(RecordInputStream in1) {        field_1_index = in1.readShort();    }
public GetStylesRequest() {        super("lubancloud", "2018-05-09", "GetStyles", "luban", "openAPI");        setMethod(MethodType.POST);    }
@Override    public void Serialize(ILittleEndianOutput out1){        out1.WriteShort(field_1_gridset_flag);    }
@Override    public boolean equals(Object obj) {        if (this == obj) {            return true;        }        if (obj == null || getClass() != obj.getClass()) {            return false;        }        Toffs other = (Toffs) obj;        if (StartOffset != other.StartOffset) {            return false;        }        if (EndOffset != other.EndOffset) {            return false;        }        return true;    }
public CreateGatewayGroupResponse createGatewayGroup(CreateGatewayGroupRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateGatewayGroupRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateGatewayGroupResponseUnmarshaller.getInstance());        return invoke(request, options, CreateGatewayGroupResponse.class);    }
public CreateParticipantConnectionResponse createParticipantConnection(CreateParticipantConnectionRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateParticipantConnectionRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateParticipantConnectionResponseUnmarshaller.getInstance());        return invoke(request, options, CreateParticipantConnectionResponse.class);    }
public static double irr(double[] income) {        return irr(income, 0.1d);    }
public RegisterWorkspaceDirectoryResponse registerWorkspaceDirectory(RegisterWorkspaceDirectoryRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(RegisterWorkspaceDirectoryRequestMarshaller.getInstance());        options.setResponseUnmarshaller(RegisterWorkspaceDirectoryResponseUnmarshaller.getInstance());        return invoke(request, options, RegisterWorkspaceDirectoryResponse.class);    }
public NGit.Api.RevertCommand include(Ref commit) {        checkCallable();        commits.addItem(commit);        return this;    }    public void checkCallable() {        // implementation    }
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval inumberVE) {        ValueEval veText1;        try {            veText1 = OperandResolver.getSingleValue(inumberVE, srcRowIndex, srcColumnIndex);        } catch (EvaluationException e) {            return e.getErrorEval();        }        String iNumber = OperandResolver.coerceValueToString(veText1);        Matcher m = COMPLEX_NUMBER_PATTERN.matcher(iNumber);        boolean result = m.matches() && m.group(0).length() > 0;        String imaginary = "";        if (result) {            String imaginaryGroup = m.group(5);            boolean hasImaginaryPart = imaginaryGroup.equals("i") || imaginaryGroup.equals("j");            if (imaginaryGroup.length() == 0) {                return new StringEval(String.valueOf(0));            }            if (hasImaginaryPart) {                String sign = "";                String imaginarySign = m.group(GROUP3_IMAGINARY_SIGN);                if (imaginarySign.length() != 0 && !imaginarySign.equals("+")) {                    sign = imaginarySign;                }                String groupImaginaryNumber = m.group(GROUP4_IMAGINARY_INTEGER_OR_DOUBLE);                if (groupImaginaryNumber.length() != 0) {                    imaginary = sign + groupImaginaryNumber;                } else {                    imaginary = sign + "1";                }            }        } else {            return ErrorEval.NUM_ERROR;        }        return new StringEval(imaginary);    }
public E pollLast() {        java.util.Map.Entry<E, Object> entry = backingMap.pollLastEntry();        return (entry == null) ? null : entry.getKey();    }
public int ReadUShort() {        int ch1 = ReadUByte();        int ch2 = ReadUByte();        return (ch2 << 8) + (ch1 << 0);    }
public ModifySnapshotAttributeRequest(String snapshotId, SnapshotAttributeName attribute, OperationType operationType) {        this._snapshotId = snapshotId;        this._attribute = attribute;        this._operationType = operationType;    }
public ListBonusPaymentsResponse listBonusPayments(ListBonusPaymentsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ListBonusPaymentsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ListBonusPaymentsResponseUnmarshaller.getInstance());        return invoke(request, options, ListBonusPaymentsResponse.class);    }
public V Get(char[] text) {        if (text == null) {            throw new IllegalArgumentException("text");        }        return null;    }
@Override    public TokenStream create(TokenStream input) {        CommonGramsFilter commonGrams = (CommonGramsFilter)super.create(input);        return new CommonGramsQueryFilter(commonGrams);    }
public String getPath() {        return path;    }
public InitiateMultipartUploadResponse initiateMultipartUpload(InitiateMultipartUploadRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(InitiateMultipartUploadRequestMarshaller.getInstance());        options.setResponseUnmarshaller(InitiateMultipartUploadResponseUnmarshaller.getInstance());        return invoke(request, options, InitiateMultipartUploadResponse.class);    }    private <T> T invoke(Request<?> request, InvokeOptions options, Class<T> clazz) {        // implementation of the invoke method    }
public StringBuilder insert(int offset, int i) {        insert0(offset, Integer.toString(i));        return this;    }
public void Decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {        for (int i = 0; i < iterations; ++i) {            long block = blocks[blocksOffset++];            for (int shift = 62; shift >= 0; shift -= 2) {                values[valuesOffset++] = (int)(((block & (3L << shift)) >>> shift) & 3L);            }        }    }
@Override    public TokenStream create(TokenStream input) {        return new ElisionFilter(input, articles);    }
public boolean eat(Row in, int[] remap) {        int sum = 0;        for (Cell c : in.getCells().values()) {            sum += c.getCnt();            if (c.getRef() >= 0) {                if (remap[c.getRef()] == 0) {                    c.setRef(-1);                }            }        }        int frame = sum / 10;        boolean live = false;        for (Cell c : in.getCells().values()) {            if (c.getCnt() < frame && c.getCmd() >= 0) {                c.setCnt(0);                c.setCmd(-1);            }            if (c.getCmd() >= 0 || c.getRef() >= 0) {                live |= true;            }        }        return !live;    }
public Token getToken(int index) {        Token t = Token;        for (int i = 0; i < index; i++) {            if (t.Next != null)                t = t.Next;            else                t = t.Next = TokenSource.getNextToken();        }        return t;    }
public String toString() {        StringBuilder sb = new StringBuilder();        sb.append(getClass().getSimpleName()).append(" [ARRAY]\n");        sb.append(" range=").append(range.toString()).append("\n");        sb.append(" options=").append(HexDump.shortToHex(options)).append("\n");        sb.append(" notUsed=").append(HexDump.intToHex(field3notUsed)).append("\n");        sb.append(" formula:").append("\n");        Ptg[] ptgs = formula.getTokens();        for (int i = 0; i < ptgs.length; i++) {            Ptg ptg = ptgs[i];            sb.append(ptg.toString()).append(ptg.getRVAType()).append("\n");        }        sb.append("]");        return sb.toString();    }
public GetFolderResponse getFolder(GetFolderRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetFolderRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetFolderResponseUnmarshaller.getInstance());        return invoke(request, options, GetFolderResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> responseType) {        // implementation details not shown    }
public void add(int location, E object) throws NotSupportedException {        throw new NotSupportedException();    }
public PositiveScoresOnlyCollector(ICollector c) {        this.c = c;    }
public CreateRepoBuildRuleRequest() : base("cr", "2016-06-07", "CreateRepoBuildRule", "cr", "openAPI") {        UriPattern = "/repos/[RepoNamespace]/[RepoName]/rules";        Method = MethodType.PUT;    }
public BaseRef(RefEval re){        _refEval = re;        _areaEval = null;        _firstRowIndex = re.getRow();        _firstColumnIndex = re.getColumn();        _height = 1;        _width = 1;    }
public DrawingManager2(EscherDggRecord dgg) {        this.dgg = dgg;    }
public void reset() {        if (!first) {            reset(raw);        }    }
public java.nio.charset.CharsetDecoder reset() {        status = INIT;        implReset();        return this;    }
public BufferedReader(Reader in, int size) throws IllegalArgumentException {        super(in);        if (size <= 0) {            throw new IllegalArgumentException("size <= 0");        }        this.in = in;        buf = new char[size];    }
public DescribeCodeRepositoryResponse describeCodeRepository(DescribeCodeRepositoryRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeCodeRepositoryRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeCodeRepositoryResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeCodeRepositoryResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> responseClass) {        // implementation of invoke method goes here    }
public CreateDBSubnetGroupResponse createDBSubnetGroup(CreateDBSubnetGroupRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateDBSubnetGroupRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateDBSubnetGroupResponseUnmarshaller.getInstance());        return invoke(CreateDBSubnetGroupResponse.class, request, options);    }
public NGit.Api.RenameBranchCommand setOldName(String oldName) {        checkCallable();        this.oldName = oldName;        return this;    }
public NGit.Api.DeleteBranchCommand SetForce(boolean force) {        CheckCallable();        this.force = force;        return this;    }
public StopCompilationJobResponse stopCompilationJob(StopCompilationJobRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(StopCompilationJobRequestMarshaller.getInstance());        options.setResponseUnmarshaller(StopCompilationJobResponseUnmarshaller.getInstance());        return invoke(request, options, StopCompilationJobResponse.class);    }
public synchronized void incrementSecondaryProgressBy(int diff) {        setSecondaryProgress(mSecondaryProgress + diff);    }
@Override    public int[] Clear() {        return bytesStart = null;    }
public String getRawPath() {        return path;    }
public GetUserSourceAccountRequest() {      super("cr", "2016-06-07", "GetUserSourceAccount", "cr", "openAPI");      setUriPattern("/users/sourceAccount");      setMethod(MethodType.GET);    }
public CreateExportJobResponse createExportJob(CreateExportJobRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateExportJobRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateExportJobResponseUnmarshaller.getInstance());        return invoke(request, options, CreateExportJobResponse.class);    }
public CreateDedicatedIpPoolResponse createDedicatedIpPool(CreateDedicatedIpPoolRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateDedicatedIpPoolRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateDedicatedIpPoolResponseUnmarshaller.getInstance());        return invoke(request, options, CreateDedicatedIpPoolResponse.class);    }    @SuppressWarnings("unchecked")    private <T> T invoke(Object request, InvokeOptions options, Class<T> clazz) {        // Implement the logic for the invoke method here    }
@Override    public boolean equals(Object obj) {        if (this == obj)            return true;        if (obj == null)            return false;        if (obj instanceof HSSFCellStyle) {            HSSFCellStyle other = (HSSFCellStyle) obj;            if (_format == null) {                if (other._format != null)                    return false;            } else if (!_format.equals(other._format))                return false;            if (index != other.index)                return false;            return true;        }        return false;    }
public ReleaseHostsResponse releaseHosts(ReleaseHostsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ReleaseHostsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ReleaseHostsResponseUnmarshaller.getInstance());        return invoke(request, options, ReleaseHostsResponse.class);    }    private <T> T invoke(ReleaseHostsRequest request, InvokeOptions options, Class<T> responseClass) {        // implementation of the invoke method    }
@Override    public boolean equals(Object object) {        if (this == object) {            return true;        }        if (object instanceof java.util.Set<?>) {            java.util.Set<?> s = (java.util.Set<?>) object;            try {                return size() == s.size() && containsAll(s);            } catch (NullPointerException e) {                return false;            } catch (ClassCastException e) {                return false;            }        }        return false;    }
public void SetRefLogMessage(String msg, boolean appendStatus) {        if (msg == null && !appendStatus) {            DisableRefLog();        } else {            if (msg == null && appendStatus) {                refLogMessage = "";                refLogIncludeResult = true;            } else {                refLogMessage = msg;                refLogIncludeResult = appendStatus;            }        }    }
public StreamIDRecord(RecordInputStream in1) {        idstm = in1.readShort();    }
public RecognizeCarRequest() {      super("visionai-poc", "2020-04-08", "RecognizeCar");      setMethod(MethodType.POST);    }
public final java.nio.ByteOrder order() {        return java.nio.ByteOrder.nativeOrder();    }
public int getAheadCount() {        return aheadCount;    }
public boolean isNewFragment() {        return false;    }
public GetCloudFrontOriginAccessIdentityConfigResponse getCloudFrontOriginAccessIdentityConfig(GetCloudFrontOriginAccessIdentityConfigRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetCloudFrontOriginAccessIdentityConfigRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetCloudFrontOriginAccessIdentityConfigResponseUnmarshaller.getInstance());        return invoke(request, options, GetCloudFrontOriginAccessIdentityConfigResponse.class);    }
@Override    public boolean Matches(int symbol, int minVocabSymbol, int maxVocabSymbol) {        return token == symbol;    }
public DeleteTransitGatewayResponse deleteTransitGateway(DeleteTransitGatewayRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteTransitGatewayRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteTransitGatewayResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteTransitGatewayResponse.class);    }    private <T> T invoke(Request<?> request, InvokeOptions options, Class<T> clazz) {        // Implement invoke method here        // This method should call the appropriate AWS SDK method to execute the request    }
public static double[] grow(double[] array, int minSize) {        assert minSize >= 0 : "size must be positive (got " + minSize + "): likely integer overflow?";        if (array.length < minSize) {            double[] newArray = new double[oversize(minSize, RamUsageEstimator.NUM_BYTES_DOUBLE)];            System.arraycopy(array, 0, newArray, 0, array.length);            return newArray;        } else {            return array;        }    }    private static int oversize(int minTargetSize, int bytesPerElement) {        long newSize = (long) minTargetSize * (long) bytesPerElement;        if (newSize > Integer.MAX_VALUE) {            throw new IllegalArgumentException("requested array size exceeds VM limit");        }        int result = (int) newSize;        return result + result / 16;    }
public CreateTransactionRequest() {        super("CloudPhoto", "2017-07-11", "CreateTransaction", "cloudphoto", "openAPI");        setProtocol(ProtocolType.HTTPS);    }
public NGit.BatchRefUpdate setRefLogIdent(PersonIdent pi) {        refLogIdent = pi;        return this;    }
public GetLaunchTemplateDataResponse getLaunchTemplateData(GetLaunchTemplateDataRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetLaunchTemplateDataRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetLaunchTemplateDataResponseUnmarshaller.getInstance());        return invoke(request, options, GetLaunchTemplateDataResponse.class);    }    private <T> T invoke(Request<?> request, InvokeOptions options, Class<T> clazz) {        // code for invoking the request and returning the response    }
public ParseInfo(ProfilingATNSimulator atnSimulator) {        this.atnSimulator = atnSimulator;    }
public class SimpleQQParser {        private String[] qqNames;        private String indexField;        public SimpleQQParser(String[] qqNames, String indexField) {            this.qqNames = qqNames;            this.indexField = indexField;        }    }
public PromoteReadReplicaDBClusterResponse promoteReadReplicaDBCluster(PromoteReadReplicaDBClusterRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(PromoteReadReplicaDBClusterRequestMarshaller.getInstance());        options.setResponseUnmarshaller(PromoteReadReplicaDBClusterResponseUnmarshaller.getInstance());        return invoke(request, options, PromoteReadReplicaDBClusterResponse.class);    }    private <T> T invoke(Request request, InvokeOptions options, Class<T> responseClass) {        // implementation details omitted for brevity    }
public DescribeCapacityReservationsResponse describeCapacityReservations(DescribeCapacityReservationsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeCapacityReservationsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeCapacityReservationsResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeCapacityReservationsResponse.class);    }
@Override    public String toString() {        return "IndexSearcher(" + reader + "; executor=" + executor + ")";    }
@Override    public boolean incrementToken() {        return false;    }
public void Serialize(ILittleEndianOutput out1){        out1.WriteShort(main + 1);        out1.WriteShort(subFrom);        out1.WriteShort(subTo);    }
public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {        if (bitsPerValue > 32) {            throw new UnsupportedOperationException("Cannot decode " + bitsPerValue + "-bits values into an int[]");        }        for (int i = 0; i < iterations; ++i) {            long block = readInt64(blocks, blocksOffset);            blocksOffset += 8;            valuesOffset = decode(block, values, valuesOffset);        }    }
public boolean isExpectedToken(int symbol) {        ATN atn = interpreter.atn;        ParserRuleContext ctx = _ctx;        ATNState s = atn.states[State];        IntervalSet following = atn.nextTokens(s);        if (following.contains(symbol)) {            return true;        }        if (!following.contains(TokenConstants.EPSILON)) {            return false;        }        while (ctx != null && ctx.invokingState >= 0 && following.contains(TokenConstants.EPSILON)) {            ATNState invokingState = atn.states[ctx.invokingState];            RuleTransition rt = (RuleTransition)invokingState.transition(0);            following = atn.nextTokens(rt.followState);            if (following.contains(symbol)) {                return true;            }            ctx = (ParserRuleContext)ctx.getParent();        }        if (following.contains(TokenConstants.EPSILON) && symbol == TokenConstants.EOF) {            return true;        }        return false;    }
public UpdateStreamResponse updateStream(UpdateStreamRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(UpdateStreamRequestMarshaller.getInstance());        options.setResponseUnmarshaller(UpdateStreamResponseUnmarshaller.getInstance());        return invoke(request, options, UpdateStreamResponse.class);    }
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {        try {            OperandResolver.getSingleValue(arg0, srcRowIndex, srcColumnIndex);            return ErrorEval.NA;        } catch (EvaluationException e) {            int result = translateErrorCodeToErrorTypeValue(e.getErrorEval().getErrorCode());            return new NumberEval(result);        }    }    private int translateErrorCodeToErrorTypeValue(int errorCode) {        // implementation of translateErrorCodeToErrorTypeValue method    }
@Override    public String toString() {        StringBuilder sb = new StringBuilder(64);        sb.append(getClass().getSimpleName()).append(" [");        sb.append(_index).append(" ").append(_name);        sb.append("]");        return sb.toString();    }
public ListAssignmentsForHITResponse listAssignmentsForHIT(ListAssignmentsForHITRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ListAssignmentsForHITRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ListAssignmentsForHITResponseUnmarshaller.getInstance());        return invoke(request, options, ListAssignmentsForHITResponse.class);    }
public DeleteAccessControlRuleResponse deleteAccessControlRule(DeleteAccessControlRuleRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteAccessControlRuleRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteAccessControlRuleResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteAccessControlRuleResponse.class);    }
public FST.Arc<Long> getFirstArc(FST.Arc<Long> arc) {        return fst.getFirstArc(arc);    }
public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {        for (int i = 0; i < iterations; i++) {            long block = blocks[blocksOffset++];            for (int shift = 48; shift >= 0; shift -= 16) {                values[valuesOffset++] = (int) ((block >>> shift) & 65535);            }        }    }
public synchronized long skip(long charCount) throws IOException {        if (charCount < 0) {            throw new IllegalArgumentException("charCount < 0: " + charCount);        }        checkNotClosed();        if (charCount == 0) {            return 0;        }        long inSkipped;        int availableFromBuffer = buf.length - pos;        if (availableFromBuffer > 0) {            long requiredFromIn = charCount - availableFromBuffer;            if (requiredFromIn <= 0) {                pos += (int) charCount;                return charCount;            }            pos += availableFromBuffer;            inSkipped = in.skip(requiredFromIn);        } else {            inSkipped = in.skip(charCount);        }        return inSkipped + availableFromBuffer;    }
public Map<String, Ref> getRefsMap() {        return advertisedRefs;    }
public UpdateApiKeyResponse updateApiKey(UpdateApiKeyRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(UpdateApiKeyRequestMarshaller.getInstance());        options.setResponseUnmarshaller(UpdateApiKeyResponseUnmarshaller.getInstance());        return invoke(request, options, UpdateApiKeyResponse.class);    }
public ObjectStream OpenStream() {        WindowCursor wc = new WindowCursor(db);        InputStream inStream;        try {            inStream = new PackInputStream(pack, objectOffset + headerLength, wc);        } catch (IOException e) {            return wc.Open(GetObjectId(), type).OpenStream();        }        inStream = new BufferedInputStream(new InflaterInputStream(inStream, wc.Inflater(), 8192), 8192);        return new ObjectStream.Filter(type, size, inStream);    }
public ArrayList() {        array = libcore.util.EmptyArray.OBJECT;    }
public UpdateDetectorVersionResponse updateDetectorVersion(UpdateDetectorVersionRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(UpdateDetectorVersionRequestMarshaller.getInstance());        options.setResponseUnmarshaller(UpdateDetectorVersionResponseUnmarshaller.getInstance());        return invoke(request, options, UpdateDetectorVersionResponse.class);    }
public void Resize() {        Resize(Double.MAX_VALUE);    }
public RevFlagSet(Collection<RevFlag> s) {        super();        this.addAll(s);    }
@Override    public int size() {        return this._enclosing.size();    }
public synchronized long getLong() {        int newPosition = _position + libcore.io.SizeOf.LONG;        if (newPosition > _limit) {            throw new java.nio.BufferUnderflowException();        }        long result = libcore.io.Memory.peekLong(backingArray, offset + _position, _order);        _position = newPosition;        return result;    }
public java.lang.StringBuilder insert(int offset, long l) {        insert0(offset, Long.toString(l));        return this;    }
public TurkishLowerCaseFilter(TokenStream input) {        super(input);        termAtt = addAttribute(CharTermAttribute.class);    }
public ParseTreeMatch match(IParseTree tree, ParseTreePattern pattern) {        MultiMap<String, IParseTree> labels = new MultiMap<>();        IParseTree mismatchedNode = matchImpl(tree, pattern.getPatternTree(), labels);        return new ParseTreeMatch(tree, pattern, labels, mismatchedNode);    }    protected IParseTree matchImpl(IParseTree tree, ParseTree patternTree, MultiMap<String, IParseTree> labels) {        // implementation of MatchImpl method goes here    }
public void AddIfNoOverlap(WeightedPhraseInfo wpi) {        for (WeightedPhraseInfo existWpi : PhraseList) {            if (existWpi.IsOffsetOverlap(wpi)) {                existWpi.TermsInfos.addAll(wpi.TermsInfos);                return;            }        }        PhraseList.add(wpi);    }
@Override    public Merger NewMerger(Repository db) {        return new StrategySimpleTwoWayInCore.InCoreMerger(db);    }
public float DocScore(int docId, String field, int numPayloadsSeen, float payloadScore) {        return numPayloadsSeen > 0 ? (payloadScore / numPayloadsSeen) : 1;    }
@Override    public Collection<IParseTree> evaluate(IParseTree t) {        return Trees.findAllRuleNodes(t, ruleIndex);    }
@Override    public String toString() {        StringBuilder buffer = new StringBuilder();        buffer.append("[CFRULE]\n");        buffer.append("    .condition_type   =").append(field_1_condition_type).append("\n");        buffer.append("    OPTION FLAGS=0x").append(String.format("%X", Options)).append("\n");        if (ContainsFontFormattingBlock) {            buffer.append(_fontFormatting.toString()).append("\n");        }        if (ContainsBorderFormattingBlock) {            buffer.append(_borderFormatting.toString()).append("\n");        }        if (ContainsPatternFormattingBlock) {            buffer.append(_patternFormatting.toString()).append("\n");        }        buffer.append("    Formula 1 =").append(Arrays.toString(field_17_formula1.getTokens())).append("\n");        buffer.append("    Formula 2 =").append(Arrays.toString(field_18_formula2.getTokens())).append("\n");        buffer.append("[/CFRULE]\n");        return buffer.toString();    }
public DescribeServiceUpdatesResponse describeServiceUpdates(DescribeServiceUpdatesRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeServiceUpdatesRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeServiceUpdatesResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeServiceUpdatesResponse.class);    }    private <T> T invoke(DescribeServiceUpdatesRequest request, InvokeOptions options, Class<T> responseType) {        // implementation of invoke method    }
public String GetNameName(int index) {        String result = GetNameAt(index).getNameName();        return result;    }
public DescribeLocationsResponse describeLocations() {        return describeLocations(new DescribeLocationsRequest());    }    public DescribeLocationsResponse describeLocations(DescribeLocationsRequest request) {        // Implementation here        // ...    }
@Override    public String toString() {        return "<phraseslop value='" + getValueString() + "'>" + "\n" + getChild().toString() + "\n</phraseslop>";    }
public DirCacheEntry getDirCacheEntry() {        return currentSubtree == null ? currentEntry : null;    }
public java.nio.IntBuffer put(int[] src, int srcOffset, int intCount) {        java.util.Arrays.checkOffsetAndCount(src.length, srcOffset, intCount);        if (intCount > remaining()) {            throw new java.nio.BufferOverflowException();        }        for (int i = srcOffset; i < srcOffset + intCount; ++i) {            put(src[i]);        }        return this;    }
public void trimToSize() {        int s = size;        if (s == array.length) {            return;        }        if (s == 0) {            array = libcore.util.EmptyArray.OBJECT;        } else {            Object[] newArray = new Object[s];            System.arraycopy(array, 0, newArray, 0, s);            array = newArray;        }        modCount++;    }
public DescribeLocalGatewayVirtualInterfacesResponse describeLocalGatewayVirtualInterfaces(DescribeLocalGatewayVirtualInterfacesRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeLocalGatewayVirtualInterfacesRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeLocalGatewayVirtualInterfacesResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeLocalGatewayVirtualInterfacesResponse.class);    }
@Override    public TokenStream create(TokenStream input) {        return new RussianLightStemFilter(input);    }
public int[] toArray(int[] a) {        int[] rval;        if (a.length == _limit) {            System.arraycopy(_array, 0, a, 0, _limit);            rval = a;        } else {            rval = toArray();        }        return rval;    }
public BasicSessionCredentials(String accessKeyId, String accessKeySecret, String sessionToken, long roleSessionDurationSeconds) {        if (accessKeyId == null) {            throw new IllegalArgumentException("Access key ID cannot be null.");        }        if (accessKeySecret == null) {            throw new IllegalArgumentException("Access key secret cannot be null.");        }        this.accessKeyId = accessKeyId;        this.accessKeySecret = accessKeySecret;        this.sessionToken = sessionToken;        this.roleSessionDurationSeconds = roleSessionDurationSeconds;        sessionStartedTimeInMilliSeconds = System.currentTimeMillis();    }    public BasicSessionCredentials(String accessKeyId, String accessKeySecret, String sessionToken) {        this(accessKeyId, accessKeySecret, sessionToken, 0);    }
public final ShortBuffer get(short[] dst, int dstOffset, int shortCount) {        if (shortCount > remaining()) {            throw new BufferUnderflowException();        }        System.arraycopy(backingArray, offset + position(), dst, dstOffset, shortCount);        position(position() + shortCount);        return this;    }
public ActivateEventSourceResponse activateEventSource(ActivateEventSourceRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ActivateEventSourceRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ActivateEventSourceResponseUnmarshaller.getInstance());        return invoke(request, options, ActivateEventSourceResponse.class);    }    private <T> T invoke(ActivateEventSourceRequest request, InvokeOptions options, Class<T> responseType) {        // implementation details for invoking request and parsing response go here    }
public DescribeReceiptRuleSetResponse describeReceiptRuleSet(DescribeReceiptRuleSetRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeReceiptRuleSetRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeReceiptRuleSetResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeReceiptRuleSetResponse.class);    }    private <T> T invoke(Request<?> request, InvokeOptions options, Class<T> responseType) {        // implementation of the invoke method    }
public class Filter {        private String name;        public Filter(String name) {            this.name = name;        }    }
public java.nio.DoubleBuffer put(double c) {        throw new java.nio.ReadOnlyBufferException();    }
public CreateTrafficPolicyInstanceResponse createTrafficPolicyInstance(CreateTrafficPolicyInstanceRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateTrafficPolicyInstanceRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateTrafficPolicyInstanceResponseUnmarshaller.getInstance());        return invoke(request, options, CreateTrafficPolicyInstanceResponse.class);    }
public JapaneseIterationMarkCharFilter(Reader input, boolean normalizeKanji, boolean normalizeKana) {        super(input);        this.normalizeKanji = normalizeKanji;        this.normalizeKana = normalizeKana;        buffer.reset(input);    }
public void writeLong(long v) {        writeInt((int)(v >> 0));        writeInt((int)(v >> 32));    }
public class FileResolver {      private ConcurrentHashMap<String, Repository> exports;      private CopyOnWriteArrayList<FilePath> exportBase;            public FileResolver() {        exports = new ConcurrentHashMap<>();        exportBase = new CopyOnWriteArrayList<>();      }    }
public ValueEval getRef3DEval(Ref3DPtg rptg) {        SheetRangeEvaluator sre = createExternSheetRefEvaluator(rptg.getExternSheetIndex());        return new LazyRefEval(rptg.getRow(), rptg.getColumn(), sre);    }
public DeleteDatasetResponse deleteDataset(DeleteDatasetRequest request){      InvokeOptions options = new InvokeOptions();      options.setRequestMarshaller(DeleteDatasetRequestMarshaller.getInstance());      options.setResponseUnmarshaller(DeleteDatasetResponseUnmarshaller.getInstance());      return invoke(request, options, DeleteDatasetResponse.class);    }    private <T> T invoke(Request<T> request, InvokeOptions options, Class<T> responseClass) {      // Implementation of invoke method    }
public StartRelationalDatabaseResponse startRelationalDatabase(StartRelationalDatabaseRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(StartRelationalDatabaseRequestMarshaller.getInstance());        options.setResponseUnmarshaller(StartRelationalDatabaseResponseUnmarshaller.getInstance());        return invoke(request, options, StartRelationalDatabaseResponse.class);    }    private <T> T invoke(Request<?> request, InvokeOptions options, Class<T> responseType) {        AWSRequestMetrics awsRequestMetrics = options.getRequestMetrics() == null ? AWSRequestMetrics.NONE : options.getRequestMetrics();        ExecutionContext executionContext = createExecutionContext(request, awsRequestMetrics);        return doInvoke(request, executionContext, responseType);    }    private <T> T doInvoke(Request<?> request, ExecutionContext executionContext, Class<T> responseType) {        request.setEndpoint(endpoint);        request.setTimeOffset(timeOffset);        Response<T> response = null;        try {            response = client.execute(request, responseType, executionContext);        } catch (AmazonClientException e) {            throw handleException(e);        }        return response.getAwsResponse();    }
public DescribeReservedCacheNodesOfferingsResponse describeReservedCacheNodesOfferings() {        return describeReservedCacheNodesOfferings(new DescribeReservedCacheNodesOfferingsRequest());    }    public DescribeReservedCacheNodesOfferingsResponse describeReservedCacheNodesOfferings(DescribeReservedCacheNodesOfferingsRequest request) {        // method implementation here    }
static public double PMT(double r, int nper, double pv, double fv, int type) {        double pmt = -r * (pv * Math.pow(1 + r, nper) + fv) / ((1 + r * type) * (Math.pow(1 + r, nper) - 1));        return pmt;    }
public DescribeDocumentVersionsResponse describeDocumentVersions(DescribeDocumentVersionsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeDocumentVersionsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeDocumentVersionsResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeDocumentVersionsResponse.class);    }
public ListPublishingDestinationsResponse listPublishingDestinations(ListPublishingDestinationsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ListPublishingDestinationsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ListPublishingDestinationsResponseUnmarshaller.getInstance());        return invoke(request, options, ListPublishingDestinationsResponse.class);    }
public DeleteAccountAliasRequest(String accountAlias){        _accountAlias = accountAlias;    }
public static float[] Grow(float[] array) {        return Grow(array, 1 + array.length);    }    public static float[] Grow(float[] array, int newSize) {        float[] newArray = new float[newSize];        System.arraycopy(array, 0, newArray, 0, array.length);        return newArray;    }
public String outputToString(Object output) {        if (!(output instanceof List)){            return outputs.outputToString((T)output);        } else {            List outputList = (List)output;            StringBuilder b = new StringBuilder();            b.append('[');            for (int i = 0; i < outputList.size(); i++){                if (i > 0){                    b.append(", ");                }                b.append(outputs.outputToString((T)outputList.get(i)));            }            b.append(']');            return b.toString();        }    }
public void notifyDeleteCell(ICell cell) {        _bookEvaluator.notifyDeleteCell(new HSSFEvaluationCell(cell));    }
public java.lang.StringBuilder replace(int start, int end, String str) {        replace0(start, end, str);        return this;    }
public SetIdentityPoolConfigurationResponse SetIdentityPoolConfiguration(SetIdentityPoolConfigurationRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(SetIdentityPoolConfigurationRequestMarshaller.getInstance());        options.setResponseUnmarshaller(SetIdentityPoolConfigurationResponseUnmarshaller.getInstance());        return invoke(request, options, SetIdentityPoolConfigurationResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> responseClass) {        // invoke the request using the options and return the response    }
public static double kthSmallest(double[] v, int k) {        double r = Double.NaN;        k--;        if (v != null && v.length > k && k >= 0) {            Arrays.sort(v);            r = v[k];        }        return r;    }
public void Set(int index, long value) {        int o = (int)((index >>> 5) & 0xFFFFFFFF);        int b = index & 31;        int shift = b << 1;        blocks[o] = (blocks[o] & ~(3L << shift)) | (value << shift);    }
@Override    public String toString() {        List<IQueryNode> children = getChildren();        if (children == null || children.size() == 0)            return "<boolean operation='and'/>";        StringBuilder sb = new StringBuilder();        sb.append("<boolean operation='and'>");        for (IQueryNode child : children) {            sb.append("\n");            sb.append(child.toString());        }        sb.append("\n</boolean>");        return sb.toString();    }
public int sumTokenSizes(int fromIx, int toIx) {        int result = 0;        for (int i = fromIx; i < toIx; i++) {            result += _ptgs[i].getSize();        }        return result;    }
public void setReadonly(boolean readonly) {        if (this.readonly && !readonly) {            throw new InvalidOperationException("can't alter readonly IntervalSet");        }        this.readonly = readonly;    }
public void clearConsumingCell(FormulaCellCacheEntry cce) {        if (!_consumingCells.remove(cce)) {            throw new InvalidOperationException("Specified formula cell is not consumed by this cell");        }    }
@Override    public List<E> subList(int start, int end) {        synchronized (mutex) {            return new Collections.SynchronizedRandomAccessList<E>(list.subList(start, end), mutex);        }    }
public FileHeader GetFileHeader() {        return file;    }
public AttachLoadBalancersResponse attachLoadBalancers(AttachLoadBalancersRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(AttachLoadBalancersRequestMarshaller.getInstance());        options.setResponseUnmarshaller(AttachLoadBalancersResponseUnmarshaller.getInstance());        return invoke(request, options, AttachLoadBalancersResponse.class);    }
public InitiateJobRequest(String accountId, String vaultName, JobParameters jobParameters) {        this._accountId = accountId;        this._vaultName = vaultName;        this._jobParameters = jobParameters;    }
@Override    public String toString() {        return "SPL";    }
public ReplaceableAttribute(String name, String value, boolean replace) {        _name = name;        _value = value;        _replace = replace;    }
public void add(IIndexableField field) {        fields.add(field);    }
public DeleteStackSetResponse deleteStackSet(DeleteStackSetRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteStackSetRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteStackSetResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteStackSetResponse.class);    }
public class GetRepoBuildRuleListRequest extends BaseRequest {        public GetRepoBuildRuleListRequest() {            super("cr", "2016-06-07", "GetRepoBuildRuleList", "cr", "openAPI");            setUriPattern("/repos/[RepoNamespace]/[RepoName]/rules");            setMethod(MethodType.GET);        }            }
public SparseArray(int initialCapacity) {        initialCapacity = android.util.@internal.ArrayUtils.idealIntArraySize(initialCapacity);        mKeys = new int[initialCapacity];        mValues = new Object[initialCapacity];        mSize = 0;    }
public class InvokeServiceRequest extends BaseRequest {        public InvokeServiceRequest() {            super("industry-brain", "2018-07-12", "InvokeService");            setMethod(MethodType.POST);        }    }
public class ListAlbumPhotosRequest extends ServiceRequest {        public ListAlbumPhotosRequest() {            super("CloudPhoto", "2017-07-11", "ListAlbumPhotos", "cloudphoto", "openAPI");            setProtocol(ProtocolType.HTTPS);        }    }
public boolean hasPrevious() {        return link != list.voidLink;    }
public DeleteHsmConfigurationResponse deleteHsmConfiguration(DeleteHsmConfigurationRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteHsmConfigurationRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteHsmConfigurationResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteHsmConfigurationResponse.class);    }
public class CreateLoadBalancerRequest {        private String loadBalancerName;        public CreateLoadBalancerRequest(String loadBalancerName) {            this.loadBalancerName = loadBalancerName;        }    }
public String getUserInfo() {        return decode(userInfo);    }
public TagAttendeeResponse tagAttendee(TagAttendeeRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(TagAttendeeRequestMarshaller.getInstance());        options.setResponseUnmarshaller(TagAttendeeResponseUnmarshaller.getInstance());        return invoke(request, options, TagAttendeeResponse.class);    }    private <T> T invoke(TagAttendeeRequest request, InvokeOptions options, Class<T> clazz) {        // Add your implementation here    }
public String GetRefName() {        return name;    }
@Override    public WAH8DocIdSet Build() {        if (this.wordNum != -1) {            AddWord(wordNum, (byte)word);        }        return super.Build();    }
public boolean IsSubTotal(int rowIndex, int columnIndex){        return false;    }
public DescribeDBProxiesResponse describeDBProxies(DescribeDBProxiesRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeDBProxiesRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeDBProxiesResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeDBProxiesResponse.class);    }    private <T> T invoke(Request<?> request, InvokeOptions options, Class<T> responseClass) {        // implementation of the invoke method    }
public GetVoiceConnectorProxyResponse getVoiceConnectorProxy(GetVoiceConnectorProxyRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetVoiceConnectorProxyRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetVoiceConnectorProxyResponseUnmarshaller.getInstance());        return invoke(request, options, GetVoiceConnectorProxyResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> clazz) {        // Your code to perform the invocation here    }
public void FromConfig(Config rc) {        SetPackedGitOpenFiles(rc.GetInt("core", null, "packedgitopenfiles", GetPackedGitOpenFiles()));        SetPackedGitLimit(rc.GetLong("core", null, "packedgitlimit", GetPackedGitLimit()));        SetPackedGitWindowSize(rc.GetInt("core", null, "packedgitwindowsize", GetPackedGitWindowSize()));        SetPackedGitMMAP(rc.GetBoolean("core", null, "packedgitmmap", IsPackedGitMMAP()));        SetDeltaBaseCacheLimit(rc.GetInt("core", null, "deltabasecachelimit", GetDeltaBaseCacheLimit()));                long maxMem = Runtime.getRuntime().maxMemory();        long sft = rc.GetLong("core", null, "streamfilethreshold", GetStreamFileThreshold());        sft = Math.min(sft, maxMem / 4);        sft = Math.min(sft, Integer.MAX_VALUE);        SetStreamFileThreshold((int) sft);    }
public static DateTime GetJavaDate(double date){        return GetJavaDate(date, false);    }
public StartPersonTrackingResponse startPersonTracking(StartPersonTrackingRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(StartPersonTrackingRequestMarshaller.getInstance());        options.setResponseUnmarshaller(StartPersonTrackingResponseUnmarshaller.getInstance());        return invoke(request, options, StartPersonTrackingResponse.class);    }
@Override    public int size() {        return this._enclosing.size();    }
public GetRouteResponse getRoute(GetRouteRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetRouteRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetRouteResponseUnmarshaller.getInstance());        return invoke(request, options, GetRouteResponse.class);    }
public DeleteClusterResponse deleteCluster(DeleteClusterRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteClusterRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteClusterResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteClusterResponse.class);    }    private <T> T invoke(Request<?> request, InvokeOptions options, Class<T> clazz) {        // Implementation of the invoke method    }
public String toString() {        StringBuilder buffer = new StringBuilder();        buffer.append("[MMS]\n");        buffer.append("    .addMenu        = ").append(StringUtil.toHexString(addMenuCount)).append("\n");        buffer.append("    .delMenu        = ").append(StringUtil.toHexString(delMenuCount)).append("\n");        buffer.append("[/MMS]\n");        return buffer.toString();    }
public FileBasedConfig(Config baseConfig, FilePath cfgLocation, FS fs) {        super(baseConfig);        this.configFile = cfgLocation;        this.fs = fs;        this.snapshot = FileSnapshot.DIRTY;        this.hash = ObjectId.zeroId();    }
public int Following(int pos) {        if (pos < text.getBeginIndex() || pos > text.getEndIndex()) {            throw new IllegalArgumentException("offset out of bounds");        } else if (0 == sentenceStarts.length) {            text.setIndex(text.getBeginIndex());            return Done;        } else if (pos >= sentenceStarts[sentenceStarts.length - 1]) {            text.setIndex(text.getEndIndex());            currentSentence = sentenceStarts.length - 1;            return Done;        } else {            currentSentence = (sentenceStarts.length - 1) / 2;            moveToSentenceAt(pos, 0, sentenceStarts.length - 2);            text.setIndex(sentenceStarts[++currentSentence]);            return Current;        }    }
public UpdateParameterGroupResponse updateParameterGroup(UpdateParameterGroupRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(UpdateParameterGroupRequestMarshaller.getInstance());        options.setResponseUnmarshaller(UpdateParameterGroupResponseUnmarshaller.getInstance());        return invoke(request, options, UpdateParameterGroupResponse.class);    }
public Object clone() {        SeriesChartGroupIndexRecord rec = new SeriesChartGroupIndexRecord();        rec.field_1_chartGroupIndex = this.field_1_chartGroupIndex;        return rec;    }
public static double calcDistanceFromErrPct(IShape shape, double distErrPct, SpatialContext ctx) {        if (distErrPct < 0 || distErrPct > 0.5) {            throw new IllegalArgumentException("distErrPct " + distErrPct + " must be between [0 to 0.5]", "distErrPct");        }        if (distErrPct == 0 || shape instanceof IPoint) {            return 0;        }        IRectangle bbox = shape.getBoundingBox();        IPoint ctr = bbox.getCenter();        double y = (ctr.getY() >= 0 ? bbox.getMaxY() : bbox.getMinY());        double diagonalDist = ctx.getDistCalc().distance(ctr, bbox.getMaxX(), y);        return diagonalDist * distErrPct;    }
public int codePointAt(int index) {        if (index < 0 || index >= count) {            throw indexAndLength(index);        }        return Sharpen.CharHelper.CodePointAt(value, index, count);    }
public void setPasswordVerifier(int passwordVerifier) {        this.passwordVerifier = passwordVerifier;    }
public ListVaultsRequest(String accountId) {        this._accountId = accountId;    }
public SquashMessageFormatter() {        dateFormatter = new GitDateFormatter(GitDateFormatter.Format.DEFAULT);    }
Java    public class GetVideoCoverRequest extends AcsRequest<GetVideoCoverResponse> {                public GetVideoCoverRequest() {            super("CloudPhoto", "2017-07-11", "GetVideoCover", "cloudphoto", "openAPI");            setProtocol(ProtocolType.HTTPS);        }                @Override        public Class<GetVideoCoverResponse> getResponseClass() {            return GetVideoCoverResponse.class;        }    }
public int lastIndexOf(Object object) {        int pos = _size;        java.util.LinkedList.Link<E> link = voidLink.previous;        if (object != null) {            while (link != voidLink) {                pos--;                if (object.equals(link.data)) {                    return pos;                }                link = link.previous;            }        } else {            while (link != voidLink) {                pos--;                if (link.data == null) {                    return pos;                }                link = link.previous;            }        }        return -1;    }
public DescribeSpotFleetRequestsResponse describeSpotFleetRequests(DescribeSpotFleetRequestsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeSpotFleetRequestsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeSpotFleetRequestsResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeSpotFleetRequestsResponse.class);    }
public IndexFacesResponse indexFaces(IndexFacesRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(IndexFacesRequestMarshaller.getInstance());        options.setResponseUnmarshaller(IndexFacesResponseUnmarshaller.getInstance());        return invoke(request, options, IndexFacesResponse.class);    }
public BreakIterator getBreakIterator(int script) {        switch (script) {            case UScript.JAPANESE:                return (BreakIterator) cjkBreakIterator.clone();            case UScript.MYANMAR:                if (myanmarAsWords) {                    return (BreakIterator) defaultBreakIterator.clone();                } else {                    return (BreakIterator) myanmarSyllableIterator.clone();                }            default:                return (BreakIterator) defaultBreakIterator.clone();        }    }
public String toString() {        StringBuilder b = new StringBuilder();        b.append("[DCONREF]\n");        b.append("    .ref\n");        b.append("        .firstrow   = ").append(firstRow).append("\n");        b.append("        .lastrow    = ").append(lastRow).append("\n");        b.append("        .firstcol   = ").append(firstCol).append("\n");        b.append("        .lastcol    = ").append(lastCol).append("\n");        b.append("    .cch            = ").append(charCount).append("\n");        b.append("    .stFile\n");        b.append("        .h          = ").append(charType).append("\n");        b.append("        .rgb        = ").append(ReadablePath).append("\n");        b.append("[/DCONREF]\n");        return b.toString();    }
public int GetPackedGitOpenFiles() {        return packedGitOpenFiles;    }
public String toString() {        StringBuilder buffer = new StringBuilder();        buffer.append("[FEATURE HEADER]\n");        buffer.append("[/FEATURE HEADER]\n");        return buffer.toString();    }
public static byte[] getToUnicodeLE(String string1) {        return string1.getBytes(StandardCharsets.UTF_16LE);    }
public List<String> getFooterLines(String keyName) {        return getFooterLines(new FooterKey(keyName));    }
public void refresh() {        super.refresh();        rescan();    }
@Override    public float get(int index) {        checkIndex(index);        return byteBuffer.getFloat(index * libcore.io.SizeOf.FLOAT);    }
public DeleteDetectorResponse deleteDetector(DeleteDetectorRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteDetectorRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteDetectorResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteDetectorResponse.class);    }
@Override    public int[] Grow() {        assert bytesStart != null;        return bytesStart = ArrayUtil.Grow(bytesStart, bytesStart.length + 1);    }
public ListExclusionsResponse listExclusions(ListExclusionsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ListExclusionsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ListExclusionsResponseUnmarshaller.getInstance());        return invoke(request, options, ListExclusionsResponse.class);    }    public <T> T invoke(Object request, InvokeOptions options, Class<T> responseClass) {        // Your implementation here    }
public static SpatialStrategy getSpatialStrategy(int roundNumber) {        SpatialStrategy result;        if (!spatialStrategyCache.TryGetValue(roundNumber, result) || result == null) {            throw new InvalidOperationException("Strategy should have been init'ed by SpatialDocMaker by now");        }        return result;    }
public RestoreDBClusterToPointInTimeResponse restoreDBClusterToPointInTime(RestoreDBClusterToPointInTimeRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(RestoreDBClusterToPointInTimeRequestMarshaller.getInstance());        options.setResponseUnmarshaller(RestoreDBClusterToPointInTimeResponseUnmarshaller.getInstance());        return invoke(RestoreDBClusterToPointInTimeResponse.class, request, options);    }
public void Serialize(ILittleEndianOutput out1) {        out1.WriteShort(field_1_categoryDataType);        out1.WriteShort(field_2_valuesDataType);        out1.WriteShort(field_3_numCategories);        out1.WriteShort(field_4_numValues);        out1.WriteShort(field_5_bubbleSeriesType);        out1.WriteShort(field_6_numBubbleValues);    }
public PostAgentProfileResponse postAgentProfile(PostAgentProfileRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(PostAgentProfileRequestMarshaller.getInstance());        options.setResponseUnmarshaller(PostAgentProfileResponseUnmarshaller.getInstance());        return invoke(request, options);    }
public ParseTreePattern compileParseTreePattern(String pattern, int patternRuleIndex) {        if (getInputStream() instanceof ITokenStream) {            ITokenSource tokenSource = ((ITokenStream) getInputStream()).getTokenSource();            if (tokenSource instanceof Lexer) {                Lexer lexer = (Lexer) tokenSource;                return compileParseTreePattern(pattern, patternRuleIndex, lexer);            }        }        throw new NotSupportedException("Parser can't discover a lexer to use");    }
public BacktrackDBClusterResponse backtrackDBCluster(BacktrackDBClusterRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(BacktrackDBClusterRequestMarshaller.getInstance());        options.setResponseUnmarshaller(BacktrackDBClusterResponseUnmarshaller.getInstance());        return invoke(request, options, BacktrackDBClusterResponse.class);    }
@Override    public String getName() {        return strategyName;    }
public void CopyTo(byte[] b, int o) {        FormatHexByte(b, o + 0, w1);        FormatHexByte(b, o + 8, w2);        FormatHexByte(b, o + 16, w3);        FormatHexByte(b, o + 24, w4);        FormatHexByte(b, o + 32, w5);    }
public static IntList LineMap(byte[] buf, int ptr, int end) {        IntList map = new IntList((end - ptr) / 36);        map.FillTo(1, Integer.MIN_VALUE);        for (; ptr < end; ptr = NextLF(buf, ptr)) {            map.Add(ptr);        }        map.Add(end);        return map;    }
public Collection<ObjectId> GetAdditionalHaves() {        return Collections.emptySet();    }
@Override    public long ramBytesUsed() {        return _termsCache.values().stream()            .mapToLong(simpleTextTerms -> (simpleTextTerms != null) ? simpleTextTerms.ramBytesUsed() : 0)            .sum();    }
public String ToXml(String tab){        StringBuilder builder = new StringBuilder();        builder.append(tab).append("<").append(RecordName).append(">\n");        for (Iterator iterator = EscherRecords.iterator(); iterator.hasNext(); ){            EscherRecord escherRecord = (EscherRecord)iterator.next();            builder.append(escherRecord.ToXml(tab + "\t"));        }        builder.append(tab).append("</").append(RecordName).append(">\n");        return builder.toString();    }
@Override    public TokenStream create(TokenStream input) {        return new GalicianMinimalStemFilter(input);    }
public String toString() {        StringBuilder r = new StringBuilder();        r.append("Commit");        r.append("={\n");        r.append("tree ");        r.append(treeId != null ? treeId.getName() : "NOT_SET");        r.append("\n");        for (ObjectId p : parentIds) {            r.append("parent ");            r.append(p.getName());            r.append("\n");        }        r.append("author ");        r.append(author != null ? author.toString() : "NOT_SET");        r.append("\n");        r.append("committer ");        r.append(committer != null ? committer.toString() : "NOT_SET");        r.append("\n");        if (encoding != null && !encoding.equals(Constants.CHARSET)) {            r.append("encoding ");            r.append(encoding.name());            r.append("\n");        }        r.append("\n");        r.append(message != null ? message : "");        r.append("}");        return r.toString();    }
public IndicNormalizationFilterFactory(Map<String, String> args) {        super(args);        if (!args.isEmpty()) {            throw new IllegalArgumentException("Unknown parameters: " + args);        }    }
public CreateOptionGroupResponse createOptionGroup(CreateOptionGroupRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateOptionGroupRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateOptionGroupResponseUnmarshaller.getInstance());        return invoke(CreateOptionGroupResponse.class, request, options);    }
public AssociateMemberAccountResponse associateMemberAccount(AssociateMemberAccountRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(AssociateMemberAccountRequestMarshaller.getInstance());        options.setResponseUnmarshaller(AssociateMemberAccountResponseUnmarshaller.getInstance());        return invoke(request, options, AssociateMemberAccountResponse.class);    }
public void run() {        this._enclosing.doRefreshProgress(this.mId, this.mProgress, this.mFromUser, true);        this._enclosing.mRefreshProgressRunnable = this;    }
public SetTerminationProtectionResponse SetTerminationProtection(SetTerminationProtectionRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(SetTerminationProtectionRequestMarshaller.getInstance());        options.setResponseUnmarshaller(SetTerminationProtectionResponseUnmarshaller.getInstance());        return invoke(request, options, SetTerminationProtectionResponse.class);    }
public String getErrorHeader(RecognitionException e) {        int line = e.getOffendingToken().getLine();        int charPositionInLine = e.getOffendingToken().getCharPositionInLine();        return "line " + line + ":" + charPositionInLine;    }
public java.nio.CharBuffer asReadOnlyBuffer() {        java.nio.CharToByteBufferAdapter buf = new java.nio.CharToByteBufferAdapter(byteBuffer.asReadOnlyBuffer());        buf._limit = _limit;        buf._position = _position;        buf._mark = _mark;        buf.byteBuffer.order(byteBuffer.order());        return buf;    }
public StopSentimentDetectionJobResponse stopSentimentDetectionJob(StopSentimentDetectionJobRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(StopSentimentDetectionJobRequestMarshaller.getInstance());        options.setResponseUnmarshaller(StopSentimentDetectionJobResponseUnmarshaller.getInstance());        return invoke(request, options, StopSentimentDetectionJobResponse.class);    }
public ObjectIdSubclassMap<ObjectId> getNewObjectIds() {        if (newObjectIds != null) {            return newObjectIds;        }        return new ObjectIdSubclassMap<ObjectId>();    }
@Override    protected void Clear() {        hash = Hash(new byte[0]);        super.Clear();    }
public void reset() throws IOException {        synchronized(lock) {            checkNotClosed();            if (_mark == -1) {                throw new IOException("Invalid mark");            }            pos = _mark;        }    }
public RefErrorPtg(ILittleEndianInput in1){        field_1_reserved = in1.readInt();    }
public SuspendGameServerGroupResponse suspendGameServerGroup(SuspendGameServerGroupRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(SuspendGameServerGroupRequestMarshaller.getInstance());        options.setResponseUnmarshaller(SuspendGameServerGroupResponseUnmarshaller.getInstance());        return invoke(request, options, SuspendGameServerGroupResponse.class);    }    private <T> T invoke(SuspendGameServerGroupRequest request, InvokeOptions options, Class<T> responseType) {        // Implementation of the invoke method        // ...    }
public ValueEval Evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {        if (args.length != 3) {            return ErrorEval.VALUE_INVALID;        }        return Evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2]);    }
public class GetRepoRequest extends BaseRequest {      public GetRepoRequest() {        super("cr", "2016-06-07", "GetRepo", "cr", "openAPI");        setUriPattern("/repos/[RepoNamespace]/[RepoName]");        setMethod(MethodType.GET);      }          }
public void setDate(Date date) {        if (date != null) {            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");            String dateString = dateFormat.format(date);            setDate(dateString);        } else {            this.date = null;        }    }    public void setDate(String dateString) {        this.date = dateString;    }
@Override    public TokenStream create(TokenStream input) {        return new GermanMinimalStemFilter(input);    }
public Object[] toArray() {        return a.clone();    }
@Override    public void write(char[] buffer, int offset, int len) {        java.util.Arrays.checkOffsetAndCount(buffer.length, offset, len);        synchronized (lock) {            expand(len);            System.arraycopy(buffer, offset, this.buf, this.count, len);            this.count += len;        }    }
public static RevFilter After(long ts) {        return new CommitTimeRevFilterAfter(ts);    }
public class DeleteGroupPolicyRequest {        private String groupName;        private String policyName;                public DeleteGroupPolicyRequest(String groupName, String policyName) {            this.groupName = groupName;            this.policyName = policyName;        }    }
public DeregisterTransitGatewayMulticastGroupMembersResponse deregisterTransitGatewayMulticastGroupMembers(DeregisterTransitGatewayMulticastGroupMembersRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeregisterTransitGatewayMulticastGroupMembersRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeregisterTransitGatewayMulticastGroupMembersResponseUnmarshaller.getInstance());        return invoke(request, options, DeregisterTransitGatewayMulticastGroupMembersResponse.class);    }    private <T> T invoke(DeregisterTransitGatewayMulticastGroupMembersRequest request, InvokeOptions options, Class<T> responseType) {        // Implementation of the invoke method in Java        // You need to define the appropriate logic for invoking the request and handling the response        // based on the SDK or library you are using in Java        // This is just a placeholder method, you need to replace it with actual implementation        return null;    }
public BatchDeleteScheduledActionResponse batchDeleteScheduledAction(BatchDeleteScheduledActionRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(BatchDeleteScheduledActionRequestMarshaller.getInstance());        options.setResponseUnmarshaller(BatchDeleteScheduledActionResponseUnmarshaller.getInstance());        return invoke(request, options);    }
public CreateAlgorithmResponse CreateAlgorithm(CreateAlgorithmRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateAlgorithmRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateAlgorithmResponseUnmarshaller.getInstance());        return invoke(CreateAlgorithmResponse.class, request, options);    }
public int ReadUByte(){        CheckPosition(1);        return _buf[_ReadIndex++] & 0xFF;    }
public void SetLength(int sz) {        NB.EncodeInt32(info, infoOffset + P_SIZE, sz);    }
public DescribeScalingProcessTypesResponse DescribeScalingProcessTypes() {        return DescribeScalingProcessTypes(new DescribeScalingProcessTypesRequest());    }
public ListResourceRecordSetsResponse listResourceRecordSets(ListResourceRecordSetsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ListResourceRecordSetsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ListResourceRecordSetsResponseUnmarshaller.getInstance());        return invoke(request, options, ListResourceRecordSetsResponse.class);    }
public override IToken RecoverInline(Parser recognizer){        InputMismatchException e = new InputMismatchException(recognizer);        for (ParserRuleContext context = recognizer.Context; context != null; context = ((ParserRuleContext)context.Parent)){            context.exception = e;        }        throw new ParseCanceledException(e);    }
public SetTagsForResourceResponse setTagsForResource(SetTagsForResourceRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(SetTagsForResourceRequestMarshaller.getInstance());        options.setResponseUnmarshaller(SetTagsForResourceResponseUnmarshaller.getInstance());        return invoke(request, options, SetTagsForResourceResponse.class);    }
public ModifyStrategyRequest() {        super("aegis", "2016-11-11", "ModifyStrategy", "vipaegis", "openAPI");        setMethod(MethodType.POST);    }
public DescribeVpcEndpointServicesResponse describeVpcEndpointServices(DescribeVpcEndpointServicesRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeVpcEndpointServicesRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeVpcEndpointServicesResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeVpcEndpointServicesResponse.class);    }    private <T> T invoke(Request request, InvokeOptions options, Class<T> responseType) {        // Implementation for invoking the request goes here    }
public EnableLoggingResponse enableLogging(EnableLoggingRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(EnableLoggingRequestMarshaller.getInstance());        options.setResponseUnmarshaller(EnableLoggingResponseUnmarshaller.getInstance());        return invoke(request, options, EnableLoggingResponse.class);    }    private <T> T invoke(EnableLoggingRequest request, InvokeOptions options, Class<T> clazz) {        // implement the invoke method        // ...    }
@Override    public boolean contains(Object o) {        return this._enclosing.containsValue(o);    }
public SheetRangeIdentifier(String bookName, NameIdentifier firstSheetIdentifier, NameIdentifier lastSheetIdentifier) {        super(bookName, firstSheetIdentifier);        this._lastSheetIdentifier = lastSheetIdentifier;    }
public class DomainMetadataRequest {        private String domainName;        public DomainMetadataRequest(String domainName) {            this.domainName = domainName;        }    }
public ParseException(Token currentToken, int[][] expectedTokenSequences, String[] tokenImage) {        super(Initialize(currentToken, expectedTokenSequences, tokenImage));        this.CurrentToken = currentToken;        this.ExpectedTokenSequences = expectedTokenSequences;        this.TokenImage = tokenImage;    }
public FetchPhotosRequest() {        super("CloudPhoto", "2017-07-11", "FetchPhotos", "cloudphoto", "openAPI");        setProtocol(ProtocolType.HTTPS);    }
public java.io.PrintWriter writer() {        return _writer;    }
public NGramTokenizerFactory(Map<String, String> args) {        super(args);        minGramSize = getInt(args, "minGramSize", NGramTokenizer.DEFAULT_MIN_NGRAM_SIZE);        maxGramSize = getInt(args, "maxGramSize", NGramTokenizer.DEFAULT_MAX_NGRAM_SIZE);        if (!args.isEmpty()) {            throw new IllegalArgumentException("Unknown parameters: " + args);        }    }    private int getInt(Map<String, String> args, String key, int defaultValue) {        String value = args.get(key);        if (value != null) {            return Integer.parseInt(value);        }        return defaultValue;    }    private int minGramSize;    private int maxGramSize;
public boolean isDirectoryFileConflict() {        return dfConflict != null;    }
public IndonesianStemFilter(TokenStream input, boolean stemDerivational) {        super(input);        this.stemDerivational = stemDerivational;        termAtt = addAttribute(CharTermAttribute.class);        keywordAtt = addAttribute(KeywordAttribute.class);    }
public CreateTrafficPolicyResponse createTrafficPolicy(CreateTrafficPolicyRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateTrafficPolicyRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateTrafficPolicyResponseUnmarshaller.getInstance());        return invoke(request, options, CreateTrafficPolicyResponse.class);    }
public void Serialize(ILittleEndianOutput out1){        out1.WriteInt(fSD);        out1.WriteInt(passwordVerifier);        StringUtil.WriteUnicodeString(out1, title);        out1.Write(securityDescriptor);    }
public static double Floor(double n, double s) {        double f;        if ((n < 0 && s > 0) || (n > 0 && s < 0) || (s == 0 && n != 0)) {            f = Double.NaN;        } else {            f = (n == 0 || s == 0) ? 0 : Math.floor(n / s) * s;        }        return f;    }
public ByteArrayDataOutput(byte[] bytes, int offset, int len){        Reset(bytes, offset, len);    }
public static List<ITree> getChildren(ITree t) {        List<ITree> kids = new ArrayList<>();        for (int i = 0; i < t.getChildCount(); i++) {            kids.add(t.getChild(i));        }        return kids;    }
@Override    public void clear() {        this._enclosing.clear();    }
public RefreshAllRecord(boolean refreshAll){        super(0);        RefreshAll = refreshAll;    }
public DeleteNamedQueryResponse deleteNamedQuery(DeleteNamedQueryRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteNamedQueryRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteNamedQueryResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteNamedQueryResponse.class);    }    @SuppressWarnings("unchecked")    private <T> T invoke(Request request, InvokeOptions options, Class<T> clazz) {        // Assuming that there is a method named 'invoke' which returns the response object of type 'T'        return (T) invoke(request, options);    }
public GraphvizFormatter(ConnectionCosts costs) {        this.costs = costs;        this.bestPathMap = new HashMap<String, String>();        sb.append(FormatHeader());        sb.append("  init [style=invis]\n");        sb.append("  init -> 0.0 [label=\"" + BOS_LABEL + "\"]\n");    }
public CheckMultiagentRequest() {        super("visionai-poc", "2020-04-08", "CheckMultiagent");        setMethod(MethodType.POST);    }
public ListUserProfilesResponse listUserProfiles(ListUserProfilesRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ListUserProfilesRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ListUserProfilesResponseUnmarshaller.getInstance());        return invoke(ListUserProfilesResponse.class, request, options);    }
public CreateRelationalDatabaseFromSnapshotResponse createRelationalDatabaseFromSnapshot(CreateRelationalDatabaseFromSnapshotRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateRelationalDatabaseFromSnapshotRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateRelationalDatabaseFromSnapshotResponseUnmarshaller.getInstance());        return invoke(request, options, CreateRelationalDatabaseFromSnapshotResponse.class);    }
public StartTaskResponse startTask(StartTaskRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(StartTaskRequestMarshaller.getInstance());        options.setResponseUnmarshaller(StartTaskResponseUnmarshaller.getInstance());        return invoke(request, options, StartTaskResponse.class);    }
public Collection<String> getIgnoredPaths() {        return ignoredPaths;    }
public FeatSmartTag(RecordInputStream in1){        data = in1.readRemainder();    }
public Change(ChangeAction action, ResourceRecordSet resourceRecordSet) {        this._action = action;        this._resourceRecordSet = resourceRecordSet;    }
public DeleteImageResponse deleteImage(DeleteImageRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteImageRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteImageResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteImageResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> responseClass) {        // implementation of the invoke method        // ...    }
public CreateConfigurationSetResponse createConfigurationSet(CreateConfigurationSetRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateConfigurationSetRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateConfigurationSetResponseUnmarshaller.getInstance());        return invoke(request, options, CreateConfigurationSetResponse.class);    }
public Iterator<E> iterator() {        Object[] snapshot = elements;        return new CowIterator<E>(snapshot, 0, snapshot.length);    }
public void VisitContainedRecords(RecordVisitor rv) {        if (_recs.size() == 0) {            return;        }        rv.VisitRecord(_bofRec);        for (int i = 0; i < _recs.size(); i++) {            RecordBase rb = _recs.get(i);            if (rb instanceof RecordAggregate) {                ((RecordAggregate) rb).VisitContainedRecords(rv);            } else {                rv.VisitRecord((Record) rb);            }        }        rv.VisitRecord(EOFRecord.instance);    }
@Override    public String toString() {        StringBuilder buffer = new StringBuilder();        buffer.append("[FtCbls ]").append("\n");        buffer.append("  size     = ").append(DataSize).append("\n");        buffer.append("  reserved = ").append(HexDump.toHex(reserved)).append("\n");        buffer.append("[/FtCbls ]").append("\n");        return buffer.toString();    }
public static BATBlock createEmptyBATBlock(POIFSBigBlockSize bigBlockSize, boolean isXBAT) {        BATBlock block = new BATBlock(bigBlockSize);        if (isXBAT) {            block.setXBATChain(bigBlockSize, POIFSConstants.END_OF_CHAIN);        }        return block;    }
public TagResourceResponse tagResource(TagResourceRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(TagResourceRequestMarshaller.getInstance());        options.setResponseUnmarshaller(TagResourceResponseUnmarshaller.getInstance());        return invoke(request, options, TagResourceResponse.class);    }
public DeleteMailboxPermissionsResponse deleteMailboxPermissions(DeleteMailboxPermissionsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteMailboxPermissionsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteMailboxPermissionsResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteMailboxPermissionsResponse.class);    }
public ListDatasetGroupsResponse listDatasetGroups(ListDatasetGroupsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ListDatasetGroupsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ListDatasetGroupsResponseUnmarshaller.getInstance());        return invoke(request, options, ListDatasetGroupsResponse.class);    }
public ResumeProcessesResponse ResumeProcesses(ResumeProcessesRequest request){        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ResumeProcessesRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ResumeProcessesResponseUnmarshaller.getInstance());        return invoke(request, options, ResumeProcessesResponse.class);    }
public GetPersonTrackingResponse GetPersonTracking(GetPersonTrackingRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetPersonTrackingRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetPersonTrackingResponseUnmarshaller.getInstance());        return invoke(request, options, GetPersonTrackingResponse.class);    }
public String ToFormulaString(String[] operands) {        if (space.IsSet(field_1_options)) {            return operands[0];        } else if (optiIf.IsSet(field_1_options)) {            return ToFormulaString() + "(" + operands[0] + ")";        } else if (optiSkip.IsSet(field_1_options)) {            return ToFormulaString() + operands[0];        } else {            return ToFormulaString() + "(" + operands[0] + ")";        }    }
public <T> T merge(T first, T second) {        throw new UnsupportedOperationException();    }
@Override    public String toString() {        return this.m_message.getKey() + ": " + getLocalizedMessage();    }
public XPath(Parser parser, String path) {        this.parser = parser;        this.path = path;        elements = path.split(" ");    }
public class CreateAccountAliasRequest {        private String _accountAlias;                public CreateAccountAliasRequest(String accountAlias) {            _accountAlias = accountAlias;        }    }
public void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations){        for (int j = 0; j < iterations; ++j){            byte block = blocks[blocksOffset++];            values[valuesOffset++] = ((int)((block & 0xFF) >> 7)) & 1;            values[valuesOffset++] = ((int)((block & 0xFF) >> 6)) & 1;            values[valuesOffset++] = ((int)((block & 0xFF) >> 5)) & 1;            values[valuesOffset++] = ((int)((block & 0xFF) >> 4)) & 1;            values[valuesOffset++] = ((int)((block & 0xFF) >> 3)) & 1;            values[valuesOffset++] = ((int)((block & 0xFF) >> 2)) & 1;            values[valuesOffset++] = ((int)((block & 0xFF) >> 1)) & 1;            values[valuesOffset++] = block & 1;        }    }
Java    @Override    public PushConnection OpenPush() {        throw new NGit.Errors.NotSupportedException(JGitText.Get().pushIsNotSupportedForBundleTransport);    }
public static void StrCpy(char[] dst, int di, char[] src, int si) {        while (src[si] != 0) {            dst[di++] = src[si++];        }        dst[di] = (char)0;    }
public K getKey() {        return mapEntry.getKey();    }
public static int NumNonnull(Object[] data) {        int n = 0;        if (data == null) {            return n;        }        for (Object o : data) {            if (o != null) {                n++;            }        }        return n;    }
public void add(int location, E object) {        if (location >= 0 && location <= _size) {            java.util.LinkedList.Link<E> link = voidLink;            if (location < (_size / 2)) {                for (int i = 0; i <= location; i++) {                    link = link.next;                }            } else {                for (int i = _size; i > location; i--) {                    link = link.previous;                }            }            java.util.LinkedList.Link<E> previous = link.previous;            java.util.LinkedList.Link<E> newLink = new java.util.LinkedList.Link<E>(object, previous, link);            previous.next = newLink;            link.previous = newLink;            _size++;            modCount++;        } else {            throw new java.lang.IndexOutOfBoundsException();        }    }
public DescribeDomainResponse describeDomain(DescribeDomainRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeDomainRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeDomainResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeDomainResponse.class);    }    @SuppressWarnings("unchecked")    private <T> T invoke(DescribeDomainRequest request, InvokeOptions options, Class<T> responseClass) {        // your code for invoking the request    }
@Override    public void flush() throws NotImplementedException {        throw new NotImplementedException();    }
public class PersianCharFilterFactory extends CharFilterFactory {                public PersianCharFilterFactory(Map<String, String> args) {            super(args);            if (!args.isEmpty()) {                throw new IllegalArgumentException("Unknown parameters: " + args);            }        }            }
@Override    public boolean incrementToken() {        if (used) {            return false;        }        clearAttributes();        termAttribute.append(value);        offsetAttribute.setOffset(0, value.length());        used = true;        return true;    }
public static java.nio.FloatBuffer allocate(int capacity_1){        if (capacity_1 < 0) {            throw new java.lang.IllegalArgumentException();        }        return java.nio.FloatBuffer.allocate(capacity_1);    }
public NGit.Diff.Edit after(NGit.Diff.Edit cut) {        return new NGit.Diff.Edit(cut.getEndA(), endA, cut.getEndB(), endB);    }
public UpdateRuleVersionResponse updateRuleVersion(UpdateRuleVersionRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(UpdateRuleVersionRequestMarshaller.getInstance());        options.setResponseUnmarshaller(UpdateRuleVersionResponseUnmarshaller.getInstance());        return invoke(request, options, UpdateRuleVersionResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> responseType) {        // Implementation details        // ...    }
public ListVoiceConnectorTerminationCredentialsResponse listVoiceConnectorTerminationCredentials(ListVoiceConnectorTerminationCredentialsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ListVoiceConnectorTerminationCredentialsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ListVoiceConnectorTerminationCredentialsResponseUnmarshaller.getInstance());        return invoke(request, options, ListVoiceConnectorTerminationCredentialsResponse.class);    }
public GetDeploymentTargetResponse getDeploymentTarget(GetDeploymentTargetRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetDeploymentTargetRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetDeploymentTargetResponseUnmarshaller.getInstance());        return invoke(request, options, GetDeploymentTargetResponse.class);    }    private <T> T invoke(Request request, InvokeOptions options, Class<T> responseType) {        // TODO: Implement the invoke method    }
public void SetNoChildReport() {        letChildReport = false;        for (PerfTask task : tasks) {            if (task instanceof TaskSequence) {                ((TaskSequence) task).SetNoChildReport();            }        }    }
public E get(int location) {        try {            return a[location];        } catch (ArrayIndexOutOfBoundsException e) {            throw new IndexOutOfBoundsException("Index: " + location + ", Size: " + a.length);        }    }
public DescribeDataSetResponse describeDataSet(DescribeDataSetRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeDataSetRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeDataSetResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeDataSetResponse.class);    }    private <T> T invoke(DescribeDataSetRequest request, InvokeOptions options, Class<T> responseClass) {        // Implementation of the invoke method    }
public SkipWorkTreeFilter(int treeIdx){        this.treeIdx = treeIdx;    }
public DescribeNetworkInterfacesResponse DescribeNetworkInterfaces() {        return DescribeNetworkInterfaces(new DescribeNetworkInterfacesRequest());    }
public boolean contains(int row, int col) {        return _firstRow <= row && _lastRow >= row               && _firstColumn <= col && _lastColumn >= col;    }
@Override    public String toString() {        return new String(this.chars);    }
public FileHeader.PatchType getPatchType() {        return patchType;    }
@Override    public Iterator<K> iterator() {        return new Hashtable<K, V>.KeyIterator(this._enclosing);    }
public CreateScriptResponse createScript(CreateScriptRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateScriptRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateScriptResponseUnmarshaller.getInstance());        return invoke(request, options, CreateScriptResponse.class);    }
public BytesRef Next() {        termUpto++;        if (termUpto >= info.terms.size()) {            return null;        } else {            info.terms.get(info.sortedTerms[termUpto], br);            return br;        }    }
public String outputToString(CharsRef output) {        return output.toString();    }
public AssociateWebsiteAuthorizationProviderResponse associateWebsiteAuthorizationProvider(AssociateWebsiteAuthorizationProviderRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(AssociateWebsiteAuthorizationProviderRequestMarshaller.getInstance());        options.setResponseUnmarshaller(AssociateWebsiteAuthorizationProviderResponseUnmarshaller.getInstance());        return invoke(request, options, AssociateWebsiteAuthorizationProviderResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> responseType) {        // Code for invoking the request and returning the response    }
public void Unpop(RevCommit c) {        BlockRevQueue.Block b = head;        if (b == null) {            b = free.NewBlock();            b.ResetToMiddle();            b.Add(c);            head = b;            tail = b;            return;        } else {            if (b.CanUnpop()) {                b.Unpop(c);                return;            }        }        b = free.NewBlock();        b.ResetToEnd();        b.Unpop(c);        b.next = head;        head = b;    }
public EdgeNGramTokenizerFactory(IDictionary<string, string> args) : base(args) {        minGramSize = GetInt32(args, "minGramSize", EdgeNGramTokenizer.DEFAULT_MIN_GRAM_SIZE);        maxGramSize = GetInt32(args, "maxGramSize", EdgeNGramTokenizer.DEFAULT_MAX_GRAM_SIZE);        side = Get(args, "side", EdgeNGramTokenFilter.Side.FRONT.ToString());        if (args.Count > 0) {            throw new System.ArgumentException("Unknown parameters: " + args);        }    }
public class ModifyDBParameterGroupRequest {        private String dbParameterGroupName;        private List<Parameter> parameters;        public ModifyDBParameterGroupRequest(String dbParameterGroupName, List<Parameter> parameters) {            this.dbParameterGroupName = dbParameterGroupName;            this.parameters = parameters;        }    }
public GetHostedZoneLimitResponse getHostedZoneLimit(GetHostedZoneLimitRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetHostedZoneLimitRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetHostedZoneLimitResponseUnmarshaller.getInstance());        return invoke(request, options, GetHostedZoneLimitResponse.class);    }
public void set(int index, long value) {        int o = (int)((index >>> 6) & 0xffffffff);        int b = index & 63;        int shift = b << 0;        blocks[o] = (blocks[o] & ~(1L << shift)) | (value << shift);    }
@Override    public RevFilter clone() {        return new CommitterRevFilter.PatternSearch(pattern());    }
@Override    public String toString() {        return "spans(" + m_term.toString() + ")@" + (m_doc == -1 ? "START" : (m_doc == Integer.MAX_VALUE) ? "END" : m_doc + "-" + m_position);    }
public boolean canAppendMatch() {        for (int i = 0; i < heads.size(); i++) {            if (heads.get(i) != LastHead.INSTANCE) {                return true;            }        }        return false;    }
@Override    public int lastIndexOf(String subString, int start) {        synchronized (this) {            return super.lastIndexOf(subString, start);        }    }
public DeleteNetworkAclEntryResponse deleteNetworkAclEntry(DeleteNetworkAclEntryRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteNetworkAclEntryRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteNetworkAclEntryResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteNetworkAclEntryResponse.class);    }
public AssociateMemberToGroupResponse associateMemberToGroup(AssociateMemberToGroupRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(AssociateMemberToGroupRequestMarshaller.getInstance());        options.setResponseUnmarshaller(AssociateMemberToGroupResponseUnmarshaller.getInstance());        return invoke(request, options, AssociateMemberToGroupResponse.class);    }
public static int Committer(byte[] b, int ptr) {        int sz = b.length;        if (ptr == 0) {            ptr += 46;        }        while (ptr < sz && b[ptr] == 'p') {            ptr += 48;        }        if (ptr < sz && b[ptr] == 'a') {            ptr = NextLF(b, ptr);        }        return Match(b, ptr, ObjectChecker.committer);    }
public int getLineNumber() {        return row;    }
public NGit.Api.SubmoduleUpdateCommand AddPath(String path){        paths.addItem(path);        return this;    }
public GetPushTemplateResponse getPushTemplate(GetPushTemplateRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetPushTemplateRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetPushTemplateResponseUnmarshaller.getInstance());        return invoke(request, options, GetPushTemplateResponse.class);    }    @SuppressWarnings("unchecked")    private <T> T invoke(Object request, InvokeOptions options, Class<T> clazz) {        // You would need to implement this method to actually perform the invocation        // using whatever framework or library you prefer.        // For example, you could use the Spring RestTemplate or Apache HttpClient.        return null;    }
public virtual DescribeVaultResponse DescribeVault(DescribeVaultRequest request){        var options = new InvokeOptions();        options.RequestMarshaller = DescribeVaultRequestMarshaller.Instance;        options.ResponseUnmarshaller = DescribeVaultResponseUnmarshaller.Instance;        return Invoke<DescribeVaultResponse>(request, options);    }
public DescribeVpcPeeringConnectionsResponse describeVpcPeeringConnections() {        return describeVpcPeeringConnections(new DescribeVpcPeeringConnectionsRequest());    }    public DescribeVpcPeeringConnectionsResponse describeVpcPeeringConnections(DescribeVpcPeeringConnectionsRequest request) {        // implementation here    }
@Override    public java.nio.ByteBuffer putLong(int index, long value) {        throw new UnsupportedOperationException();    }
public RegisterDeviceResponse registerDevice(RegisterDeviceRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(RegisterDeviceRequestMarshaller.getInstance());        options.setResponseUnmarshaller(RegisterDeviceResponseUnmarshaller.getInstance());        return invoke(request, options, RegisterDeviceResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> clazz) {        // implementation of the invoke method    }
public static Format ById(int id) {        for (Format format : Values) {            if (format.getId() == id) {                return format;            }        }        throw new IllegalArgumentException("Unknown format id: " + id);    }
public DeleteAppResponse deleteApp(DeleteAppRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteAppRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteAppResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteAppResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> responseType) {        // Implementation of the "invoke" method goes here        // ...    }
public GetBaiduChannelResponse getBaiduChannel(GetBaiduChannelRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetBaiduChannelRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetBaiduChannelResponseUnmarshaller.getInstance());        return invoke(request, options, GetBaiduChannelResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> clazz) {        // TODO: Implement the invoke method to send the request and return the response.        // The implementation will depend on the specific framework or library being used.        // This code assumes that a method called "invoke" exists that takes an object,        // an InvokeOptions object, and a Class object as arguments, and returns an object        // of the type specified by the Class object.    }
public FST.BytesReader getBytesReader() {        return fst.getBytesReader();    }
public static boolean isValidSchemeChar(int index, char c) {        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {            return true;        }        if (index > 0 && ((c >= '0' && c <= '9') || c == '+' || c == '-' || c == '.')) {            return true;        }        return false;    }
public ListAppliedSchemaArnsResponse listAppliedSchemaArns(ListAppliedSchemaArnsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ListAppliedSchemaArnsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ListAppliedSchemaArnsResponseUnmarshaller.getInstance());        return invoke(request, options, ListAppliedSchemaArnsResponse.class);    }
private URI baseUri;    public URI getBaseUri() {        return baseUri;    }    public void setBaseUri(URI baseUri) {        this.baseUri = baseUri;    }
public ValueEval Evaluate(ValueEval[] args, OperationEvaluationContext ec) {        if (args.length < 1) {            return ErrorEval.VALUE_INVALID;        }        boolean isA1style;        String text;        try {            ValueEval ve = OperandResolver.getSingleValue(args[0], ec.getRowIndex(), ec.getColumnIndex());            text = OperandResolver.coerceValueToString(ve);            switch (args.length) {                case 1:                    isA1style = true;                    break;                case 2:                    isA1style = EvaluateBooleanArg(args[1], ec);                    break;                default:                    return ErrorEval.VALUE_INVALID;            }        } catch (EvaluationException e) {            return e.getErrorEval();        }        return EvaluateIndirect(ec, text, isA1style);    }
public int compareTo(int[] bs, int p) {        int cmp;        cmp = NB.compareUInt32(w1, bs[p]);        if (cmp != 0) {            return cmp;        }        cmp = NB.compareUInt32(w2, bs[p + 1]);        if (cmp != 0) {            return cmp;        }        cmp = NB.compareUInt32(w3, bs[p + 2]);        if (cmp != 0) {            return cmp;        }        cmp = NB.compareUInt32(w4, bs[p + 3]);        if (cmp != 0) {            return cmp;        }        return NB.compareUInt32(w5, bs[p + 4]);    }
public void removeName(int index) {        names.remove(index);        workbook.removeName(index);    }
public class GetQueueAttributesRequest {        private String queueUrl;        private List<String> attributeNames;        public GetQueueAttributesRequest(String queueUrl, List<String> attributeNames) {            this.queueUrl = queueUrl;            this.attributeNames = attributeNames;        }    }
public static boolean[] copyOf(boolean[] original, int newLength) {        if (newLength < 0) {            throw new java.lang.NegativeArraySizeException();        }        return java.util.Arrays.copyOfRange(original, 0, newLength);    }
public static void setEnabled(boolean enabled){        ENABLED = enabled;    }
public DeleteLogPatternResponse deleteLogPattern(DeleteLogPatternRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteLogPatternRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteLogPatternResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteLogPatternResponse.class);    }
public boolean Contains(char[] text, int offset, int length) {        return map.containsKey(text, offset, length);    }
public int GetFirstSheetIndexFromExternSheetIndex(int externSheetNumber) {        return linkTable.GetFirstInternalSheetIndexForExtIndex(externSheetNumber);    }
public boolean handles(String commandLine) {        return commandLine.length() > command.length() + 1                && commandLine.charAt(command.length()) == ' '                && commandLine.startsWith(command);    }
public static void Register(MergeStrategy imp) {        Register(imp.GetName(), imp);    }
public long RamBytesUsed() {        return ((index != null) ? index.GetSizeInBytes() : 0);    }
public class HostedZone {        private String id;        private String name;        private String callerReference;                public HostedZone(String id, String name, String callerReference) {            this.id = id;            this.name = name;            this.callerReference = callerReference;        }    }
public GetFindingsResponse getFindings(GetFindingsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetFindingsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetFindingsResponseUnmarshaller.getInstance());        return invoke(request, options, GetFindingsResponse.class);    }
public DescribeTopicsDetectionJobResponse describeTopicsDetectionJob(DescribeTopicsDetectionJobRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeTopicsDetectionJobRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeTopicsDetectionJobResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeTopicsDetectionJobResponse.class);    }
public boolean processMatch(ValueEval eval) {        if (eval instanceof NumericValueEval) {            if (minimumValue == null) {                minimumValue = eval;            } else {                double currentValue = ((NumericValueEval) eval).getNumberValue();                double oldValue = ((NumericValueEval) minimumValue).getNumberValue();                if (currentValue < oldValue) {                    minimumValue = eval;                }            }        }        return true;    }
public void Write(ILittleEndianOutput out1) {        out1.WriteByte((byte) (sid + PtgClass));        out1.WriteShort(field_1_len_ref_subexpression);    }
public static void main(String[] args) throws IOException {        boolean printTree = false;        String path = null;        for (int i = 0; i < args.length; i++) {            if (args[i].equals("-printTree")) {                printTree = true;            } else {                path = args[i];            }        }        if (args.length != (printTree ? 2 : 1)) {            throw new IllegalArgumentException();        }        try (Directory dir = FSDirectory.open(new File(path).toPath());             DirectoryTaxonomyReader r = new DirectoryTaxonomyReader(dir)) {            printStats(r, System.out, printTree);        }    }    private static void printStats(DirectoryTaxonomyReader r, PrintStream out, boolean printTree) throws IOException {        // Implementation of PrintStats method goes here.    }
public void setByteValue(byte value) {        if (!(fieldsData instanceof Byte)) {            throw new IllegalArgumentException("cannot change value type from " + fieldsData.getClass().getSimpleName() + " to Byte");        }        fieldsData = Byte.valueOf(value);    }
public static int initialize() {        return initialize(defaultSeed);    }    private static int defaultSeed = 12345; // or any other integer value    private static int initialize(int seed) {        // initialization logic here    }
public class CachingDoubleValueSource {        private ValueSource m_source;        private Map<Integer, Double> m_cache;        public CachingDoubleValueSource(ValueSource source) {            this.m_source = source;            this.m_cache = new HashMap<>();        }    }
public class AttributeDefinition {        private String attributeName;        private ScalarAttributeType attributeType;        public AttributeDefinition(String attributeName, ScalarAttributeType attributeType) {            this.attributeName = attributeName;            this.attributeType = attributeType;        }    }
public static String join(Collection<String> parts, String separator) {        return org.eclipse.jgit.util.StringUtils.join(parts, separator, separator);    }
public ListTaskDefinitionFamiliesResponse listTaskDefinitionFamilies(ListTaskDefinitionFamiliesRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ListTaskDefinitionFamiliesRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ListTaskDefinitionFamiliesResponseUnmarshaller.getInstance());        return invoke(request, options, ListTaskDefinitionFamiliesResponse.class);    }
public ListComponentsResponse listComponents(ListComponentsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ListComponentsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ListComponentsResponseUnmarshaller.getInstance());        return invoke(ListComponentsResponse.class, request, options);    }
public class ActivatePhotosRequest extends SomeBaseClass {        public ActivatePhotosRequest() {            super("CloudPhoto", "2017-07-11", "ActivatePhotos", "cloudphoto", "openAPI");            setProtocol(ProtocolType.HTTPS);        }    }
public CreateMatchmakingRuleSetResponse createMatchmakingRuleSet(CreateMatchmakingRuleSetRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateMatchmakingRuleSetRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateMatchmakingRuleSetResponseUnmarshaller.getInstance());        return invoke(request, options, CreateMatchmakingRuleSetResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> clazz) {        // Implementation of the `invoke` method    }
public ListAvailableManagementCidrRangesResponse listAvailableManagementCidrRanges(ListAvailableManagementCidrRangesRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ListAvailableManagementCidrRangesRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ListAvailableManagementCidrRangesResponseUnmarshaller.getInstance());        return invoke(request, options, ListAvailableManagementCidrRangesResponse.class);    }
public ObjectIdSubclassMap<ObjectId> getBaseObjectIds() {        if (baseObjectIds != null) {            return baseObjectIds;        }        return new ObjectIdSubclassMap<ObjectId>();    }
public DeletePushTemplateResponse deletePushTemplate(DeletePushTemplateRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeletePushTemplateRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeletePushTemplateResponseUnmarshaller.getInstance());        return invoke(request, options, DeletePushTemplateResponse.class);    }
public CreateDomainEntryResponse createDomainEntry(CreateDomainEntryRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateDomainEntryRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateDomainEntryResponseUnmarshaller.getInstance());        return invoke(CreateDomainEntryResponse.class, request, options);    }
public static int getEncodedSize(Object[] values){        int result = values.length * 1;        for (int i = 0; i < values.length; i++){            result += getEncodedSize(values[i]);        }        return result;    }
public OpenNLPTokenizerFactory(Map<String, String> args) throws IllegalArgumentException {        super(args);        sentenceModelFile = Require(args, SENTENCE_MODEL);        tokenizerModelFile = Require(args, TOKENIZER_MODEL);        if (!args.isEmpty()) {            throw new IllegalArgumentException("Unknown parameters: " + args);        }    }
public final int getInt(int index) {        checkIndex(index, libcore.io.SizeOf.INT);        return libcore.io.Memory.peekInt(backingArray, offset + index, _order);    }
public List<Head> getNextHeads(char c) {        if (matches(c)) {            return newHeads;        } else {            return FileNameMatcher.EMPTY_HEAD_LIST;        }    }    public boolean matches(char c) {        // implementation of Matches method goes here    }
@Override    public java.nio.ByteBuffer putShort(short value) {        throw new UnsupportedOperationException();    }
public void writeUnshared(Object object) throws NotImplementedException {        throw new NotImplementedException();    }
public int offsetByCodePoints(int index, int codePointOffset) {        return Character.offsetByCodePoints(value, index, codePointOffset);    }
public static int getUniqueAlt(Iterable<BitSet> altsets) {        BitSet all = getAlts(altsets);        if (all.cardinality() == 1) {            return all.nextSetBit(0);        }        return ATN.INVALID_ALT_NUMBER;    }    private static BitSet getAlts(Iterable<BitSet> altsets) {        BitSet all = new BitSet();        for (BitSet altset : altsets) {            all.or(altset);        }        return all;    }
public Date getWhen() {      return new Date(when);    }
public RuleTagToken(String ruleName, int bypassTokenType, String label) {        if (ruleName == null || ruleName.isEmpty()) {            throw new IllegalArgumentException("ruleName cannot be null or empty.");        }        this.ruleName = ruleName;        this.bypassTokenType = bypassTokenType;        this.label = label;    }
public DisableOrganizationAdminAccountResponse disableOrganizationAdminAccount(DisableOrganizationAdminAccountRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DisableOrganizationAdminAccountRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DisableOrganizationAdminAccountResponseUnmarshaller.getInstance());        return invoke(request, options, DisableOrganizationAdminAccountResponse.class);    }
public CreateRoomResponse createRoom(CreateRoomRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateRoomRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateRoomResponseUnmarshaller.getInstance());        return invoke(request, options, CreateRoomResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> responseType) {        // implementation of the invoke method    }
public DeleteReplicationGroupResponse deleteReplicationGroup(DeleteReplicationGroupRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteReplicationGroupRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteReplicationGroupResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteReplicationGroupResponse.class);    }
public java.nio.CharBuffer decode(java.nio.ByteBuffer buffer) {        try {            return java.nio.charset.Charset.defaultCharset().newDecoder()                    .onMalformedInput(java.nio.charset.CodingErrorAction.REPLACE)                    .onUnmappableCharacter(java.nio.charset.CodingErrorAction.REPLACE)                    .decode(buffer);        } catch (java.nio.charset.CharacterCodingException ex) {            throw new java.lang.Exception(ex.getMessage(), ex);        }    }
public Distribution(String id, String status, String domainName) {        this._id = id;        this._status = status;        this._domainName = domainName;    }
@Override    public Object[] array() {        return protectedArray();    }
public DateWindow1904Record(RecordInputStream in1) {        field_1_window = in1.readShort();    }
public DeleteDBSnapshotRequest(String dbSnapshotIdentifier) {        _dbSnapshotIdentifier = dbSnapshotIdentifier;    }
public ParserExtension getExtension(String key) {        ParserExtension value;        if (key == null || !this.extensions.TryGetValue(key, value)) {            return null;        }        return value;    }
public void inform(IResourceLoader loader) {        try {            if (chunkerModelFile != null) {                OpenNLPOpsFactory.getChunkerModel(chunkerModelFile, loader);            }        } catch (IOException e) {            throw new IllegalArgumentException(e.toString(), e);        }    }
public CompleteVaultLockResponse CompleteVaultLock(CompleteVaultLockRequest request){        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CompleteVaultLockRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CompleteVaultLockResponseUnmarshaller.getInstance());        return invoke(request, options, CompleteVaultLockResponse.class);    }
public int[] getCharIntervals() {        return Arrays.copyOf(_points, _points.length);    }
public long RamBytesUsed() {        return RamUsageEstimator.AlignObjectSize(3 * RamUsageEstimator.NUM_BYTES_OBJECT_REF + 2 * RamUsageEstimator.NUM_BYTES_INT32)                + RamUsageEstimator.sizeOf(data) + positions.ramBytesUsed() + wordNums.ramBytesUsed();    }
public RegisterInstancesWithLoadBalancerResponse registerInstancesWithLoadBalancer(RegisterInstancesWithLoadBalancerRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(RegisterInstancesWithLoadBalancerRequestMarshaller.getInstance());        options.setResponseUnmarshaller(RegisterInstancesWithLoadBalancerResponseUnmarshaller.getInstance());        return invoke(request, options, RegisterInstancesWithLoadBalancerResponse.class);    }
public class DescribeClusterUserKubeconfigRequest extends Request {                public DescribeClusterUserKubeconfigRequest() {            super("CS", "2015-12-15", "DescribeClusterUserKubeconfig", "cs", "openAPI");            setUriPattern("/k8s/[ClusterId]/user_config");            setMethod(MethodType.GET);        }    }
public PrecisionRecord(RecordInputStream in1) {        field_1_precision = in1.readShort();    }
@Override    public void serialize(ILittleEndianOutput out1) {        out1.writeShort(LeftRowGutter);        out1.writeShort(TopColGutter);        out1.writeShort(RowLevelMax);        out1.writeShort(ColLevelMax);    }
public DeleteVirtualInterfaceResponse DeleteVirtualInterface(DeleteVirtualInterfaceRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteVirtualInterfaceRequestMarshaller.Instance);        options.setResponseUnmarshaller(DeleteVirtualInterfaceResponseUnmarshaller.Instance);        return invoke(request, options, DeleteVirtualInterfaceResponse.class);    }
public Entry getEntry(String name) throws FileNotFoundException {        if (excludes.contains(name)) {            throw new FileNotFoundException(name);        }        Entry entry = directory.getEntry(name);        return wrapEntry(entry);    }
public String toString() {        StringBuilder buffer = new StringBuilder();        buffer.append("[BACKUP]\n");        buffer.append("    .backup          = ").append(StringUtil.toHexString(Backup)).append("\n");        buffer.append("[/BACKUP]\n");        return buffer.toString();    }
public DeleteVoiceConnectorOriginationResponse deleteVoiceConnectorOrigination(DeleteVoiceConnectorOriginationRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteVoiceConnectorOriginationRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteVoiceConnectorOriginationResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteVoiceConnectorOriginationResponse.class);    }
public OpenStringBuilder append(char c) {        write(c);        return this;    }
public static long generationFromSegmentsFileName(String fileName) {        if (fileName.equals(IndexFileNames.SEGMENTS)) {            return 0;        } else if (fileName.startsWith(IndexFileNames.SEGMENTS)) {            return Long.parseLong(fileName.substring(1 + IndexFileNames.SEGMENTS.length()), Character.MAX_RADIX);        } else {            throw new IllegalArgumentException("fileName \"" + fileName + "\" is not a segments file");        }    }
public static NGit.Transport.TagOpt fromOption(String o) {        if (o == null || o.length() == 0) {            return NGit.Transport.TagOpt.AUTO_FOLLOW;        }        for (NGit.Transport.TagOpt tagopt : NGit.Transport.TagOpt.values()) {            if (tagopt.option().equals(o)) {                return tagopt;            }        }        throw new IllegalArgumentException(MessageFormat.format(JGitText.get().invalidTagOption, o));    }
public StartContentModerationResponse startContentModeration(StartContentModerationRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(StartContentModerationRequestMarshaller.getInstance());        options.setResponseUnmarshaller(StartContentModerationResponseUnmarshaller.getInstance());        return invoke(request, options, StartContentModerationResponse.class);    }
public static String quoteReplacement(String s) {        StringBuilder result = new StringBuilder(s.length());        for (int i = 0; i < s.length(); i++) {            char c = s.charAt(i);            if (c == '\\' || c == '$') {                result.append('\\');            }            result.append(c);        }        return result.toString();    }
public void set(V newValue) {        value = newValue;    }
public QueryParserTokenManager(ICharStream stream) {        InitBlock();        m_input_stream = stream;    }
public long valueFor(double elapsed) {        double val;        if (modBy == 0)            val = elapsed / factor;        else            val = elapsed / factor % modBy;                if (type == '0')            return Math.round(val);        else            return (long) val;    }
public java.nio.LongBuffer get(long[] dst, int dstOffset, int longCount) {        byteBuffer.limit(_limit * libcore.io.SizeOf.LONG);        byteBuffer.position(_position * libcore.io.SizeOf.LONG);        if (byteBuffer instanceof java.nio.DirectByteBuffer) {            ((java.nio.DirectByteBuffer) byteBuffer).get(dst, dstOffset, longCount);        } else {            ((java.nio.HeapByteBuffer) byteBuffer).get(dst, dstOffset, longCount);        }        this._position += longCount;        return this;    }
public void removeErrorListeners() {        listeners = new IAntlrErrorListener<Symbol>[0];    }
public CommonTokenStream(ITokenSource tokenSource, int channel) {        super(tokenSource);        this.channel = channel;    }
public ListObjectPoliciesResponse listObjectPolicies(ListObjectPoliciesRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ListObjectPoliciesRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ListObjectPoliciesResponseUnmarshaller.getInstance());        return invoke(request, options, ListObjectPoliciesResponse.class);    }
public ObjectToPack(AnyObjectId src, int type) {        super(src);        flags = type << TYPE_SHIFT;    }
public int stem(char[] s, int len) {        int numVowels = numVowels(s, len);        for (int i = 0; i < affixes.length; i++) {            Affix affix = affixes[i];            if (numVowels > affix.vc && len >= affix.affix.length() + 3 && StemmerUtil.endsWith(s, len, affix.affix)) {                len -= affix.affix.length();                return affix.palatalizes ? unpalatalize(s, len) : len;            }        }        return len;    }    public int numVowels(char[] s, int len) {        int count = 0;        for (int i = 0; i < len; i++) {            if (isVowel(s[i])) {                count++;            }        }        return count;    }    public boolean isVowel(char c) {        return "aeiou".indexOf(c) != -1;    }    public int unpalatalize(char[] s, int len) {        // implementation omitted        return len;    }    public class Affix {        public int vc;        public String affix;        public boolean palatalizes;        public Affix(int vc, String affix, boolean palatalizes) {            this.vc = vc;            this.affix = affix;            this.palatalizes = palatalizes;        }    }    public class StemmerUtil {        public static boolean endsWith(char[] s, int len, String suffix) {            if (suffix.length() > len) {                return false;            }            for (int i = suffix.length() - 1, j = len - 1; i >= 0; i--, j--) {                if (s[j] != suffix.charAt(i)) {                    return false;                }            }            return true;        }    }
public void recover(Parser recognizer, RecognitionException e) {        if (lastErrorIndex == ((TokenStream) recognizer.getInputStream()).index() && lastErrorStates != null && lastErrorStates.contains(recognizer.getState())) {            recognizer.consume();        }        lastErrorIndex = ((TokenStream) recognizer.getInputStream()).index();        if (lastErrorStates == null) {            lastErrorStates = new IntervalSet();        }        lastErrorStates.add(recognizer.getState());        IntervalSet followSet = getErrorRecoverySet(recognizer);        consumeUntil(recognizer, followSet);    }
public String toFormulaString() {        String value = field_3_string;        int len = value.length();        StringBuilder sb = new StringBuilder(len + 4);        sb.append(FORMULA_DELIMITER);        for (int i = 0; i < len; i++) {            char c = value.charAt(i);            if (c == FORMULA_DELIMITER) {                sb.append(FORMULA_DELIMITER);            }            sb.append(c);        }        sb.append(FORMULA_DELIMITER);        return sb.toString();    }
public class UnlinkFaceRequest extends Request {        public UnlinkFaceRequest() {            super("LinkFace", "2018-07-20", "UnlinkFace");            setProtocol(ProtocolType.HTTPS);            setMethod(MethodType.POST);        }            }
public ConfigurationOptionSetting(String awsNamespace, String optionName, String value) {        _awsNamespace = awsNamespace;        _optionName = optionName;        _value = value;    }
public String getFully(String key) {        StringBuilder result = new StringBuilder(m_tries.size() * 2);        for (int i = 0; i < m_tries.size(); i++) {            String r = m_tries.get(i).getFully(key);            if (r == null || (r.length() == 1 && r.charAt(0) == EOM)) {                return result.toString();            }            result.append(r);        }        return result.toString();    }
public DescribeMountTargetSecurityGroupsResponse describeMountTargetSecurityGroups(DescribeMountTargetSecurityGroupsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeMountTargetSecurityGroupsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeMountTargetSecurityGroupsResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeMountTargetSecurityGroupsResponse.class);    }
public GetApiMappingResponse getApiMapping(GetApiMappingRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetApiMappingRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetApiMappingResponseUnmarshaller.getInstance());        return invoke(request, options);    }    public <T> T invoke(GetApiMappingRequest request, InvokeOptions options) {        // implementation of invoke method        // ...    }
public HttpRequest(String strUrl) {        Url = strUrl;        Headers = new HashMap<String, String>();    }
public MemFuncPtg(int subExprLen){        field_1_len_ref_subexpression = subExprLen;    }
public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field, Comparator<TermStats> comparer) throws IOException {        TermStatsQueue tiq = null;        if (field != null) {            Fields fields = MultiFields.getFields(reader);            if (fields == null) {                throw new Exception("field " + field + " not found");            }            Terms terms = fields.terms(field);            if (terms != null) {                TermsEnum termsEnum = terms.iterator();                tiq = new TermStatsQueue(numTerms, comparer);                tiq.fill(field, termsEnum);            }        } else {            Fields fields = MultiFields.getFields(reader);            if (fields == null) {                throw new Exception("no fields found for this index");            }            tiq = new TermStatsQueue(numTerms, comparer);            for (String fieldName : fields) {                Terms terms = fields.terms(fieldName);                if (terms != null) {                    tiq.fill(fieldName, terms.iterator());                }            }        }        TermStats[] result = new TermStats[tiq.size()];        int count = tiq.size() - 1;        while (tiq.size() != 0) {            result[count] = tiq.pop();            count--;        }        return result;    }
public DeleteApnsVoipChannelResponse deleteApnsVoipChannel(DeleteApnsVoipChannelRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteApnsVoipChannelRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteApnsVoipChannelResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteApnsVoipChannelResponse.class);    }    private <T> T invoke(Request<T> request, InvokeOptions options, Class<T> responseClass) {        // implementation details    }
public ListFacesResponse listFaces(ListFacesRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ListFacesRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ListFacesResponseUnmarshaller.getInstance());        return invoke(ListFacesResponse.class, request, options);    }
public ShapeFieldCacheDistanceValueSource(SpatialContext ctx, ShapeFieldCacheProvider<IPoint> provider, IPoint from, double multiplier) {        this.ctx = ctx;        this.from = from;        this.provider = provider;        this.multiplier = multiplier;    }
public char get(int index) {        checkIndex(index);        return sequence[index];    }    private void checkIndex(int index) {        if (index < 0 || index >= sequence.length) {            throw new IndexOutOfBoundsException("Index " + index + " out of bounds for sequence of length " + sequence.length);        }    }
public UpdateConfigurationProfileResponse updateConfigurationProfile(UpdateConfigurationProfileRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(UpdateConfigurationProfileRequestMarshaller.getInstance());        options.setResponseUnmarshaller(UpdateConfigurationProfileResponseUnmarshaller.getInstance());        return invoke(request, options, UpdateConfigurationProfileResponse.class);    }
public DescribeLifecycleHooksResponse describeLifecycleHooks(DescribeLifecycleHooksRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeLifecycleHooksRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeLifecycleHooksResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeLifecycleHooksResponse.class);    }
public DescribeHostReservationsResponse describeHostReservations(DescribeHostReservationsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeHostReservationsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeHostReservationsResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeHostReservationsResponse.class);    }
public static PredictionContext fromRuleContext(ATN atn, RuleContext outerContext) {        if (outerContext == null) outerContext = ParserRuleContext.EMPTY;        if (outerContext.getParent() == null || outerContext == ParserRuleContext.EMPTY) {            return PredictionContext.EMPTY;        }        PredictionContext parent = PredictionContext.fromRuleContext(atn, outerContext.getParent());        ATNState state = atn.states[outerContext.invokingState];        RuleTransition transition = (RuleTransition)state.transition(0);        return parent.getChild(transition.followState.stateNumber);    }
@Override    public String toString() {        StringBuilder buffer = new StringBuilder();        buffer.append("[SXVDEX]\n");        buffer.append("    .grbit1 = ").append(Integer.toHexString(grbit1)).append("\n");        buffer.append("    .grbit2 = ").append(Byte.toHexString(grbit2)).append("\n");        buffer.append("    .citmShow = ").append(Byte.toHexString(citmShow)).append("\n");        buffer.append("    .isxdiSort = ").append(Short.toHexString(isxdiSort)).append("\n");        buffer.append("    .isxdiShow = ").append(Short.toHexString(isxdiShow)).append("\n");        buffer.append("    .subName = ").append(subName).append("\n");        buffer.append("[/SXVDEX]\n");        return buffer.toString();    }
@Override    public String toString() {        StringBuilder r = new StringBuilder();        r.append("BlameResult: ");        r.append(getResultPath());        return r.toString();    }
public ListChangeSetsResponse listChangeSets(ListChangeSetsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ListChangeSetsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ListChangeSetsResponseUnmarshaller.getInstance());        return invoke(request, options, ListChangeSetsResponse.class);    }    private <T> T invoke(Request request, InvokeOptions options, Class<T> clazz) {        // Implement your own method to handle request invoking logic.        // This method should invoke the request using the given options and return the response object with the specified class type.        // For example, you could use the AWS SDK for Java to invoke an AWS service request.    }
public boolean isAllowNonFastForwards() {        return allowNonFastForwards;    }
public FeatRecord() {        futureHeader = new FtrHeader();        futureHeader.setRecordType(sid);    }
public java.nio.ShortBuffer put(short c) {        throw new java.nio.ReadOnlyBufferException();    }
public void setQuery(String query) {        this.query = query;        this.m_message = new Message(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, "");    }
public StashApplyCommand stashApply() {        return new StashApplyCommand(repo);    }
public Collection<String> NameSet() {        return dictionaryNameToID.keySet();    }
public static int getEffectivePort(string scheme, int specifiedPort){        if (specifiedPort != -1){            return specifiedPort;        }        if (Sharpen.StringHelper.EqualsIgnoreCase("http", scheme)){            return 80;        } else {            if (Sharpen.StringHelper.EqualsIgnoreCase("https", scheme)){                return 443;            } else {                return -1;            }        }    }
public ListAssessmentTemplatesResponse listAssessmentTemplates(ListAssessmentTemplatesRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ListAssessmentTemplatesRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ListAssessmentTemplatesResponseUnmarshaller.getInstance());        return invoke(request, options, ListAssessmentTemplatesResponse.class);    }
public RestoreFromClusterSnapshotResponse restoreFromClusterSnapshot(RestoreFromClusterSnapshotRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(RestoreFromClusterSnapshotRequestMarshaller.getInstance());        options.setResponseUnmarshaller(RestoreFromClusterSnapshotResponseUnmarshaller.getInstance());        return invoke(request, options, RestoreFromClusterSnapshotResponse.class);    }
public void addShape(HSSFShape shape) {        shape.setPatriarch(this.getPatriarch());        shape.setParent(this);        shapes.add(shape);    }
@Override    public boolean equals(Object o) {        if (this == o) return true;        if (o == null || getClass() != o.getClass()) return false;        FacetEntry that = (FacetEntry) o;        if (count != that.count) return false;        if (!value.equals(that.value)) return false;        return true;    }
public static int Prev(byte[] b, int ptr, char chrA) {        if (ptr == b.length) {            --ptr;        }        while (ptr >= 0) {            if (b[ptr--] == (byte) chrA) {                return ptr;            }        }        return ptr;    }
public boolean isDeltaRepresentation() {        return deltaBase != null;    }
public IToken emitEOF() {        int cpos = column;        int line = line;        IToken eof = _factory.create(_tokenFactorySourcePair, TokenConstants.EOF, null, TokenConstants.DefaultChannel, _input.index(), _input.index() - 1, line, cpos);        emit(eof);        return eof;    }
public class UpdateUserRequest {        private String userName;        public UpdateUserRequest(String userName) {            this.userName = userName;        }    }
public RevFilter Negate() {        return NotRevFilter.Create(this);    }
public void SetTagger(PersonIdent taggerIdent) {        tagger = taggerIdent;    }
public static BufferSize automatic() {        long max, total, free;        try {            Process proc = Runtime.getRuntime().exec("jps -lvm");            BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getInputStream()));            String line;            while ((line = reader.readLine()) != null) {                if (line.contains("YourApplicationClassName")) {                    String[] tokens = line.split("\\s+");                    max = Long.parseLong(tokens[1].replaceAll(",", ""));                    total = Long.parseLong(tokens[2].replaceAll(",", ""));                    free = Long.parseLong(tokens[3].replaceAll(",", ""));                    break;                }            }        } catch (IOException e) {            max = Runtime.getRuntime().maxMemory();            total = Runtime.getRuntime().totalMemory();            free = Runtime.getRuntime().freeMemory();        }        long totalAvailableBytes = max - total + free;        long sortBufferByteSize = free / 2;        long minBufferSizeBytes = MIN_BUFFER_SIZE_MB * MB;        if (sortBufferByteSize < minBufferSizeBytes || totalAvailableBytes > 10 * minBufferSizeBytes) {            if (totalAvailableBytes / 2 > minBufferSizeBytes) {                sortBufferByteSize = totalAvailableBytes / 2;            } else {                sortBufferByteSize = Math.max(ABSOLUTE_MIN_SORT_BUFFER_SIZE, sortBufferByteSize);            }        }        return new BufferSize(Math.min((long) Integer.MAX_VALUE, sortBufferByteSize));    }
public static int TrimTrailingWhitespace(byte[] raw, int start, int end) {        int ptr = end - 1;        while (start <= ptr && IsWhitespace(raw[ptr])) {            ptr--;        }        return ptr + 1;    }
public TopMarginRecord(RecordInputStream in1){        field_1_margin = in1.readDouble();    }
public RetrieveEnvironmentInfoRequest(EnvironmentInfoType infoType){        _infoType = infoType;    }
public CreatePlayerSessionsResponse createPlayerSessions(CreatePlayerSessionsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreatePlayerSessionsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreatePlayerSessionsResponseUnmarshaller.getInstance());        return invoke(CreatePlayerSessionsResponse.class, request, options);    }
public CreateProxySessionResponse createProxySession(CreateProxySessionRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateProxySessionRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateProxySessionResponseUnmarshaller.getInstance());        return invoke(request, options, CreateProxySessionResponse.class);    }    private <T> T invoke(CreateProxySessionRequest request, InvokeOptions options, Class<T> responseClass) {        // implement the invoke method here    }
public int GetObjectType() {        return type;    }
public String getScheme() {        return scheme;    }
public void characters(char[] ch, int start, int length) {        contents.append(ch, start, length);    }
public class FetchAlbumTagPhotosRequest extends BaseRequest {        public FetchAlbumTagPhotosRequest() {            super("CloudPhoto", "2017-07-11", "FetchAlbumTagPhotos", "cloudphoto", "openAPI");            setProtocol(ProtocolType.HTTPS);        }    }
public DeleteMembersResponse deleteMembers(DeleteMembersRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteMembersRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteMembersResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteMembersResponse.class);    }
public GetContactReachabilityStatusResponse getContactReachabilityStatus(GetContactReachabilityStatusRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetContactReachabilityStatusRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetContactReachabilityStatusResponseUnmarshaller.getInstance());        return invoke(request, options, GetContactReachabilityStatusResponse.class);    }
public boolean remove(Object o) {        synchronized (this._enclosing) {            int oldSize = this._enclosing._size;            this._enclosing.remove(o);            return this._enclosing._size != oldSize;        }    }
public E last() {        return backingMap.lastKey();    }
public CreateStreamingDistributionResponse createStreamingDistribution(CreateStreamingDistributionRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateStreamingDistributionRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateStreamingDistributionResponseUnmarshaller.getInstance());        return invoke(request, options);    }    private <T> T invoke(CreateStreamingDistributionRequest request, InvokeOptions options) {        // Implementation of invoke method        // Replace with actual implementation or use a library that provides similar functionality        // based on the context where this code will be used        // ...    }
public boolean isAbsolute() {        return absolute;    }
public DisableAddOnResponse disableAddOn(DisableAddOnRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DisableAddOnRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DisableAddOnResponseUnmarshaller.getInstance());        return invoke(request, options, DisableAddOnResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> responseType) {        // implementation details omitted    }
public DescribeAliasResponse describeAlias(DescribeAliasRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeAliasRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeAliasResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeAliasResponse.class);    }    private <T> T invoke(DescribeAliasRequest request, InvokeOptions options, Class<T> responseType) {        // Your implementation for invoking the request goes here    }
public void Next(int delta) {        while (--delta >= 0) {            if (currentSubtree != null) {                ptr += currentSubtree.getEntrySpan();            } else {                ptr++;            }            if (isEof()) {                break;            }            parseEntry();        }    }
@Override    public RevFilter clone() {        return new AndRevFilter.Binary(a.clone(), b.clone());    }
@Override    public TextReader Create(TextReader input) {        return new PersianCharFilter(input);    }
public String Option() {        return option;    }
@Override    public String toString() {        StringBuilder sb = new StringBuilder("[");        for (Object item : this) {            if (sb.length() > 1) {                sb.append(", ");            }            sb.append(item);        }        return sb.append(']').toString();    }
public DescribeSignalingChannelResponse describeSignalingChannel(DescribeSignalingChannelRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeSignalingChannelRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeSignalingChannelResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeSignalingChannelResponse.class);    }
public AttachStaticIpResponse attachStaticIp(AttachStaticIpRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(AttachStaticIpRequestMarshaller.getInstance());        options.setResponseUnmarshaller(AttachStaticIpResponseUnmarshaller.getInstance());        return invoke(request, options, AttachStaticIpResponse.class);    }    private <T> T invoke(AttachStaticIpRequest request, InvokeOptions options, Class<T> responseClass) {        // implementation details here    }
@Override    public String toString() {        StringBuilder sb = new StringBuilder(64);        CellReference crA = new CellReference(_firstRowIndex, _firstColumnIndex, false, false);        CellReference crB = new CellReference(_lastRowIndex, _lastColumnIndex, false, false);        sb.append(getClass().getSimpleName());        sb.append(" [").append(crA.formatAsString()).append(':').append(crB.formatAsString()).append("]");        return sb.toString();    }
public class BloomFilteringPostingsFormat extends PostingsFormat {        private PostingsFormat delegatePostingsFormat;        private BloomFilterFactory bloomFilterFactory;        public BloomFilteringPostingsFormat(PostingsFormat delegatePostingsFormat, BloomFilterFactory bloomFilterFactory) {            this.delegatePostingsFormat = delegatePostingsFormat;            this.bloomFilterFactory = bloomFilterFactory;        }    }
public ListTemplatesResponse listTemplates(ListTemplatesRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ListTemplatesRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ListTemplatesResponseUnmarshaller.getInstance());        return invoke(request, options, ListTemplatesResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> clazz) {        // Implement your invoke logic here    }
public TimerThread(long resolution, Counter counter) {        super(THREAD_NAME);        this.resolution = resolution;        this.counter = counter;        setDaemon(true);    }
public DrawingRecord() {        recordData = new byte[0];    }
public ListDirectoriesResponse listDirectories(ListDirectoriesRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ListDirectoriesRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ListDirectoriesResponseUnmarshaller.getInstance());        return invoke(request, options, ListDirectoriesResponse.class);    }    @SuppressWarnings("unchecked")    private <X> X invoke(Object request, InvokeOptions options, Class<X> responseType) {        // Implement the logic of the invoke method here.        // ...    }
public void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {        for (int j = 0; j < iterations; j++) {            byte block = blocks[blocksOffset++];            values[valuesOffset++] = ((int)((block & 0xFF) >>> 7)) & 1;            values[valuesOffset++] = ((int)((block & 0xFF) >>> 6)) & 1;            values[valuesOffset++] = ((int)((block & 0xFF) >>> 5)) & 1;            values[valuesOffset++] = ((int)((block & 0xFF) >>> 4)) & 1;            values[valuesOffset++] = ((int)((block & 0xFF) >>> 3)) & 1;            values[valuesOffset++] = ((int)((block & 0xFF) >>> 2)) & 1;            values[valuesOffset++] = ((int)((block & 0xFF) >>> 1)) & 1;            values[valuesOffset++] = block & 1;        }    }
public GroupingSearch disableCaching() {        this.maxCacheRAMMB = null;        this.maxDocsToCache = null;        return this;    }
public static int idealByteArraySize(int need) {        for (int i = 4; i < 32; i++) {            if (need <= (1 << i) - 12) {                return (1 << i) - 12;            }        }        return need;    }
public UpdateAssessmentTargetResponse updateAssessmentTarget(UpdateAssessmentTargetRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(UpdateAssessmentTargetRequestMarshaller.getInstance());        options.setResponseUnmarshaller(UpdateAssessmentTargetResponseUnmarshaller.getInstance());        return invoke(request, options, UpdateAssessmentTargetResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> responseClass) {        // Implementation details of the invoke method go here    }
public ModifyVolumeResponse modifyVolume(ModifyVolumeRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ModifyVolumeRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ModifyVolumeResponseUnmarshaller.getInstance());        return invoke(request, options, ModifyVolumeResponse.class);    }
public Cell Merge(Cell m, Cell e) {        if (m.cmd.equals(e.cmd) && m.ref.equals(e.ref) && m.skip == e.skip) {            Cell c = new Cell(m);            c.cnt += e.cnt;            return c;        } else {            return null;        }    }
public ByteBuffer read(int length, long position) throws IOException {        if (position >= size)            throw new IllegalArgumentException("Position " + position + " past the end of the file");        ByteBuffer dst;        int worked = -1;        if (writable) {            dst = ByteBuffer.allocate(length);            worked = 0;        } else {            fileStream.position(position);            dst = ByteBuffer.allocate(length);            worked = IOUtils.readFully(fileStream, dst.array());        }        if (worked == -1)            throw new IllegalArgumentException("Position " + position + " past the end of the file");        dst.position(0);        return dst;    }
public RespondActivityTaskCompletedResponse respondActivityTaskCompleted(RespondActivityTaskCompletedRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(RespondActivityTaskCompletedRequestMarshaller.getInstance());        options.setResponseUnmarshaller(RespondActivityTaskCompletedResponseUnmarshaller.getInstance());        return invoke(request, options, RespondActivityTaskCompletedResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> responseType) {        // implementation details of the "invoke" method    }
public synchronized void incrementProgressBy(int diff) {        setProgress(mProgress + diff);    }
public WorkingTreeIterator.MetadataDiff compareMetadata(DirCacheEntry entry) {        if (entry.isAssumeValid()) {            return WorkingTreeIterator.MetadataDiff.EQUAL;        }        if (entry.isUpdateNeeded()) {            return WorkingTreeIterator.MetadataDiff.DIFFER_BY_METADATA;        }        if (!entry.isSmudged() && entry.getLength() != (int) getEntryLength()) {            return WorkingTreeIterator.MetadataDiff.DIFFER_BY_METADATA;        }        if (isModeDifferent(entry.getRawMode())) {            return WorkingTreeIterator.MetadataDiff.DIFFER_BY_METADATA;        }        long cacheLastModified = entry.getLastModified();        long fileLastModified = getEntryLastModified();        if (cacheLastModified % 1000 == 0 || fileLastModified % 1000 == 0) {            cacheLastModified = cacheLastModified - cacheLastModified % 1000;            fileLastModified = fileLastModified - fileLastModified % 1000;        }        if (fileLastModified != cacheLastModified) {            return WorkingTreeIterator.MetadataDiff.DIFFER_BY_TIMESTAMP;        } else {            if (!entry.isSmudged()) {                return WorkingTreeIterator.MetadataDiff.EQUAL;            } else {                return WorkingTreeIterator.MetadataDiff.SMUDGED;            }        }    }
public static NumberRecord convertToNumberRecord(RKRecord rk) {        NumberRecord num = new NumberRecord();        num.setColumn(rk.getColumn());        num.setRow(rk.getRow());        num.setXFIndex(rk.getXFIndex());        num.setValue(rk.getRKNumber());        return num;    }
public java.nio.CharBuffer put(char[] src, int srcOffset, int charCount) {        byteBuffer.limit(_limit * libcore.io.SizeOf.CHAR);        byteBuffer.position(_position * libcore.io.SizeOf.CHAR);                if (byteBuffer instanceof java.nio.ReadWriteDirectByteBuffer) {            ((java.nio.ReadWriteDirectByteBuffer) byteBuffer).put(src, srcOffset, charCount);        } else {            ((java.nio.ReadWriteHeapByteBuffer) byteBuffer).put(src, srcOffset, charCount);        }                this._position += charCount;        return this;    }
public int GetCells() {        int size = 0;        for (char c : cells.keySet()) {            Cell e = At(c);            if (e.cmd >= 0 || e.ref >= 0) {                size++;            }        }        return size;    }
public BeiderMorseFilterFactory(Map<String, String> args) throws IllegalArgumentException {        super(args);        NameType nameType = NameType.valueOf(get(args, "nameType", NameType.GENERIC.toString()).toUpperCase());        RuleType ruleType = RuleType.valueOf(get(args, "ruleType", RuleType.APPROX.toString()).toUpperCase());        boolean concat = getBoolean(args, "concat", true);        engine = new PhoneticEngine(nameType, ruleType, concat);        Set<String> langs = getSet(args, "languageSet");        languageSet = (langs == null || (langs.size() == 1 && langs.contains("auto"))) ? null : LanguageSet.from(langs);        if (!args.isEmpty()) {            throw new IllegalArgumentException("Unknown parameters: " + args);        }    }
public static double varp(double[] v) {        double r = Double.NaN;        if (v != null && v.length > 1) {            r = devsq(v) / v.length;        }        return r;    }
public PersianNormalizationFilterFactory(IDictionary<String, String> args) : base(args){        if (args.size() > 0) {            throw new IllegalArgumentException("Unknown parameters: " + args);        }    }
public static WeightedTerm[] GetTerms(Query query, boolean prohibited, String fieldName) {        Set<WeightedTerm> terms = new HashSet<>();        if (fieldName != null) {            fieldName = fieldName.intern();        }        GetTerms(query, terms, prohibited, fieldName);        return terms.toArray(new WeightedTerm[0]);    }
public DeleteDocumentationPartResponse deleteDocumentationPart(DeleteDocumentationPartRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteDocumentationPartRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteDocumentationPartResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteDocumentationPartResponse.class);    }
public String toString() {        StringBuilder buffer = new StringBuilder();        buffer.append("[CHART]\n");        buffer.append("    .x                    = ").append("0x").append(Integer.toHexString(X)).append(" (").append(X).append(" )");        buffer.append(System.lineSeparator());        buffer.append("    .y                    = ").append("0x").append(Integer.toHexString(Y)).append(" (").append(Y).append(" )");        buffer.append(System.lineSeparator());        buffer.append("    .width                = ").append("0x").append(Integer.toHexString(Width)).append(" (").append(Width).append(" )");        buffer.append(System.lineSeparator());        buffer.append("    .height               = ").append("0x").append(Integer.toHexString(Height)).append(" (").append(Height).append(" )");        buffer.append(System.lineSeparator());        buffer.append("[/CHART]\n");        return buffer.toString();    }
@Override    public short get(int index) {        checkIndex(index);        return backingArray[offset + index];    }
@Override    public String toString() {        return Image;    }
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) {        try {            AreaEval reA = evaluateRef(arg0);            AreaEval reB = evaluateRef(arg1);            AreaEval result = resolveRange(reA, reB);                        if (result == null) {                return ErrorEval.NULL_INTERSECTION;            }                        return result;        } catch (EvaluationException e) {            return e.getErrorEval();        }    }    private AreaEval evaluateRef(ValueEval eval) throws EvaluationException {        if (eval instanceof AreaEval) {            return (AreaEval) eval;        } else if (eval instanceof RefEval) {            return ((RefEval) eval).offset(0, 0, 0, 0);        } else {            throw new EvaluationException(ErrorEval.VALUE_INVALID);        }    }    private AreaEval resolveRange(AreaEval aeA, AreaEval aeB) {        AreaI intersect = aeA.getIntersection(aeB);                if (intersect == null) {            return null;        } else if (intersect instanceof AreaEval) {            return (AreaEval) intersect;        } else {            return ErrorEval.NA;        }    }
public void clear() {        weightBySpanQuery.clear();    }
public int findEndOffset(StringBuilder buffer, int start) {        if (start > buffer.length() || start < 0) return start;        BreakIterator bi = BreakIterator.getCharacterInstance();        bi.setText(buffer.substring(start, buffer.length()));        return bi.next() + start;    }
public SrndQuery PrimaryQuery() throws ParseException, Exception {        SrndQuery q;        switch ((jj_ntk == -1) ? Jj_ntk() : jj_ntk) {            case RegexpToken.LPAREN:                Jj_consume_token(RegexpToken.LPAREN);                q = FieldsQuery();                Jj_consume_token(RegexpToken.RPAREN);                break;            case RegexpToken.OR:            case RegexpToken.AND:            case RegexpToken.W:            case RegexpToken.N:                q = PrefixOperatorQuery();                break;            case RegexpToken.TRUNCQUOTED:            case RegexpToken.QUOTED:            case RegexpToken.SUFFIXTERM:            case RegexpToken.TRUNCTERM:            case RegexpToken.TERM:                q = SimpleTerm();                break;            default:                jj_la1[5] = jj_gen;                Jj_consume_token(-1);                throw new ParseException();        }        OptionalWeights(q);        if (true)            return q;        throw new Exception("Missing return statement in function");    }
public DeleteApiKeyResponse deleteApiKey(DeleteApiKeyRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteApiKeyRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteApiKeyResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteApiKeyResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> responseType) {        // implementation of the invoke method    }
public class InsertTagsRequest extends RpcAcsRequest<InsertTagsResponse> {        public InsertTagsRequest() {            super("Ots", "2016-06-20", "InsertTags", "ots");            setMethod(MethodType.POST);        }    }
public DeleteUserByPrincipalIdResponse deleteUserByPrincipalId(DeleteUserByPrincipalIdRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteUserByPrincipalIdRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteUserByPrincipalIdResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteUserByPrincipalIdResponse.class);    }
public DescribeNetworkInterfacesResponse describeNetworkInterfaces(DescribeNetworkInterfacesRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeNetworkInterfacesRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeNetworkInterfacesResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeNetworkInterfacesResponse.class);    }    public <T> T invoke(DescribeNetworkInterfacesRequest request, InvokeOptions options, Class<T> responseType) {        // implementation of invoke method        // ...    }
@Override    public int Serialize(int offset, byte[] data, EscherSerializationListener listener) {        listener.BeforeRecordSerialize(offset, RecordId, this);        LittleEndian.putShort(data, offset, Options);        LittleEndian.putShort(data, offset + 2, RecordId);        LittleEndian.putInt(data, offset + 4, 8);        LittleEndian.putInt(data, offset + 8, field_1_numShapes);        LittleEndian.putInt(data, offset + 12, field_2_lastMSOSPID);        listener.AfterRecordSerialize(offset + 16, RecordId, RecordSize, this);        return RecordSize;    }
public CreateSecurityConfigurationResponse createSecurityConfiguration(CreateSecurityConfigurationRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateSecurityConfigurationRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateSecurityConfigurationResponseUnmarshaller.getInstance());        return invoke(request, options, CreateSecurityConfigurationResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> responseType) {        // Implementation of the `invoke` method    }
public DescribeClientVpnConnectionsResponse describeClientVpnConnections(DescribeClientVpnConnectionsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeClientVpnConnectionsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeClientVpnConnectionsResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeClientVpnConnectionsResponse.class);    }
public static void fill(double[] array, double value) {        for (int i = 0; i < array.length; i++) {            array[i] = value;        }    }
public boolean hasNext() {        return pos < maxColumn;    }
public DocsEnum Reset(int[] postings) {        this.postings = postings;        upto = -2;        freq_Renamed = 0;        return this;    }
public boolean hasAll(RevFlagSet set) {        return (flags & set.mask) == set.mask;    }
public ModifyAccountResponse modifyAccount(ModifyAccountRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ModifyAccountRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ModifyAccountResponseUnmarshaller.getInstance());        return invoke(request, options, ModifyAccountResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> responseType) {        // implementation details        // ...    }
public IToken LT(int k) {        LazyInit();        if (k == 0) {            return null;        }        if (k < 0) {            return Lb(-k);        }        int i = p + k - 1;        Sync(i);        if (i >= tokens.size()) {            return tokens.get(tokens.size() - 1);        }        return tokens.get(i);    }
public void removeSheet(int sheetIndex) {        if (boundsheets.size() > sheetIndex) {            records.remove(records.getBspos() - (boundsheets.size() - 1) + sheetIndex);            boundsheets.remove(sheetIndex);            fixTabIdRecord();        }        int sheetNum1Based = sheetIndex + 1;        for (int i = 0; i < NumNames; i++) {            NameRecord nr = getNameRecord(i);            if (nr.getSheetNumber() == sheetNum1Based) {                nr.setSheetNumber(0);            } else if (nr.getSheetNumber() > sheetNum1Based) {                nr.setSheetNumber(nr.getSheetNumber() - 1);            }        }        if (linkTable != null) {            for (int i = sheetIndex + 1; i < NumSheets + 1; i++) {                linkTable.removeSheet(i);            }        }    }
public void removeName(int index) {        names.remove(index);        workbook.removeName(index);    }
public boolean equals(Object o) {        if (!(o instanceof Property))            return false;        Property p = (Property) o;        Object pValue = p.getValue();        long pId = p.getID();        if (id != pId || (id != 0 && !typesAreEqual(type, p.getType())))            return false;        if (value == null && pValue == null)            return true;        if (value == null || pValue == null)            return false;        Class<?> valueClass = value.getClass();        Class<?> pValueClass = pValue.getClass();        if (!(valueClass.isAssignableFrom(pValueClass)) && !(pValueClass.isAssignableFrom(valueClass)))            return false;        if (value instanceof byte[])            return Arrays.equals((byte[]) value, (byte[]) pValue);        return value.equals(pValue);    }
public class GetRepoBuildListRequest extends BaseRequest {        public GetRepoBuildListRequest() {            super("cr", "2016-06-07", "GetRepoBuildList", "cr", "openAPI");            setUriPattern("/repos/[RepoNamespace]/[RepoName]/build");            setMethod(MethodType.GET);        }    }
public MessageWriter() {        buf = new ByteArrayOutputStream();        enc = new OutputStreamWriter(getRawStream(), Constants.CHARSET);    }
public void append(RecordBase r) {        _recs.add(r);    }
public void Close() throws IOException {        if (this.Read(this.skipBuffer) != -1 || this.actualSize != this.expectedSize) {            throw new CorruptObjectException(MessageFormat.Format(JGitText.Get().packfileCorruptionDetected, JGitText.Get().wrongDecompressedLength));        }        int used = this._enclosing.bAvail - this.inf.getRemaining();        if (used > 0) {            this._enclosing.OnObjectData(this.src, this._enclosing.buf, this.p, used);            this._enclosing.Use(used);        }        this.inf.reset();    }
public DescribeModelPackageResponse describeModelPackage(DescribeModelPackageRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeModelPackageRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeModelPackageResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeModelPackageResponse.class);    }    public <T> T invoke(Object request, InvokeOptions options, Class<T> responseType) {        // Implementation of the invoke method goes here        // Replace this comment with the actual implementation of invoking the request and unmarshalling the response    }
public void construct(CellValueRecordInterface rec, RecordStream rs, SharedValueManager sfh) {        if (rec instanceof FormulaRecord) {            FormulaRecord formulaRec = (FormulaRecord) rec;            StringRecord cachedText = null;            Class<?> nextClass = rs.peekNextClass();            if (nextClass == StringRecord.class) {                cachedText = (StringRecord) rs.getNext();            } else {                cachedText = null;            }            insertCell(new FormulaRecordAggregate(formulaRec, cachedText, sfh));        } else {            insertCell(rec);        }    }
@Override    public Object clone() {        return new DeflateDecompressor();    }
public UpdateS3ResourcesResponse updateS3Resources(UpdateS3ResourcesRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(UpdateS3ResourcesRequestMarshaller.getInstance());        options.setResponseUnmarshaller(UpdateS3ResourcesResponseUnmarshaller.getInstance());        return invoke(request, options, UpdateS3ResourcesResponse.class);    }    @SuppressWarnings("unchecked")    private <T> T invoke(Object request, InvokeOptions options, Class<T> responseClass) {        // implementation details    }
public GroupQueryNode(IQueryNode query) {        if (query == null) {            throw new QueryNodeError(new Message(QueryParserMessages.PARAMETER_VALUE_NOT_SUPPORTED, "query", "null"));        }        Allocate();        IsLeaf = false;        Add(query);    }
public String toQueryString(IEscapeQuerySyntax escaper) {        StringBuilder path = new StringBuilder();        path.append("/").append(getFirstPathElement());        for (QueryText pathelement : getPathElements(1)) {            String value = escaper.escape(new StringCharSequence(pathelement.getValue()), CultureInfo.InvariantCulture, EscapeQuerySyntaxType.STRING).toString();            path.append("/\"").append(value).append("\"");        }        return path.toString();    }
public void removeCellComment() {        HSSFComment comment2 = _sheet.findCellComment(_record.getRow(), _record.getColumn());        if (comment2 == null) {            return;        }        comment2 = null;        ((HSSFPatriarch) _sheet.getDrawingPatriarch()).removeShape(comment2);    }
public void Reset(){        count = 0;        Debug.Assert(forwardCount == 0, "pos=" + pos + " forwardCount=" + forwardCount);    }
public ActivateUserResponse activateUser(ActivateUserRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ActivateUserRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ActivateUserResponseUnmarshaller.getInstance());        return invoke(request, options, ActivateUserResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> clazz) {        // implementation of the invoke method    }
public boolean isCharsetDetected() throws NotSupportedException {        throw new NotSupportedException();    }
public ModifySnapshotCopyRetentionPeriodResponse modifySnapshotCopyRetentionPeriod(ModifySnapshotCopyRetentionPeriodRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ModifySnapshotCopyRetentionPeriodRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ModifySnapshotCopyRetentionPeriodResponseUnmarshaller.getInstance());        return invoke(request, options, ModifySnapshotCopyRetentionPeriodResponse.class);    }
public DeleteClusterSubnetGroupResponse deleteClusterSubnetGroup(DeleteClusterSubnetGroupRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteClusterSubnetGroupRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteClusterSubnetGroupResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteClusterSubnetGroupResponse.class);    }
public static String decode(byte[] buffer){        return decode(buffer, 0, buffer.length);    }    public static String decode(byte[] buffer, int offset, int length){        // implementation of decode method goes here    }
public int getDefaultPort() {        return -1;    }
public StopTaskResponse stopTask(StopTaskRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(StopTaskRequestMarshaller.getInstance());        options.setResponseUnmarshaller(StopTaskResponseUnmarshaller.getInstance());        return invoke(request, options, StopTaskResponse.class);    }
@Override    public void seekExact(BytesRef target, TermState otherState) {        if (!target.equals(term)) {            state.copyFrom(otherState);            term = BytesRef.deepCopyOf(target);            seekPending = true;        }    }
public SeriesToChartGroupRecord(RecordInputStream in1){        field_1_chartGroupIndex = in1.readShort();    }
public static void writeUnicodeStringFlagAndData(ILittleEndianOutput out1, String value) {        boolean is16Bit = hasMultibyte(value);        out1.writeByte(is16Bit ? 0x01 : 0x00);        if (is16Bit) {            putUnicodeLE(value, out1);        } else {            putCompressedUnicode(value, out1);        }    }    private static boolean hasMultibyte(String s) {        for (int i = 0; i < s.length(); i++) {            if (s.charAt(i) > 0xFF) {                return true;            }        }        return false;    }    private static void putUnicodeLE(String s, ILittleEndianOutput out) {        for (int i = 0; i < s.length(); i++) {            char c = s.charAt(i);            out.writeByte(c & 0xFF);            out.writeByte((c >> 8) & 0xFF);        }    }    private static void putCompressedUnicode(String s, ILittleEndianOutput out) {        for (int i = 0; i < s.length(); i++) {            char c = s.charAt(i);            if (c > 0xFF) {                throw new IllegalArgumentException("Illegal character: " + c);            }            out.writeByte(c & 0xFF);        }    }
public AuthorizeSecurityGroupIngressResponse authorizeSecurityGroupIngress(AuthorizeSecurityGroupIngressRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(AuthorizeSecurityGroupIngressRequestMarshaller.getInstance());        options.setResponseUnmarshaller(AuthorizeSecurityGroupIngressResponseUnmarshaller.getInstance());        return invoke(request, options, AuthorizeSecurityGroupIngressResponse.class);    }    private <T> T invoke(AmazonWebServiceRequest request, InvokeOptions options, Class<T> responseType) {        // Code to invoke the request and handle the response    }
public void AddFile(String file) {        CheckFileNames(new String[] { file });        setFiles.add(file);    }
public void setSize(int width, int height) {        mWidth = width;        mHeight = height;    }
public void setPrecedenceFilterSuppressed(boolean value) {        if (value) {            this.reachesIntoOuterContext |= SUPPRESS_PRECEDENCE_FILTER;        } else {            this.reachesIntoOuterContext &= ~SUPPRESS_PRECEDENCE_FILTER;        }    }
public IntervalSet look(ATNState s, RuleContext ctx) {        return look(s, null, ctx);    }    public IntervalSet look(ATNState s, IntervalSet look, RuleContext ctx) {        // implementation goes here    }
@Override    public void Serialize(ILittleEndianOutput out1){        out1.WriteShort(OptionFlags);        out1.WriteShort(RowHeight);    }
public Builder(boolean dedup) {        this.dedup = dedup;    }
public Hashtable(int capacity, float loadFactor) {        super(capacity);        if (loadFactor <= 0 || Float.isNaN(loadFactor)) {            throw new IllegalArgumentException("Load factor: " + loadFactor);        }    }
public Object Get(String key) {        int bucket = normalCompletion.GetBucket(key);        return bucket == -1 ? null : (long) bucket;    }
public ListHyperParameterTuningJobsResponse listHyperParameterTuningJobs(ListHyperParameterTuningJobsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ListHyperParameterTuningJobsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ListHyperParameterTuningJobsResponseUnmarshaller.getInstance());        return invoke(request, options, ListHyperParameterTuningJobsResponse.class);    }    private <T> T invoke(Request request, InvokeOptions options, Class<T> responseType) {        // implementation of the invoke method    }
public DeleteTableResponse deleteTable(String tableName) {        DeleteTableRequest request = new DeleteTableRequest();        request.setTableName(tableName);        return deleteTable(request);    }
protected boolean LessThan(TextFragment fragA, TextFragment fragB) {        if (fragA.getScore() == fragB.getScore())            return fragA.getFragNum() > fragB.getFragNum();        else            return fragA.getScore() < fragB.getScore();    }
public void freeBefore(int pos) {        assert pos >= 0;        assert pos <= nextPos;        int newCount = nextPos - pos;        assert newCount <= count : "newCount=" + newCount + " count=" + count;        assert newCount <= buffer.length : "newCount=" + newCount + " buf.length=" + buffer.length;        count = newCount;    }
public UpdateHITTypeOfHITResponse UpdateHITTypeOfHIT(UpdateHITTypeOfHITRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(UpdateHITTypeOfHITRequestMarshaller.getInstance());        options.setResponseUnmarshaller(UpdateHITTypeOfHITResponseUnmarshaller.getInstance());        return invoke(request, options, UpdateHITTypeOfHITResponse.class);    }
public UpdateRecommenderConfigurationResponse updateRecommenderConfiguration(UpdateRecommenderConfigurationRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(UpdateRecommenderConfigurationRequestMarshaller.getInstance());        options.setResponseUnmarshaller(UpdateRecommenderConfigurationResponseUnmarshaller.getInstance());        return invoke(request, options, UpdateRecommenderConfigurationResponse.class);    }
public int compareTo(Object other) {      BytesRef br = (BytesRef) other;      assert br != null;      return utf8SortedAsUnicodeSortOrder.compare(this, br);    }
public int stem(char[] s, int len) {        if (len > 4 && s[len - 1] == 's') {            len--;        }        if (len > 5 && (StemmerUtil.endsWith(s, len, "ene") || (StemmerUtil.endsWith(s, len, "ane") && useNynorsk))) {            return len - 3;        }        if (len > 4 && (StemmerUtil.endsWith(s, len, "er") || StemmerUtil.endsWith(s, len, "en")                || StemmerUtil.endsWith(s, len, "et") || (StemmerUtil.endsWith(s, len, "ar") && useNynorsk))) {            return len - 2;        }        if (len > 3) {            switch (s[len - 1]) {                case 'a':                case 'e':                    return len - 1;            }        }        return len;    }
public DescribeDBSnapshotsResponse describeDBSnapshots(DescribeDBSnapshotsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeDBSnapshotsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeDBSnapshotsResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeDBSnapshotsResponse.class);    }    private <T> T invoke(Request<?> request, InvokeOptions options, Class<T> clazz) {        // Implementation of the invoke method        // ...    }
public SortedSetDocValuesFacetField(String dim, String label) {        super("dummy", TYPE);        FacetField.VerifyLabel(label);        FacetField.VerifyLabel(dim);        this.Dim = dim;        this.Label = label;    }
public CreateDocumentationPartResponse createDocumentationPart(CreateDocumentationPartRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateDocumentationPartRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateDocumentationPartResponseUnmarshaller.getInstance());        return invoke(request, options, CreateDocumentationPartResponse.class);    }
public String getValue() {        return value;    }
public java.nio.ShortBuffer asReadOnlyBuffer() {        return duplicate().asReadOnlyBuffer();    }
public UpdateDataSourcePermissionsResponse updateDataSourcePermissions(UpdateDataSourcePermissionsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(UpdateDataSourcePermissionsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(UpdateDataSourcePermissionsResponseUnmarshaller.getInstance());        return invoke(request, options, UpdateDataSourcePermissionsResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> responseType) {        // implement the invoke method as required        // ...    }
public static Record createSingleRecord(RecordInputStream in1) {        if (_recordCreatorsById.containsKey(in1.getSid())) {            I_RecordCreator constructor = _recordCreatorsById.get(in1.getSid());            return constructor.create(in1);        } else {            return new UnknownRecord(in1);        }    }
@Override    public int getCount() {        return this._enclosing.mTabLayout.getChildCount();    }
public DeleteApplicationReferenceDataSourceResponse deleteApplicationReferenceDataSource(DeleteApplicationReferenceDataSourceRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteApplicationReferenceDataSourceRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteApplicationReferenceDataSourceResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteApplicationReferenceDataSourceResponse.class);    }
public CreateProjectVersionResponse createProjectVersion(CreateProjectVersionRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateProjectVersionRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateProjectVersionResponseUnmarshaller.getInstance());        return invoke(request, options, CreateProjectVersionResponse.class);    }    private <T> T invoke(Object request, InvokeOptions options, Class<T> responseType) {        // Implement the logic to invoke the request here    }
public java.nio.IntBuffer slice() {        return new java.nio.ReadOnlyIntBuffer(            backingArray,            offset + _position,            remaining()        );    }
@Override    public byte get() {        throw new UnsupportedOperationException();    }
@Override    public java.nio.LongBuffer put(int index, long c) {        checkIndex(index);        backingArray[offset + index] = c;        return this;    }
public StoredField(String name, float value) {        super(name, TYPE);        FieldsData = new Float(value);    }
public IntervalSet getExpectedTokensWithinCurrentRule() {        ATN atn = Interpreter.atn;        ATNState s = atn.states[State];        return atn.nextTokens(s);    }
@Override    public String toString() {        StringBuilder buffer = new StringBuilder();        buffer.append("[FILESHARING]\n");        buffer.append("    .Readonly       = ").append(ReadOnly == 1 ? "true" : "false").append("\n");        buffer.append("    .password       = ").append(StringUtil.toHexString(Password)).append("\n");        buffer.append("    .username       = ").append(Username).append("\n");        buffer.append("[/FILESHARING]\n");        return buffer.toString();    }
protected SubmoduleInitCommand(Repository repo) {        super(repo);        paths = new ArrayList<String>();    }
public virtual void Include(string name, AnyObjectId id){        if (!Repository.IsValidRefName(name)){            throw new ArgumentException(MessageFormat.Format(JGitText.Get().invalidRefName, name));        }        if (include.ContainsKey(name)){            throw new InvalidOperationException(JGitText.Get().duplicateRef + name);        }        include.Put(name, id.ToObjectId());    }
public EnableSnapshotCopyResponse enableSnapshotCopy(EnableSnapshotCopyRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(EnableSnapshotCopyRequestMarshaller.getInstance());        options.setResponseUnmarshaller(EnableSnapshotCopyResponseUnmarshaller.getInstance());        return invoke(request, options, EnableSnapshotCopyResponse.class);    }
public ValueFiller getValueFiller() {        return new ValueFiller() {            @Override            public void fillValues(Object obj) {                // implementation here            }        };    }
@Override    public void serialize(ILittleEndianOutput out1) {        out1.writeByte(Pane);        out1.writeShort(ActiveCellRow);        out1.writeShort(ActiveCellCol);        out1.writeShort(ActiveCellRef);        int nRefs = field_6_refs.length;        out1.writeShort(nRefs);        for (int i = 0; i < field_6_refs.length; i++) {            field_6_refs[i].serialize(out1);        }    }
public static Counter NewCounter() {        return NewCounter(false);    }
public int get(String name, int dflt) {        int[] vals;        Object temp;        if (valByRound.TryGetValue(name, temp) && temp != null) {            vals = (int[]) temp;            return vals[roundNumber % vals.length];        }        String sval;        if (!props.TryGetValue(name, sval)) {            sval = Integer.toString(dflt);        }        if (sval.indexOf(':') < 0) {            return Integer.parseInt(sval);        }        int k = sval.indexOf(':');        String colName = sval.substring(0, k - 0);        sval = sval.substring(k + 1);        colForValByRound.put(name, colName);        vals = PropToInt32Array(sval);        valByRound.put(name, vals);        return vals[roundNumber % vals.length];    }
public void preSerialize() {        if (records.getTabpos() > 0) {            TabIdRecord tir = (TabIdRecord) records.get(records.getTabpos());            if (tir._tabids.length < boundsheets.size()) {                fixTabIdRecord();            }        }    }
public class LimitTokenCountAnalyzer extends Analyzer {        private Analyzer delegate;        private int maxTokenCount;        private boolean consumeAllTokens;        public LimitTokenCountAnalyzer(Analyzer delegate, int maxTokenCount, boolean consumeAllTokens) {            super(delegate.getReuseStrategy());            this.delegate = delegate;            this.maxTokenCount = maxTokenCount;            this.consumeAllTokens = consumeAllTokens;        }        // Override the tokenStream method of the Analyzer class        @Override        protected TokenStreamComponents createComponents(String fieldName) {            TokenStreamComponents components = delegate.createComponents(fieldName);            TokenFilter filter = new LimitTokenCountFilter(components.getTokenStream(), maxTokenCount, consumeAllTokens);            return new TokenStreamComponents(components.getTokenizer(), filter);        }    }
public ExternalBookBlock(int numberOfSheets){        _externalBookRecord = SupBookRecord.CreateInternalReferences((short)numberOfSheets);        _externalNameRecords = new ExternalNameRecord[0];        _crnBlocks = new CRNBlock[0];    }
public String toString() {        StringBuilder buffer = new StringBuilder();        buffer.append("[SCENARIOPROTECT]\n");        buffer.append("    .protect         = ").append(Protect).append("\n");        buffer.append("[/SCENARIOPROTECT]\n");        return buffer.toString();    }
public NGit.Api.PushCommand setThin(boolean thin) {        checkCallable();        this.thin = thin;        return this;    }
public int compareTo(SearcherTracker other) {        return Integer.compare(other.getRecordTimeSec(), this.getRecordTimeSec());    }
@Override    public TokenStream create(TokenStream input) {        return new ReverseStringFilter(m_luceneMatchVersion, input);    }
public BlockList(){        directory = NGit.Util.BlockList<T>.NewDirectory(256);        directory[0] = NGit.Util.BlockList<T>.NewBlock();        tailBlock = directory[0];    }
public QueryScorer(WeightedSpanTerm[] weightedTerms) {        this.fieldWeightedSpanTerms = new HashMap<String, WeightedSpanTerm>(weightedTerms.length);        for (WeightedSpanTerm t : weightedTerms) {            WeightedSpanTerm existingTerm = null;            if (fieldWeightedSpanTerms.containsKey(t.getTerm())) {                existingTerm = fieldWeightedSpanTerms.get(t.getTerm());            }            if (existingTerm == null || existingTerm.getWeight() < t.getWeight()) {                fieldWeightedSpanTerms.put(t.getTerm(), t);                maxTermWeight = Math.max(maxTermWeight, t.getWeight());            }        }        skipInitExtractor = true;    }
@Override    public boolean equals(Object other) {        assert neverEquals(other);        if (other instanceof MergedGroup<?>) {            MergedGroup<?> otherMergedGroup = (MergedGroup<?>) other;            if (groupValue == null) {                return otherMergedGroup == null;            } else {                if (groupValueIsValueType) {                    return JCG.EqualityComparer.defaultComparer().equals(groupValue, otherMergedGroup.groupValue);                } else {                    return J2N.Collections.StructuralEqualityComparer.defaultComparer().equals(groupValue, otherMergedGroup.groupValue);                }            }        } else {            return false;        }    }
public java.nio.charset.Charset charset() {        return cs;    }
public DescribeExperimentResponse describeExperiment(DescribeExperimentRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeExperimentRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeExperimentResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeExperimentResponse.class);    }
public EscherGraphics(HSSFShapeGroup escherGroup, HSSFWorkbook workbook, Color forecolor, float verticalPointsPerPixel){        this.escherGroup = escherGroup;        this.workbook = workbook;        this.verticalPointsPerPixel = verticalPointsPerPixel;        this.verticalPixelsPerPoint = 1 / verticalPointsPerPixel;        this.font = new Font("Arial", Font.PLAIN, 10);        this.foreground = forecolor;    }
public String pattern() {        return patternText;    }
public DeleteRouteTableResponse deleteRouteTable(DeleteRouteTableRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteRouteTableRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteRouteTableResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteRouteTableResponse.class);    }
public AssociateVPCWithHostedZoneResponse associateVPCWithHostedZone(AssociateVPCWithHostedZoneRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(AssociateVPCWithHostedZoneRequestMarshaller.getInstance());        options.setResponseUnmarshaller(AssociateVPCWithHostedZoneResponseUnmarshaller.getInstance());        return invoke(request, options, AssociateVPCWithHostedZoneResponse.class);    }
public PutIntegrationResponse putIntegration(PutIntegrationRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(PutIntegrationRequestMarshaller.getInstance());        options.setResponseUnmarshaller(PutIntegrationResponseUnmarshaller.getInstance());        return invoke(request, options, PutIntegrationResponse.class);    }    private <T> T invoke(PutIntegrationRequest request, InvokeOptions options, Class<T> responseClass) {        // Implement the invoke method here    }
public SimpleEntry(K theKey, V theValue) {        key = theKey;        value = theValue;    }
public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {        for (int i = 0; i < iterations; ++i) {            int byte0 = blocks[blocksOffset++] & 0xFF;            int byte1 = blocks[blocksOffset++] & 0xFF;            values[valuesOffset++] = (byte0 << 4) | ((int)((byte1 & 0xFF) >>> 4));            int byte2 = blocks[blocksOffset++] & 0xFF;            values[valuesOffset++] = ((byte1 & 0x0F) << 8) | byte2;        }    }
public DisassociateConnectionFromLagResponse disassociateConnectionFromLag(DisassociateConnectionFromLagRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DisassociateConnectionFromLagRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DisassociateConnectionFromLagResponseUnmarshaller.getInstance());        return invoke(request, options, DisassociateConnectionFromLagResponse.class);    }
public FileMode getOldMode() {        return oldMode;    }
@Override    public String toString() {        return mapEntry.toString();    }
public StopKeyPhrasesDetectionJobResponse stopKeyPhrasesDetectionJob(StopKeyPhrasesDetectionJobRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(StopKeyPhrasesDetectionJobRequestMarshaller.getInstance());        options.setResponseUnmarshaller(StopKeyPhrasesDetectionJobResponseUnmarshaller.getInstance());        return invoke(request, options, StopKeyPhrasesDetectionJobResponse.class);    }
public String toString() {        StringBuilder buffer = new StringBuilder("[Array Formula or Shared Formula]\n");        buffer.append("row = ").append(Row).append("\n");        buffer.append("col = ").append(Column).append("\n");        return buffer.toString();    }
public ListDominantLanguageDetectionJobsResponse ListDominantLanguageDetectionJobs(ListDominantLanguageDetectionJobsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ListDominantLanguageDetectionJobsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ListDominantLanguageDetectionJobsResponseUnmarshaller.getInstance());        return invoke(ListDominantLanguageDetectionJobsResponse.class, request, options);    }
@Override    public String toString() {        return "slice start=" + start + " length=" + length + " readerIndex=" + readerIndex;    }
public static int parseHexInt4(byte digit) {        byte[] digits16 = {/* Populate this array with appropriate values */};        byte r = digits16[digit];        if (r < 0) {            throw new IndexOutOfBoundsException();        }        return r;    }
public Attribute(String name, String value) {        this._name = name;        this._value = value;    }
public DescribeStackSetOperationResponse describeStackSetOperation(DescribeStackSetOperationRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeStackSetOperationRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeStackSetOperationResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeStackSetOperationResponse.class);    }
public ICell GetCell(short cellnum){        int ushortCellNum = cellnum & 0x0000FFFF;        return GetCell(ushortCellNum);    }
public void Write(byte[] b){        WriteContinueIfRequired(b.length);        _ulrOutput.Write(b);    }
public class ResetImageAttributeRequest {        private String _imageId;        private ResetImageAttributeName _attribute;        public ResetImageAttributeRequest(String imageId, ResetImageAttributeName attribute) {            _imageId = imageId;            _attribute = attribute;        }    }
public void DiscardResultContents() {        resultContents = null;    }
public ObjectId GetPeeledObjectId() {        return GetLeaf().GetPeeledObjectId();    }
public UndeprecateDomainResponse undeprecateDomain(UndeprecateDomainRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(UndeprecateDomainRequestMarshaller.getInstance());        options.setResponseUnmarshaller(UndeprecateDomainResponseUnmarshaller.getInstance());        return invoke(request, options, UndeprecateDomainResponse.class);    }
public void Write(ILittleEndianOutput out1) {        out1.WriteByte((byte)(sid + PtgClass));        out1.WriteByte((byte)field_3_string.length());        out1.WriteByte(_is16bitUnicode ? 0x01 : 0x00);        if (_is16bitUnicode) {            StringUtil.PutUnicodeLE(field_3_string, out1);        } else {            StringUtil.PutCompressedUnicode(field_3_string, out1);        }    }
public DeleteQueueResponse deleteQueue(String queueUrl) {        DeleteQueueRequest request = new DeleteQueueRequest();        request.setQueueUrl(queueUrl);        return deleteQueue(request);    }
public void setCheckEofAfterPackFooter(boolean b) {        checkEofAfterPackFooter = b;    }
public void swap() {        int sBegin = beginA;        int sEnd = endA;        beginA = beginB;        endA = endB;        beginB = sBegin;        endB = sEnd;    }
public int GetPackedGitWindowSize() {        return packedGitWindowSize;    }
public PutMetricDataResponse putMetricData(PutMetricDataRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(PutMetricDataRequestMarshaller.getInstance());        options.setResponseUnmarshaller(PutMetricDataResponseUnmarshaller.getInstance());        return invoke(request, options, PutMetricDataResponse.class);    }
public GetCelebrityRecognitionResponse getCelebrityRecognition(GetCelebrityRecognitionRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetCelebrityRecognitionRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetCelebrityRecognitionResponseUnmarshaller.getInstance());        return invoke(request, options, GetCelebrityRecognitionResponse.class);    }
public class CreateQueueRequest {        private String queueName;                public CreateQueueRequest(String queueName) {            this.queueName = queueName;        }    }
public Area3DPxg(int externalWorkbookNumber, SheetIdentifier sheetName, AreaReference arearef) {        super(arearef);        this.externalWorkbookNumber = externalWorkbookNumber;        this.firstSheetName = sheetName.getSheetId().getName();        if (sheetName instanceof SheetRangeIdentifier) {            this.lastSheetName = ((SheetRangeIdentifier) sheetName).getLastSheetIdentifier().getName();        } else {            this.lastSheetName = null;        }    }
public void setBaseline(long clockTime) {        t0 = clockTime;        timeout = t0 + ticksAllowed;    }
public MoveAddressToVpcResponse moveAddressToVpc(MoveAddressToVpcRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(MoveAddressToVpcRequestMarshaller.getInstance());        options.setResponseUnmarshaller(MoveAddressToVpcResponseUnmarshaller.getInstance());        return invoke(request, options, MoveAddressToVpcResponse.class);    }
@Override    public String toString() {        String coll = m_collectionModel.getName();        if (coll != null) {            return String.format("LM %s - %s", getName(), coll);        } else {            return String.format("LM %s", getName());        }    }
public DescribeLagsResponse describeLags(DescribeLagsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeLagsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeLagsResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeLagsResponse.class);    }
public AreaEval Offset(int relFirstRowIx, int relLastRowIx, int relFirstColIx, int relLastColIx) {        if (_refEval == null) {            return _areaEval.Offset(relFirstRowIx, relLastRowIx, relFirstColIx, relLastColIx);        }        return _refEval.Offset(relFirstRowIx, relLastRowIx, relFirstColIx, relLastColIx);    }
public ShortBuffer put(short[] src, int srcOffset, int shortCount) {        byteBuffer.limit(_limit * SizeOf.SHORT);        byteBuffer.position(_position * SizeOf.SHORT);        if (byteBuffer instanceof ReadWriteDirectByteBuffer) {            ((ReadWriteDirectByteBuffer) byteBuffer).put(src, srcOffset, shortCount);        } else {            ((ReadWriteHeapByteBuffer) byteBuffer).put(src, srcOffset, shortCount);        }        this._position += shortCount;        return this;    }
public void Initialize(String cat) {        this._cat = cat;    }
@Override    public void write(int oneByte) throws NotImplementedException {        throw new NotImplementedException();    }
public DescribeImportImageTasksResponse describeImportImageTasks(DescribeImportImageTasksRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeImportImageTasksRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeImportImageTasksResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeImportImageTasksResponse.class);    }
public ColumnInfoRecord(RecordInputStream in1) {        _first_col = in1.readUShort();        _last_col = in1.readUShort();        _col_width = in1.readUShort();        _xf_index = in1.readUShort();        _options = in1.readUShort();        switch (in1.remaining()) {            case 2:                field_6_reserved = in1.readUShort();                break;            case 1:                field_6_reserved = in1.readByte();                break;            case 0:                field_6_reserved = 0;                break;            default:                throw new Exception("Unusual record size remaining=(" + in1.remaining() + ")");        }    }
public Status(IndexDiff diff) {        super();        this.diff = diff;        clean = diff.getAdded().isEmpty() &&                diff.getChanged().isEmpty() &&                diff.getRemoved().isEmpty() &&                diff.getMissing().isEmpty() &&                diff.getModified().isEmpty() &&                diff.getUntracked().isEmpty() &&                diff.getConflicting().isEmpty();    }
public CreateExperimentResponse createExperiment(CreateExperimentRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateExperimentRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateExperimentResponseUnmarshaller.getInstance());        return invoke(request, options, CreateExperimentResponse.class);    }
@Override    public Object clone() throws CloneNotSupportedException {        return super.clone();    }
public java.nio.FloatBuffer slice() {        byteBuffer.limit(_limit * libcore.io.SizeOf.FLOAT);        byteBuffer.position(_position * libcore.io.SizeOf.FLOAT);        java.nio.ByteBuffer bb = byteBuffer.slice().order(byteBuffer.order());        java.nio.FloatBuffer result = new java.nio.FloatToByteBufferAdapter(bb);        byteBuffer.clear();        return result;    }
public DescribeSnapshotSchedulesResponse describeSnapshotSchedules(DescribeSnapshotSchedulesRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeSnapshotSchedulesRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeSnapshotSchedulesResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeSnapshotSchedulesResponse.class);    }    private <T> T invoke(Request request, InvokeOptions options, Class<T> responseClass) {        // implementation of invoke method    }
public ListImagesResponse listImages(ListImagesRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(ListImagesRequestMarshaller.getInstance());        options.setResponseUnmarshaller(ListImagesResponseUnmarshaller.getInstance());        return invoke(request, options, ListImagesResponse.class);    }
public Diff(int ins, int del, int rep, int noop) {        INSERT = ins;        DELETE = del;        REPLACE = rep;        NOOP = noop;    }
public String toFormulaString(String[] operands) {        StringBuilder buffer = new StringBuilder();        buffer.append(operands[0]);        buffer.append(",");        buffer.append(operands[1]);        return buffer.toString();    }
public static void setupEnvironment(String[] workbookNames, ForkedEvaluator[] evaluators) {        WorkbookEvaluator[] wbEvals = new WorkbookEvaluator[evaluators.length];        for (int i = 0; i < wbEvals.length; i++) {            wbEvals[i] = evaluators[i].getEvaluator();        }        CollaboratingWorkbooksEnvironment.setup(workbookNames, wbEvals);    }
public ListPhotoTagsRequest() {        super("CloudPhoto", "2017-07-11", "ListPhotoTags", "cloudphoto", "openAPI");        setProtocol(ProtocolType.HTTPS);    }
public RandomSamplingFacetsCollector(int sampleSize, long seed) {        super(false);        this.sampleSize = sampleSize;        this.random = new XORShift64Random(seed);        this.sampledDocs = null;    }
public AllocateStaticIpResponse allocateStaticIp(AllocateStaticIpRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(AllocateStaticIpRequestMarshaller.getInstance());        options.setResponseUnmarshaller(AllocateStaticIpResponseUnmarshaller.getInstance());        return invoke(request, options, AllocateStaticIpResponse.class);    }    @SuppressWarnings("unchecked")    private <T> T invoke(Object request, InvokeOptions options, Class<T> responseClass) {        // implementation of the invoke method    }
public FeatRecord(RecordInputStream in1) {        futureHeader = new FtrHeader(in1);        isf_sharedFeatureType = in1.readShort();        reserved1 = (byte) in1.readByte();        reserved2 = in1.readInt();        int cref = in1.readUShort();        cbFeatData = in1.readInt();        reserved3 = in1.readShort();        cellRefs = new CellRangeAddress[cref];        for (int i = 0; i < cellRefs.length; i++) {            cellRefs[i] = new CellRangeAddress(in1);        }        switch (isf_sharedFeatureType) {            case FeatHdrRecord.SHAREDFEATURES_ISFPROTECTION:                sharedFeature = new FeatProtection(in1);                break;            case FeatHdrRecord.SHAREDFEATURES_ISFFEC2:                sharedFeature = new FeatFormulaErr2(in1);                break;            case FeatHdrRecord.SHAREDFEATURES_ISFFACTOID:                sharedFeature = new FeatSmartTag(in1);                break;            default:                logger.log(POILogger.ERROR, "Unknown Shared Feature " + isf_sharedFeatureType + " found!");                break;        }    }
public RevCommit TryFastForward(RevCommit newCommit) throws RefNotFoundException, IOException {        Ref head = repo.getRef(Constants.HEAD);        if (head == null || head.getObjectId() == null) {            throw new RefNotFoundException(MessageFormat.format(JGitText.get().refNotResolved, Constants.HEAD));        }        ObjectId headId = head.getObjectId();        if (headId == null) {            throw new RefNotFoundException(MessageFormat.format(JGitText.get().refNotResolved, Constants.HEAD));        }        RevCommit headCommit = walk.parseCommit(headId);        if (walk.isMergedInto(newCommit, headCommit)) {            return newCommit;        }        String headName;        if (head.isSymbolic()) {            headName = head.getTarget().getName();        } else {            headName = "detached HEAD";        }        return TryFastForward(headName, headCommit, newCommit);    }
public CreateSnapshotScheduleResponse createSnapshotSchedule(CreateSnapshotScheduleRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateSnapshotScheduleRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateSnapshotScheduleResponseUnmarshaller.getInstance());        return invoke(request, options, CreateSnapshotScheduleResponse.class);    }
public Record getNext() throws Exception {        if (_nextIndex >= _list.size()) {            throw new Exception("Attempt to Read past end of record stream");        }        _countRead++;        return (Record) _list.get(_nextIndex++);    }
@Override    public String toString() {        return RawParseUtils.decode(buf.toByteArray());    }
public class ListTablesRequest {        private String exclusiveStartTableName;        public ListTablesRequest(String exclusiveStartTableName) {            this.exclusiveStartTableName = exclusiveStartTableName;        }    }
public EnableAlarmActionsResponse enableAlarmActions(EnableAlarmActionsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(EnableAlarmActionsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(EnableAlarmActionsResponseUnmarshaller.getInstance());        return invoke(request, options, EnableAlarmActionsResponse.class);    }
public Builder() {        super();        lastDocID = -1;        wordNum = -1;        word = 0;    }
@Override    public boolean equals(Object obj) {        if (!(obj instanceof State)) {            return false;        }        State other = (State) obj;        return is_final == other.is_final && Arrays.equals(this.labels, other.labels) && this.states == other.states;    }
@Override    public TokenStream create(TokenStream input) {        return new EnglishPossessiveFilter(m_luceneMatchVersion, input);    }
public void clearFormatting() {        _string = cloneStringIfRequired();        _string.clearFormatting();        addToSSTIfRequired();    }
@Override    public int Get(int index, long[] arr, int off, int len) {        assert len > 0 : "len must be > 0 (got " + len + ")";        assert index >= 0 && index < valueCount;        len = Math.min(len, valueCount - index);        Arrays.fill(arr, off, off + len, 0);        return len;    }
public DeleteRouteResponseResponse deleteRouteResponse(DeleteRouteResponseRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteRouteResponseRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteRouteResponseResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteRouteResponseResponse.class);    }
public String toPrivateString() {        return format(true, false);    }
public CreatePresignedDomainUrlResponse createPresignedDomainUrl(CreatePresignedDomainUrlRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreatePresignedDomainUrlRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreatePresignedDomainUrlResponseUnmarshaller.getInstance());        return invoke(request, options, CreatePresignedDomainUrlResponse.class);    }    @SuppressWarnings("unchecked")    private <X> X invoke(CreatePresignedDomainUrlRequest request, InvokeOptions options, Class<X> returnType) {        try {            AWSRequestMetrics awsRequestMetrics = options.getRequestMetricsCollector() == null ? AWSRequestMetrics.NONE : options.getRequestMetricsCollector().getMetrics();            ExecutionContext executionContext = createExecutionContext(request, awsRequestMetrics);            request.setEndpoint(endpoint);            request.setTimeOffset(timeOffset);            HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler = protocolFactory.createResponseHandler(                    returnType, executionContext);            HttpResponseHandler<AmazonServiceException> errorResponseHandler = protocolFactory.createErrorResponseHandler();            return (X) client.execute(new ClientExecutionParams<CreatePresignedDomainUrlRequest, CreatePresignedDomainUrlResponse>()                    .withMarshaller(new CreatePresignedDomainUrlRequestProtocolMarshaller(protocolFactory))                    .withResponseHandler(responseHandler)                    .withErrorResponseHandler(errorResponseHandler)                    .withInput(request), executionContext);        } catch (Exception e) {            throw e;        }    }
@Override    public void write(int oneChar) {        doWrite(new char[] {(char)oneChar}, 0, 1);    }
public SSTRecord GetSSTRecord() {        return sstRecord;    }
@Override    public String toString() {        return "term=" + term + ",field=" + field + ",value=" + value;    }
@Override    public boolean IsSaturated(FuzzySet bloomFilter, FieldInfo fieldInfo) {        return bloomFilter.GetSaturation() > 0.9f;    }
public class Builder {        private boolean ignoreCase;        public Builder(boolean ignoreCase) {            this.ignoreCase = ignoreCase;        }        // Other methods and properties go here    }
@Override    public String toString() {        return getClass().getSimpleName() + "(maxBasicQueries: " + maxBasicQueries + ", queriesMade: " + queriesMade + ")";    }
public DeleteDataSourceResponse deleteDataSource(DeleteDataSourceRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeleteDataSourceRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeleteDataSourceResponseUnmarshaller.getInstance());        return invoke(request, options, DeleteDataSourceResponse.class);    }
public RebootNodeResponse rebootNode(RebootNodeRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(RebootNodeRequestMarshaller.getInstance());        options.setResponseUnmarshaller(RebootNodeResponseUnmarshaller.getInstance());        return invoke(request, options, RebootNodeResponse.class);    }    private <T> T invoke(Request request, InvokeOptions options, Class<T> clazz) {        // implement the logic for invoking the request    }
public void ProcessChildRecords() {        ConvertRawBytesToEscherRecords();    }
public CreateOrUpdateTagsResponse createOrUpdateTags(CreateOrUpdateTagsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateOrUpdateTagsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateOrUpdateTagsResponseUnmarshaller.getInstance());        return invoke(request, options, CreateOrUpdateTagsResponse.class);    }
public FileSnapshot getSnapShot() {        return snapShot;    }
public InputStream openResource(String resource) throws IOException {        InputStream stream = this.clazz.getClassLoader().getResourceAsStream(resource);        if (stream == null) {            throw new IOException("Resource not found: " + resource);        }        return stream;    }
public String toString() {        StringBuilder sb = new StringBuilder(64);        sb.append(getClass().getSimpleName()).append(" [");        sb.append("sid=").append(HexDump.shortToHex(_sid));        sb.append(" size=").append(_data.length);        sb.append(" : ").append(HexDump.toHex(_data));        sb.append("]\n");        return sb.toString();    }
public int nextIndex() {        return index;    }
@Override    public String ToQueryString(IEscapeQuerySyntax escaper) {        if (IsDefaultField(this.m_field)) {            return "\"" + GetTermEscapeQuoted(escaper) + "\"";        } else {            return this.m_field + ":" + "\"" + GetTermEscapeQuoted(escaper) + "\"";        }    }
@Override    public Object clone() {        CalcModeRecord rec = new CalcModeRecord();        rec.field_1_calcmode = this.field_1_calcmode;        return rec;    }
public boolean IsOutput() {        return output;    }
public CreateNetworkInterfaceResponse createNetworkInterface(CreateNetworkInterfaceRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateNetworkInterfaceRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateNetworkInterfaceResponseUnmarshaller.getInstance());        return invoke(request, options, CreateNetworkInterfaceResponse.class);    }
@Override    public void serialize(ILittleEndianOutput out1) {        out1.writeShort(field_1_password);    }
public StopDominantLanguageDetectionJobResponse stopDominantLanguageDetectionJob(StopDominantLanguageDetectionJobRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(StopDominantLanguageDetectionJobRequestMarshaller.getInstance());        options.setResponseUnmarshaller(StopDominantLanguageDetectionJobResponseUnmarshaller.getInstance());        return invoke(request, options, StopDominantLanguageDetectionJobResponse.class);    }
public void withConnectionTimeout(int milliseconds) {        connectionTimeoutInMilliseconds = milliseconds;    }
public GetGatewayGroupResponse getGatewayGroup(GetGatewayGroupRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetGatewayGroupRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetGatewayGroupResponseUnmarshaller.getInstance());        return invoke(request, options, GetGatewayGroupResponse.class);    }    private <T> T invoke(GetGatewayGroupRequest request, InvokeOptions options, Class<T> responseClass) {        // implementation for the 'invoke' method    }
@Override    public java.nio.FloatBuffer slice() {        return java.nio.FloatBuffer.wrap(backingArray, offset + position(), remaining()).asReadOnlyBuffer();    }
public static String join(ICollection<String> parts, String separator, String lastSeparator) {        StringBuilder sb = new StringBuilder();        int i = 0;        int lastIndex = parts.size() - 1;        for (String part : parts) {            sb.append(part);            if (i == lastIndex - 1) {                sb.append(lastSeparator);            } else {                if (i != lastIndex) {                    sb.append(separator);                }            }            i++;        }        return sb.toString();    }
@Override    public String toString() {        return "(" + a.toString() + " AND " + b.toString() + ")";    }
public class ListSubscriptionsByTopicRequest {        private String _topicArn;        private String _nextToken;        public ListSubscriptionsByTopicRequest(String topicArn, String nextToken) {            _topicArn = topicArn;            _nextToken = nextToken;        }    }
@Override    public byte read() {        return bytes[pos--];    }
public TerminateClientVpnConnectionsResponse terminateClientVpnConnections(TerminateClientVpnConnectionsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(TerminateClientVpnConnectionsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(TerminateClientVpnConnectionsResponseUnmarshaller.getInstance());        return invoke(request, options, TerminateClientVpnConnectionsResponse.class);    }
public class ReceiveMessageRequest {        private String queueUrl;        public ReceiveMessageRequest(String queueUrl) {            this.queueUrl = queueUrl;        }    }
@Override    public void serialize(ILittleEndianOutput out1) {        out1.writeShort(field_1_barSpace);        out1.writeShort(field_2_categorySpace);        out1.writeShort(field_3_formatFlags);    }
@Override    public Object Common(Object output1, Object output2) {        return outputs.Common((T)output1, (T)output2);    }
public CreateVariableResponse createVariable(CreateVariableRequest request){        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateVariableRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateVariableResponseUnmarshaller.getInstance());        return invoke(CreateVariableResponse.class, request, options);    }
public static int match(byte[] b, int ptr, byte[] src) {        if (ptr + src.length > b.length) {            return -1;        }        for (int i = 0; i < src.length; i++, ptr++) {            if (b[ptr] != src[i]) {                return -1;            }        }        return ptr;    }
public int FillFields(byte[] data, int offset, IEscherRecordFactory recordFactory) {        int bytesRemaining = ReadHeader(data, offset);        int pos = offset + 8;        int size = 0;        field_1_rectX1 = LittleEndian.getInt(data, pos + size);        size += 4;        field_2_rectY1 = LittleEndian.getInt(data, pos + size);        size += 4;        field_3_rectX2 = LittleEndian.getInt(data, pos + size);        size += 4;        field_4_rectY2 = LittleEndian.getInt(data, pos + size);        size += 4;        bytesRemaining -= size;        if (bytesRemaining != 0)            throw new RecordFormatException("Expected no remaining bytes but got " + bytesRemaining);        return 8 + size + bytesRemaining;    }
public CreateCloudFrontOriginAccessIdentityResponse createCloudFrontOriginAccessIdentity(CreateCloudFrontOriginAccessIdentityRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateCloudFrontOriginAccessIdentityRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateCloudFrontOriginAccessIdentityResponseUnmarshaller.getInstance());        return invoke(request, options, CreateCloudFrontOriginAccessIdentityResponse.class);    }
public boolean isNamespaceAware() {      return getFeature(org.xmlpull.v1.XmlPullParser.FEATURE_PROCESS_NAMESPACES);    }
public void setOverridable(boolean on) {        overridable = on;    }
public String getClassName() {        return className;    }
public synchronized DirectoryReader getIndexReader() {        if (indexReader != null) {            indexReader.incRef();        }        return indexReader;    }
public int indexOfKey(int key) {        return Arrays.binarySearch(mKeys, 0, mSize, key);    }
public BlankRecord(RecordInputStream in1) {        field_1_row = in1.readUShort();        field_2_col = in1.readShort();        field_3_xf = in1.readShort();    }
@Override    public long length() {        return length_Renamed;    }
public PasswordRecord(RecordInputStream in1){        field_1_password = in1.readShort();    }
public HashMap(int capacity, float loadFactor) {        super(capacity);        if (loadFactor <= 0 || Float.isNaN(loadFactor)) {            throw new IllegalArgumentException("Load factor: " + loadFactor);        }    }
public void run() {        long lastReopenStartNS = System.currentTimeMillis() * 100;        while (!finish) {            boolean hasWaiting;            synchronized (this) {                hasWaiting = waitingGen > searchingGen;            }            long nextReopenStartNS = lastReopenStartNS + (hasWaiting ? targetMinStaleNS : targetMaxStaleNS);            long sleepNS = nextReopenStartNS - System.nanoTime();            if (sleepNS > 0) {                try {                    reopenCond.awaitNanos(sleepNS);                } catch (InterruptedException ie) {                    Thread.currentThread().interrupt();                    return;                }            }            if (finish) {                break;            }            lastReopenStartNS = System.nanoTime();            refreshStartGen = writer.getAndIncrementGeneration();            try {                manager.maybeRefreshBlocking();            } catch (IOException ioe) {                throw new Exception(ioe.toString(), ioe);            }        }        refreshDone();    }
public class DeleteLoginProfileRequest {        private String userName;                public DeleteLoginProfileRequest(String userName) {            this.userName = userName;        }    }
public E pollFirst() {        return (_size == 0) ? null : removeFirstImpl();    }    private E removeFirstImpl() {        // Implementation of removeFirstImpl()    }
public CreatePhotoRequest() {        super("CloudPhoto", "2017-07-11", "CreatePhoto", "cloudphoto", "openAPI");        setProtocol(ProtocolType.HTTPS);    }
@Override    public String getName() {        return "resolve";    }
public int findEndOffset(StringBuilder buffer, int start) {        if (start > buffer.length() || start < 0)            return start;        int offset, count = m_maxScan;        for (offset = start; offset < buffer.length() && count > 0; count--) {            if (m_boundaryChars.contains(Character.toString(buffer.charAt(offset))))                return offset;            offset++;        }        return start;    }
public void setObjectChecker(ObjectChecker oc){        objCheck = oc;    }
public BaseRef(AreaEval ae) {        _refEval = null;        _areaEval = ae;        _firstRowIndex = ae.getFirstRow();        _firstColumnIndex = ae.getFirstColumn();        _height = ae.getLastRow() - ae.getFirstRow() + 1;        _width = ae.getLastColumn() - ae.getFirstColumn() + 1;    }
public CreateVpcEndpointResponse createVpcEndpoint(CreateVpcEndpointRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateVpcEndpointRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateVpcEndpointResponseUnmarshaller.getInstance());        return invoke(request, options, CreateVpcEndpointResponse.class);    }
public DeregisterWorkspaceDirectoryResponse deregisterWorkspaceDirectory(DeregisterWorkspaceDirectoryRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DeregisterWorkspaceDirectoryRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DeregisterWorkspaceDirectoryResponseUnmarshaller.getInstance());        return invoke(request, options, DeregisterWorkspaceDirectoryResponse.class);    }
public ChartFRTInfoRecord(RecordInputStream in1) {        rt = in1.readShort();        grbitFrt = in1.readShort();        verOriginator = (byte) in1.readByte();        verWriter = (byte) in1.readByte();        int cCFRTID = in1.readShort();        rgCFRTID = new CFRTID[cCFRTID];        for (int i = 0; i < cCFRTID; i++) {            rgCFRTID[i] = new CFRTID(in1);        }    }
@Override    public Merger NewMerger(Repository db) {        return new StrategyOneSided.OneSide(db, treeIndex);    }
public CreateDataSourceFromRedshiftResponse createDataSourceFromRedshift(CreateDataSourceFromRedshiftRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(CreateDataSourceFromRedshiftRequestMarshaller.getInstance());        options.setResponseUnmarshaller(CreateDataSourceFromRedshiftResponseUnmarshaller.getInstance());        return invoke(request, options, CreateDataSourceFromRedshiftResponse.class);    }
public void clearDFA() {        for (int d = 0; d < decisionToDFA.length; d++) {            decisionToDFA[d] = new DFA(atn.getDecisionState(d), d);        }    }
public void removeName(String name) {        int index = getNameIndex(name);        removeName(index);    }
@Override    public String toString() {        StringBuilder buffer = new StringBuilder();        buffer.append("[RightMargin]\n");        buffer.append("    .margin               = ").append(" (").append(Margin).append(" )\n");        buffer.append("[/RightMargin]\n");        return buffer.toString();    }
@Override    public Object clone() {        return new RefreshAllRecord(_options);    }
public StandardQueryNodeProcessorPipeline(QueryConfigHandler queryConfig) {        super(queryConfig);        add(new WildcardQueryNodeProcessor());        add(new MultiFieldQueryNodeProcessor());        add(new FuzzyQueryNodeProcessor());        add(new MatchAllDocsQueryNodeProcessor());        add(new OpenRangeQueryNodeProcessor());        add(new NumericQueryNodeProcessor());        add(new NumericRangeQueryNodeProcessor());        add(new LowercaseExpandedTermsQueryNodeProcessor());        add(new TermRangeQueryNodeProcessor());        add(new AllowLeadingWildcardProcessor());        add(new AnalyzerQueryNodeProcessor());        add(new PhraseSlopQueryNodeProcessor());        add(new BooleanQuery2ModifierNodeProcessor());        add(new NoChildOptimizationQueryNodeProcessor());        add(new RemoveDeletedQueryNodesProcessor());        add(new RemoveEmptyNonLeafQueryNodeProcessor());        add(new BooleanSingleChildOptimizationQueryNodeProcessor());        add(new DefaultPhraseSlopQueryNodeProcessor());        add(new BoostQueryNodeProcessor());        add(new MultiTermRewriteMethodProcessor());    }
public String FormatAsString(String sheetName, boolean useAbsoluteAddress) {        StringBuilder sb = new StringBuilder();                if (sheetName != null) {            sb.append(SheetNameFormatter.Format(sheetName));            sb.append("!");        }                CellReference cellRefFrom = new CellReference(FirstRow, FirstColumn, useAbsoluteAddress, useAbsoluteAddress);        CellReference cellRefTo = new CellReference(LastRow, LastColumn, useAbsoluteAddress, useAbsoluteAddress);                sb.append(cellRefFrom.formatAsString());                if (!cellRefFrom.equals(cellRefTo) || IsFullColumnRange || IsFullRowRange) {            sb.append(":");            sb.append(cellRefTo.formatAsString());        }                return sb.toString();    }
@Override    public ByteBuffer put(int index, byte value) {        throw new UnsupportedOperationException();    }
public void Mode(int m){        _mode = m;    }
public java.nio.ShortBuffer slice() {        return new java.nio.ReadWriteShortArrayBuffer(remaining(), backingArray, offset + _position);    }
public void set(int index, long n) {        if (count < index) {            throw new IndexOutOfRangeException(index);        } else {            if (count == index) {                add(n);            } else {                entries[index] = n;            }        }    }
public java.nio.ByteBuffer putFloat(float value) {        throw new java.nio.ReadOnlyBufferException();    }
public static double Max(double[] values) {        double max = Double.NEGATIVE_INFINITY;        for (int i = 0, iSize = values.length; i < iSize; i++) {            max = Math.max(max, values[i]);        }        return max;    }
public UpdateRepoWebhookRequest() {      super("cr", "2016-06-07", "UpdateRepoWebhook", "cr", "openAPI");      UriPattern = "/repos/[RepoNamespace]/[RepoName]/webhooks/[WebhookId]";      Method = MethodType.POST;    }
public DeleteAttributesRequest(String domainName, String itemName, List<Attribute> attributes, UpdateCondition expected) {        this._domainName = domainName;        this._itemName = itemName;        this._attributes = attributes;        this._expected = expected;    }
@Override    public String toString() {        StringBuilder sb = new StringBuilder();        sb.append("[SXPI]\n");        for (int i = 0; i < _fieldInfos.length; i++) {            sb.append("    item[").append(i).append("]=");            _fieldInfos[i].appendDebugInfo(sb);            sb.append('\n');        }        sb.append("[/SXPI]\n");        return sb.toString();    }
public boolean IsSuccessful() {        if (mergeResult != null) {            return mergeResult.GetMergeStatus().IsSuccessful();        } else {            if (rebaseResult != null) {                return rebaseResult.GetStatus().IsSuccessful();            }        }        return true;    }
public void setBytesValue(byte[] value) {        setBytesValue(new BytesRef(value));    }
public DescribeConnectionsResponse describeConnections(DescribeConnectionsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeConnectionsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeConnectionsResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeConnectionsResponse.class);    }
public DeletePhotosRequest() {        super("CloudPhoto", "2017-07-11", "DeletePhotos", "cloudphoto", "openAPI");        setProtocol(ProtocolType.HTTPS);    }
public void add(E object) {        iterator.add(object);        subList.sizeChanged(true);        end++;    }
public static java.nio.ByteBuffer allocate(int capacity_1) {        if (capacity_1 < 0) {            throw new IllegalArgumentException();        }        return java.nio.ByteBuffer.allocate(capacity_1);    }
public SrndQuery GetSubQuery(int qn) {        return m_queries[qn];    }
public float currentScore(int docId, String field, int start, int end, int numPayloadsSeen, float currentScore, float currentPayloadScore) {        if (numPayloadsSeen == 0) {            return currentPayloadScore;        } else {            return Math.min(currentPayloadScore, currentScore);        }    }
public String toString() {        StringBuilder buffer = new StringBuilder();        buffer.append("[BLANK]\n");        buffer.append("row       = ").append(HexDump.shortToHex(row)).append("\n");        buffer.append("col       = ").append(HexDump.shortToHex(column)).append("\n");        buffer.append("xf        = ").append(HexDump.shortToHex(xfIndex)).append("\n");        buffer.append("[/BLANK]\n");        return buffer.toString();    }
public DescribeLogPatternResponse describeLogPattern(DescribeLogPatternRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(DescribeLogPatternRequestMarshaller.getInstance());        options.setResponseUnmarshaller(DescribeLogPatternResponseUnmarshaller.getInstance());        return invoke(request, options, DescribeLogPatternResponse.class);    }
public RegisterTransitGatewayMulticastGroupMembersResponse registerTransitGatewayMulticastGroupMembers(RegisterTransitGatewayMulticastGroupMembersRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(RegisterTransitGatewayMulticastGroupMembersRequestMarshaller.getInstance());        options.setResponseUnmarshaller(RegisterTransitGatewayMulticastGroupMembersResponseUnmarshaller.getInstance());        return invoke(request, options, RegisterTransitGatewayMulticastGroupMembersResponse.class);    }    public <T> T invoke(RegisterTransitGatewayMulticastGroupMembersRequest request, InvokeOptions options, Class<T> responseClass) {        // Implementation of the invoke method        // ...        // Replace this comment with your implementation        // ...    }
public GetPhoneNumberSettingsResponse getPhoneNumberSettings(GetPhoneNumberSettingsRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetPhoneNumberSettingsRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetPhoneNumberSettingsResponseUnmarshaller.getInstance());        return invoke(request, options, GetPhoneNumberSettingsResponse.class);    }
public ObjectId getData() {        return data;    }
@Override    public boolean isDirect() {        return false;    }
public class DeleteServerCertificateRequest {        private String serverCertificateName;        public DeleteServerCertificateRequest(String serverCertificateName) {            this.serverCertificateName = serverCertificateName;        }    }
public java.lang.StringBuffer append(boolean b){        return append(b ? "true" : "false");    }
public GetEvaluationResponse getEvaluation(GetEvaluationRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetEvaluationRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetEvaluationResponseUnmarshaller.getInstance());        return invoke(request, options, GetEvaluationResponse.class);    }
public BRAIRecord GetDataName() {        return dataName;    }
public boolean find(int start_1) {        findPos = start_1;        if (findPos < _regionStart) {            findPos = _regionStart;        } else {            if (findPos >= _regionEnd) {                matchFound = false;                return false;            }        }        matchFound = findImpl(address, input, findPos, matchOffsets);        if (matchFound) {            findPos = matchOffsets[1];        }        return matchFound;    }
public GetLifecyclePolicyPreviewResponse getLifecyclePolicyPreview(GetLifecyclePolicyPreviewRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(GetLifecyclePolicyPreviewRequestMarshaller.getInstance());        options.setResponseUnmarshaller(GetLifecyclePolicyPreviewResponseUnmarshaller.getInstance());        return invoke(request, options, GetLifecyclePolicyPreviewResponse.class);    }
public SinglePositionTokenStream(String word) {        termAtt = addAttribute(CharTermAttribute.class);        posIncrAtt = addAttribute(PositionIncrementAttribute.class);        this.word = word;        returned = true;    }
public void Serialize(ILittleEndianOutput out1) {        out1.WriteShort(field_1_print_gridlines);    }
@Override    public String toString() {        StringBuilder s = new StringBuilder();        s.append(Constants.TypeString(type));        s.append(' ');        s.append(name);        s.append(' ');        s.append(commitTime);        s.append(' ');        appendCoreFlags(s);        return s.toString();    }
public NGit.Api.LsRemoteCommand setRemote(String remote) {        checkCallable();        this.remote = remote;        return this;    }
public void collapseRow(int rowNumber) {        int startRow = findStartOfRowOutlineGroup(rowNumber);        RowRecord rowRecord = getRow(startRow);        int lastRow = writeHidden(rowRecord, startRow, true);        if (getRow(lastRow + 1) != null) {            getRow(lastRow + 1).setCollapsed(true);        } else {            RowRecord row = createRow(lastRow + 1);            row.setCollapsed(true);            insertRow(row);        }    }
public AssociateSkillGroupWithRoomResponse associateSkillGroupWithRoom(AssociateSkillGroupWithRoomRequest request) {        InvokeOptions options = new InvokeOptions();        options.setRequestMarshaller(AssociateSkillGroupWithRoomRequestMarshaller.getInstance());        options.setResponseUnmarshaller(AssociateSkillGroupWithRoomResponseUnmarshaller.getInstance());        return invoke(request, options, AssociateSkillGroupWithRoomResponse.class);    }
@Override    public String toString() {        StringBuilder buffer = new StringBuilder();        buffer.append("[SERIESLIST]\n");        buffer.append("    .seriesNumbers        = ").append(" (").append(SeriesNumbers).append(" )");        buffer.append(System.lineSeparator());        buffer.append("[/SERIESLIST]\n");        return buffer.toString();    }
public QueryConfigHandler getQueryConfigHandler() {        return this.queryConfig;    }
public String getClassArg() {        if (originalArgs != null) {            String className = originalArgs[CLASS_NAME];            if (className != null) {                return className;            }        }        return this.getClass().getSimpleName();    }
