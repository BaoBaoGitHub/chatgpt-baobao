public void serialize(ILittleEndianOutput out1) { out1.writeShort(field_1_vcenter); }
public void AddAll(BlockList<T> src) { if (src.size == 0) { return; } int srcDirIdx = 0; for (; srcDirIdx < src.tailDirIdx; srcDirIdx++) { AddAll(src.directory[srcDirIdx], 0, BLOCK_SIZE); } if (src.tailBlkIdx != 0) { AddAll(src.tailBlock, 0, src.tailBlkIdx); } }
public void writeByte(byte b) { if (outerInstance.getUpto() == outerInstance.getBlockSize()) { if (outerInstance.getCurrentBlock() != null) { outerInstance.getBlocks().add(outerInstance.getCurrentBlock()); outerInstance.getBlockEnd().add(outerInstance.getUpto()); } outerInstance.setCurrentBlock(new byte[outerInstance.getBlockSize()]); outerInstance.setUpto(0); } outerInstance.getCurrentBlock()[outerInstance.getUpto()] = b; outerInstance.setUpto(outerInstance.getUpto() + 1); }
public ObjectId GetObjectId(){ return objectId; }
public DeleteDomainEntryResponse deleteDomainEntry(DeleteDomainEntryRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteDomainEntryRequestMarshaller.Instance); options.setResponseUnmarshaller(DeleteDomainEntryResponseUnmarshaller.Instance); return invoke(request, options, DeleteDomainEntryResponse.class); }
public long RamBytesUsed() { return fst == null ? 0 : fst.GetSizeInBytes(); }
public String getFullMessage() { byte[] raw = buffer; int msgB = RawParseUtils.TagMessage(raw, 0); if (msgB < 0) { return ""; } Encoding enc = RawParseUtils.ParseEncoding(raw); return RawParseUtils.Decode(enc, raw, msgB, raw.length); }
public POIFSFileSystem() { HeaderBlock headerBlock = new HeaderBlock(bigBlockSize); _property_table = new PropertyTable(headerBlock); _documents = new ArrayList(); _root = null; }
public void Init(int address) { slice = pool.Buffers[address >> ByteBlockPool.BYTE_BLOCK_SHIFT]; assert slice != null; upto = address & ByteBlockPool.BYTE_BLOCK_MASK; offset0 = address; assert upto < slice.length; }
public NGit.Api.SubmoduleAddCommand setPath(String path) { this.path = path; return this; }
public ListIngestionsResponse listIngestions(ListIngestionsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ListIngestionsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ListIngestionsResponseUnmarshaller.getInstance()); return invoke(request, options, ListIngestionsResponse.class); }
public QueryParserTokenManager(ICharStream stream, int lexState) { super(stream); SwitchTo(lexState); }
public GetShardIteratorResponse getShardIterator(GetShardIteratorRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetShardIteratorRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetShardIteratorResponseUnmarshaller.getInstance()); return invoke(request, options, GetShardIteratorResponse.class); }
public ModifyStrategyRequest() { super("aegis", "2016-11-11", "ModifyStrategy", "vipaegis", "openAPI"); setMethod(MethodType.POST); }
public boolean ready() { synchronized(lock) { if (in == null) { throw new System.IO.IOException("InputStreamReader is closed"); } try { return bytes.hasRemaining() || in.available() > 0; } catch (System.IO.IOException) { return false; } } }
protected EscherOptRecord GetOptRecord() { return _optRecord; }
public int read(byte[] buffer, int offset, int length) { synchronized (this) { if (buffer == null) { throw new System.ArgumentNullException("buffer == null"); } java.util.Arrays.checkOffsetAndCount(buffer.length, offset, length); if (length == 0) { return 0; } int copylen = count - pos < length ? count - pos : length; for (int i = 0; i < copylen; i++) { buffer[offset + i] = (byte)buffer[pos + i]; } pos += copylen; return copylen; } }
public OpenNLPSentenceBreakIterator(NLPSentenceDetectorOp sentenceOp){ this.sentenceOp = sentenceOp; }
public void print(String str) { write(str != null ? str : String.valueOf((Object) null)); }
public class NotImplementedFunctionException extends Exception { private String functionName; public NotImplementedFunctionException(String functionName, NotImplementedException cause) { super(functionName, cause); this.functionName = functionName; } }
public V next() { return this.nextEntry().getValue(); }
Unfortunately, I cannot translate C# code into Java code without any information about the classes and libraries used in the code. Could you provide more context or additional information about the code?
public TagQueueResponse TagQueue(TagQueueRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(TagQueueRequestMarshaller.getInstance()); options.setResponseUnmarshaller(TagQueueResponseUnmarshaller.getInstance()); return invoke(request, options, TagQueueResponse.class); }
public void remove() throws UnsupportedOperationException { throw new UnsupportedOperationException(); }
public ModifyCacheSubnetGroupResponse modifyCacheSubnetGroup(ModifyCacheSubnetGroupRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ModifyCacheSubnetGroupRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ModifyCacheSubnetGroupResponseUnmarshaller.getInstance()); return invoke(request, options, ModifyCacheSubnetGroupResponse.class); }
public void SetParams(String params){ super.SetParams(params); String culture = ""; String ignore; StringTokenizer st = new StringTokenizer(params, ","); if (st.hasMoreTokens()){ culture = st.nextToken(); } if (st.hasMoreTokens()){ culture += "-" + st.nextToken(); } if (st.hasMoreTokens()){ ignore = st.nextToken(); } }
public DeleteDocumentationVersionResponse DeleteDocumentationVersion(DeleteDocumentationVersionRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteDocumentationVersionRequestMarshaller.Instance); options.setResponseUnmarshaller(DeleteDocumentationVersionResponseUnmarshaller.Instance); return invoke(request, options, DeleteDocumentationVersionResponse.class); }
public boolean equals(Object obj) { if (!(obj instanceof FacetLabel)) { return false; } FacetLabel other = (FacetLabel) obj; if (length != other.length) { return false; } for (int i = length - 1; i >= 0; i--) { if (!components[i].equals(other.components[i], StringComparison.Ordinal)) { return false; } } return true; }
public GetInstanceAccessDetailsResponse getInstanceAccessDetails(GetInstanceAccessDetailsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetInstanceAccessDetailsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetInstanceAccessDetailsResponseUnmarshaller.getInstance()); return invoke(request, options, GetInstanceAccessDetailsResponse.class); }
public HSSFPolygon createPolygon(HSSFChildAnchor anchor){ HSSFPolygon shape = new HSSFPolygon(this, anchor); shape.setParent(this); shape.setAnchor(anchor); shapes.add(shape); onCreate(shape); return shape; }
public String GetSheetName(int sheetIndex) { return GetBoundSheetRec(sheetIndex).Sheetname; }
public GetDashboardResponse getDashboard(GetDashboardRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetDashboardRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetDashboardResponseUnmarshaller.getInstance()); return invoke(request, options, GetDashboardResponse.class); }
public AssociateSigninDelegateGroupsWithAccountResponse AssociateSigninDelegateGroupsWithAccount(AssociateSigninDelegateGroupsWithAccountRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(AssociateSigninDelegateGroupsWithAccountRequestMarshaller.getInstance()); options.setResponseUnmarshaller(AssociateSigninDelegateGroupsWithAccountResponseUnmarshaller.getInstance()); return invoke(request, options, AssociateSigninDelegateGroupsWithAccountResponse.class); }
public void addMultipleBlanks(MulBlankRecord mbr) { for (int j = 0; j < mbr.getNumColumns(); j++) { BlankRecord br = new BlankRecord(); br.setColumn(j + mbr.getFirstColumn()); br.setRow(mbr.getRow()); br.setXFIndex(mbr.getXFAt(j)); insertCell(br); } }
public static String quote(String string) { StringBuilder sb = new StringBuilder(); sb.append("\\Q"); int apos = 0; int k; while ((k = string.indexOf("\\E", apos)) >= 0) { sb.append(string.substring(apos, k + 2)).append("\\\\E\\Q"); apos = k + 2; } return sb.append(string.substring(apos)).append("\\E").toString(); }
public java.nio.ByteBuffer putInt(int value){ throw new java.nio.ReadOnlyBufferException(); }
public ArrayPtg(Object[][] values2d){ int nColumns = values2d[0].length; int nRows = values2d.length; _nColumns = (short)nColumns; _nRows = (short)nRows; Object[] vv = new Object[_nColumns * _nRows]; for (int r = 0; r < nRows; r++){ Object[] rowData = values2d[r]; for (int c = 0; c < nColumns; c++){ vv[getValueIndex(c, r)] = rowData[c]; } } _arrayValues = vv; _reserved0Int = 0; _reserved1Short = 0; _reserved2Byte = 0; }
public GetIceServerConfigResponse GetIceServerConfig(GetIceServerConfigRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetIceServerConfigRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetIceServerConfigResponseUnmarshaller.getInstance()); return invoke(request, options); }
public String toString() { StringBuilder sb = new StringBuilder(64); sb.append(getClass().getName()).append(" ["); sb.append(getValueAsString()); sb.append("]"); return sb.toString(); }
public String toString(String field) { return "ToChildBlockJoinQuery (" + _parentQuery + ")"; }
public void IncRef(){ refCount.incrementAndGet(); }
public UpdateConfigurationSetSendingEnabledResponse UpdateConfigurationSetSendingEnabled(UpdateConfigurationSetSendingEnabledRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(UpdateConfigurationSetSendingEnabledRequestMarshaller.getInstance()); options.setResponseUnmarshaller(UpdateConfigurationSetSendingEnabledResponseUnmarshaller.getInstance()); return invoke(request, options, UpdateConfigurationSetSendingEnabledResponse.class); }
public int GetNextXBATChainOffset(){ return GetXBATEntriesPerBlock() * LittleEndianConsts.INT_SIZE; }
public void multiplyByPowerOfTen(int pow10) { TenPower tp = TenPower.GetInstance(Math.abs(pow10)); if (pow10 < 0) { mulShift(tp._divisor, tp._divisorShift); } else { mulShift(tp._multiplicand, tp._multiplierShift); } }
public String toString() { StringBuilder builder = new StringBuilder(); int length = this.length(); builder.append(File.separatorChar); for (int i = 0; i < length; i++) { builder.append(this.getComponent(i)); if (i < (length - 1)) { builder.append(File.separatorChar); } } return builder.toString(); }
public void withFetcher(ECSMetadataServiceCredentialsFetcher fetcher) { this.fetcher = fetcher; this.fetcher.SetRoleName(roleName); }
public void SetProgressMonitor(ProgressMonitor pm) { progressMonitor = pm; }
public void reset() { if (!first) { ptr = 0; if (!eof) { parseEntry(); } } }
public E previous() { if (iterator.previousIndex() >= start) { return iterator.previous(); } throw new java.util.NoSuchElementException(); }
public String GetNewPrefix() { return this.newPrefix; }
public int indexOfValue(int value) { for (int i = 0; i < mSize; i++) { if (mValues[i] == value) { return i; } } return -1; }
public List<CharsRef> UniqueStems(char[] word, int length){ List<CharsRef> stems = Stem(word, length); if (stems.size() < 2){ return stems; } CharArraySet terms = new CharArraySet(LuceneVersion.LUCENE_CURRENT, 8, dictionary.ignoreCase); List<CharsRef> deduped = new ArrayList<>(); for (CharsRef s : stems){ if (!terms.contains(s)){ deduped.add(s); terms.add(s); } } return deduped; }
public GetGatewayResponsesResponse getGatewayResponses(GetGatewayResponsesRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetGatewayResponsesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetGatewayResponsesResponseUnmarshaller.getInstance()); return invoke(request, options, GetGatewayResponsesResponse.class); }
public void setPosition(long position) { currentBlockIndex = (int)(position >> outerInstance.blockBits); currentBlock = outerInstance.blocks[currentBlockIndex]; currentBlockUpto = (int)(position & outerInstance.blockMask); }
public long skip(long n) { int s = (int)Math.min(available(), Math.max(0, n)); ptr += s; return s; }
public BootstrapActionDetail(BootstrapActionConfig bootstrapActionConfig){ _bootstrapActionConfig = bootstrapActionConfig; }
public void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_row); out1.WriteShort(field_2_col); out1.WriteShort(field_3_flags); out1.WriteShort(field_4_shapeid); out1.WriteShort(field_6_author.length); out1.WriteByte(field_5_hasMultibyte ? 0x01 : 0x00); if (field_5_hasMultibyte) { StringUtil.PutUnicodeLE(field_6_author, out1); } else { StringUtil.PutCompressedUnicode(field_6_author, out1); } if (field_7_padding != null) { out1.WriteByte(Convert.ToInt32(field_7_padding, CultureInfo.InvariantCulture)); } }
public int lastIndexOf(String string) { return lastIndexOf(string, count); }
public boolean add(E object) { return addLastImpl(object); }
public void unsetSection(String section, String subsection) { ConfigSnapshot src; ConfigSnapshot res; do { src = state.get(); res = unsetSection(src, section, subsection); } while (!state.compareAndSet(src, res)); }
public String getTagName() { return tagName; }
public void addSubRecord(int index, SubRecord element) { subrecords.insert(index, element); }
public boolean remove(Object object) { synchronized (mutex) { return c.remove(object); } }
public TokenStream create(TokenStream input) { return new DoubleMetaphoneFilter(input, maxCodeLength, inject); }
public long Length() { return InCoreLength(); }
public void setValue(boolean newValue) { value = newValue; }
public Pair(ContentSource oldSource, ContentSource newSource) { this.oldSource = oldSource; this.newSource = newSource; }
public int get(int i) { if (count <= i) { throw new IndexOutOfBoundsException(i); } return entries[i]; }
public CreateRepoRequest() { super("cr", "2016-06-07", "CreateRepo", "cr", "openAPI"); UriPattern = "/repos"; Method = MethodType.PUT; }
public boolean isDeltaBaseAsOffset() { return deltaBaseAsOffset; }
public void remove() { if (expectedModCount == list.modCount) { if (lastLink != null) { java.util.LinkedList.Link<ET> next_1 = lastLink.next; java.util.LinkedList.Link<ET> previous_1 = lastLink.previous; next_1.previous = previous_1; previous_1.next = next_1; if (lastLink == link) { pos--; } link = previous_1; lastLink = null; expectedModCount++; list._size--; list.modCount++; } else { throw new System.InvalidOperationException(); } } else { throw new java.util.ConcurrentModificationException(); } }
public MergeShardsResponse mergeShards(MergeShardsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(MergeShardsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(MergeShardsResponseUnmarshaller.getInstance()); return invoke(request, options, MergeShardsResponse.class); }
public AllocateHostedConnectionResponse AllocateHostedConnection(AllocateHostedConnectionRequest request){ InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(AllocateHostedConnectionRequestMarshaller.Instance); options.setResponseUnmarshaller(AllocateHostedConnectionResponseUnmarshaller.Instance); return invoke(request, options, AllocateHostedConnectionResponse.class); }
public int getBeginIndex() { return start; }
public static WeightedTerm[] GetTerms(Query query) { return GetTerms(query, false); }
public java.nio.ByteBuffer compact() { throw new java.nio.ReadOnlyBufferException(); }
public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { for (int i = 0; i < iterations; ++i) { int byte0 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = (int)((byte0 & 0xFF) >>> 2); int byte1 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte0 & 3) << 4) | ((byte1 & 0xFF) >>> 4); int byte2 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte1 & 15) << 2) | ((byte2 & 0xFF) >>> 6); values[valuesOffset++] = byte2 & 63; } }
public String getHumanishName() { if ("".equals(getPath()) || getPath() == null) { throw new IllegalArgumentException(); } String s = getPath(); String[] elements; if ("file".equals(scheme) || LOCAL_FILE.matcher(s).matches()) { elements = s.split("[\\" + File.separatorChar + "/]"); } else { elements = s.split("/"); } if (elements.length == 0) { throw new IllegalArgumentException(); } String result = elements[elements.length - 1]; if (Constants.DOT_GIT.equals(result)) { result = elements[elements.length - 2]; } else { if (result.endsWith(Constants.DOT_GIT_EXT)) { result = result.substring(0, result.length() - Constants.DOT_GIT_EXT.length()); } } return result; }
public DescribeNotebookInstanceLifecycleConfigResponse describeNotebookInstanceLifecycleConfig(DescribeNotebookInstanceLifecycleConfigRequest request){ InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeNotebookInstanceLifecycleConfigRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeNotebookInstanceLifecycleConfigResponseUnmarshaller.getInstance()); return invoke(request, options, DescribeNotebookInstanceLifecycleConfigResponse.class); }
public String getAccessKeySecret() { return AccessSecret; }
public CreateVpnConnectionResponse CreateVpnConnection(CreateVpnConnectionRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateVpnConnectionRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateVpnConnectionResponseUnmarshaller.getInstance()); return invoke(CreateVpnConnectionResponse.class, request, options); }
public DescribeVoicesResponse describeVoices(DescribeVoicesRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeVoicesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeVoicesResponseUnmarshaller.getInstance()); return invoke(request, options, DescribeVoicesResponse.class); }
public ListMonitoringExecutionsResponse ListMonitoringExecutions(ListMonitoringExecutionsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ListMonitoringExecutionsRequestMarshaller.Instance); options.setResponseUnmarshaller(ListMonitoringExecutionsResponseUnmarshaller.Instance); return invoke(request, options, ListMonitoringExecutionsResponse.class); }
public DescribeJobRequest(String vaultName, String jobId) { _vaultName = vaultName; _jobId = jobId; }
public EscherRecord GetEscherRecord(int index) { return escherRecords[index]; }
public GetApisResponse getApis(GetApisRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetApisRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetApisResponseUnmarshaller.getInstance()); return invoke(request, options, GetApisResponse.class); }
public DeleteSmsChannelResponse deleteSmsChannel(DeleteSmsChannelRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteSmsChannelRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DeleteSmsChannelResponseUnmarshaller.getInstance()); return invoke(request, options, DeleteSmsChannelResponse.class); }
public TrackingRefUpdate getTrackingRefUpdate() { return trackingRefUpdate; }
public void print(boolean b) { print(Boolean.toString(b)); }
public IQueryNode getChild() { return getChildren()[0]; }
public NotIgnoredFilter(int workdirTreeIndex) { this.index = workdirTreeIndex; }
public AreaRecord(RecordInputStream in1) { field_1_formatFlags = in1.readShort(); }
public class GetThumbnailRequest extends CloudPhotoRequest { public GetThumbnailRequest() { super("CloudPhoto", "2017-07-11", "GetThumbnail", "cloudphoto", "openAPI"); setProtocol(ProtocolType.HTTPS); } }
public DescribeTransitGatewayVpcAttachmentsResponse describeTransitGatewayVpcAttachments(DescribeTransitGatewayVpcAttachmentsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeTransitGatewayVpcAttachmentsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeTransitGatewayVpcAttachmentsResponseUnmarshaller.getInstance()); return invoke(request, options, DescribeTransitGatewayVpcAttachmentsResponse.class); }
public PutVoiceConnectorStreamingConfigurationResponse putVoiceConnectorStreamingConfiguration(PutVoiceConnectorStreamingConfigurationRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(PutVoiceConnectorStreamingConfigurationRequestMarshaller.getInstance()); options.setResponseUnmarshaller(PutVoiceConnectorStreamingConfigurationResponseUnmarshaller.getInstance()); return invoke(request, options, PutVoiceConnectorStreamingConfigurationResponse.class); }
public OrdRange GetOrdRange(String dim) { OrdRange result; prefixToOrdRange.TryGetValue(dim, out result); return result; }
public String toString() { String symbol = ""; if (startIndex >= 0 && startIndex < ((ICharStream)InputStream).size()) { symbol = ((ICharStream)InputStream).getText(Interval.of(startIndex, startIndex)); symbol = Utils.escapeWhitespace(symbol, false); } return String.format(Locale.getDefault(), "%s('%s')", Antlr4.Runtime.LexerNoViableAltException.class.getName(), symbol); }
public E peek() { return peekFirstImpl(); }
public CreateWorkspacesResponse createWorkspaces(CreateWorkspacesRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateWorkspacesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateWorkspacesResponseUnmarshaller.getInstance()); return invoke(request, options); }
public Object clone() { NumberFormatIndexRecord rec = new NumberFormatIndexRecord(); rec.field_1_formatIndex = field_1_formatIndex; return rec; }
