@Override public void serialize(ILittleEndianOutput out1) { out1.writeShort(field_1_vcenter); }
public void addAll(NGit.Util.BlockList<T> src) { if (src.size == 0) { return; } int srcDirIdx = 0; for (; srcDirIdx < src.tailDirIdx; srcDirIdx++) { addAll(src.directory[srcDirIdx], 0, BLOCK_SIZE); } if (src.tailBlkIdx != 0) { addAll(src.tailBlock, 0, src.tailBlkIdx); } }
@Override public void writeByte(byte b) { if (outerInstance.upto == outerInstance.blockSize) { if (outerInstance.currentBlock != null) { outerInstance.blocks.add(outerInstance.currentBlock); outerInstance.blockEnd.add(outerInstance.upto); } outerInstance.currentBlock = new byte[outerInstance.blockSize]; outerInstance.upto = 0; } outerInstance.currentBlock[outerInstance.upto++] = b; }
public ObjectId getObjectId() { return objectId; }
public DeleteDomainEntryResponse deleteDomainEntry(DeleteDomainEntryRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteDomainEntryRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DeleteDomainEntryResponseUnmarshaller.getInstance()); return invoke(request, options, DeleteDomainEntryResponse.class); }
public long ramBytesUsed() { return fst == null ? 0 : fst.getSizeInBytes(); }
public String getFullMessage() { byte[] raw = buffer; int msgB = RawParseUtils.tagMessage(raw, 0); if (msgB < 0) { return ""; } Encoding enc = RawParseUtils.parseEncoding(raw); return RawParseUtils.decode(enc, raw, msgB, raw.length); }
public POIFSFileSystem() { HeaderBlock headerBlock = new HeaderBlock(bigBlockSize); _property_table = new PropertyTable(headerBlock); _documents = new ArrayList<>(); _root = null; }
public void init(int address) { slice = pool.getBuffer(address >> ByteBlockPool.BYTE_BLOCK_SHIFT); assert slice != null; upto = address & ByteBlockPool.BYTE_BLOCK_MASK; offset0 = address; assert upto < slice.length; }
public SubmoduleAddCommand setPath(String path) { this.path = path; return this; }
public ListIngestionsResponse listIngestions(ListIngestionsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ListIngestionsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ListIngestionsResponseUnmarshaller.getInstance()); return invoke(request, options, ListIngestionsResponse.class); }
public QueryParserTokenManager(ICharStream stream, int lexState) { this(stream); SwitchTo(lexState); }
public GetShardIteratorResponse getShardIterator(GetShardIteratorRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetShardIteratorRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetShardIteratorResponseUnmarshaller.getInstance()); return invoke(request, options, GetShardIteratorResponse.class); }
public ModifyStrategyRequest() { super("aegis", "2016-11-11", "ModifyStrategy", "vipaegis", "openAPI"); setMethod(MethodType.POST); }
public boolean ready() { synchronized (lock) { if (in == null) { throw new IOException("InputStreamReader is closed"); } try { return bytes.hasRemaining() || in.available() > 0; } catch (IOException e) { return false; } } }
protected EscherOptRecord GetOptRecord() { return _optRecord; }
public synchronized int read(byte[] buffer, int offset, int length) { if (buffer == null) { throw new NullPointerException("buffer == null"); } else if (offset < 0 || length < 0 || length > buffer.length - offset) { throw new ArrayIndexOutOfBoundsException(); } else if (length == 0) { return 0; } if (pos >= count) { return -1; } int copylen = Math.min(count - pos, length); System.arraycopy(this.buffer, pos, buffer, offset, copylen); pos += copylen; return copylen; }
Java public OpenNLPSentenceBreakIterator(NLPSentenceDetectorOp sentenceOp) { this.sentenceOp = sentenceOp; }
public void print(String str) { write(str != null ? str : String.valueOf((Object) null)); }
public NotImplementedFunctionException(String functionName, NotImplementedException cause) { super(functionName, cause); this.functionName = functionName; }
public V next() { return this.nextEntry().value; }
public synchronized void readBytes(byte[] b, int offset, int len, boolean useBuffer) throws IOException { int available = bufferLength - bufferPosition; if (len <= available) { if (len > 0) { System.arraycopy(m_buffer, bufferPosition, b, offset, len); } bufferPosition += len; } else { if (available > 0) { System.arraycopy(m_buffer, bufferPosition, b, offset, available); offset += available; len -= available; bufferPosition += available; } if (useBuffer && len < bufferSize) { refill(); if (bufferLength < len) { System.arraycopy(m_buffer, 0, b, offset, bufferLength); throw new EndOfStreamException("read past EOF: " + this); } else { System.arraycopy(m_buffer, 0, b, offset, len); bufferPosition = len; } } else { long after = bufferStart + bufferPosition + len; if (after > Length) { throw new EndOfStreamException("read past EOF: " + this); } readInternal(b, offset, len); bufferStart = after; bufferPosition = 0; bufferLength = 0; } } }
public TagQueueResponse tagQueue(TagQueueRequest request){ InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(TagQueueRequestMarshaller.Instance); options.setResponseUnmarshaller(TagQueueResponseUnmarshaller.Instance); return invoke(request, options, TagQueueResponse.class); }
public void remove(){ throw new UnsupportedOperationException(); }
public ModifyCacheSubnetGroupResponse modifyCacheSubnetGroup(ModifyCacheSubnetGroupRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ModifyCacheSubnetGroupRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ModifyCacheSubnetGroupResponseUnmarshaller.getInstance()); return invoke(request, options, ModifyCacheSubnetGroupResponse.class); }
public void setParams(String params) { super.setParams(params); culture = ""; String ignore; StringTokenizer st = new StringTokenizer(params, ","); if (st.hasMoreTokens()) { culture = st.nextToken(); } if (st.hasMoreTokens()) { culture += "-" + st.nextToken(); } if (st.hasMoreTokens()) { ignore = st.nextToken(); } }
public DeleteDocumentationVersionResponse deleteDocumentationVersion(DeleteDocumentationVersionRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteDocumentationVersionRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DeleteDocumentationVersionResponseUnmarshaller.getInstance()); return invoke(request, options); }
@Override public boolean equals(Object obj) { if (!(obj instanceof FacetLabel)) { return false; } FacetLabel other = (FacetLabel) obj; if (length != other.length) { return false; } for (int i = length - 1; i >= 0; i--) { if (!components[i].equals(other.components[i])) { return false; } } return true; }
public GetInstanceAccessDetailsResponse getInstanceAccessDetails(GetInstanceAccessDetailsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetInstanceAccessDetailsRequestMarshaller.Instance); options.setResponseUnmarshaller(GetInstanceAccessDetailsResponseUnmarshaller.Instance); return Invoke<GetInstanceAccessDetailsResponse>(request, options); }
public HSSFPolygon createPolygon(HSSFChildAnchor anchor) { HSSFPolygon shape = new HSSFPolygon(this, anchor); shape.setParent(this); shape.setAnchor(anchor); shapes.add(shape); onCreate(shape); return shape; }
public String GetSheetName(int sheetIndex){ return GetBoundSheetRec(sheetIndex).Sheetname; }
public GetDashboardResponse getDashboard(GetDashboardRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetDashboardRequestMarshaller.Instance); options.setResponseUnmarshaller(GetDashboardResponseUnmarshaller.Instance); return invoke(request, options, GetDashboardResponse.class); }
public AssociateSigninDelegateGroupsWithAccountResponse associateSigninDelegateGroupsWithAccount(AssociateSigninDelegateGroupsWithAccountRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(AssociateSigninDelegateGroupsWithAccountRequestMarshaller.getInstance()); options.setResponseUnmarshaller(AssociateSigninDelegateGroupsWithAccountResponseUnmarshaller.getInstance()); return invoke(request, options, AssociateSigninDelegateGroupsWithAccountResponse.class); }
public void addMultipleBlanks(MulBlankRecord mbr) { for (int j = 0; j < mbr.getNumColumns(); j++) { BlankRecord br = new BlankRecord(); br.setColumn(j + mbr.getFirstColumn()); br.setRow(mbr.getRow()); br.setXFIndex(mbr.getXFAt(j)); insertCell(br); } }
public static String quote(String string) { StringBuilder sb = new StringBuilder(); sb.append("\\Q"); int apos = 0; int k; while ((k = string.indexOf("\\E", apos)) >= 0) { sb.append(string.substring(apos, k + 2)).append("\\\\E\\Q"); apos = k + 2; } return sb.append(string.substring(apos)).append("\\E").toString(); }
@Override public java.nio.ByteBuffer putInt(int value) { throw new java.nio.ReadOnlyBufferException(); }
public ArrayPtg(Object[][] values2d) { int nColumns = values2d[0].length; int nRows = values2d.length; _nColumns = (short) nColumns; _nRows = (short) nRows; Object[] vv = new Object[_nColumns * _nRows]; for (int r = 0; r < nRows; r++) { Object[] rowData = values2d[r]; for (int c = 0; c < nColumns; c++) { vv[getValueIndex(c, r)] = rowData[c]; } } _arrayValues = vv; _reserved0Int = 0; _reserved1Short = 0; _reserved2Byte = 0; }
public GetIceServerConfigResponse GetIceServerConfig(GetIceServerConfigRequest request) { InvokeOptions options = new InvokeOptions(); options.RequestMarshaller = GetIceServerConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = GetIceServerConfigResponseUnmarshaller.Instance; return Invoke<GetIceServerConfigResponse>(request, options); }
public String toString() { StringBuilder sb = new StringBuilder(64); sb.append(getClass().getSimpleName()).append(" ["); sb.append(getValueAsString()); sb.append("]"); return sb.toString(); }
@Override public String toString(String field) { return "ToChildBlockJoinQuery (" + _parentQuery + ")"; }
public void incRef() { refCount.incrementAndGet(); }
public UpdateConfigurationSetSendingEnabledResponse updateConfigurationSetSendingEnabled(UpdateConfigurationSetSendingEnabledRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(UpdateConfigurationSetSendingEnabledRequestMarshaller.getInstance()); options.setResponseUnmarshaller(UpdateConfigurationSetSendingEnabledResponseUnmarshaller.getInstance()); return invoke(request, options, UpdateConfigurationSetSendingEnabledResponse.class); }
public int getNextXBATChainOffset() { return getXBATEntriesPerBlock() * LittleEndianConsts.INT_SIZE; }
public void multiplyByPowerOfTen(int pow10) { TenPower tp = TenPower.GetInstance(Math.abs(pow10)); if (pow10 < 0) { mulShift(tp._divisor, tp._divisorShift); } else { mulShift(tp._multiplicand, tp._multiplierShift); } }
@Override public String toString() { StringBuilder builder = new StringBuilder(); int length = this.length; builder.append(File.separatorChar); for (int i = 0; i < length; i++) { builder.append(this.getComponent(i)); if (i < (length - 1)) { builder.append(File.separatorChar); } } return builder.toString(); }
public void withFetcher(ECSMetadataServiceCredentialsFetcher fetcher) { this.fetcher = fetcher; this.fetcher.setRoleName(roleName); }
public void setProgressMonitor(ProgressMonitor pm) { progressMonitor = pm; }
@Override public void reset() { if (!first) { ptr = 0; if (!eof) { parseEntry(); } } }
public E previous() { if (iterator.previousIndex() >= start) { return iterator.previous(); } throw new java.util.NoSuchElementException(); }
public String getNewPrefix() { return this.newPrefix; }
public int indexOfValue(int value) { for (int i = 0; i < mSize; i++) { if (mValues[i] == value) { return i; } } return -1; }
public List<CharsRef> UniqueStems(char[] word, int length) { List<CharsRef> stems = Stem(word, length); if (stems.size() < 2) { return stems; } CharArraySet terms = new CharArraySet(LuceneVersion.LUCENE_CURRENT, 8, dictionary.ignoreCase); List<CharsRef> deduped = new ArrayList<>(); for (CharsRef s : stems) { if (!terms.contains(s)) { deduped.add(s); terms.add(s); } } return deduped; }
public GetGatewayResponsesResponse GetGatewayResponses(GetGatewayResponsesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetGatewayResponsesRequestMarshaller.Instance; options.ResponseUnmarshaller = GetGatewayResponsesResponseUnmarshaller.Instance; return Invoke<GetGatewayResponsesResponse>(request, options); }
public void SetPosition(long position) { currentBlockIndex = (int)(position >> outerInstance.blockBits); currentBlock = outerInstance.blocks[currentBlockIndex]; currentBlockUpto = (int)(position & outerInstance.blockMask); }
public long Skip(long n) { int s = (int)Math.min(Available(), Math.max(0, n)); ptr += s; return s; }
public BootstrapActionDetail(BootstrapActionConfig bootstrapActionConfig) { _bootstrapActionConfig = bootstrapActionConfig; }
public void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_row); out1.WriteShort(field_2_col); out1.WriteShort(field_3_flags); out1.WriteShort(field_4_shapeid); out1.WriteShort(field_6_author.Length); out1.WriteByte(field_5_hasMultibyte ? 0x01 : 0x00); if (field_5_hasMultibyte) { StringUtil.PutUnicodeLE(field_6_author, out1); } else { StringUtil.PutCompressedUnicode(field_6_author, out1); } if (field_7_padding != null) { out1.WriteByte(Convert.ToInt32(field_7_padding, CultureInfo.InvariantCulture)); } }
public int lastIndexOf(String str) { return lastIndexOf(str, count); }
@Override public boolean add(E object) { return addLastImpl(object); }
public void unsetSection(String section, String subsection) { ConfigSnapshot src; ConfigSnapshot res; do { src = state.get(); res = unsetSection(src, section, subsection); } while (!state.compareAndSet(src, res)); }
public String getTagName() { return tagName; }
public void addSubRecord(int index, SubRecord element) { subrecords.insert(index, element); }
public synchronized boolean remove(Object object) { return c.remove(object); }
@Override public TokenStream create(TokenStream input) { return new DoubleMetaphoneFilter(input, maxCodeLength, inject); }
public long length() { return inCoreLength(); }
public void setValue(boolean newValue) { value = newValue; }
public Pair(ContentSource oldSource, ContentSource newSource) { this.oldSource = oldSource; this.newSource = newSource; }
public int get(int i) { if (count <= i) { throw Sharpen.Extensions.createIndexOutOfRangeException(i); } return entries[i]; }
public CreateRepoRequest() { super("cr", "2016-06-07", "CreateRepo", "cr", "openAPI"); uriPattern = "/repos"; method = MethodType.PUT; }
public boolean isDeltaBaseAsOffset() { return deltaBaseAsOffset; }
public void remove() { if (expectedModCount == list.modCount) { if (lastLink != null) { java.util.LinkedList.Link<ET> next_1 = lastLink.next; java.util.LinkedList.Link<ET> previous_1 = lastLink.previous; next_1.previous = previous_1; previous_1.next = next_1; if (lastLink == link) { pos--; } link = previous_1; lastLink = null; expectedModCount++; list._size--; list.modCount++; } else { throw new System.InvalidOperationException(); } } else { throw new java.util.ConcurrentModificationException(); } }
public MergeShardsResponse mergeShards(MergeShardsRequest request) { var options = new InvokeOptions(); options.setRequestMarshaller(MergeShardsRequestMarshaller.Instance); options.setResponseUnmarshaller(MergeShardsResponseUnmarshaller.Instance); return invoke<MergeShardsResponse>(request, options); }
public AllocateHostedConnectionResponse allocateHostedConnection(AllocateHostedConnectionRequest request) { var options = new InvokeOptions(); options.setRequestMarshaller(AllocateHostedConnectionRequestMarshaller.Instance); options.setResponseUnmarshaller(AllocateHostedConnectionResponseUnmarshaller.Instance); return invoke<AllocateHostedConnectionResponse>(request, options); }
public int getBeginIndex() { return start; }
public static WeightedTerm[] getTerms(Query query) { return getTerms(query, false); }
public java.nio.ByteBuffer compact() { throw new java.nio.ReadOnlyBufferException(); }
@Override public void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { for (int i = 0; i < iterations; ++i) { int byte0 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = (int)((uint)byte0 >> 2); int byte1 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte0 & 3) << 4) | ((int)((uint)byte1 >> 4)); int byte2 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte1 & 15) << 2) | ((int)((uint)byte2 >> 6)); values[valuesOffset++] = byte2 & 63; } }
public String getHumanishName() { if (getPath().isEmpty() || getPath() == null) { throw new IllegalArgumentException(); } String s = getPath(); String[] elements; if ("file".equals(scheme) || LOCAL_FILE.matcher(s).matches()) { elements = s.split("[\\" + File.separatorChar + "/]"); } else { elements = s.split("/"); } if (elements.length == 0) { throw new IllegalArgumentException(); } String result = elements[elements.length - 1]; if (Constants.DOT_GIT.equals(result)) { result = elements[elements.length - 2]; } else { if (result.endsWith(Constants.DOT_GIT_EXT)) { result = result.substring(0, result.length() - Constants.DOT_GIT_EXT.length()); } } return result; }
public DescribeNotebookInstanceLifecycleConfigResponse describeNotebookInstanceLifecycleConfig(DescribeNotebookInstanceLifecycleConfigRequest request){ var options = new InvokeOptions(); options.setRequestMarshaller(DescribeNotebookInstanceLifecycleConfigRequestMarshaller.Instance); options.setResponseUnmarshaller(DescribeNotebookInstanceLifecycleConfigResponseUnmarshaller.Instance); return invoke(request, options); }
public String getAccessKeySecret() { return accessSecret; }
public CreateVpnConnectionResponse createVpnConnection(CreateVpnConnectionRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateVpnConnectionRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateVpnConnectionResponseUnmarshaller.getInstance()); return invoke(request, options, CreateVpnConnectionResponse.class); }
public DescribeVoicesResponse describeVoices(DescribeVoicesRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeVoicesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeVoicesResponseUnmarshaller.getInstance()); return invoke(request, options, DescribeVoicesResponse.class); }
public ListMonitoringExecutionsResponse listMonitoringExecutions(ListMonitoringExecutionsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ListMonitoringExecutionsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ListMonitoringExecutionsResponseUnmarshaller.getInstance()); return invoke(request, options, ListMonitoringExecutionsResponse.class); }
Java public DescribeJobRequest(String vaultName, String jobId) { this._vaultName = vaultName; this._jobId = jobId; }
public EscherRecord GetEscherRecord(int index) { return escherRecords[index]; }
public GetApisResponse getApis(GetApisRequest request){ InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetApisRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetApisResponseUnmarshaller.getInstance()); return invoke<GetApisResponse>(request, options); }
public DeleteSmsChannelResponse deleteSmsChannel(DeleteSmsChannelRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteSmsChannelRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DeleteSmsChannelResponseUnmarshaller.getInstance()); return invoke(request, options, DeleteSmsChannelResponse.class); }
public TrackingRefUpdate getTrackingRefUpdate() { return trackingRefUpdate; }
public void print(boolean b) { print(Boolean.toString(b)); }
public IQueryNode getChild() { return getChildren()[0]; }
Java public NotIgnoredFilter(int workdirTreeIndex) { this.index = workdirTreeIndex; }
public AreaRecord(RecordInputStream in1) { field_1_formatFlags = in1.readShort(); }
public GetThumbnailRequest() { super("CloudPhoto", "2017-07-11", "GetThumbnail", "cloudphoto", "openAPI"); setProtocol(ProtocolType.HTTPS); }
public DescribeTransitGatewayVpcAttachmentsResponse describeTransitGatewayVpcAttachments(DescribeTransitGatewayVpcAttachmentsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeTransitGatewayVpcAttachmentsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeTransitGatewayVpcAttachmentsResponseUnmarshaller.getInstance()); return invoke(request, options, DescribeTransitGatewayVpcAttachmentsResponse.class); }
public PutVoiceConnectorStreamingConfigurationResponse PutVoiceConnectorStreamingConfiguration(PutVoiceConnectorStreamingConfigurationRequest request){ InvokeOptions options = new InvokeOptions(); options.RequestMarshaller = PutVoiceConnectorStreamingConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = PutVoiceConnectorStreamingConfigurationResponseUnmarshaller.Instance; return Invoke<PutVoiceConnectorStreamingConfigurationResponse>(request, options); }
@Override public OrdRange GetOrdRange(String dim) { OrdRange result; prefixToOrdRange.TryGetValue(dim, result); return result; }
public String toString() { String symbol = ""; if (startIndex >= 0 && startIndex < ((ICharStream)InputStream).size()) { symbol = ((ICharStream)InputStream).getText(Interval.of(startIndex, startIndex)); symbol = Utils.escapeWhitespace(symbol, false); } return String.format(Locale.getDefault(), "%s('%s')", Antlr4.Runtime.LexerNoViableAltException.class.getName(), symbol); }
public E peek() { return peekFirstImpl(); }
public CreateWorkspacesResponse createWorkspaces(CreateWorkspacesRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateWorkspacesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateWorkspacesResponseUnmarshaller.getInstance()); return invoke(request, options, CreateWorkspacesResponse.class); }
public Object clone() { NumberFormatIndexRecord rec = new NumberFormatIndexRecord(); rec.field_1_formatIndex = field_1_formatIndex; return rec; }
public DescribeRepositoriesResponse describeRepositories(DescribeRepositoriesRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeRepositoriesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeRepositoriesResponseUnmarshaller.getInstance()); return invoke(request, options, DescribeRepositoriesResponse.class); }
public SparseIntArray(int initialCapacity) { initialCapacity = android.util.@internal.ArrayUtils.idealIntArraySize(initialCapacity); mKeys = new int[initialCapacity]; mValues = new int[initialCapacity]; mSize = 0; }
@Override public TokenStream create(TokenStream input) { return new HyphenatedWordsFilter(input); }
public CreateDistributionWithTagsResponse createDistributionWithTags(CreateDistributionWithTagsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateDistributionWithTagsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateDistributionWithTagsResponseUnmarshaller.getInstance()); return invoke(request, options, CreateDistributionWithTagsResponse.class); }
public RandomAccessFile(String fileName, String mode) throws FileNotFoundException { this(new java.io.File(fileName), mode); throw new System.NotImplementedException(); }
public DeleteWorkspaceImageResponse deleteWorkspaceImage(DeleteWorkspaceImageRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteWorkspaceImageRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DeleteWorkspaceImageResponseUnmarshaller.getInstance()); return invoke(request, options, DeleteWorkspaceImageResponse.class); }
public static String toHex(int value) { return toHex((long) value, 8); }
public UpdateDistributionResponse updateDistribution(UpdateDistributionRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(UpdateDistributionRequestMarshaller.getInstance()); options.setResponseUnmarshaller(UpdateDistributionResponseUnmarshaller.getInstance()); return invoke(request, options, UpdateDistributionResponse.class); }
public HSSFColor getColor(short index) { if (index == HSSFColor.Automatic.Index) { return HSSFColor.Automatic.getInstance(); } else { byte[] b = palette.getColor(index); if (b != null) { return new CustomColor(index, b); } } return null; }
public ValueEval evaluate(ValueEval[] operands, int srcRow, int srcCol) { throw new NotImplementedFunctionException(_functionName); }
@Override public void serialize(ILittleEndianOutput out1) throws IOException { out1.writeShort((short) field_1_number_crn_records); out1.writeShort((short) field_2_sheet_table_index); }
public DescribeDBEngineVersionsResponse describeDBEngineVersions() { return describeDBEngineVersions(new DescribeDBEngineVersionsRequest()); }
public FormatRun(short character, short fontIndex) { this._character = character; this._fontIndex = fontIndex; }
public static byte[] toBigEndianUtf16Bytes(char[] chars, int offset, int length) { byte[] result = new byte[length * 2]; int end = offset + length; int resultIndex = 0; for (int i = offset; i < end; ++i) { char ch = chars[i]; result[resultIndex++] = (byte)(ch >> 8); result[resultIndex++] = (byte)ch; } return result; }
public UploadArchiveResponse uploadArchive(UploadArchiveRequest request){ InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(UploadArchiveRequestMarshaller.getInstance()); options.setResponseUnmarshaller(UploadArchiveResponseUnmarshaller.getInstance()); return invoke(request, options, UploadArchiveResponse.class); }
public List<IToken> GetHiddenTokensToLeft(int tokenIndex) { return GetHiddenTokensToLeft(tokenIndex, -1); }
@Override public boolean equals(Object obj) { if (this == obj) { return true; } if (!super.equals(obj)) { return false; } if (this.getClass() != obj.getClass()) { return false; } AutomatonQuery other = (AutomatonQuery)obj; if (!m_compiled.equals(other.m_compiled)) { return false; } if (m_term == null) { if (other.m_term != null) { return false; } } else if (!m_term.equals(other.m_term)) { return false; } return true; }
public SpanQuery makeSpanClause() { List<SpanQuery> spanQueries = new ArrayList<>(); for (Map.Entry<SpanQuery, Float> wsq : weightBySpanQuery.entrySet()) { wsq.getKey().setBoost(wsq.getValue()); spanQueries.add(wsq.getKey()); } if (spanQueries.size() == 1) { return spanQueries.get(0); } else { return new SpanOrQuery(spanQueries.toArray(new SpanQuery[spanQueries.size()])); } }
public StashCreateCommand stashCreate(){ return new StashCreateCommand(repo); }
public FieldInfo FieldInfo(String fieldName) { FieldInfo ret; byName.TryGetValue(fieldName, ret); return ret; }
public DescribeEventSourceResponse describeEventSource(DescribeEventSourceRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeEventSourceRequestMarshaller.Instance); options.setResponseUnmarshaller(DescribeEventSourceResponseUnmarshaller.Instance); return invoke(request, options); }
public GetDocumentAnalysisResponse getDocumentAnalysis(GetDocumentAnalysisRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetDocumentAnalysisRequestMarshaller.Instance); options.setResponseUnmarshaller(GetDocumentAnalysisResponseUnmarshaller.Instance); return invoke(request, options, GetDocumentAnalysisResponse.class); }
public CancelUpdateStackResponse cancelUpdateStack(CancelUpdateStackRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CancelUpdateStackRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CancelUpdateStackResponseUnmarshaller.getInstance()); return invoke(request, options); }
public ModifyLoadBalancerAttributesResponse modifyLoadBalancerAttributes(ModifyLoadBalancerAttributesRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ModifyLoadBalancerAttributesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ModifyLoadBalancerAttributesResponseUnmarshaller.getInstance()); return invoke(request, options, ModifyLoadBalancerAttributesResponse.class); }
public SetInstanceProtectionResponse setInstanceProtection(SetInstanceProtectionRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(SetInstanceProtectionRequestMarshaller.getInstance()); options.setResponseUnmarshaller(SetInstanceProtectionResponseUnmarshaller.getInstance()); return invoke(request, options, SetInstanceProtectionResponse.class); }
public ModifyDBProxyResponse modifyDBProxy(ModifyDBProxyRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ModifyDBProxyRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ModifyDBProxyResponseUnmarshaller.getInstance()); return invoke(request, options, ModifyDBProxyResponse.class); }
public void add(char[] output, int offset, int len, int endOffset, int posLength) { if (count == outputs.length) { CharsRef[] next = new CharsRef[ArrayUtil.oversize(1 + count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)]; System.arraycopy(outputs, 0, next, 0, count); outputs = next; } if (count == endOffsets.length) { int[] next = new int[ArrayUtil.oversize(1 + count, RamUsageEstimator.NUM_BYTES_INT32)]; System.arraycopy(endOffsets, 0, next, 0, count); endOffsets = next; } if (count == posLengths.length) { int[] next = new int[ArrayUtil.oversize(1 + count, RamUsageEstimator.NUM_BYTES_INT32)]; System.arraycopy(posLengths, 0, next, 0, count); posLengths = next; } if (outputs[count] == null) { outputs[count] = new CharsRef(); } outputs[count].copyChars(output, offset, len); endOffsets[count] = endOffset; posLengths[count] = posLength; count++; }
public FetchLibrariesRequest() { super("CloudPhoto", "2017-07-11", "FetchLibraries", "cloudphoto", "openAPI"); setProtocol(ProtocolType.HTTPS); }
public boolean exists() { return objects.exists(); }
public FilterOutputStream(java.io.OutputStream out){this.out = out;}
public ScaleClusterRequest() { super("CS", "2015-12-15", "ScaleCluster", "cs", "openAPI"); uriPattern = "/clusters/[ClusterId]"; method = MethodType.PUT; }
public IDataValidationConstraint CreateTimeConstraint(int operatorType, String formula1, String formula2) { return DVConstraint.CreateTimeConstraint(operatorType, formula1, formula2); }
public ListObjectParentPathsResponse ListObjectParentPaths(ListObjectParentPathsRequest request) { InvokeOptions options = new InvokeOptions(); options.RequestMarshaller = ListObjectParentPathsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListObjectParentPathsResponseUnmarshaller.Instance; return Invoke<ListObjectParentPathsResponse>(request, options); }
public DescribeCacheSubnetGroupsResponse describeCacheSubnetGroups(DescribeCacheSubnetGroupsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeCacheSubnetGroupsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeCacheSubnetGroupsResponseUnmarshaller.getInstance()); return invoke(request, options, DescribeCacheSubnetGroupsResponse.class); }
public void setSharedFormula(boolean flag) { field_5_options = SharedFormula.setShortBoolean(field_5_options, flag); }
public boolean isReuseObjects() { return reuseObjects; }
public IErrorNode AddErrorNode(IToken badToken) { ErrorNodeImpl t = new ErrorNodeImpl(badToken); AddChild(t); t.Parent = this; return t; }
public LatvianStemFilterFactory(Map<String, String> args) { super(args); if (!args.isEmpty()) { throw new IllegalArgumentException("Unknown parameters: " + args); } }
public RemoveSourceIdentifierFromSubscriptionResponse RemoveSourceIdentifierFromSubscription(RemoveSourceIdentifierFromSubscriptionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RemoveSourceIdentifierFromSubscriptionRequestMarshaller.Instance; options.ResponseUnmarshaller = RemoveSourceIdentifierFromSubscriptionResponseUnmarshaller.Instance; return Invoke<RemoveSourceIdentifierFromSubscriptionResponse>(request, options); }
public static TokenFilterFactory forName(String name, Map<String, String> args){ return loader.newInstance(name, args); }
public AddAlbumPhotosRequest() { super("CloudPhoto", "2017-07-11", "AddAlbumPhotos", "cloudphoto", "openAPI"); setProtocol(ProtocolType.HTTPS); }
public GetThreatIntelSetResponse getThreatIntelSet(GetThreatIntelSetRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetThreatIntelSetRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetThreatIntelSetResponseUnmarshaller.getInstance()); return invoke(request, options, GetThreatIntelSetResponse.class); }
public TreeFilter clone() { return new AndTreeFilter.Binary(a.clone(), b.clone()); }
public boolean equals(Object o) { return o instanceof ArmenianStemmer; }
public final boolean hasArray() { return protectedHasArray(); }
public UpdateContributorInsightsResponse updateContributorInsights(UpdateContributorInsightsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(UpdateContributorInsightsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(UpdateContributorInsightsResponseUnmarshaller.getInstance()); return invoke(request, options, UpdateContributorInsightsResponse.class); }
public void unwriteProtectWorkbook() { records.remove(fileShare); records.remove(WriteProtect); fileShare = null; writeProtect = null; }
public SolrSynonymParser(boolean dedup, boolean expand, Analyzer analyzer) { super(dedup, analyzer); this.expand = expand; }
public RequestSpotInstancesResponse requestSpotInstances(RequestSpotInstancesRequest request) { var options = new InvokeOptions(); options.setRequestMarshaller(RequestSpotInstancesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(RequestSpotInstancesResponseUnmarshaller.getInstance()); return invoke(request, options, RequestSpotInstancesResponse.class); }
public byte[] getObjectData() { return findObjectRecord().getObjectData(); }
public GetContactAttributesResponse getContactAttributes(GetContactAttributesRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetContactAttributesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetContactAttributesResponseUnmarshaller.getInstance()); return invoke(request, options, GetContactAttributesResponse.class); }
@Override public String toString() { return getKey() + ": " + getValue(); }
public ListTextTranslationJobsResponse listTextTranslationJobs(ListTextTranslationJobsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ListTextTranslationJobsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ListTextTranslationJobsResponseUnmarshaller.getInstance()); return invoke(request, options, ListTextTranslationJobsResponse.class); }
public GetContactMethodsResponse getContactMethods(GetContactMethodsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetContactMethodsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetContactMethodsResponseUnmarshaller.getInstance()); return invoke(request, options, GetContactMethodsResponse.class); }
public static short lookupIndexByName(String name) { FunctionMetadata fd = getInstance().getFunctionByNameInternal(name); if (fd == null) { return -1; } return (short) fd.getIndex(); }
public DescribeAnomalyDetectorsResponse describeAnomalyDetectors(DescribeAnomalyDetectorsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeAnomalyDetectorsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeAnomalyDetectorsResponseUnmarshaller.getInstance()); return invoke(request, options, DescribeAnomalyDetectorsResponse.class); }
public static String insertId(String message, ObjectId changeId) { return insertId(message, changeId, false); }
@Override public long getObjectSize(AnyObjectId objectId, int typeHint) { long sz = db.getObjectSize(this, objectId); if (sz < 0) { if (typeHint == OBJ_ANY) { throw new MissingObjectException(objectId.copy(), "unknown"); } throw new MissingObjectException(objectId.copy(), typeHint); } return sz; }
public ImportInstallationMediaResponse importInstallationMedia(ImportInstallationMediaRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ImportInstallationMediaRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ImportInstallationMediaResponseUnmarshaller.getInstance()); return invoke(request, options, ImportInstallationMediaResponse.class); }
public PutLifecycleEventHookExecutionStatusResponse putLifecycleEventHookExecutionStatus(PutLifecycleEventHookExecutionStatusRequest request){ InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(PutLifecycleEventHookExecutionStatusRequestMarshaller.getInstance()); options.setResponseUnmarshaller(PutLifecycleEventHookExecutionStatusResponseUnmarshaller.getInstance()); return invoke(request, options, PutLifecycleEventHookExecutionStatusResponse.class); }
public NumberPtg(ILittleEndianInput in1){ field_1_value = in1.ReadDouble(); }
public GetFieldLevelEncryptionConfigResponse getFieldLevelEncryptionConfig(GetFieldLevelEncryptionConfigRequest request){ InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetFieldLevelEncryptionConfigRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetFieldLevelEncryptionConfigResponseUnmarshaller.getInstance()); return invoke(request, options, GetFieldLevelEncryptionConfigResponse.class); }
public DescribeDetectorResponse describeDetector(DescribeDetectorRequest request){ InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeDetectorRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeDetectorResponseUnmarshaller.getInstance()); return invoke(request, options, DescribeDetectorResponse.class); }
public ReportInstanceStatusResponse reportInstanceStatus(ReportInstanceStatusRequest request){ InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ReportInstanceStatusRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ReportInstanceStatusResponseUnmarshaller.getInstance()); return invoke(request, options, ReportInstanceStatusResponse.class); }
public DeleteAlarmResponse deleteAlarm(DeleteAlarmRequest request){ InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteAlarmRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DeleteAlarmResponseUnmarshaller.getInstance()); return invoke(request, options, DeleteAlarmResponse.class); }
@Override public TokenStream create(TokenStream input){ return new PortugueseStemFilter(input); }
public FtCblsSubRecord(){ reserved = new byte[ENCODED_SIZE]; }
public synchronized boolean remove(Object object){ return c.remove(object); }
public GetDedicatedIpResponse getDedicatedIp(GetDedicatedIpRequest request){ InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetDedicatedIpRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetDedicatedIpResponseUnmarshaller.getInstance()); return invoke(request, options, GetDedicatedIpResponse.class); }
@Override public String toString(){ return precedence + " >= _p"; }
public ListStreamProcessorsResponse listStreamProcessors(ListStreamProcessorsRequest request){ InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ListStreamProcessorsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ListStreamProcessorsResponseUnmarshaller.getInstance()); return invoke(request, options, ListStreamProcessorsResponse.class); }
public DeleteLoadBalancerPolicyRequest(String loadBalancerName, String policyName){ this._loadBalancerName = loadBalancerName; this._policyName = policyName; }
public WindowProtectRecord(int options){ this._options = options; }
public UnbufferedCharStream(int bufferSize){ n = 0; data = new int[bufferSize]; }
public virtual GetOperationsResponse GetOperations(GetOperationsRequest request){ var options = new InvokeOptions(); options.RequestMarshaller = GetOperationsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetOperationsResponseUnmarshaller.Instance; return Invoke<GetOperationsResponse>(request, options); }
public void copyRawTo(byte[] b, int o) { NB.encodeInt32(b, o, w1); NB.encodeInt32(b, o + 4, w2); NB.encodeInt32(b, o + 8, w3); NB.encodeInt32(b, o + 12, w4); NB.encodeInt32(b, o + 16, w5); }
public WindowOneRecord(RecordInputStream in1) { field_1_h_hold = in1.readShort(); field_2_v_hold = in1.readShort(); field_3_width = in1.readShort(); field_4_height = in1.readShort(); field_5_options = in1.readShort(); field_6_active_sheet = in1.readShort(); field_7_first_visible_tab = in1.readShort(); field_8_num_selected_tabs = in1.readShort(); field_9_tab_width_ratio = in1.readShort(); }
public StopWorkspacesResponse stopWorkspaces(StopWorkspacesRequest request){ InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(StopWorkspacesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(StopWorkspacesResponseUnmarshaller.getInstance()); return invoke(request, options, StopWorkspacesResponse.class); }
public void close() throws IOException { if (isOpen) { isOpen = false; try { dump(); } finally { try { channel.truncate(fileLength); } finally { try { channel.close(); } finally { fos.close(); } } } } }
public DescribeMatchmakingRuleSetsResponse DescribeMatchmakingRuleSets(DescribeMatchmakingRuleSetsRequest request) { InvokeOptions options = new InvokeOptions(); options.RequestMarshaller = DescribeMatchmakingRuleSetsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeMatchmakingRuleSetsResponseUnmarshaller.Instance; return Invoke<DescribeMatchmakingRuleSetsResponse>(request, options); }
public String getPronunciation(int wordId, char[] surface, int off, int len){return null;}
public String getPath() { return pathStr; }
public static double devsq(double[] v) { double r = Double.NaN; if (v != null && v.length >= 1) { double m = 0; double s = 0; int n = v.length; for (int i = 0; i < n; i++) { s += v[i]; } m = s / n; s = 0; for (int i = 0; i < n; i++) { s += (v[i] - m) * (v[i] - m); } r = (n == 1) ? 0 : s; } return r; }
public DescribeResizeResponse describeResize(DescribeResizeRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeResizeRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeResizeResponseUnmarshaller.getInstance()); return invoke(request, options, DescribeResizeResponse.class); }
public boolean hasPassedThroughNonGreedyDecision() { return passedThroughNonGreedyDecision; }
public int end() { return end(0); }
public void traverse(ICellHandler handler) { int firstRow = range.getFirstRow(); int lastRow = range.getLastRow(); int firstColumn = range.getFirstColumn(); int lastColumn = range.getLastColumn(); int width = lastColumn - firstColumn + 1; SimpleCellWalkContext ctx = new SimpleCellWalkContext(); IRow currentRow = null; ICell currentCell = null; for (ctx.rowNumber = firstRow; ctx.rowNumber <= lastRow; ++ctx.rowNumber) { currentRow = sheet.getRow(ctx.rowNumber); if (currentRow == null) { continue; } for (ctx.colNumber = firstColumn; ctx.colNumber <= lastColumn; ++ctx.colNumber) { currentCell = currentRow.getCell(ctx.colNumber); if (currentCell == null) { continue; } if (isEmpty(currentCell) && !traverseEmptyCells) { continue; } ctx.ordinalNumber = (ctx.rowNumber - firstRow) * width + (ctx.colNumber - firstColumn + 1); handler.onCell(currentCell, ctx); } } }
public int getReadIndex() { return _ReadIndex; }
public int compareTo(ScoreTerm other) { if (Term.bytesEquals(other.Term)) { return 0; } if (this.boost == other.boost) { return other.Term.compareTo(this.Term); } else { return this.boost.compareTo(other.boost); } }
public int normalize(char[] s, int len) { for (int i = 0; i < len; i++) { switch (s[i]) { case FARSI_YEH: case YEH_BARREE: s[i] = YEH; break; case KEHEH: s[i] = KAF; break; case HEH_YEH: case HEH_GOAL: s[i] = HEH; break; case HAMZA_ABOVE: len = StemmerUtil.delete(s, i, len); i--; break; default: break; } } return len; }
public void serialize(ILittleEndianOutput out1) { out1.writeShort(options); }
Java public DiagnosticErrorListener(boolean exactOnly) { this.exactOnly = exactOnly; }
public KeySchemaElement(String attributeName, KeyType keyType) { this.attributeName = attributeName; this.keyType = keyType; }
```java
public boolean hasObject(AnyObjectId id) { return findOffset(id) != -1; }
public GroupingSearch setAllGroups(boolean allGroups) { this.allGroups = allGroups; return this; }
public void setMultiValued(String dimName, boolean v) { synchronized (this) { DimConfig fieldType = fieldTypes.get(dimName); if (fieldType == null) { fieldTypes.put(dimName, new DimConfig(v)); } else { fieldType.setIsMultiValued(v); } } }
public int getCellsVal() { int size = 0; for (char c : cells.keySet()) { Cell e = At(c); if (e.cmd >= 0) { size++; } } return size; }
public DeleteVoiceConnectorResponse deleteVoiceConnector(DeleteVoiceConnectorRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteVoiceConnectorRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DeleteVoiceConnectorResponseUnmarshaller.getInstance()); return invoke(request, options, DeleteVoiceConnectorResponse.class); }
public DeleteLifecyclePolicyResponse deleteLifecyclePolicy(DeleteLifecyclePolicyRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteLifecyclePolicyRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DeleteLifecyclePolicyResponseUnmarshaller.getInstance()); return invoke(request, options, DeleteLifecyclePolicyResponse.class); }
public void write(byte[] b) { int len = b.length; checkPosition(len); System.arraycopy(b, 0, buf, writeIndex, len); writeIndex += len; }
public RebaseResult getRebaseResult() { return this.rebaseResult; }
public static int getNearestSetSize(int maxNumberOfValuesExpected, float desiredSaturation) { for (int t : _usableBitSetSizes) { int numSetBitsAtDesiredSaturation = (int) (t * desiredSaturation); int estimatedNumUniqueValues = getEstimatedNumberUniqueValuesAllowingForCollisions(t, numSetBitsAtDesiredSaturation); if (estimatedNumUniqueValues > maxNumberOfValuesExpected) { return t; } } return -1; }
public DescribeDashboardResponse describeDashboard(DescribeDashboardRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeDashboardRequestMarshaller.Instance); options.setResponseUnmarshaller(DescribeDashboardResponseUnmarshaller.Instance); return invoke(request, options, DescribeDashboardResponse.class); }
public CreateSegmentResponse createSegment(CreateSegmentRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateSegmentRequestMarshaller.Instance); options.setResponseUnmarshaller(CreateSegmentResponseUnmarshaller.Instance); return invoke(request, options, CreateSegmentResponse.class); }
@Override public String toString() { StringBuilder buffer = new StringBuilder(); buffer.append("[DBCELL]\n"); buffer.append("    .rowoffset       = ").append(StringUtil.toHexString(RowOffset)).append("\n"); for (int k = 0; k < field_2_cell_offsets.length; k++) { buffer.append("    .cell_").append(k).append(" = ").append(HexDump.shortToHex(field_2_cell_offsets[k])).append("\n"); } buffer.append("[/DBCELL]\n"); return buffer.toString(); }
public List<String> getUndeletedList() { return undeletedList; }
@Override public String toString() { return "[INTERFACEEND/]\n"; }
@Override public Object clone() { return this; }
public PlainTextDictionary(TextReader reader) { in = reader; }
public StringBuilder append(CharSequence csq) { if (csq == null) { appendNull(); } else { append0(csq, 0, csq.length()); } return this; }
public ListAssociatedStacksResponse listAssociatedStacks(ListAssociatedStacksRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ListAssociatedStacksRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ListAssociatedStacksResponseUnmarshaller.getInstance()); return invoke(request, options, ListAssociatedStacksResponse.class); }
public static double avedev(double[] v) { double r = 0; double m = 0; double s = 0; for (int i = 0, iSize = v.length; i < iSize; i++) { s += v[i]; } m = s / v.length; s = 0; for (int i = 0, iSize = v.length; i < iSize; i++) { s += Math.abs(v[i] - m); } r = s / v.length; return r; }
public DescribeByoipCidrsResponse describeByoipCidrs(DescribeByoipCidrsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeByoipCidrsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeByoipCidrsResponseUnmarshaller.getInstance()); return invoke(request, options, DescribeByoipCidrsResponse.class); }
public GetDiskResponse getDisk(GetDiskRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetDiskRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetDiskResponseUnmarshaller.getInstance()); return invoke(request, options, GetDiskResponse.class); }
public CreateDBClusterParameterGroupResponse createDBClusterParameterGroup(CreateDBClusterParameterGroupRequest request){ InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateDBClusterParameterGroupRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateDBClusterParameterGroupResponseUnmarshaller.getInstance()); return invoke(request, options, CreateDBClusterParameterGroupResponse.class); }
public static java.nio.CharBuffer wrap(char[] array_1, int start, int charCount) { java.util.Arrays.checkOffsetAndCount(array_1.length, start, charCount); java.nio.CharBuffer buf = new java.nio.ReadWriteCharArrayBuffer(array_1); buf.position(start); buf.limit(start + charCount); return buf; }
public SubmoduleStatusType getType() { return type; }
public DescribeGameServerGroupResponse describeGameServerGroup(DescribeGameServerGroupRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeGameServerGroupRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeGameServerGroupResponseUnmarshaller.getInstance()); return invoke(request, options, DescribeGameServerGroupResponse.class); }
public java.util.regex.Pattern pattern() { return _pattern; }
public V setValue(V object){ throw new UnsupportedOperationException(); }
public StringBuilder stem(String word) { String cmd = stemmer.getLastOnPath(word); if (cmd == null) return null; StringBuilder buffer = new StringBuilder(); buffer.append(word); diff.apply(buffer, cmd); if (buffer.length() > 0) return buffer; else return null; }
public RenameFaceRequest() { super("CloudPhoto", "2017-07-11", "RenameFace", "cloudphoto", "openAPI"); setProtocol(ProtocolType.HTTPS); }
public char requireChar(Map<String, String> args, String name) { return require(args, name).charAt(0); }
public static String toStringTree(ITree t) { return toStringTree(t, (List<String>)null); }
@Override public String toString() { return "<deleted/>"; }
Java public class GetRepoWebhookLogListRequest extends BaseRequest { public GetRepoWebhookLogListRequest() { super("cr", "2016-06-07", "GetRepoWebhookLogList", "cr", "openAPI"); uriPattern = "/repos/[RepoNamespace]/[RepoName]/webhooks/[WebhookId]/logs"; method = MethodType.GET; } }
public GetJobUnlockCodeResponse GetJobUnlockCode(GetJobUnlockCodeRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetJobUnlockCodeRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetJobUnlockCodeResponseUnmarshaller.getInstance()); return invoke(request, options, GetJobUnlockCodeResponse.class); }
public RemoveTagsRequest(String resourceId) { _resourceId = resourceId; }
public short getGB2312Id(char ch) { try { byte[] buffer = "GB2312".getBytes("GB2312"); if (buffer.length != 2) { return -1; } int b0 = (buffer[0] & 0x0FF) - 161; int b1 = (buffer[1] & 0x0FF) - 161; return (short) (b0 * 94 + b1); } catch (Exception e) { throw new Exception(e.toString(), e); } }
public NGit.BatchRefUpdate addCommand(Collection<ReceiveCommand> cmd){ commands.addAll(cmd); return this; }
public int checkExternSheet(int sheetNumber) { return orCreateLinkTable.checkExternSheet(sheetNumber); }
@Override public boolean equals(Object object) { return c.equals(object); }
public Query build(IQueryNode queryNode) { AnyQueryNode andNode = (AnyQueryNode) queryNode; BooleanQuery bQuery = new BooleanQuery(); List<IQueryNode> children = andNode.getChildren(); if (children != null) { for (IQueryNode child : children) { Object obj = child.getTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID); if (obj != null) { Query query = (Query) obj; try { bQuery.add(query, Occur.SHOULD); } catch (BooleanQuery.TooManyClausesException ex) { throw new QueryNodeException(new Message(QueryParserMessages.EMPTY_MESSAGE), ex); } } } } bQuery.setMinimumNumberShouldMatch(andNode.getMinimumMatchingElements()); return bQuery; }
public DescribeStreamProcessorResponse describeStreamProcessor(DescribeStreamProcessorRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeStreamProcessorRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeStreamProcessorResponseUnmarshaller.getInstance()); return invoke(request, options, DescribeStreamProcessorResponse.class); }
public DescribeDashboardPermissionsResponse describeDashboardPermissions(DescribeDashboardPermissionsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeDashboardPermissionsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeDashboardPermissionsResponseUnmarshaller.getInstance()); return invoke(request, options); }
public Ref peel(Ref ref) { try { return RefDatabase.peel(ref); } catch (IOException) { return ref; } }
public long RamBytesUsed() { return RamUsageEstimator.AlignObjectSize(RamUsageEstimator.NUM_BYTES_OBJECT_HEADER + 2 * RamUsageEstimator.NUM_BYTES_INT32 + RamUsageEstimator.NUM_BYTES_OBJECT_REF) + RamUsageEstimator.SizeOf(blocks); }
public GetDomainSuggestionsResponse getDomainSuggestions(GetDomainSuggestionsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetDomainSuggestionsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetDomainSuggestionsResponseUnmarshaller.getInstance()); return invoke(request, options, GetDomainSuggestionsResponse.class); }
public DescribeStackEventsResponse describeStackEvents(DescribeStackEventsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeStackEventsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeStackEventsResponseUnmarshaller.getInstance()); return invoke(request, options, DescribeStackEventsResponse.class); }
public void SetRule(int idx, IConditionalFormattingRule cfRule) { SetRule(idx, (HSSFConditionalFormattingRule) cfRule); }
public CreateResolverRuleResponse createResolverRule(CreateResolverRuleRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateResolverRuleRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateResolverRuleResponseUnmarshaller.getInstance()); return invoke(request, options, CreateResolverRuleResponse.class); }
public SeriesIndexRecord(RecordInputStream in1) { field_1_index = in1.readShort(); }
public GetStylesRequest() { super("lubancloud", "2018-05-09", "GetStyles", "luban", "openAPI"); setMethod(MethodType.POST); }
@Override public void serialize(ILittleEndianOutput out1) { out1.writeShort(field_1_gridset_flag); }
public boolean equals(Object obj) { if (this == obj) { return true; } if (obj == null) { return false; } if (getClass() != obj.getClass()) { return false; } Toffs other = (Toffs) obj; if (StartOffset != other.StartOffset) { return false; } if (EndOffset != other.EndOffset) { return false; } return true; }
Java public CreateGatewayGroupResponse createGatewayGroup(CreateGatewayGroupRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateGatewayGroupRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateGatewayGroupResponseUnmarshaller.getInstance()); return invoke(request, options, CreateGatewayGroupResponse.class); }
public CreateParticipantConnectionResponse createParticipantConnection(CreateParticipantConnectionRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateParticipantConnectionRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateParticipantConnectionResponseUnmarshaller.getInstance()); return invoke(request, options, CreateParticipantConnectionResponse.class); }
public static double irr(double[] income) { return irr(income, 0.1d); }
public RegisterWorkspaceDirectoryResponse registerWorkspaceDirectory(RegisterWorkspaceDirectoryRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(RegisterWorkspaceDirectoryRequestMarshaller.getInstance()); options.setResponseUnmarshaller(RegisterWorkspaceDirectoryResponseUnmarshaller.getInstance()); return invoke(request, options, RegisterWorkspaceDirectoryResponse.class); }
public NGit.Api.RevertCommand include(Ref commit) { checkCallable(); commits.addItem(commit); return this; }
Sorry, but it is not possible to provide a concise Java code without knowing the context and the classes being used in the provided C# code. The C# code is using classes like `ValueEval`, `OperandResolver`, `EvaluationException`, `StringEval`, `Convert`, `COMPLEX_NUMBER_PATTERN`, and `ErrorEval`, which may have different implementations or may not exist in Java. It is necessary to know the dependencies and the objective of the code to provide a Java equivalent.
public E pollLast() { java.util.Map.Entry<E, Object> entry = backingMap.pollLastEntry(); return (entry == null) ? null : entry.getKey(); }
public int readUShort() { int ch1 = readUByte(); int ch2 = readUByte(); return (ch2 << 8) + (ch1 << 0); }
public ModifySnapshotAttributeRequest(String snapshotId, SnapshotAttributeName attribute, OperationType operationType){ _snapshotId = snapshotId; _attribute = attribute; _operationType = operationType; }
public ListBonusPaymentsResponse listBonusPayments(ListBonusPaymentsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ListBonusPaymentsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ListBonusPaymentsResponseUnmarshaller.getInstance()); return invoke(request, options, ListBonusPaymentsResponse.class); }
@Override public V Get(char[] text) { if (text == null) { throw new ArgumentNullException("text"); } return null; }
@Override public TokenStream create(TokenStream input) { CommonGramsFilter commonGrams = (CommonGramsFilter)super.create(input); return new CommonGramsQueryFilter(commonGrams); }
public String getPath() { return path; }
public InitiateMultipartUploadResponse initiateMultipartUpload(InitiateMultipartUploadRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(InitiateMultipartUploadRequestMarshaller.getInstance()); options.setResponseUnmarshaller(InitiateMultipartUploadResponseUnmarshaller.getInstance()); return invoke(request, options, InitiateMultipartUploadResponse.class); }
public StringBuilder insert(int offset, int i) { insert0(offset, Integer.toString(i)); return this; }
public void Decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { for (int i = 0; i < iterations; ++i) { long block = blocks[blocksOffset++]; for (int shift = 62; shift >= 0; shift -= 2) { values[valuesOffset++] = (int)(((long)((block >>> shift) & 3))); } } }
@Override public TokenStream create(TokenStream input) { return new ElisionFilter(input, articles); }
public boolean Eat(Row in, int[] remap){ int sum = 0; for (Cell c : in.cells.values()){ sum += c.cnt; if (c.ref >= 0){ if (remap[c.ref] == 0){ c.ref = -1; } } } int frame = sum / 10; boolean live = false; for (Cell c : in.cells.values()){ if (c.cnt < frame && c.cmd >= 0){ c.cnt = 0; c.cmd = -1; } if (c.cmd >= 0 || c.ref >= 0){ live |= true; } } return !live; }
public Token GetToken(int index){ Token t = Token; for (int i = 0; i < index; i++){ if (t.Next != null) { t = t.Next; } else { t = t.Next = TokenSource.GetNextToken(); } } return t; }
@Override public String toString(){ StringBuilder sb = new StringBuilder(); sb.append(getClass().getName()).append(" [ARRAY]\n"); sb.append(" range=").append(Range.toString()).append("\n"); sb.append(" options=").append(HexDump.shortToHex(_options)).append("\n"); sb.append(" notUsed=").append(HexDump.intToHex(_field3notUsed)).append("\n"); sb.append(" formula:").append("\n"); Ptg[] ptgs = _formula.getTokens(); for (int i = 0; i < ptgs.length; i++){ Ptg ptg = ptgs[i]; sb.append(ptg.toString()).append(ptg.getRVAType()).append("\n"); } sb.append("]"); return sb.toString(); }
public GetFolderResponse getFolder(GetFolderRequest request){ InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetFolderRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetFolderResponseUnmarshaller.getInstance()); return invoke(request, options, GetFolderResponse.class); }
public void add(int location, E object){ throw new UnsupportedOperationException(); }
public PositiveScoresOnlyCollector(ICollector c){ this.c = c; }
public CreateRepoBuildRuleRequest(){ super("cr", "2016-06-07", "CreateRepoBuildRule", "cr", "openAPI"); uriPattern = "/repos/[RepoNamespace]/[RepoName]/rules"; method = MethodType.PUT; }
public BaseRef(RefEval re){ _refEval = re; _areaEval = null; _firstRowIndex = re.getRow(); _firstColumnIndex = re.getColumn(); _height = 1; _width = 1; }
public DrawingManager2(EscherDggRecord dgg){ this.dgg = dgg; }
@Override public void reset(){ if (!First){ reset(raw); } }
public java.nio.charset.CharsetDecoder reset(){ status = INIT; implReset(); return this; }
public BufferedReader(java.io.Reader in, int size){ super(in); if (size <= 0){ throw new System.ArgumentException("size <= 0"); } this.in = in; buf = new char[size]; }
public virtual DescribeCodeRepositoryResponse DescribeCodeRepository(DescribeCodeRepositoryRequest request){ var options = new InvokeOptions(); options.RequestMarshaller = DescribeCodeRepositoryRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeCodeRepositoryResponseUnmarshaller.Instance; return Invoke<DescribeCodeRepositoryResponse>(request, options); }
public CreateDBSubnetGroupResponse createDBSubnetGroup(CreateDBSubnetGroupRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateDBSubnetGroupRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateDBSubnetGroupResponseUnmarshaller.getInstance()); return invoke(request, options); }
public RenameBranchCommand SetOldName(String oldName) { CheckCallable(); this.oldName = oldName; return this; }
public NGit.Api.DeleteBranchCommand SetForce(boolean force){ CheckCallable(); this.force = force; return this; }
public StopCompilationJobResponse stopCompilationJob(StopCompilationJobRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(StopCompilationJobRequestMarshaller.getInstance()); options.setResponseUnmarshaller(StopCompilationJobResponseUnmarshaller.getInstance()); return invoke(request, options, StopCompilationJobResponse.class); }
public void incrementSecondaryProgressBy(int diff){ synchronized (this) { setSecondaryProgress(mSecondaryProgress + diff); } }
public int[] Clear() { bytesStart = null; return bytesStart; }
public String getRawPath() { return path; }
public GetUserSourceAccountRequest() { super("cr", "2016-06-07", "GetUserSourceAccount", "cr", "openAPI"); UriPattern = "/users/sourceAccount"; Method = MethodType.GET; }
public CreateExportJobResponse createExportJob(CreateExportJobRequest request) { var options = new InvokeOptions(); options.requestMarshaller(CreateExportJobRequestMarshaller.getInstance()); options.responseUnmarshaller(CreateExportJobResponseUnmarshaller.getInstance()); return invoke(request, options); }
public CreateDedicatedIpPoolResponse createDedicatedIpPool(CreateDedicatedIpPoolRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateDedicatedIpPoolRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateDedicatedIpPoolResponseUnmarshaller.getInstance()); return invoke(request, options, CreateDedicatedIpPoolResponse.class); }
@Override public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; if (obj instanceof HSSFCellStyle) { HSSFCellStyle other = (HSSFCellStyle) obj; if (_format == null) { if (other._format != null) return false; } else if (!_format.equals(other._format)) return false; if (index != other.index) return false; return true; } return false; }
public ReleaseHostsResponse releaseHosts(ReleaseHostsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ReleaseHostsRequestMarshaller.Instance); options.setResponseUnmarshaller(ReleaseHostsResponseUnmarshaller.Instance); return invoke(request, options); }
@Override public boolean equals(Object object) { if (this == object) { return true; } if (object instanceof java.util.Set<?>) { java.util.Set<?> s = (java.util.Set<?>) object; try { return size() == s.size() && containsAll(s); } catch (NullPointerException e) { return false; } catch (ClassCastException e) { return false; } } return false; }
public void setRefLogMessage(String msg, boolean appendStatus) { if (msg == null && !appendStatus) { disableRefLog(); } else { if (msg == null && appendStatus) { refLogMessage = ""; refLogIncludeResult = true; } else { refLogMessage = msg; refLogIncludeResult = appendStatus; } } }
public StreamIDRecord(RecordInputStream in1) { idstm = in1.readShort(); }
public RecognizeCarRequest() { super("visionai-poc", "2020-04-08", "RecognizeCar"); setMethod(MethodType.POST); }
public final java.nio.ByteOrder order() { return java.nio.ByteOrder.nativeOrder(); }
public int getAheadCount() { return aheadCount; }
public boolean isNewFragment() { return false; }
public GetCloudFrontOriginAccessIdentityConfigResponse getCloudFrontOriginAccessIdentityConfig(GetCloudFrontOriginAccessIdentityConfigRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetCloudFrontOriginAccessIdentityConfigRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetCloudFrontOriginAccessIdentityConfigResponseUnmarshaller.getInstance()); return invoke(request, options, GetCloudFrontOriginAccessIdentityConfigResponse.class); }
@Override public boolean Matches(int symbol, int minVocabSymbol, int maxVocabSymbol) { return token == symbol; }
public DeleteTransitGatewayResponse deleteTransitGateway(DeleteTransitGatewayRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteTransitGatewayRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DeleteTransitGatewayResponseUnmarshaller.getInstance()); return invoke(request, options, DeleteTransitGatewayResponse.class); }
public static double[] grow(double[] array, int minSize) { assert minSize >= 0 : "size must be positive (got " + minSize + "): likely integer overflow?"; if (array.length < minSize) { double[] newArray = new double[oversize(minSize, RamUsageEstimator.NUM_BYTES_DOUBLE)]; System.arraycopy(array, 0, newArray, 0, array.length); return newArray; } else { return array; } }
public CreateTransactionRequest() { super("CloudPhoto", "2017-07-11", "CreateTransaction", "cloudphoto", "openAPI"); setProtocol(ProtocolType.HTTPS); }
public NGit.BatchRefUpdate setRefLogIdent(PersonIdent pi) { refLogIdent = pi; return this; }
public GetLaunchTemplateDataResponse getLaunchTemplateData(GetLaunchTemplateDataRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetLaunchTemplateDataRequestMarshaller.Instance); options.setResponseUnmarshaller(GetLaunchTemplateDataResponseUnmarshaller.Instance); return invoke(request, options, GetLaunchTemplateDataResponse.class); }
public ParseInfo(ProfilingATNSimulator atnSimulator) { this.atnSimulator = atnSimulator; }
public SimpleQQParser(String[] qqNames, String indexField) { this.qqNames = qqNames; this.indexField = indexField; }
public PromoteReadReplicaDBClusterResponse promoteReadReplicaDBCluster(PromoteReadReplicaDBClusterRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(PromoteReadReplicaDBClusterRequestMarshaller.Instance); options.setResponseUnmarshaller(PromoteReadReplicaDBClusterResponseUnmarshaller.Instance); return invoke(request, options, PromoteReadReplicaDBClusterResponse.class); }
public DescribeCapacityReservationsResponse describeCapacityReservations(DescribeCapacityReservationsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeCapacityReservationsRequestMarshaller.Instance); options.setResponseUnmarshaller(DescribeCapacityReservationsResponseUnmarshaller.Instance); return invoke(request, options, DescribeCapacityReservationsResponse.class); }
@Override public String toString() { return "IndexSearcher(" + reader + "; executor=" + executor + ")"; }
@Override public boolean incrementToken() { return false; }
public void serialize(ILittleEndianOutput out1) { out1.writeShort(main + 1); out1.writeShort(subFrom); out1.writeShort(subTo); }
@Override public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { if (bitsPerValue > 32) { throw new System.NotSupportedException("Cannot decode " + bitsPerValue + "-bits values into an int[]"); } for (int i = 0; i < iterations; ++i) { long block = readInt64(blocks, blocksOffset); blocksOffset += 8; valuesOffset = decode(block, values, valuesOffset); } }
public boolean isExpectedToken(int symbol) { ATN atn = interpreter.atn; ParserRuleContext ctx = _ctx; ATNState s = atn.states[state]; IntervalSet following = atn.nextTokens(s); if (following.contains(symbol)) { return true; } if (!following.contains(TokenConstants.EPSILON)) { return false; } while (ctx != null && ctx.invokingState >= 0 && following.contains(TokenConstants.EPSILON)) { ATNState invokingState = atn.states[ctx.invokingState]; RuleTransition rt = (RuleTransition)invokingState.transition(0); following = atn.nextTokens(rt.followState); if (following.contains(symbol)) { return true; } ctx = (ParserRuleContext)ctx.parent; } if (following.contains(TokenConstants.EPSILON) && symbol == TokenConstants.EOF) { return true; } return false; }
public UpdateStreamResponse updateStream(UpdateStreamRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(UpdateStreamRequestMarshaller.getInstance()); options.setResponseUnmarshaller(UpdateStreamResponseUnmarshaller.getInstance()); return invoke(request, options, UpdateStreamResponse.class); }
@Override public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) { try { OperandResolver.getSingleValue(arg0, srcRowIndex, srcColumnIndex); return ErrorEval.NA; } catch (EvaluationException e) { int result = translateErrorCodeToErrorTypeValue(e.getErrorEval().getErrorCode()); return new NumberEval(result); } }
public String toString() { StringBuilder sb = new StringBuilder(64); sb.append(getClass().getSimpleName()).append(" ["); sb.append(_index).append(" ").append(_name); sb.append("]"); return sb.toString(); }
public ListAssignmentsForHITResponse ListAssignmentsForHIT(ListAssignmentsForHITRequest request) { InvokeOptions options = new InvokeOptions(); options.RequestMarshaller = ListAssignmentsForHITRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAssignmentsForHITResponseUnmarshaller.Instance; return Invoke<ListAssignmentsForHITResponse>(request, options); }
public DeleteAccessControlRuleResponse DeleteAccessControlRule(DeleteAccessControlRuleRequest request) { InvokeOptions options = new InvokeOptions(); options.RequestMarshaller = DeleteAccessControlRuleRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteAccessControlRuleResponseUnmarshaller.Instance; return Invoke<DeleteAccessControlRuleResponse>(request, options); }
public FST.Arc<Long> getFirstArc(FST.Arc<Long> arc) { return fst.getFirstArc(arc); }
public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { for (int i = 0; i < iterations; ++i) { long block = blocks[blocksOffset++]; for (int shift = 48; shift >= 0; shift -= 16) { values[valuesOffset++] = (int)(((block >>> shift) & 65535L)); } } }
@Override public long skip(long charCount) throws IOException { if (charCount < 0) { throw new IllegalArgumentException("charCount < 0: " + charCount); } synchronized (lock) { checkNotClosed(); if (charCount == 0) { return 0; } long inSkipped; int availableFromBuffer = buf.length - pos; if (availableFromBuffer > 0) { long requiredFromIn = charCount - availableFromBuffer; if (requiredFromIn <= 0) { pos += (int) (charCount); return charCount; } pos += availableFromBuffer; inSkipped = in.skip(requiredFromIn); } else { inSkipped = in.skip(charCount); } return inSkipped + availableFromBuffer; } }
public Map<String, Ref> getRefsMap() { return advertisedRefs; }
public UpdateApiKeyResponse updateApiKey(UpdateApiKeyRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(UpdateApiKeyRequestMarshaller.getInstance()); options.setResponseUnmarshaller(UpdateApiKeyResponseUnmarshaller.getInstance()); return invoke(request, options); }
@Override public ObjectStream openStream() { WindowCursor wc = new WindowCursor(db); InputStream in; try { in = new PackInputStream(pack, objectOffset + headerLength, wc); } catch (IOException) { return wc.open(getObjectId(), type).openStream(); } in = new BufferedInputStream(new InflaterInputStream(in, wc.inflater(), 8192), 8192); return new ObjectStream.Filter(type, size, in); }
public ArrayList() { array = libcore.util.EmptyArray.OBJECT; }
public UpdateDetectorVersionResponse UpdateDetectorVersion(UpdateDetectorVersionRequest request) { InvokeOptions options = new InvokeOptions(); options.RequestMarshaller = UpdateDetectorVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateDetectorVersionResponseUnmarshaller.Instance; return Invoke<UpdateDetectorVersionResponse>(request, options); }
public void Resize() { Resize(Double.MAX_VALUE); }
public RevFlagSet(Collection<RevFlag> s) { this(); this.addAll(s); }
@Override public int size() { return this._enclosing.size(); }
public final long getLong() { int newPosition = position + Long.BYTES; if (newPosition > limit) { throw new BufferUnderflowException(); } long result = ByteBuffer.wrap(backingArray, offset + position, Long.BYTES).order(order).getLong(); position = newPosition; return result; }
public StringBuilder insert(int offset, long l){ insert0(offset, String.valueOf(l)); return this; }
public TurkishLowerCaseFilter(TokenStream in) { super(in); termAtt = addAttribute(CharTermAttribute.class); }
public ParseTreeMatch Match(IParseTree tree, ParseTreePattern pattern) { MultiMap<String, IParseTree> labels = new MultiMap<>(); IParseTree mismatchedNode = MatchImpl(tree, pattern.PatternTree, labels); return new ParseTreeMatch(tree, pattern, labels, mismatchedNode); }
public void addIfNoOverlap(WeightedPhraseInfo wpi) { for (WeightedPhraseInfo existWpi : phraseList) { if (existWpi.isOffsetOverlap(wpi)) { existWpi.getTermsInfos().addAll(wpi.getTermsInfos()); return; } } phraseList.add(wpi); }
@Override public Merger NewMerger(Repository db) { return new StrategySimpleTwoWayInCore.InCoreMerger(db); }
@Override public float docScore(int docId, String field, int numPayloadsSeen, float payloadScore) { return numPayloadsSeen > 0 ? (payloadScore / numPayloadsSeen) : 1; }
@Override public Collection<IParseTree> evaluate(IParseTree t) { return Trees.findAllRuleNodes(t, ruleIndex); }
public String toString() { StringBuilder buffer = new StringBuilder(); buffer.append("[CFRULE]\n"); buffer.append("    .condition_type   =").append(field_1_condition_type).append("\n"); buffer.append("    OPTION FLAGS=0x").append(String.format("%X", Options)).append("\n"); if (ContainsFontFormattingBlock) { buffer.append(_fontFormatting.toString()).append("\n"); } if (ContainsBorderFormattingBlock) { buffer.append(_borderFormatting.toString()).append("\n"); } if (ContainsPatternFormattingBlock) { buffer.append(_patternFormatting.toString()).append("\n"); } buffer.append("    Formula 1 =").append(Arrays.toString(field_17_formula1.Tokens)).append("\n"); buffer.append("    Formula 2 =").append(Arrays.toString(field_18_formula2.Tokens)).append("\n"); buffer.append("[/CFRULE]\n"); return buffer.toString(); }
public DescribeServiceUpdatesResponse describeServiceUpdates(DescribeServiceUpdatesRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeServiceUpdatesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeServiceUpdatesResponseUnmarshaller.getInstance()); return invoke(request, options); }
public String getNameName(int index) { String result = getNameAt(index).getNameName(); return result; }
public DescribeLocationsResponse describeLocations() { return describeLocations(new DescribeLocationsRequest()); }
public String toString() { return "<phraseslop value='" + getValueString() + "'>" + "\n" + getChild().toString() + "\n</phraseslop>"; }
public DirCacheEntry getDirCacheEntry() { return currentSubtree == null ? currentEntry : null; }
public java.nio.IntBuffer put(int[] src, int srcOffset, int intCount) { java.util.Arrays.checkOffsetAndCount(src.length, srcOffset, intCount); if (intCount > remaining()) { throw new java.nio.BufferOverflowException(); } for (int i = srcOffset; i < srcOffset + intCount; ++i) { put(src[i]); } return this; }
public void trimToSize() { int s = _size; if (s == array.length) { return; } if (s == 0) { array = libcore.util.EmptyArray.OBJECT; } else { Object[] newArray = new Object[s]; System.arraycopy(array, 0, newArray, 0, s); array = newArray; } modCount++; }
public DescribeLocalGatewayVirtualInterfacesResponse describeLocalGatewayVirtualInterfaces(DescribeLocalGatewayVirtualInterfacesRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeLocalGatewayVirtualInterfacesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeLocalGatewayVirtualInterfacesResponseUnmarshaller.getInstance()); return invoke(request, options); }
public TokenStream create(TokenStream input) { return new RussianLightStemFilter(input); }
public int[] ToArray(int[] a){ int[] rval; if (a.length == _limit){ System.arraycopy(_array, 0, a, 0, _limit); rval = a; } else{ rval = ToArray(); } return rval; }
public BasicSessionCredentials(String accessKeyId, String accessKeySecret, String sessionToken, long roleSessionDurationSeconds) { if (accessKeyId == null) { throw new IllegalArgumentException("Access key ID cannot be null."); } if (accessKeySecret == null) { throw new IllegalArgumentException("Access key secret cannot be null."); } this.accessKeyId = accessKeyId; this.accessKeySecret = accessKeySecret; this.sessionToken = sessionToken; this.roleSessionDurationSeconds = roleSessionDurationSeconds; sessionStartedTimeInMilliSeconds = System.currentTimeMillis(); } public BasicSessionCredentials(String accessKeyId, String accessKeySecret, String sessionToken) { this(accessKeyId, accessKeySecret, sessionToken, 0); }
public final ShortBuffer get(short[] dst, int dstOffset, int shortCount) { if (shortCount > remaining()) { throw new BufferUnderflowException(); } System.arraycopy(backingArray, offset + _position, dst, dstOffset, shortCount); _position += shortCount; return this; }
public ActivateEventSourceResponse activateEventSource(ActivateEventSourceRequest request){ InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ActivateEventSourceRequestMarshaller.Instance); options.setResponseUnmarshaller(ActivateEventSourceResponseUnmarshaller.Instance); return invoke(request, options, ActivateEventSourceResponse.class); }
public DescribeReceiptRuleSetResponse DescribeReceiptRuleSet(DescribeReceiptRuleSetRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeReceiptRuleSetRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeReceiptRuleSetResponseUnmarshaller.getInstance()); return invoke(request, options); }
public Filter(String name) { _name = name; }
@Override public java.nio.DoubleBuffer put(double c) { throw new java.nio.ReadOnlyBufferException(); }
public CreateTrafficPolicyInstanceResponse CreateTrafficPolicyInstance(CreateTrafficPolicyInstanceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateTrafficPolicyInstanceRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateTrafficPolicyInstanceResponseUnmarshaller.Instance; return Invoke<CreateTrafficPolicyInstanceResponse>(request, options); }
public JapaneseIterationMarkCharFilter(TextReader input, boolean normalizeKanji, boolean normalizeKana) : base(input) { this.normalizeKanji = normalizeKanji; this.normalizeKana = normalizeKana; buffer.Reset(input); }
public void WriteLong(long v) { WriteInt((int)(v >> 0)); WriteInt((int)(v >> 32)); }
public FileResolver() { exports = new ConcurrentHashMap<String, Repository>(); exportBase = new CopyOnWriteArrayList<FilePath>(); }
public ValueEval GetRef3DEval(Ref3DPtg rptg) { SheetRangeEvaluator sre = CreateExternSheetRefEvaluator(rptg.ExternSheetIndex); return new LazyRefEval(rptg.Row, rptg.Column, sre); }
public DeleteDatasetResponse DeleteDataset(DeleteDatasetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDatasetRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDatasetResponseUnmarshaller.Instance; return Invoke<DeleteDatasetResponse>(request, options); }
public StartRelationalDatabaseResponse StartRelationalDatabase(StartRelationalDatabaseRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StartRelationalDatabaseRequestMarshaller.Instance; options.ResponseUnmarshaller = StartRelationalDatabaseResponseUnmarshaller.Instance; return Invoke<StartRelationalDatabaseResponse>(request, options); }
public DescribeReservedCacheNodesOfferingsResponse DescribeReservedCacheNodesOfferings() { return DescribeReservedCacheNodesOfferings(new DescribeReservedCacheNodesOfferingsRequest()); }
public static double PMT(double r, int nper, double pv, double fv, int type) { double pmt = -r * (pv * Math.pow(1 + r, nper) + fv) / ((1 + r * type) * (Math.pow(1 + r, nper) - 1)); return pmt; }
public DescribeDocumentVersionsResponse DescribeDocumentVersions(DescribeDocumentVersionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDocumentVersionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDocumentVersionsResponseUnmarshaller.Instance; return Invoke<DescribeDocumentVersionsResponse>(request, options); }
public ListPublishingDestinationsResponse ListPublishingDestinations(ListPublishingDestinationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListPublishingDestinationsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListPublishingDestinationsResponseUnmarshaller.Instance; return Invoke<ListPublishingDestinationsResponse>(request, options); }
public DeleteAccountAliasRequest(String accountAlias) { _accountAlias = accountAlias; }
public static float[] Grow(float[] array) { return Grow(array, 1 + array.length); }
public String outputToString(Object output) { if (!(output instanceof List)) { return outputs.outputToString((T) output); } else { List outputList = (List) output; StringBuilder b = new StringBuilder(); b.append('['); for (int i = 0; i < outputList.size(); i++) { if (i > 0) { b.append(", "); } b.append(outputs.outputToString((T) outputList.get(i))); } b.append(']'); return b.toString(); } }
public void notifyDeleteCell(ICell cell) { _bookEvaluator.notifyDeleteCell(new HSSFEvaluationCell(cell)); }
public StringBuilder replace(int start, int end, String str) { replace0(start, end, str); return this; }
public SetIdentityPoolConfigurationResponse setIdentityPoolConfiguration(SetIdentityPoolConfigurationRequest request) { var options = new InvokeOptions(); options.setRequestMarshaller(SetIdentityPoolConfigurationRequestMarshaller.getInstance()); options.setResponseUnmarshaller(SetIdentityPoolConfigurationResponseUnmarshaller.getInstance()); return invoke(request, options, SetIdentityPoolConfigurationResponse.class); }
public static double kthSmallest(double[] v, int k){ double r = Double.NaN; k--; if (v != null && v.length > k && k >= 0){ Arrays.sort(v); r = v[k]; } return r; }
public void set(int index, long value) { int o = index >>> 5; int b = index & 31; int shift = b << 1; blocks[o] = (blocks[o] & ~(3L << shift)) | (value << shift); }
public String toString() { List<IQueryNode> children = getChildren(); if (children == null || children.size() == 0) return "<boolean operation='and'/>"; StringBuilder sb = new StringBuilder("<boolean operation='and'>"); for (IQueryNode child : children) { sb.append("\n"); sb.append(child.toString()); } sb.append("\n</boolean>"); return sb.toString(); }
public int SumTokenSizes(int fromIx, int toIx) { int result = 0; for (int i = fromIx; i < toIx; i++) { result += _ptgs[i].Size; } return result; }
public void setReadonly(boolean readonly) { if (this.readonly && !readonly) { throw new InvalidOperationException("can't alter readonly IntervalSet"); } this.readonly = readonly; }
public void clearConsumingCell(FormulaCellCacheEntry cce) { if (!_consumingCells.remove(cce)) { throw new InvalidOperationException("Specified formula cell is not consumed by this cell"); } }
public List<E> subList(int start, int end) { synchronized(mutex) { return new java.util.Collections.SynchronizedRandomAccessList<E>(list.subList(start, end), mutex); } }
public FileHeader getFileHeader() { return file; }
public AttachLoadBalancersResponse attachLoadBalancers(AttachLoadBalancersRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(AttachLoadBalancersRequestMarshaller.getInstance()); options.setResponseUnmarshaller(AttachLoadBalancersResponseUnmarshaller.getInstance()); return invoke(request, options, AttachLoadBalancersResponse.class); }
public InitiateJobRequest(String accountId, String vaultName, JobParameters jobParameters) { this.accountId = accountId; this.vaultName = vaultName; this.jobParameters = jobParameters; }
@Override public String toString() { return "SPL"; }
public ReplaceableAttribute(String name, String value, boolean replace) { this.name = name; this.value = value; this.replace = replace; }
public void add(IIndexableField field) { fields.add(field); }
public DeleteStackSetResponse deleteStackSet(DeleteStackSetRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteStackSetRequestMarshaller.Instance); options.setResponseUnmarshaller(DeleteStackSetResponseUnmarshaller.Instance); return invoke(request, options, DeleteStackSetResponse.class); }
public GetRepoBuildRuleListRequest() { super("cr", "2016-06-07", "GetRepoBuildRuleList", "cr", "openAPI"); setUriPattern("/repos/[RepoNamespace]/[RepoName]/rules"); setMethod(MethodType.GET); }
public SparseArray(int initialCapacity) { initialCapacity = android.util.@internal.ArrayUtils.idealIntArraySize(initialCapacity); mKeys = new int[initialCapacity]; mValues = new Object[initialCapacity]; mSize = 0; }
public InvokeServiceRequest() { super("industry-brain", "2018-07-12", "InvokeService"); setMethod(MethodType.POST); }
public ListAlbumPhotosRequest() { super("CloudPhoto", "2017-07-11", "ListAlbumPhotos", "cloudphoto", "openAPI"); setProtocol(ProtocolType.HTTPS); }
public boolean hasPrevious() { return link != list.voidLink; }
public DeleteHsmConfigurationResponse DeleteHsmConfiguration(DeleteHsmConfigurationRequest request){ InvokeOptions options = new InvokeOptions(); options.RequestMarshaller = DeleteHsmConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteHsmConfigurationResponseUnmarshaller.Instance; return Invoke<DeleteHsmConfigurationResponse>(request, options); }
public CreateLoadBalancerRequest(String loadBalancerName){ this.loadBalancerName = loadBalancerName; }
public String getUserInfo() { return decode(userInfo); }
public TagAttendeeResponse tagAttendee(TagAttendeeRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(TagAttendeeRequestMarshaller.getInstance()); options.setResponseUnmarshaller(TagAttendeeResponseUnmarshaller.getInstance()); return invoke(request, options, TagAttendeeResponse.class); }
public String GetRefName() { return name; }
public WAH8DocIdSet build() { if (this.wordNum != -1) { addWord(wordNum, (byte)word); } return super.build(); }
public boolean isSubTotal(int rowIndex, int columnIndex) { return false; }
public DescribeDBProxiesResponse describeDBProxies(DescribeDBProxiesRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeDBProxiesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeDBProxiesResponseUnmarshaller.getInstance()); return invoke(request, options, DescribeDBProxiesResponse.class); }
public GetVoiceConnectorProxyResponse getVoiceConnectorProxy(GetVoiceConnectorProxyRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetVoiceConnectorProxyRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetVoiceConnectorProxyResponseUnmarshaller.getInstance()); return invoke(request, options, GetVoiceConnectorProxyResponse.class); }
public void fromConfig(Config rc) { setPackedGitOpenFiles(rc.getInt("core", null, "packedgitopenfiles", getPackedGitOpenFiles())); setPackedGitLimit(rc.getLong("core", null, "packedgitlimit", getPackedGitLimit())); setPackedGitWindowSize(rc.getInt("core", null, "packedgitwindowsize", getPackedGitWindowSize())); setPackedGitMMAP(rc.getBoolean("core", null, "packedgitmmap", isPackedGitMMAP())); setDeltaBaseCacheLimit(rc.getInt("core", null, "deltabasecachelimit", getDeltaBaseCacheLimit())); long maxMem = Runtime.getRuntime().maxMemory(); long sft = rc.getLong("core", null, "streamfilethreshold", getStreamFileThreshold()); sft = Math.min(sft, maxMem / 4); sft = Math.min(sft, Integer.MAX_VALUE); setStreamFileThreshold((int) sft); }
public static Date getJavaDate(double date){ return getJavaDate(date, false); }
public StartPersonTrackingResponse startPersonTracking(StartPersonTrackingRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(StartPersonTrackingRequestMarshaller.getInstance()); options.setResponseUnmarshaller(StartPersonTrackingResponseUnmarshaller.getInstance()); return invoke(request, options, StartPersonTrackingResponse.class); }
@Override public int size() { return this._enclosing.size(); }
public GetRouteResponse getRoute(GetRouteRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetRouteRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetRouteResponseUnmarshaller.getInstance()); return invoke(request, options, GetRouteResponse.class); }
public DeleteClusterResponse deleteCluster(DeleteClusterRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteClusterRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DeleteClusterResponseUnmarshaller.getInstance()); return invoke(request, options, DeleteClusterResponse.class); }
@Override public String toString() { StringBuilder buffer = new StringBuilder(); buffer.append("[MMS]\n"); buffer.append("    .addMenu        = ").append(StringUtil.toHexString(AddMenuCount)).append("\n"); buffer.append("    .delMenu        = ").append(StringUtil.toHexString(DelMenuCount)).append("\n"); buffer.append("[/MMS]\n"); return buffer.toString(); }
public FileBasedConfig(Config base, FilePath cfgLocation, FS fs) { super(base); configFile = cfgLocation; this.fs = fs; this.snapshot = FileSnapshot.DIRTY; this.hash = ObjectId.zeroId(); }
@Override public int following(int pos) { if (pos < text.getBeginIndex() || pos > text.getEndIndex()) { throw new IllegalArgumentException("offset out of bounds"); } else if (0 == sentenceStarts.length) { text.setIndex(text.getBeginIndex()); return DONE; } else if (pos >= sentenceStarts[sentenceStarts.length - 1]) { text.setIndex(text.getEndIndex()); currentSentence = sentenceStarts.length - 1; return DONE; } else { currentSentence = (sentenceStarts.length - 1) / 2; moveToSentenceAt(pos, 0, sentenceStarts.length - 2); text.setIndex(sentenceStarts[++currentSentence]); return CURRENT; } }
public UpdateParameterGroupResponse updateParameterGroup(UpdateParameterGroupRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(UpdateParameterGroupRequestMarshaller.getInstance()); options.setResponseUnmarshaller(UpdateParameterGroupResponseUnmarshaller.getInstance()); return invoke(request, options, UpdateParameterGroupResponse.class); }
@Override public Object clone() { SeriesChartGroupIndexRecord rec = new SeriesChartGroupIndexRecord(); rec.field_1_chartGroupIndex = field_1_chartGroupIndex; return rec; }
public static double calcDistanceFromErrPct(IShape shape, double distErrPct, SpatialContext ctx) { if (distErrPct < 0 || distErrPct > 0.5) { throw new IllegalArgumentException("distErrPct " + distErrPct + " must be between [0 to 0.5]", "distErrPct"); } if (distErrPct == 0 || shape instanceof IPoint) { return 0; } IRectangle bbox = shape.getBoundingBox(); IPoint ctr = bbox.getCenter(); double y = (ctr.getY() >= 0 ? bbox.getMaxY() : bbox.getMinY()); double diagonalDist = ctx.getDistCalc().distance(ctr, bbox.getMaxX(), y); return diagonalDist * distErrPct; }
public int codePointAt(int index) { if (index < 0 || index >= count) { throw indexAndLength(index); } return Sharpen.CharHelper.CodePointAt(value, index, count); }
public void setPasswordVerifier(int passwordVerifier) { this.passwordVerifier = passwordVerifier; }
public ListVaultsRequest(String accountId) { this._accountId = accountId; }
public SquashMessageFormatter() { dateFormatter = new GitDateFormatter(GitDateFormatter.Format.DEFAULT); }
public GetVideoCoverRequest() { super("CloudPhoto", "2017-07-11", "GetVideoCover", "cloudphoto", "openAPI"); setProtocol(ProtocolType.HTTPS); }
public int lastIndexOf(Object object) { int pos = _size; java.util.LinkedList.Link<E> link = voidLink.previous; if (object != null) { while (link != voidLink) { pos--; if (object.equals(link.data)) { return pos; } link = link.previous; } } else { while (link != voidLink) { pos--; if (link.data == null) { return pos; } link = link.previous; } } return -1; }
public DescribeSpotFleetRequestsResponse describeSpotFleetRequests(DescribeSpotFleetRequestsRequest request) { var options = new InvokeOptions(); options.setRequestMarshaller(DescribeSpotFleetRequestsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeSpotFleetRequestsResponseUnmarshaller.getInstance()); return invoke(request, options); }
public IndexFacesResponse indexFaces(IndexFacesRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(IndexFacesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(IndexFacesResponseUnmarshaller.getInstance()); return invoke(request, options); }
public BreakIterator getBreakIterator(int script) { switch (script) { case UScript.JAPANESE: return (BreakIterator) cjkBreakIterator.clone(); case UScript.MYANMAR: if (myanmarAsWords) { return (BreakIterator) defaultBreakIterator.clone(); } else { return (BreakIterator) myanmarSyllableIterator.clone(); } default: return (BreakIterator) defaultBreakIterator.clone(); } }
public String toString() { StringBuilder b = new StringBuilder(); b.append("[DCONREF]\n"); b.append("    .ref\n"); b.append("        .firstrow   = ").append(firstRow).append("\n"); b.append("        .lastrow    = ").append(lastRow).append("\n"); b.append("        .firstcol   = ").append(firstCol).append("\n"); b.append("        .lastcol    = ").append(lastCol).append("\n"); b.append("    .cch            = ").append(charCount).append("\n"); b.append("    .stFile\n"); b.append("        .h          = ").append(charType).append("\n"); b.append("        .rgb        = ").append(ReadablePath).append("\n"); b.append("[/DCONREF]\n"); return b.toString(); }
public int getPackedGitOpenFiles() { return packedGitOpenFiles; }
public String toString() { StringBuilder buffer = new StringBuilder(); buffer.append("[FEATURE HEADER]\n"); buffer.append("[/FEATURE HEADER]\n"); return buffer.toString(); }
public static byte[] getToUnicodeLE(String string1) { return UTF16LE.getBytes(string1); }
public List<String> getFooterLines(String keyName) { return getFooterLines(new FooterKey(keyName)); }
@Override public void refresh() { super.refresh(); rescan(); }
public float get(int index) { checkIndex(index); return byteBuffer.getFloat(index * Float.BYTES); }
public DeleteDetectorResponse DeleteDetector(DeleteDetectorRequest request){ var options = new InvokeOptions(); options.RequestMarshaller = DeleteDetectorRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDetectorResponseUnmarshaller.Instance; return Invoke<DeleteDetectorResponse>(request, options); }
public int[] grow() { assert bytesStart != null; return bytesStart = ArrayUtil.grow(bytesStart, bytesStart.length + 1); }
public ListExclusionsResponse listExclusions(ListExclusionsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ListExclusionsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ListExclusionsResponseUnmarshaller.getInstance()); return invoke(request, options); }
public static SpatialStrategy getSpatialStrategy(int roundNumber) { SpatialStrategy result; if (!spatialStrategyCache.TryGetValue(roundNumber, result) || result == null) { throw new InvalidOperationException("Strategy should have been init'ed by SpatialDocMaker by now"); } return result; }
public RestoreDBClusterToPointInTimeResponse restoreDBClusterToPointInTime(RestoreDBClusterToPointInTimeRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(RestoreDBClusterToPointInTimeRequestMarshaller.getInstance()); options.setResponseUnmarshaller(RestoreDBClusterToPointInTimeResponseUnmarshaller.getInstance()); return invoke(request, options, RestoreDBClusterToPointInTimeResponse.class); }
public void serialize(ILittleEndianOutput out1) { out1.writeShort(field_1_categoryDataType); out1.writeShort(field_2_valuesDataType); out1.writeShort(field_3_numCategories); out1.writeShort(field_4_numValues); out1.writeShort(field_5_bubbleSeriesType); out1.writeShort(field_6_numBubbleValues); }
public PostAgentProfileResponse postAgentProfile(PostAgentProfileRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(PostAgentProfileRequestMarshaller.getInstance()); options.setResponseUnmarshaller(PostAgentProfileResponseUnmarshaller.getInstance()); return invoke(request, options, PostAgentProfileResponse.class); }
public ParseTreePattern compileParseTreePattern(String pattern, int patternRuleIndex) { if (inputStream instanceof ITokenStream) { ITokenSource tokenSource = ((ITokenStream) inputStream).getTokenSource(); if (tokenSource instanceof Lexer) { Lexer lexer = (Lexer) tokenSource; return compileParseTreePattern(pattern, patternRuleIndex, lexer); } } throw new NotSupportedException("Parser can't discover a lexer to use"); }
public BacktrackDBClusterResponse backtrackDBCluster(BacktrackDBClusterRequest request){ InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(BacktrackDBClusterRequestMarshaller.getInstance()); options.setResponseUnmarshaller(BacktrackDBClusterResponseUnmarshaller.getInstance()); return invoke(request, options); }
public String getName() { return strategyName; }
public void copyTo(byte[] b, int o) { formatHexByte(b, o + 0, w1); formatHexByte(b, o + 8, w2); formatHexByte(b, o + 16, w3); formatHexByte(b, o + 24, w4); formatHexByte(b, o + 32, w5); }
public static IntList LineMap(byte[] buf, int ptr, int end) { IntList map = new IntList((end - ptr) / 36); map.FillTo(1, Integer.MIN_VALUE); for (; ptr < end; ptr = NextLF(buf, ptr)) { map.Add(ptr); } map.Add(end); return map; }
public Collection<ObjectId> getAdditionalHaves() { return Collections.emptySet(); }
public long ramBytesUsed() { return _termsCache.values().stream() .mapToLong(simpleTextTerms -> simpleTextTerms != null ? simpleTextTerms.ramBytesUsed() : 0) .sum(); }
public String toXml(String tab) { StringBuilder builder = new StringBuilder(); builder.append(tab).append("<").append(recordName).append(">\n"); for (Iterator<EscherRecord> iterator = escherRecords.iterator(); iterator.hasNext();) { EscherRecord escherRecord = iterator.next(); builder.append(escherRecord.toXml(tab + "\t")); } builder.append(tab).append("</").append(recordName).append(">\n"); return builder.toString(); }
@Override public TokenStream create(TokenStream input) { return new GalicianMinimalStemFilter(input); }
public String toString() { StringBuilder r = new StringBuilder(); r.append("Commit"); r.append("={\n"); r.append("tree "); r.append(treeId != null ? treeId.getName() : "NOT_SET"); r.append("\n"); for (ObjectId p : parentIds) { r.append("parent "); r.append(p.getName()); r.append("\n"); } r.append("author "); r.append(author != null ? author.toString() : "NOT_SET"); r.append("\n"); r.append("committer "); r.append(committer != null ? committer.toString() : "NOT_SET"); r.append("\n"); if (encoding != null && !encoding.equals(Constants.CHARSET)) { r.append("encoding "); r.append(encoding.name()); r.append("\n"); } r.append("\n"); r.append(message != null ? message : ""); r.append("}"); return r.toString(); }
public IndicNormalizationFilterFactory(Map<String, String> args) { super(args); if (!args.isEmpty()) { throw new IllegalArgumentException("Unknown parameters: " + args); } }
public CreateOptionGroupResponse createOptionGroup(CreateOptionGroupRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateOptionGroupRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateOptionGroupResponseUnmarshaller.getInstance()); return invoke(request, options, CreateOptionGroupResponse.class); }
public AssociateMemberAccountResponse associateMemberAccount(AssociateMemberAccountRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(AssociateMemberAccountRequestMarshaller.getInstance()); options.setResponseUnmarshaller(AssociateMemberAccountResponseUnmarshaller.getInstance()); return invoke(request, options, AssociateMemberAccountResponse.class); }
public void run() { this._enclosing.doRefreshProgress(this.mId, this.mProgress, this.mFromUser, true); this._enclosing.mRefreshProgressRunnable = this; }
public SetTerminationProtectionResponse setTerminationProtection(SetTerminationProtectionRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(SetTerminationProtectionRequestMarshaller.Instance); options.setResponseUnmarshaller(SetTerminationProtectionResponseUnmarshaller.Instance); return invoke(request, options, SetTerminationProtectionResponse.class); }
public String getErrorHeader(RecognitionException e) { int line = e.getOffendingToken().getLine(); int charPositionInLine = e.getOffendingToken().getCharPositionInLine(); return "line " + line + ":" + charPositionInLine; }
public java.nio.CharBuffer asReadOnlyBuffer() { java.nio.CharToByteBufferAdapter buf = new java.nio.CharToByteBufferAdapter(byteBuffer.asReadOnlyBuffer()); buf.limit(_limit); buf.position(_position); buf.mark(_mark); buf.byteBuffer.order(byteBuffer.order()); return buf; }
public StopSentimentDetectionJobResponse stopSentimentDetectionJob(StopSentimentDetectionJobRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(StopSentimentDetectionJobRequestMarshaller.getInstance()); options.setResponseUnmarshaller(StopSentimentDetectionJobResponseUnmarshaller.getInstance()); return invoke(request, options, StopSentimentDetectionJobResponse.class); }
public ObjectIdSubclassMap<ObjectId> getNewObjectIds() { if (newObjectIds != null) { return newObjectIds; } return new ObjectIdSubclassMap<ObjectId>(); }
protected void Clear() { hash = Hash(new byte[0]); super.Clear(); }
public void reset() throws IOException { synchronized(lock) { checkNotClosed(); if (_mark == -1) { throw new IOException("Invalid mark"); } pos = _mark; } }
public RefErrorPtg(ILittleEndianInput in1) { field_1_reserved = in1.readInt(); }
public SuspendGameServerGroupResponse suspendGameServerGroup(SuspendGameServerGroupRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(SuspendGameServerGroupRequestMarshaller.Instance); options.setResponseUnmarshaller(SuspendGameServerGroupResponseUnmarshaller.Instance); return invoke(request, options, SuspendGameServerGroupResponse.class); }
public ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) { if (args.length != 3) { return ErrorEval.VALUE_INVALID; } return evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2]); }
public GetRepoRequest() { super("cr", "2016-06-07", "GetRepo", "cr", "openAPI"); setUriPattern("/repos/[RepoNamespace]/[RepoName]"); setMethod(MethodType.GET); }
public void setDate(DateTime date) { if (date != null) { setDate(DateTools.dateToString(date, DateTools.Resolution.SECOND)); } else { this.date = null; } }
public TokenStream create(TokenStream input) { return new GermanMinimalStemFilter(input); }
public Object[] toArray() { return a.clone(); }
public void write(char[] buffer, int offset, int len) { java.util.Arrays.checkOffsetAndCount(buffer.length, offset, len); synchronized(lock) { expand(len); System.arraycopy(buffer, offset, this.buf, this.count, len); this.count += len; } }
public static RevFilter after(long ts) { return new CommitTimeRevFilterAfter(ts); }
public DeleteGroupPolicyRequest(String groupName, String policyName) { this._groupName = groupName; this._policyName = policyName; }
public DeregisterTransitGatewayMulticastGroupMembersResponse deregisterTransitGatewayMulticastGroupMembers(DeregisterTransitGatewayMulticastGroupMembersRequest request) { var options = new InvokeOptions(); options.setRequestMarshaller(DeregisterTransitGatewayMulticastGroupMembersRequestMarshaller.Instance); options.setResponseUnmarshaller(DeregisterTransitGatewayMulticastGroupMembersResponseUnmarshaller.Instance); return Invoke<DeregisterTransitGatewayMulticastGroupMembersResponse>(request, options); }
public BatchDeleteScheduledActionResponse batchDeleteScheduledAction(BatchDeleteScheduledActionRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(BatchDeleteScheduledActionRequestMarshaller.getInstance()); options.setResponseUnmarshaller(BatchDeleteScheduledActionResponseUnmarshaller.getInstance()); return invoke(request, options); }
public CreateAlgorithmResponse createAlgorithm(CreateAlgorithmRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateAlgorithmRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateAlgorithmResponseUnmarshaller.getInstance()); return invoke(request, options); }
public int readUByte() { checkPosition(1); return _buf[_readIndex++] & 0xFF; }
public void setLength(int sz) { NB.encodeInt32(info, infoOffset + P_SIZE, sz); }
public DescribeScalingProcessTypesResponse DescribeScalingProcessTypes(){ return DescribeScalingProcessTypes(new DescribeScalingProcessTypesRequest()); }
public ListResourceRecordSetsResponse listResourceRecordSets(ListResourceRecordSetsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ListResourceRecordSetsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ListResourceRecordSetsResponseUnmarshaller.getInstance()); return invoke(request, options); }
@Override public Token recoverInline(Parser recognizer) throws RecognitionException { InputMismatchException e = new InputMismatchException(recognizer); for (ParserRuleContext context = recognizer.getContext(); context != null; context = (ParserRuleContext) context.getParent()) { context.exception = e; } throw new ParseCanceledException(e); }
public SetTagsForResourceResponse SetTagsForResource(SetTagsForResourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SetTagsForResourceRequestMarshaller.Instance; options.ResponseUnmarshaller = SetTagsForResourceResponseUnmarshaller.Instance; return Invoke<SetTagsForResourceResponse>(request, options); }
public ModifyStrategyRequest() { super("aegis", "2016-11-11", "ModifyStrategy", "vipaegis", "openAPI"); setMethod(MethodType.POST); }
public DescribeVpcEndpointServicesResponse describeVpcEndpointServices(DescribeVpcEndpointServicesRequest request){ InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeVpcEndpointServicesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeVpcEndpointServicesResponseUnmarshaller.getInstance()); return invoke(request, options); }
public EnableLoggingResponse enableLogging(EnableLoggingRequest request){ InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(EnableLoggingRequestMarshaller.getInstance()); options.setResponseUnmarshaller(EnableLoggingResponseUnmarshaller.getInstance()); return invoke(request, options, EnableLoggingResponse.class); }
@Override public boolean contains(Object o) { return this._enclosing.containsValue(o); }
public SheetRangeIdentifier(String bookName, NameIdentifier firstSheetIdentifier, NameIdentifier lastSheetIdentifier) { super(bookName, firstSheetIdentifier); this._lastSheetIdentifier = lastSheetIdentifier; }
public DomainMetadataRequest(String domainName) { this._domainName = domainName; }
public ParseException(Token currentToken, int[][] expectedTokenSequences, String[] tokenImage) { super(Initialize(currentToken, expectedTokenSequences, tokenImage)); this.CurrentToken = currentToken; this.ExpectedTokenSequences = expectedTokenSequences; this.TokenImage = tokenImage; }
public FetchPhotosRequest() { super("CloudPhoto", "2017-07-11", "FetchPhotos", "cloudphoto", "openAPI"); setProtocol(ProtocolType.HTTPS); }
public java.io.PrintWriter writer() { return _writer; }
public NGramTokenizerFactory(IDictionary<String, String> args) { super(args); minGramSize = getInt32(args, "minGramSize", NGramTokenizer.DEFAULT_MIN_NGRAM_SIZE); maxGramSize = getInt32(args, "maxGramSize", NGramTokenizer.DEFAULT_MAX_NGRAM_SIZE); if (!args.isEmpty()) { throw new IllegalArgumentException("Unknown parameters: " + args); } } private int getInt32(IDictionary<String, String> args, String key, int defaultValue) { String value; if (!args.TryGetValue(key, out value) || !int.TryParse(value, out int result)) { return defaultValue; } return result; }
public boolean isDirectoryFileConflict() { return dfConflict != null; }
public IndonesianStemFilter(TokenStream input, boolean stemDerivational) { super(input); this.stemDerivational = stemDerivational; termAtt = addAttribute(CharTermAttribute.class); keywordAtt = addAttribute(KeywordAttribute.class); }
public CreateTrafficPolicyResponse createTrafficPolicy(CreateTrafficPolicyRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateTrafficPolicyRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateTrafficPolicyResponseUnmarshaller.getInstance()); return invoke(request, options, CreateTrafficPolicyResponse.class); }
public void serialize(ILittleEndianOutput out1) { out1.writeInt(fSD); out1.writeInt(passwordVerifier); StringUtil.writeUnicodeString(out1, title); out1.write(securityDescriptor); }
public static double floor(double n, double s){ double f; if ((n < 0 && s > 0) || (n > 0 && s < 0) || (s == 0 && n != 0)){ f = Double.NaN; }else{ f = (n == 0 || s == 0) ? 0 : Math.floor(n / s) * s; } return f; }
public ByteArrayDataOutput(byte[] bytes, int offset, int len) { Reset(bytes, offset, len); }
public static List<ITree> getChildren(ITree t) { List<ITree> kids = new ArrayList<>(); for (int i = 0; i < t.getChildCount(); i++) { kids.add(t.getChild(i)); } return kids; }
@Override public void clear() { this._enclosing.clear(); }
public RefreshAllRecord(boolean refreshAll){ super(0); this.refreshAll = refreshAll; }
public DeleteNamedQueryResponse DeleteNamedQuery(DeleteNamedQueryRequest request){ InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteNamedQueryRequestMarshaller.Instance); options.setResponseUnmarshaller(DeleteNamedQueryResponseUnmarshaller.Instance); return Invoke<DeleteNamedQueryResponse>(request, options); }
public GraphvizFormatter(ConnectionCosts costs) { this.costs = costs; this.bestPathMap = new HashMap<String, String>(); sb.append(FormatHeader()); sb.append("  init [style=invis]\n"); sb.append("  init -> 0.0 [label=\"" + BOS_LABEL + "\"]\n"); }
public CheckMultiagentRequest() { super("visionai-poc", "2020-04-08", "CheckMultiagent"); setMethod(MethodType.POST); }
public ListUserProfilesResponse listUserProfiles(ListUserProfilesRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ListUserProfilesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ListUserProfilesResponseUnmarshaller.getInstance()); return invoke(request, options, ListUserProfilesResponse.class); }
public CreateRelationalDatabaseFromSnapshotResponse createRelationalDatabaseFromSnapshot(CreateRelationalDatabaseFromSnapshotRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateRelationalDatabaseFromSnapshotRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateRelationalDatabaseFromSnapshotResponseUnmarshaller.getInstance()); return invoke(request, options, CreateRelationalDatabaseFromSnapshotResponse.class); }
public StartTaskResponse startTask(StartTaskRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(StartTaskRequestMarshaller.getInstance()); options.setResponseUnmarshaller(StartTaskResponseUnmarshaller.getInstance()); return invoke(request, options, startTaskAsync); }
public Collection<String> getIgnoredPaths() { return ignoredPaths; }
public FeatSmartTag(RecordInputStream in1) { data = in1.readRemainder(); }
public Change(ChangeAction action, ResourceRecordSet resourceRecordSet){ this._action = action; this._resourceRecordSet = resourceRecordSet; }
public DeleteImageResponse deleteImage(DeleteImageRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteImageRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DeleteImageResponseUnmarshaller.getInstance()); return invoke(request, options, DeleteImageResponse.class); }
public CreateConfigurationSetResponse createConfigurationSet(CreateConfigurationSetRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateConfigurationSetRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateConfigurationSetResponseUnmarshaller.getInstance()); return invoke(request, options, CreateConfigurationSetResponse.class); }
public Iterator<E> iterator() { Object[] snapshot = elements; return new CopyOnWriteArrayList.CowIterator<E>(snapshot, 0, snapshot.length); }
@Override public void visitContainedRecords(RecordVisitor rv) { if (_recs.size() == 0) { return; } rv.visitRecord(_bofRec); for (int i = 0; i < _recs.size(); i++) { RecordBase rb = _recs.get(i); if (rb instanceof RecordAggregate) { ((RecordAggregate)rb).visitContainedRecords(rv); } else { rv.visitRecord((Record)rb); } } rv.visitRecord(EOFRecord.instance); }
@Override public String toString() { StringBuilder buffer = new StringBuilder(); buffer.append("[FtCbls ]").append("\n"); buffer.append("  size     = ").append(getDataSize()).append("\n"); buffer.append("  reserved = ").append(HexDump.toHex(reserved)).append("\n"); buffer.append("[/FtCbls ]").append("\n"); return buffer.toString(); }
public static BATBlock createEmptyBATBlock(POIFSBigBlockSize bigBlockSize, boolean isXBAT) { BATBlock block = new BATBlock(bigBlockSize); if (isXBAT) { block.setXBATChain(bigBlockSize, POIFSConstants.END_OF_CHAIN); } return block; }
public TagResourceResponse tagResource(TagResourceRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(TagResourceRequestMarshaller.getInstance()); options.setResponseUnmarshaller(TagResourceResponseUnmarshaller.getInstance()); return invoke(request, options, TagResourceResponse.class); }
public DeleteMailboxPermissionsResponse deleteMailboxPermissions(DeleteMailboxPermissionsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteMailboxPermissionsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DeleteMailboxPermissionsResponseUnmarshaller.getInstance()); return invoke(request, options, DeleteMailboxPermissionsResponse.class); }
public ListDatasetGroupsResponse listDatasetGroups(ListDatasetGroupsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ListDatasetGroupsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ListDatasetGroupsResponseUnmarshaller.getInstance()); return invoke(request, options, ListDatasetGroupsResponse.class); }
public ResumeProcessesResponse resumeProcesses(ResumeProcessesRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ResumeProcessesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ResumeProcessesResponseUnmarshaller.getInstance()); return invoke(request, options, ResumeProcessesResponse.class); }
public GetPersonTrackingResponse getPersonTracking(GetPersonTrackingRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetPersonTrackingRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetPersonTrackingResponseUnmarshaller.getInstance()); return invoke(request, options, GetPersonTrackingResponse.class); }
public String ToFormulaString(String[] operands){ if (space.IsSet(field_1_options)){ return operands[0]; } else if (optiIf.IsSet(field_1_options)){ return ToFormulaString() + "(" + operands[0] + ")"; } else if (optiSkip.IsSet(field_1_options)){ return ToFormulaString() + operands[0]; } else { return ToFormulaString() + "(" + operands[0] + ")"; } }
public <T> T merge(T first, T second) { throw new UnsupportedOperationException(); }
public String toString() { return this.m_message.getKey() + ": " + getLocalizedMessage(); }
public XPath(Parser parser, String path){ this.parser = parser; this.path = path; elements = path.split("\\.");  // assuming `Split()` splits the string by `.` }
public CreateAccountAliasRequest(String accountAlias) { this._accountAlias = accountAlias; }
public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { for (int j = 0; j < iterations; ++j) { int block = blocks[blocksOffset++] & 0xff; values[valuesOffset++] = (block >> 7) & 1; values[valuesOffset++] = (block >> 6) & 1; values[valuesOffset++] = (block >> 5) & 1; values[valuesOffset++] = (block >> 4) & 1; values[valuesOffset++] = (block >> 3) & 1; values[valuesOffset++] = (block >> 2) & 1; values[valuesOffset++] = (block >> 1) & 1; values[valuesOffset++] = block & 1; } }
@Override public PushConnection OpenPush() { throw new NGit.Errors.NotSupportedException(JGitText.Get().pushIsNotSupportedForBundleTransport); }
public static void strCpy(char[] dst, int di, char[] src, int si) { while (src[si] != 0) { dst[di++] = src[si++]; } dst[di] = (char) 0; }
public K getKey() { return mapEntry.getKey(); }
public static int numNonnull(Object[] data){ int n = 0; if (data == null){ return n; } for (Object o : data){ if (o != null){ n++; } } return n; }
public void add(int location, E object) { if (location < 0 || location > _size) { throw new IndexOutOfBoundsException(); } Link<E> newLink = new Link<>(object); Link<E> link = voidLink; if (location < (_size / 2)) { for (int i = 0; i <= location; i++) { link = link.next; } } else { link = last; for (int i = _size; i > location; i--) { link = link.previous; } } Link<E> previous = link.previous; newLink.previous = previous; newLink.next = link; previous.next = newLink; link.previous = newLink; _size++; modCount++; }
public DescribeDomainResponse describeDomain(DescribeDomainRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeDomainRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeDomainResponseUnmarshaller.getInstance()); return invoke(request, options, DescribeDomainResponse.class); }
public void flush() throws NotImplementedException { throw new NotImplementedException(); }
public PersianCharFilterFactory(IDictionary<String, String> args) { super(args); if (!args.isEmpty()) { throw new IllegalArgumentException("Unknown parameters: " + args); } }
public boolean incrementToken() { if (used) { return false; } clearAttributes(); termAttribute.append(value); offsetAttribute.setOffset(0, value.length()); used = true; return true; }
public static java.nio.FloatBuffer allocate(int capacity_1) { if (capacity_1 < 0) { throw new System.ArgumentException(); } return new java.nio.ReadWriteFloatArrayBuffer(capacity_1); }
public NGit.Diff.Edit After(NGit.Diff.Edit cut) { return new NGit.Diff.Edit(cut.endA, endA, cut.endB, endB); }
public UpdateRuleVersionResponse updateRuleVersion(UpdateRuleVersionRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(UpdateRuleVersionRequestMarshaller.getInstance()); options.setResponseUnmarshaller(UpdateRuleVersionResponseUnmarshaller.getInstance()); return invoke(request, options); }
public ListVoiceConnectorTerminationCredentialsResponse listVoiceConnectorTerminationCredentials(ListVoiceConnectorTerminationCredentialsRequest request){ InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ListVoiceConnectorTerminationCredentialsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ListVoiceConnectorTerminationCredentialsResponseUnmarshaller.getInstance()); return invoke(request, options, AmazonChime.class); }
public GetDeploymentTargetResponse getDeploymentTarget(GetDeploymentTargetRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetDeploymentTargetRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetDeploymentTargetResponseUnmarshaller.getInstance()); return invoke<GetDeploymentTargetResponse>(request, options); }
public void setNoChildReport() { letChildReport = false; for (PerfTask task : tasks) { if (task instanceof TaskSequence) { ((TaskSequence) task).setNoChildReport(); } } }
public E get(int location) { try { return a[location]; } catch (IndexOutOfBoundsException e) { throw new IndexOutOfBoundsException("Index: " + location + ", Size: " + a.length); } }
public DescribeDataSetResponse describeDataSet(DescribeDataSetRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeDataSetRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeDataSetResponseUnmarshaller.getInstance()); return invoke(request, options); }
public SkipWorkTreeFilter(int treeIdx){ this.treeIdx = treeIdx; }
public DescribeNetworkInterfacesResponse DescribeNetworkInterfaces() { return DescribeNetworkInterfaces(new DescribeNetworkInterfacesRequest()); }
public boolean contains(int row, int col){ return _firstRow <= row && _lastRow >= row && _firstColumn <= col && _lastColumn >= col; }
public String toString() { return new String(this.chars); }
public FileHeader.PatchType getPatchType() { return patchType; }
@Override public Iterator<K> iterator() { return new Hashtable<K, V>.KeyIterator(this._enclosing); }
public CreateScriptResponse createScript(CreateScriptRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateScriptRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateScriptResponseUnmarshaller.getInstance()); return invoke(request, options); }
@Override public BytesRef next() throws IOException { termUpto++; if (termUpto >= info.terms.size()) { return null; } else { info.terms.get(info.sortedTerms[termUpto], br); return br; } }
@Override public String outputToString(CharsRef output) { return output.toString(); }
public AssociateWebsiteAuthorizationProviderResponse associateWebsiteAuthorizationProvider(AssociateWebsiteAuthorizationProviderRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(AssociateWebsiteAuthorizationProviderRequestMarshaller.Instance); options.setResponseUnmarshaller(AssociateWebsiteAuthorizationProviderResponseUnmarshaller.Instance); return invoke(request, options, AssociateWebsiteAuthorizationProviderResponse.class); }
public void unpop(RevCommit c) { BlockRevQueue.Block b = head; if (b == null) { b = free.newBlock(); b.resetToMiddle(); b.add(c); head = b; tail = b; return; } else { if (b.canUnpop()) { b.unpop(c); return; } } b = free.newBlock(); b.resetToEnd(); b.unpop(c); b.next = head; head = b; }

public ModifyDBParameterGroupRequest(String dbParameterGroupName, List<Parameter> parameters) { this._dbParameterGroupName = dbParameterGroupName; this._parameters = parameters; }
public GetHostedZoneLimitResponse GetHostedZoneLimit(GetHostedZoneLimitRequest request){ var options = new InvokeOptions(); options.RequestMarshaller = GetHostedZoneLimitRequestMarshaller.Instance; options.ResponseUnmarshaller = GetHostedZoneLimitResponseUnmarshaller.Instance; return Invoke<GetHostedZoneLimitResponse>(request, options); }
public void set(int index, long value) { int o = index >>> 6; int b = index & 63; int shift = b << 0; blocks[o] = (blocks[o] & ~(1L << shift)) | (value << shift); }
public RevFilter clone() { return new CommitterRevFilter.PatternSearch(pattern()); }
@Override public String toString() { return "spans(" + m_term.toString() + ")@" + (m_doc == -1 ? "START" : (m_doc == Integer.MAX_VALUE) ? "END" : m_doc + "-" + m_position); }
public boolean canAppendMatch() { for (int i = 0; i < heads.size(); i++) { if (heads.get(i) != LastHead.INSTANCE) { return true; } } return false; }
@Override public int lastIndexOf(String subString, int start) { synchronized (this) { return super.lastIndexOf(subString, start); } }
public DeleteNetworkAclEntryResponse deleteNetworkAclEntry(DeleteNetworkAclEntryRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteNetworkAclEntryRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DeleteNetworkAclEntryResponseUnmarshaller.getInstance()); return invoke(request, options, DeleteNetworkAclEntryResponse.class); }
public AssociateMemberToGroupResponse associateMemberToGroup(AssociateMemberToGroupRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(AssociateMemberToGroupRequestMarshaller.getInstance()); options.setResponseUnmarshaller(AssociateMemberToGroupResponseUnmarshaller.getInstance()); return invoke(request, options, AssociateMemberToGroupResponse.class); }
public static int committer(byte[] b, int ptr) { int sz = b.length; if (ptr == 0) { ptr += 46; } while (ptr < sz && b[ptr] == 'p') { ptr += 48; } if (ptr < sz && b[ptr] == 'a') { ptr = nextLF(b, ptr); } return match(b, ptr, ObjectChecker.committer); }
public int getLineNumber() { return row; }
public SubmoduleUpdateCommand addPath(String path) { paths.add(path); return this; }
public GetPushTemplateResponse getPushTemplate(GetPushTemplateRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetPushTemplateRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetPushTemplateResponseUnmarshaller.getInstance()); return invoke(request, options, GetPushTemplateResponse.class); }
public DescribeVaultResponse describeVault(DescribeVaultRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeVaultRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeVaultResponseUnmarshaller.getInstance()); return invoke(request, options, DescribeVaultResponse.class); }
public DescribeVpcPeeringConnectionsResponse describeVpcPeeringConnections() { return describeVpcPeeringConnections(new DescribeVpcPeeringConnectionsRequest()); }
public ByteBuffer putLong(int index, long value) { throw new NotImplementedException(); }
public RegisterDeviceResponse registerDevice(RegisterDeviceRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(RegisterDeviceRequestMarshaller.getInstance()); options.setResponseUnmarshaller(RegisterDeviceResponseUnmarshaller.getInstance()); return invoke(request, options, RegisterDeviceResponse.class); }
public static Format getById(int id) { for (Format format : values()) { if (format.getId() == id) { return format; } } throw new IllegalArgumentException("Unknown format id: " + id); }
public DeleteAppResponse DeleteApp(DeleteAppRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteAppRequestMarshaller.Instance); options.setResponseUnmarshaller(DeleteAppResponseUnmarshaller.Instance); return Invoke<DeleteAppResponse>(request, options); }
public GetBaiduChannelResponse GetBaiduChannel(GetBaiduChannelRequest request) { InvokeOptions options = new InvokeOptions(); options.RequestMarshaller = GetBaiduChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = GetBaiduChannelResponseUnmarshaller.Instance; return Invoke<GetBaiduChannelResponse>(request, options); }
public FST.BytesReader GetBytesReader() { return fst.GetBytesReader(); }
public static boolean isValidSchemeChar(int index, char c) { if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) { return true; } if (index > 0 && ((c >= '0' && c <= '9') || c == '+' || c == '-' || c == '.')) { return true; } return false; }
public ListAppliedSchemaArnsResponse listAppliedSchemaArns(ListAppliedSchemaArnsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ListAppliedSchemaArnsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ListAppliedSchemaArnsResponseUnmarshaller.getInstance()); return invoke(request, options, ListAppliedSchemaArnsResponse.class); }
public Uri getBaseUri() { return baseUri; } public void setBaseUri(Uri baseUri) { this.baseUri = baseUri; }
Unfortunately, the provided C# code seems to be referencing specific libraries that I am not familiar with, so it is not possible to translate it into concise Java code.
public int compareTo(int[] bs, int p) { int cmp; cmp = Integer.compareUnsigned(w1, bs[p]); if (cmp != 0) { return cmp; } cmp = Integer.compareUnsigned(w2, bs[p + 1]); if (cmp != 0) { return cmp; } cmp = Integer.compareUnsigned(w3, bs[p + 2]); if (cmp != 0) { return cmp; } cmp = Integer.compareUnsigned(w4, bs[p + 3]); if (cmp != 0) { return cmp; } return Integer.compareUnsigned(w5, bs[p + 4]); }
public void removeName(int index) { names.remove(index); workbook.removeName(index); }
Java public GetQueueAttributesRequest(String queueUrl, List<String> attributeNames){ this._queueUrl = queueUrl; this._attributeNames = attributeNames; }
public static boolean[] copyOf(boolean[] original, int newLength) { if (newLength < 0) { throw new NegativeArraySizeException(); } return copyOfRange(original, 0, newLength); }
public static void setEnabled(boolean enabled) { ENABLED = enabled; }
public DeleteLogPatternResponse DeleteLogPattern(DeleteLogPatternRequest request) { InvokeOptions options = new InvokeOptions(); options.RequestMarshaller = DeleteLogPatternRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteLogPatternResponseUnmarshaller.Instance; return Invoke<DeleteLogPatternResponse>(request, options); }
public boolean contains(char[] text, int offset, int length) { return map.containsKey(text, offset, length); }
public int getFirstSheetIndexFromExternSheetIndex(int externSheetNumber){ return linkTable.getFirstInternalSheetIndexForExtIndex(externSheetNumber); }
public boolean handles(String commandLine) { return commandLine.length() > command.length() + 1 && commandLine.charAt(command.length()) == ' ' && commandLine.startsWith(command); }
public static void register(MergeStrategy imp) { register(imp.getName(), imp); }
public long ramBytesUsed() { return ((index != null) ? index.getSizeInBytes() : 0); }
public HostedZone(String id, String name, String callerReference){ _id = id; _name = name; _callerReference = callerReference; }
public GetFindingsResponse GetFindings(GetFindingsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetFindingsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetFindingsResponseUnmarshaller.Instance; return Invoke<GetFindingsResponse>(request, options); }
public DescribeTopicsDetectionJobResponse describeTopicsDetectionJob(DescribeTopicsDetectionJobRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeTopicsDetectionJobRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeTopicsDetectionJobResponseUnmarshaller.getInstance()); return invoke(request, options); }
public boolean processMatch(ValueEval eval) { if (eval instanceof NumericValueEval) { if (minimumValue == null) { minimumValue = eval; } else { double currentValue = ((NumericValueEval)eval).getNumberValue(); double oldValue = ((NumericValueEval)minimumValue).getNumberValue(); if (currentValue < oldValue) { minimumValue = eval; } } } return true; }
public void write(ILittleEndianOutput out1) { out1.writeByte(sid + PtgClass); out1.writeShort(field_1_len_ref_subexpression); }
public static int main(String[] args) { boolean printTree = false; String path = null; for (int i = 0; i < args.length; i++) { if (args[i].equals("-printTree")) { printTree = true; } else { path = args[i]; } } if (args.length != (printTree ? 2 : 1)) { throw new IllegalArgumentException(); } try (Directory dir = FSDirectory.open(new File(path).toPath())) { try (DirectoryTaxonomyReader r = new DirectoryTaxonomyReader(dir)) { PrintStats(r, System.out, printTree); } } catch (IOException e) { e.printStackTrace(); } return 0; }
public void setByteValue(byte value) { if (!(fieldsData instanceof Byte)) { throw new IllegalArgumentException("cannot change value type from " + fieldsData.getClass().getName() + " to Byte"); } fieldsData = new Byte(value); }
public static int Initialize() { return Initialize(DefaultSeed); }
public CachingDoubleValueSource(ValueSource source) { this.m_source = source; m_cache = new HashMap<>(); }
public AttributeDefinition(String attributeName, ScalarAttributeType attributeType){ this.attributeName = attributeName; this.attributeType = attributeType; }
public static String join(Collection<String> parts, String separator) { return org.eclipse.jgit.util.StringUtils.join(parts, separator, separator); }
public ListTaskDefinitionFamiliesResponse listTaskDefinitionFamilies(ListTaskDefinitionFamiliesRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ListTaskDefinitionFamiliesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ListTaskDefinitionFamiliesResponseUnmarshaller.getInstance()); return invoke(request, options, ListTaskDefinitionFamiliesResponse.class); }
public ListComponentsResponse listComponents(ListComponentsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ListComponentsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ListComponentsResponseUnmarshaller.getInstance()); return invoke(request, options); }
public ActivatePhotosRequest() { super("CloudPhoto", "2017-07-11", "ActivatePhotos", "cloudphoto", "openAPI"); setProtocol(ProtocolType.HTTPS); }
public CreateMatchmakingRuleSetResponse createMatchmakingRuleSet(CreateMatchmakingRuleSetRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateMatchmakingRuleSetRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateMatchmakingRuleSetResponseUnmarshaller.getInstance()); return invoke(request, options); }
public ListAvailableManagementCidrRangesResponse listAvailableManagementCidrRanges(ListAvailableManagementCidrRangesRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ListAvailableManagementCidrRangesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ListAvailableManagementCidrRangesResponseUnmarshaller.getInstance()); return invoke(request, options, ListAvailableManagementCidrRangesResponse.class); }
public ObjectIdSubclassMap<ObjectId> GetBaseObjectIds() { if (baseObjectIds != null) { return baseObjectIds; } return new ObjectIdSubclassMap<ObjectId>(); }
public DeletePushTemplateResponse deletePushTemplate(DeletePushTemplateRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeletePushTemplateRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DeletePushTemplateResponseUnmarshaller.getInstance()); return invoke(request, options, DeletePushTemplateResponse.class); }
public CreateDomainEntryResponse createDomainEntry(CreateDomainEntryRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateDomainEntryRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateDomainEntryResponseUnmarshaller.getInstance()); return invoke(request, options, CreateDomainEntryResponse.class); }
public static int getEncodedSize(Object[] values) { int result = values.length * 1; for (int i = 0; i < values.length; i++) { result += getEncodedSize(values[i]); } return result; }
public OpenNLPTokenizerFactory(Map<String, String> args) throws IllegalArgumentException { super(args); sentenceModelFile = require(args, SENTENCE_MODEL); tokenizerModelFile = require(args, TOKENIZER_MODEL); if (!args.isEmpty()) { throw new IllegalArgumentException("Unknown parameters: " + args); } }
@Override public int getInt(int index) { checkIndex(index, libcore.io.SizeOf.INT); return libcore.io.Memory.peekInt(backingArray, offset + index, _order); }
public List<Head> getNextHeads(char c) { if (matches(c)) { return newHeads; } else { return FileNameMatcher.EMPTY_HEAD_LIST; } }
@Override public ByteBuffer putShort(short value) { throw new UnsupportedOperationException(); }
public void writeUnshared(Object object) { throw new UnsupportedOperationException(); }
public int offsetByCodePoints(int index, int codePointOffset) { return Sharpen.CharHelper.offsetByCodePoints(value, 0, count, index, codePointOffset); }
public static int getUniqueAlt(Collection<BitSet> altsets) { BitSet all = getAlts(altsets); if (all.cardinality() == 1) { return all.nextSetBit(0); } return ATN.INVALID_ALT_NUMBER; }
public Date getWhen() { return Sharpen.Extensions.createDate(when); }
public RuleTagToken(String ruleName, int bypassTokenType, String label) throws IllegalArgumentException { if (ruleName == null || ruleName.isEmpty()) { throw new IllegalArgumentException("ruleName cannot be null or empty."); } this.ruleName = ruleName; this.bypassTokenType = bypassTokenType; this.label = label; }
public DisableOrganizationAdminAccountResponse disableOrganizationAdminAccount(DisableOrganizationAdminAccountRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DisableOrganizationAdminAccountRequestMarshaller.Instance); options.setResponseUnmarshaller(DisableOrganizationAdminAccountResponseUnmarshaller.Instance); return invoke(request, options, DisableOrganizationAdminAccountResponse.class); }
public CreateRoomResponse createRoom(CreateRoomRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateRoomRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateRoomResponseUnmarshaller.getInstance()); return invoke(request, options); }
Java public DeleteReplicationGroupResponse deleteReplicationGroup(DeleteReplicationGroupRequest request){ InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteReplicationGroupRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DeleteReplicationGroupResponseUnmarshaller.getInstance()); return invoke(request, options, DeleteReplicationGroupResponse.class); }
public java.nio.CharBuffer decode(java.nio.ByteBuffer buffer) { try { return java.nio.charset.Charset .defaultCharset() .newDecoder() .onMalformedInput(java.nio.charset.CodingErrorAction.REPLACE) .onUnmappableCharacter(java.nio.charset.CodingErrorAction.REPLACE) .decode(buffer); } catch (java.nio.charset.CharacterCodingException ex) { throw new java.lang.Exception(ex.getMessage(), ex); } }
public Distribution(String id, String status, String domainName) { _id = id; _status = status; _domainName = domainName; }
public final Object array() { return protectedArray(); }
public DateWindow1904Record(RecordInputStream in1) { field_1_window = in1.readShort(); }
public DeleteDBSnapshotRequest(String dbSnapshotIdentifier) { _dbSnapshotIdentifier = dbSnapshotIdentifier; }
public ParserExtension getExtension(String key) { if (key == null || !this.extensions.TryGetValue(key, value)) { return null; } return value; }
public void inform(IResourceLoader loader) { try { if (chunkerModelFile != null) { OpenNLPOpsFactory.getChunkerModel(chunkerModelFile, loader); } } catch (IOException e) { throw new IllegalArgumentException(e.toString(), e); } }
public CompleteVaultLockResponse completeVaultLock(CompleteVaultLockRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CompleteVaultLockRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CompleteVaultLockResponseUnmarshaller.getInstance()); return invoke(request, options, CompleteVaultLockResponse.class); }
public int[] getCharIntervals() { return (int[]) _points.clone(); }
public long RamBytesUsed() { return RamUsageEstimator.AlignObjectSize(3 * RamUsageEstimator.NUM_BYTES_OBJECT_REF + 2 * RamUsageEstimator.NUM_BYTES_INT) + RamUsageEstimator.SizeOf(data) + positions.RamBytesUsed() + wordNums.RamBytesUsed(); }
public RegisterInstancesWithLoadBalancerResponse registerInstancesWithLoadBalancer(RegisterInstancesWithLoadBalancerRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(RegisterInstancesWithLoadBalancerRequestMarshaller.getInstance()); options.setResponseUnmarshaller(RegisterInstancesWithLoadBalancerResponseUnmarshaller.getInstance()); return invoke(request, options, RegisterInstancesWithLoadBalancerResponse.class); }
public DescribeClusterUserKubeconfigRequest() { super("CS", "2015-12-15", "DescribeClusterUserKubeconfig", "cs", "openAPI"); setUriPattern("/k8s/[ClusterId]/user_config"); setMethod(MethodType.GET); }
public PrecisionRecord(RecordInputStream in1) { field_1_precision = in1.readShort(); }
@Override public void Serialize(ILittleEndianOutput out1) { out1.WriteShort(LeftRowGutter); out1.WriteShort(TopColGutter); out1.WriteShort(RowLevelMax); out1.WriteShort(ColLevelMax); }
public DeleteVirtualInterfaceResponse deleteVirtualInterface(DeleteVirtualInterfaceRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteVirtualInterfaceRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DeleteVirtualInterfaceResponseUnmarshaller.getInstance()); return invoke(request, options, DeleteVirtualInterfaceResponse.class); }
public Entry getEntry(String name) { if (excludes.contains(name)) { throw new FileNotFoundException(name); } Entry entry = directory.getEntry(name); return wrapEntry(entry); }
public String toString() { StringBuilder buffer = new StringBuilder(); buffer.append("[BACKUP]\n"); buffer.append("    .backup          = ").append(StringUtil.toHexString(backup)).append("\n"); buffer.append("[/BACKUP]\n"); return buffer.toString(); }
public DeleteVoiceConnectorOriginationResponse deleteVoiceConnectorOrigination(DeleteVoiceConnectorOriginationRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteVoiceConnectorOriginationRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DeleteVoiceConnectorOriginationResponseUnmarshaller.getInstance()); return invoke(request, options, DeleteVoiceConnectorOriginationResponse.class); }
public OpenStringBuilder Append(char c) { Write(c); return this; }
public static long generationFromSegmentsFileName(String fileName) { if (fileName.equals(IndexFileNames.SEGMENTS)) { return 0; } else if (fileName.startsWith(IndexFileNames.SEGMENTS)) { return Long.parseLong(fileName.substring(1 + IndexFileNames.SEGMENTS.length()), Character.MAX_RADIX); } else { throw new IllegalArgumentException("fileName \"" + fileName + "\" is not a segments file"); } }
public static NGit.Transport.TagOpt fromOption(String o) { if (o == null || o.length() == 0) { return AUTO_FOLLOW; } for (NGit.Transport.TagOpt tagopt : Values()) { if (tagopt.option().equals(o)) { return tagopt; } } throw new ArgumentException(MessageFormat.format(JGitText.get().invalidTagOption, o)); }
public StartContentModerationResponse startContentModeration(StartContentModerationRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(StartContentModerationRequestMarshaller.getInstance()); options.setResponseUnmarshaller(StartContentModerationResponseUnmarshaller.getInstance()); return invoke(request, options, StartContentModerationResponse.class); }
public static String quoteReplacement(String s) { StringBuilder result = new StringBuilder(s.length()); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); if (c == '\\' || c == '$') { result.append('\\'); } result.append(c); } return result.toString(); }
public void set(V newValue) { value = newValue; }
public QueryParserTokenManager(ICharStream stream) { InitBlock(); m_input_stream = stream; }
public long valueFor(double elapsed) { double val; if (modBy == 0) val = elapsed / factor; else val = elapsed / factor % modBy; if (type == '0') return Math.round(val); else return (long) val; }
@Override public java.nio.LongBuffer get(long[] dst, int dstOffset, int longCount) { byteBuffer.limit(_limit * libcore.io.SizeOf.LONG); byteBuffer.position(_position * libcore.io.SizeOf.LONG); if (byteBuffer instanceof java.nio.DirectByteBuffer) { ((java.nio.DirectByteBuffer) byteBuffer).get(dst, dstOffset, longCount); } else { ((java.nio.HeapByteBuffer) byteBuffer).get(dst, dstOffset, longCount); } this._position += longCount; return this; }
public void removeErrorListeners() { listeners = new IAntlrErrorListener<Symbol>[0]; }
public CommonTokenStream(ITokenSource tokenSource, int channel) { super(tokenSource); this.channel = channel; }
public ListObjectPoliciesResponse listObjectPolicies(ListObjectPoliciesRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ListObjectPoliciesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ListObjectPoliciesResponseUnmarshaller.getInstance()); return invoke(request, options, ListObjectPoliciesResponse.class); }
public ObjectToPack(AnyObjectId src, int type) { super(src); flags = type << TYPE_SHIFT; }
public int Stem(char[] s, int len) { int numVowels = NumVowels(s, len); for (int i = 0; i < affixes.length; i++) { Affix affix = affixes[i]; if (numVowels > affix.vc && len >= affix.affix.length() + 3 && StemmerUtil.EndsWith(s, len, affix.affix)) { len -= affix.affix.length(); return affix.palatalizes ? Unpalatalize(s, len) : len; } } return len; }
public void recover(Parser recognizer, RecognitionException e) { if (lastErrorIndex == ((TokenStream)recognizer.getInputStream()).index() && lastErrorStates != null && lastErrorStates.contains(recognizer.getState())) { recognizer.consume(); } lastErrorIndex = ((TokenStream)recognizer.getInputStream()).index(); if (lastErrorStates == null) { lastErrorStates = new IntervalSet(); } lastErrorStates.add(recognizer.getState()); IntervalSet followSet = getErrorRecoverySet(recognizer); consumeUntil(recognizer, followSet); }
public String ToFormulaString() { String value = field_3_string; int len = value.length(); StringBuilder sb = new StringBuilder(len + 4); sb.append(FORMULA_DELIMITER); for (int i = 0; i < len; i++) { char c = value.charAt(i); if (c == FORMULA_DELIMITER) { sb.append(FORMULA_DELIMITER); } sb.append(c); } sb.append(FORMULA_DELIMITER); return sb.toString(); }
public UnlinkFaceRequest() { super("LinkFace", "2018-07-20", "UnlinkFace"); setProtocol(ProtocolType.HTTPS); setMethod(MethodType.POST); }
public ConfigurationOptionSetting(String awsNamespace, String optionName, String value) { _awsNamespace = awsNamespace; _optionName = optionName; _value = value; }
public String getFully(String key) { StringBuilder result = new StringBuilder(m_tries.size() * 2); for (int i = 0; i < m_tries.size(); i++) { String r = m_tries.get(i).getFully(key); if (r == null || (r.length() == 1 && r.charAt(0) == EOM)) { return result.toString(); } result.append(r); } return result.toString(); }
public DescribeMountTargetSecurityGroupsResponse describeMountTargetSecurityGroups(DescribeMountTargetSecurityGroupsRequest request) { var options = new InvokeOptions(); options.setRequestMarshaller(DescribeMountTargetSecurityGroupsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeMountTargetSecurityGroupsResponseUnmarshaller.getInstance()); return invoke(request, options, DescribeMountTargetSecurityGroupsResponse.class); }
public GetApiMappingResponse getApiMapping(GetApiMappingRequest request) { var options = new InvokeOptions(); options.setRequestMarshaller(GetApiMappingRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetApiMappingResponseUnmarshaller.getInstance()); return invoke(request, options, GetApiMappingResponse.class); }
public HttpRequest(String strUrl) { Url = strUrl; Headers = new HashMap<String, String>(); }
public MemFuncPtg(int subExprLen) { field_1_len_ref_subexpression = subExprLen; }
public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field, Comparator<TermStats> comparer) { TermStatsQueue tiq = null; if (field != null) { Fields fields = MultiFields.getFields(reader); if (fields == null) { throw new Exception("field " + field + " not found"); } Terms terms = fields.terms(field); if (terms != null) { TermsEnum termsEnum = terms.iterator(); tiq = new TermStatsQueue(numTerms, comparer); tiq.fill(field, termsEnum); } } else { Fields fields = MultiFields.getFields(reader); if (fields == null) { throw new Exception("no fields found for this index"); } tiq = new TermStatsQueue(numTerms, comparer); for (String fieldName : fields) { Terms terms = fields.terms(fieldName); if (terms != null) { tiq.fill(fieldName, terms.iterator()); } } } TermStats[] result = new TermStats[tiq.size()]; int count = tiq.size() - 1; while (!tiq.isEmpty()) { result[count] = tiq.pop(); count--; } return result; }
public DeleteApnsVoipChannelResponse deleteApnsVoipChannel(DeleteApnsVoipChannelRequest request) { var options = new InvokeOptions(); options.setRequestMarshaller(DeleteApnsVoipChannelRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DeleteApnsVoipChannelResponseUnmarshaller.getInstance()); return invoke(request, options, DeleteApnsVoipChannelResponse.class); }
public ListFacesResponse listFaces(ListFacesRequest request) { var options = new InvokeOptions(); options.setRequestMarshaller(ListFacesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ListFacesResponseUnmarshaller.getInstance()); return invoke(request, options, ListFacesResponse.class); }
public ShapeFieldCacheDistanceValueSource(SpatialContext ctx, ShapeFieldCacheProvider<IPoint> provider, IPoint from, double multiplier) { this.ctx = ctx; this.from = from; this.provider = provider; this.multiplier = multiplier; }
public char get(int index) { checkIndex(index); return sequence[index]; }
public UpdateConfigurationProfileResponse updateConfigurationProfile(UpdateConfigurationProfileRequest request) { var options = new InvokeOptions(); options.setRequestMarshaller(UpdateConfigurationProfileRequestMarshaller.getInstance()); options.setResponseUnmarshaller(UpdateConfigurationProfileResponseUnmarshaller.getInstance()); return invoke(request, options); }
public DescribeLifecycleHooksResponse describeLifecycleHooks(DescribeLifecycleHooksRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeLifecycleHooksRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeLifecycleHooksResponseUnmarshaller.getInstance()); return invoke(request, options, DescribeLifecycleHooksResponse.class); }
public DescribeHostReservationsResponse describeHostReservations(DescribeHostReservationsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeHostReservationsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeHostReservationsResponseUnmarshaller.getInstance()); return invoke(request, options, DescribeHostReservationsResponse.class); }
public static PredictionContext FromRuleContext(ATN atn, RuleContext outerContext) { if (outerContext == null) outerContext = ParserRuleContext.EMPTY; if (outerContext.getParent() == null || outerContext == ParserRuleContext.EMPTY) return PredictionContext.EMPTY; PredictionContext parent = PredictionContext.FromRuleContext(atn, outerContext.getParent()); ATNState state = atn.states[outerContext.invokingState]; RuleTransition transition = (RuleTransition)state.transition(0); return parent.getChild(transition.followState.stateNumber); }
@Override public String toString() { StringBuilder buffer = new StringBuilder(); buffer.append("[SXVDEX]\n"); buffer.append("    .grbit1 =").append(HexDump.intToHex(grbit1)).append("\n"); buffer.append("    .grbit2 =").append(HexDump.byteToHex(grbit2)).append("\n"); buffer.append("    .citmShow =").append(HexDump.byteToHex(citmShow)).append("\n"); buffer.append("    .isxdiSort =").append(HexDump.shortToHex(isxdiSort)).append("\n"); buffer.append("    .isxdiShow =").append(HexDump.shortToHex(isxdiShow)).append("\n"); buffer.append("    .subName =").append(subName).append("\n"); buffer.append("[/SXVDEX]\n"); return buffer.toString(); }
public String toString() { StringBuilder r = new StringBuilder(); r.append("BlameResult: "); r.append(getResultPath()); return r.toString(); }
public ListChangeSetsResponse listChangeSets(ListChangeSetsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ListChangeSetsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ListChangeSetsResponseUnmarshaller.getInstance()); return invoke(request, options, ListChangeSetsResponse.class); }
public boolean isAllowNonFastForwards() { return allowNonFastForwards; }
public FeatRecord() { futureHeader = new FtrHeader(); futureHeader.RecordType = sid; }
@Override public java.nio.ShortBuffer put(short c) { throw new java.nio.ReadOnlyBufferException(); }
public void setQuery(String query) { this.query = query; this.m_message = new Message(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, ""); }
public StashApplyCommand stashApply() { return new StashApplyCommand(repo); }
public Collection<Object> nameSet() { return dictionaryNameToID.keySet(); }
public static int getEffectivePort(String scheme, int specifiedPort) { if (specifiedPort != -1) { return specifiedPort; } if (scheme.equalsIgnoreCase("http")) { return 80; } else if (scheme.equalsIgnoreCase("https")) { return 443; } else { return -1; } }
public ListAssessmentTemplatesResponse listAssessmentTemplates(ListAssessmentTemplatesRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ListAssessmentTemplatesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ListAssessmentTemplatesResponseUnmarshaller.getInstance()); return invoke(request, options); }
public RestoreFromClusterSnapshotResponse restoreFromClusterSnapshot(RestoreFromClusterSnapshotRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(RestoreFromClusterSnapshotRequestMarshaller.Instance); options.setResponseUnmarshaller(RestoreFromClusterSnapshotResponseUnmarshaller.Instance); return invoke(request, options); }
public void addShape(HSSFShape shape){ shape.setPatriarch(this.getPatriarch()); shape.setParent(this); shapes.add(shape); }
@Override public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } FacetEntry that = (FacetEntry) o; if (count != that.count) { return false; } if (!value.equals(that.value)) { return false; } return true; }
public static int prev(byte[] b, int ptr, char chrA) { if (ptr == b.length) { --ptr; } while (ptr >= 0) { if (b[ptr--] == chrA) { return ptr; } } return ptr; }
public boolean isDeltaRepresentation() { return deltaBase != null; }
public Token emitEOF() { int cpos = getColumn(); int line = getLine(); Token eof = _factory.create(_tokenFactorySourcePair, TokenConstants.EOF, null, TokenConstants.DEFAULT_CHANNEL, _input.index(), _input.index() - 1, line, cpos); emit(eof); return eof; }
public UpdateUserRequest(String userName){ this._userName = userName; }
public RevFilter negate() { return NotRevFilter.create(this); }
public void setTagger(PersonIdent taggerIdent){ tagger = taggerIdent; }
public static BufferSize automatic() { long max, total, free; try { Process proc = Runtime.getRuntime().exec("tasklist"); BufferedReader input = new BufferedReader(new InputStreamReader(proc.getInputStream())); String line = null; while ((line = input.readLine()) != null) { if (line.startsWith("ProcessName")) { break; } } String[] parts = line.split("\\s+"); long pid = Long.parseLong(parts[parts.length - 2]); proc = Runtime.getRuntime().exec("powershell -command \"&{get-process -id " + pid + " | select PrivateMemorySize, VirtualMemorySize, PeakVirtualMemorySize | Format-List}\""); input = new BufferedReader(new InputStreamReader(proc.getInputStream())); while ((line = input.readLine()) != null) { if (line.startsWith("VirtualMemorySize")) { total = Long.parseLong(line.substring(line.indexOf(":") + 1).trim()); } else if (line.startsWith("PeakVirtualMemorySize")) { max = Long.parseLong(line.substring(line.indexOf(":") + 1).trim()); } else if (line.startsWith("PrivateMemorySize")) { free = Long.parseLong(line.substring(line.indexOf(":") + 1).trim()); } } } catch (Exception e) { e.printStackTrace(); } long totalAvailableBytes = max - total + free; long sortBufferByteSize = free / 2; long minBufferSizeBytes = MIN_BUFFER_SIZE_MB * MB; if (sortBufferByteSize < minBufferSizeBytes || totalAvailableBytes > 10 * minBufferSizeBytes) { if (totalAvailableBytes / 2 > minBufferSizeBytes) { sortBufferByteSize = totalAvailableBytes / 2; } else { sortBufferByteSize = Math.max(ABSOLUTE_MIN_SORT_BUFFER_SIZE, sortBufferByteSize); } } return new BufferSize(Math.min(Integer.MAX_VALUE, sortBufferByteSize)); }
public static int trimTrailingWhitespace(byte[] raw, int start, int end) { int ptr = end - 1; while (start <= ptr && isWhitespace(raw[ptr])) { ptr--; } return ptr + 1; } private static boolean isWhitespace(byte b) { return b == ' ' || b == '\t' || b == '\n' || b == '\r' || b == '\f'; }
public TopMarginRecord(RecordInputStream in1){ field_1_margin = in1.readDouble(); }
public RetrieveEnvironmentInfoRequest(EnvironmentInfoType infoType) { this._infoType = infoType; }
public CreatePlayerSessionsResponse createPlayerSessions(CreatePlayerSessionsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreatePlayerSessionsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreatePlayerSessionsResponseUnmarshaller.getInstance()); return invoke(request, options, CreatePlayerSessionsResponse.class); }
public CreateProxySessionResponse createProxySession(CreateProxySessionRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateProxySessionRequestMarshaller.Instance); options.setResponseUnmarshaller(CreateProxySessionResponseUnmarshaller.Instance); return invoke(request, options); }
public int getObjectType() { return type; }
public String getScheme() { return scheme; }
@Override public void characters(char[] ch, int start, int length) { contents.append(ch, start, length); }
public FetchAlbumTagPhotosRequest() { super("CloudPhoto", "2017-07-11", "FetchAlbumTagPhotos", "cloudphoto", "openAPI"); setProtocol(ProtocolType.HTTPS); }
public DeleteMembersResponse deleteMembers(DeleteMembersRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteMembersRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DeleteMembersResponseUnmarshaller.getInstance()); return invoke(request, options); }
public GetContactReachabilityStatusResponse getContactReachabilityStatus(GetContactReachabilityStatusRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetContactReachabilityStatusRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetContactReachabilityStatusResponseUnmarshaller.getInstance()); return invoke(request, options, GetContactReachabilityStatusResponse.class); }
This code is incomplete and missing some context that is required for translation. Please provide the necessary context or the full code so that I can assist you better.
public E last() { return backingMap.lastKey(); }
public CreateStreamingDistributionResponse createStreamingDistribution(CreateStreamingDistributionRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateStreamingDistributionRequestMarshaller.Instance); options.setResponseUnmarshaller(CreateStreamingDistributionResponseUnmarshaller.Instance); return invoke(request, options); }
public boolean isAbsolute() { return absolute; }
Java public DisableAddOnResponse disableAddOn(DisableAddOnRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DisableAddOnRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DisableAddOnResponseUnmarshaller.getInstance()); return invoke(request, options, DisableAddOnResponse.class); }
Java public DescribeAliasResponse describeAlias(DescribeAliasRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeAliasRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeAliasResponseUnmarshaller.getInstance()); return invoke(request, options, DescribeAliasResponse.class); }
Java @Override public void next(int delta) { while (--delta >= 0) { if (currentSubtree != null) { ptr += currentSubtree.getEntrySpan(); } else { ptr++; } if (eof) { break; } parseEntry(); } }
Java @Override public RevFilter clone() { return new AndRevFilter.Binary(a.clone(), b.clone()); }
Java @Override public TextReader create(TextReader input) { return new PersianCharFilter(input); }
Java public String option() { return option; }
Java @Override public String toString() { StringBuilder sb = new StringBuilder("["); for (Object item : this) { if (sb.length() > 1) { sb.append(", "); } sb.append(item); } return sb.append(']').toString(); }
Java public DescribeSignalingChannelResponse describeSignalingChannel(DescribeSignalingChannelRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeSignalingChannelRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeSignalingChannelResponseUnmarshaller.getInstance()); return invoke(request, options, DescribeSignalingChannelResponse.class); }
Java public AttachStaticIpResponse attachStaticIp(AttachStaticIpRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(AttachStaticIpRequestMarshaller.getInstance()); options.setResponseUnmarshaller(AttachStaticIpResponseUnmarshaller.getInstance()); return invoke(request, options, AttachStaticIpResponse.class); }
Java @Override public String toString() { StringBuilder sb = new StringBuilder(64); CellReference crA = new CellReference(_firstRowIndex, _firstColumnIndex, false, false); CellReference crB = new CellReference(_lastRowIndex, _lastColumnIndex, false, false); sb.append(getClass().getSimpleName()); sb.append(" [").append(crA.formatAsString()).append(':').append(crB.formatAsString()).append("]"); return sb.toString(); }
Java public BloomFilteringPostingsFormat(PostingsFormat delegatePostingsFormat, BloomFilterFactory bloomFilterFactory) { super(); this._delegatePostingsFormat = delegatePostingsFormat; this._bloomFilterFactory = bloomFilterFactory; }
Java public ListTemplatesResponse listTemplates(ListTemplatesRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ListTemplatesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ListTemplatesResponseUnmarshaller.getInstance()); return invoke(request, options, ListTemplatesResponse.class); }
Java public TimerThread(long resolution, Counter counter) { super(THREAD_NAME); this.resolution = resolution; this.counter = counter; this.setDaemon(true); }
Java public DrawingRecord() { recordData = new byte[0]; }
Java public ListDirectoriesResponse listDirectories(ListDirectoriesRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ListDirectoriesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ListDirectoriesResponseUnmarshaller.getInstance()); return invoke(request, options, ListDirectoriesResponse.class); }
public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { for (int j = 0; j < iterations; ++j) { int block = blocks[blocksOffset++] & 0xff; values[valuesOffset++] = (block >>> 7) & 1; values[valuesOffset++] = (block >>> 6) & 1; values[valuesOffset++] = (block >>> 5) & 1; values[valuesOffset++] = (block >>> 4) & 1; values[valuesOffset++] = (block >>> 3) & 1; values[valuesOffset++] = (block >>> 2) & 1; values[valuesOffset++] = (block >>> 1) & 1; values[valuesOffset++] = block & 1; } }
public GroupingSearch disableCaching() { this.maxCacheRAMMB = null; this.maxDocsToCache = null; return this; }
public static int idealByteArraySize(int need) { for (int i = 4; i < 32; i++) { if (need <= (1 << i) - 12) { return (1 << i) - 12; } } return need; }
public UpdateAssessmentTargetResponse updateAssessmentTarget(UpdateAssessmentTargetRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(UpdateAssessmentTargetRequestMarshaller.getInstance()); options.setResponseUnmarshaller(UpdateAssessmentTargetResponseUnmarshaller.getInstance()); return invoke(request, options, UpdateAssessmentTargetResponse.class); }
public ModifyVolumeResponse modifyVolume(ModifyVolumeRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ModifyVolumeRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ModifyVolumeResponseUnmarshaller.getInstance()); return invoke(request, options, ModifyVolumeResponse.class); }
@Override public Cell merge(Cell m, Cell e) { if (m.cmd == e.cmd && m.ref.equals(e.ref) && m.skip == e.skip) { Cell c = new Cell(m); c.cnt += e.cnt; return c; } else { return null; } }
public ByteBuffer Read(int length, long position) { if (position >= Size) throw new IllegalArgumentException("Position " + position + " past the end of the file"); ByteBuffer dst; int worked = -1; if (writable) { dst = ByteBuffer.allocate(length); worked = 0; } else { fileStream.position(position); dst = ByteBuffer.allocate(length); worked = IOUtils.readFully(fileStream, dst.array()); } if (worked == -1) throw new IllegalArgumentException("Position " + position + " past the end of the file"); dst.position(0); return dst; }
public RespondActivityTaskCompletedResponse respondActivityTaskCompleted(RespondActivityTaskCompletedRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(RespondActivityTaskCompletedRequestMarshaller.getInstance()); options.setResponseUnmarshaller(RespondActivityTaskCompletedResponseUnmarshaller.getInstance()); return invoke(request, options, RespondActivityTaskCompletedResponse.class); }
public synchronized void incrementProgressBy(int diff) { setProgress(mProgress + diff); }
public WorkingTreeIterator.MetadataDiff compareMetadata(DirCacheEntry entry) { if (entry.isAssumeValid()) { return WorkingTreeIterator.MetadataDiff.EQUAL; } if (entry.isUpdateNeeded()) { return WorkingTreeIterator.MetadataDiff.DIFFER_BY_METADATA; } if (!entry.isSmudged() && entry.getLength() != (int)getEntryLength()) { return WorkingTreeIterator.MetadataDiff.DIFFER_BY_METADATA; } if (isModeDifferent(entry.getRawMode())) { return WorkingTreeIterator.MetadataDiff.DIFFER_BY_METADATA; } long cacheLastModified = entry.getLastModified(); long fileLastModified = getEntryLastModified(); if (cacheLastModified % 1000 == 0 || fileLastModified % 1000 == 0) { cacheLastModified = cacheLastModified - cacheLastModified % 1000; fileLastModified = fileLastModified - fileLastModified % 1000; } if (fileLastModified != cacheLastModified) { return WorkingTreeIterator.MetadataDiff.DIFFER_BY_TIMESTAMP; } else { if (!entry.isSmudged()) { return WorkingTreeIterator.MetadataDiff.EQUAL; } else { return WorkingTreeIterator.MetadataDiff.SMUDGED; } } }
public static NumberRecord ConvertToNumberRecord(RKRecord rk){ NumberRecord num = new NumberRecord(); num.setColumn(rk.Column); num.setRow(rk.Row); num.setXFIndex(rk.XFIndex); num.setValue(rk.RKNumber); return num; }
public java.nio.CharBuffer put(char[] src, int srcOffset, int charCount) { byteBuffer.limit(_limit * libcore.io.SizeOf.CHAR); byteBuffer.position(_position * libcore.io.SizeOf.CHAR); if (byteBuffer instanceof java.nio.ReadWriteDirectByteBuffer) { ((java.nio.ReadWriteDirectByteBuffer)byteBuffer).put(src, srcOffset, charCount); } else { ((java.nio.ReadWriteHeapByteBuffer)byteBuffer).put(src, srcOffset, charCount); } this._position += charCount; return this; }
public int getCells() { int size = 0; for (char c : cells.keySet()) { Cell e = at(c); if (e.cmd >= 0 || e.ref >= 0) { size++; } } return size; }
public BeiderMorseFilterFactory(IDictionary<String, String> args) { super(args); NameType nameType = NameType.valueOf(get(args, "nameType", NameType.GENERIC.toString()).toUpperCase(Locale.ROOT)); RuleType ruleType = RuleType.valueOf(get(args, "ruleType", RuleType.APPROX.toString()).toUpperCase(Locale.ROOT)); boolean concat = getBoolean(args, "concat", true); engine = new PhoneticEngine(nameType, ruleType, concat); Set<String> langs = getSet(args, "languageSet"); languageSet = (null == langs || (1 == langs.size() && langs.contains("auto"))) ? null : LanguageSet.from(langs); if (!(args.size() == 0)) { throw new IllegalArgumentException("Unknown parameters: " + args); } }
public static double varp(double[] v) { double r = Double.NaN; if (v != null && v.length > 1) { r = devsq(v) / v.length; } return r; }
public PersianNormalizationFilterFactory(Map<String, String> args) { super(args); if (!args.isEmpty()) { throw new IllegalArgumentException("Unknown parameters: " + args); } }
public static WeightedTerm[] getTerms(Query query, boolean prohibited, String fieldName) { HashSet<WeightedTerm> terms = new HashSet<>(); if (fieldName != null) { fieldName = fieldName.intern(); } getTerms(query, terms, prohibited, fieldName); return terms.toArray(new WeightedTerm[0]); }
public DeleteDocumentationPartResponse DeleteDocumentationPart(DeleteDocumentationPartRequest request){ InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteDocumentationPartRequestMarshaller.Instance); options.setResponseUnmarshaller(DeleteDocumentationPartResponseUnmarshaller.Instance); return invoke(request, options, DeleteDocumentationPartResponse.class); }
public String toString(){ StringBuilder buffer = new StringBuilder(); buffer.append("[CHART]\n"); buffer.append("    .x                    = ").append("0x").append(Integer.toHexString(X)).append(" (").append(X).append(" )"); buffer.append(System.lineSeparator()); buffer.append("    .y                    = ").append("0x").append(Integer.toHexString(Y)).append(" (").append(Y).append(" )"); buffer.append(System.lineSeparator()); buffer.append("    .width                = ").append("0x").append(Integer.toHexString(Width)).append(" (").append(Width).append(" )"); buffer.append(System.lineSeparator()); buffer.append("    .height               = ").append("0x").append(Integer.toHexString(Height)).append(" (").append(Height).append(" )"); buffer.append(System.lineSeparator()); buffer.append("[/CHART]\n"); return buffer.toString(); }
public short get(int index) { checkIndex(index); return backingArray[offset + index]; }
@Override public String toString() { return image; }
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) { try { AreaEval reA = evaluateRef(arg0); AreaEval reB = evaluateRef(arg1); AreaEval result = resolveRange(reA, reB); if (result == null) { return ErrorEval.NULL_INTERSECTION; } return result; } catch (EvaluationException e) { return e.getErrorEval(); } }
public void clear() { weightBySpanQuery.clear(); }
public int findEndOffset(StringBuilder buffer, int start) { if (start > buffer.length() || start < 0) return start; bi.setText(buffer.substring(start, buffer.length())); return bi.next() + start; }
public SrndQuery PrimaryQuery() throws ParseException { SrndQuery q; switch ((jj_ntk == -1) ? Jj_ntk() : jj_ntk) { case RegexpToken.LPAREN: Jj_consume_token(RegexpToken.LPAREN); q = FieldsQuery(); Jj_consume_token(RegexpToken.RPAREN); break; case RegexpToken.OR: case RegexpToken.AND: case RegexpToken.W: case RegexpToken.N: q = PrefixOperatorQuery(); break; case RegexpToken.TRUNCQUOTED: case RegexpToken.QUOTED: case RegexpToken.SUFFIXTERM: case RegexpToken.TRUNCTERM: case RegexpToken.TERM: q = SimpleTerm(); break; default: jj_la1[5] = jj_gen; Jj_consume_token(-1); throw new ParseException(); } OptionalWeights(q); return q; }
public DeleteApiKeyResponse DeleteApiKey(DeleteApiKeyRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteApiKeyRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DeleteApiKeyResponseUnmarshaller.getInstance()); return invoke(request, options); }
public InsertTagsRequest() { super("Ots", "2016-06-20", "InsertTags", "ots", "openAPI"); setMethod(MethodType.POST); }
public DeleteUserByPrincipalIdResponse deleteUserByPrincipalId(DeleteUserByPrincipalIdRequest request) { var options = new InvokeOptions(); options.setRequestMarshaller(DeleteUserByPrincipalIdRequestMarshaller.Instance); options.setResponseUnmarshaller(DeleteUserByPrincipalIdResponseUnmarshaller.Instance); return Invoke<DeleteUserByPrincipalIdResponse>(request, options); }
public DescribeNetworkInterfacesResponse describeNetworkInterfaces(DescribeNetworkInterfacesRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeNetworkInterfacesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeNetworkInterfacesResponseUnmarshaller.getInstance()); return invoke(request, options); }
@Override public int serialize(int offset, byte[] data, EscherSerializationListener listener) { listener.beforeRecordSerialize(offset, getRecordId(), this); LittleEndian.putShort(data, offset, getOptions()); LittleEndian.putShort(data, offset + 2, getRecordId()); LittleEndian.putInt(data, offset + 4, 8); LittleEndian.putInt(data, offset + 8, field_1_numShapes); LittleEndian.putInt(data, offset + 12, field_2_lastMSOSPID); listener.afterRecordSerialize(offset + 16, getRecordId(), getRecordSize(), this); return getRecordSize(); }
public CreateSecurityConfigurationResponse createSecurityConfiguration(CreateSecurityConfigurationRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateSecurityConfigurationRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateSecurityConfigurationResponseUnmarshaller.getInstance()); return invoke(request, options, CreateSecurityConfigurationResponse.class); }
public DescribeClientVpnConnectionsResponse describeClientVpnConnections(DescribeClientVpnConnectionsRequest request) { var options = new InvokeOptions(); options.setRequestMarshaller(DescribeClientVpnConnectionsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeClientVpnConnectionsResponseUnmarshaller.getInstance()); return invoke(request, options, DescribeClientVpnConnectionsResponse.class); }
public static void fill(double[] array, double value) { for (int i = 0; i < array.length; i++) { array[i] = value; } }
public boolean hasNext() { return pos < maxColumn; }
public DocsEnum reset(int[] postings) { this.postings = postings; upto = -2; freq = 0; return this; }
public boolean hasAll(RevFlagSet set) { return (flags & set.mask) == set.mask; }
public ModifyAccountResponse modifyAccount(ModifyAccountRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ModifyAccountRequestMarshaller.Instance); options.setResponseUnmarshaller(ModifyAccountResponseUnmarshaller.Instance); return invoke(request, options, ModifyAccountResponse.class); }
public Token LT(int k) { lazyInit(); if (k == 0) { return null; } if (k < 0) { return lb(-k); } int i = p + k - 1; sync(i); if (i >= tokens.size()) { return tokens.get(tokens.size() - 1); } return tokens.get(i); }
public void removeSheet(int sheetIndex) { if (boundsheets.size() > sheetIndex) { records.remove(records.getBspos() - (boundsheets.size() - 1) + sheetIndex); boundsheets.remove(sheetIndex); fixTabIdRecord(); } int sheetNum1Based = sheetIndex + 1; for (int i = 0; i < numNames; i++) { NameRecord nr = getNameRecord(i); if (nr.getSheetNumber() == sheetNum1Based) { nr.setSheetNumber(0); } else if (nr.getSheetNumber() > sheetNum1Based) { nr.setSheetNumber(nr.getSheetNumber() - 1); } } if (linkTable != null) { for (int i = sheetIndex + 1; i < numSheets() + 1; i++) { linkTable.removeSheet(i); } } }
public void removeName(int index) { names.remove(index); workbook.removeName(index); }
public boolean equals(Object o) { if (!(o instanceof Property)) { return false; } Property p = (Property) o; Object pValue = p.getValue(); long pId = p.getID(); if (id != pId || (id != 0 && !typesAreEqual(type, p.getType()))) { return false; } if (value == null && pValue == null) { return true; } if (value == null || pValue == null) { return false; } Type valueClass = value.getClass(); Type pValueClass = pValue.getClass(); if (!(valueClass.isAssignableFrom(pValueClass)) && !(pValueClass.isAssignableFrom(valueClass))) { return false; } if (value instanceof byte[]) { return Arrays.equals((byte[]) value, (byte[]) pValue); } return value.equals(pValue); }
public GetRepoBuildListRequest() { super("cr", "2016-06-07", "GetRepoBuildList", "cr", "openAPI"); uriPattern = "/repos/[RepoNamespace]/[RepoName]/build"; method = MethodType.GET; }
public MessageWriter() { buf = new ByteArrayOutputStream(); enc = new OutputStreamWriter(getRawStream(), Constants.CHARSET); }
public void append(RecordBase r) { _recs.add(r); }
@Override public void close() throws IOException { if (this.read(this.skipBuffer) != -1 || this.actualSize != this.expectedSize) { throw new CorruptObjectException(MessageFormat.format(JGitText.get().packfileCorruptionDetected, JGitText.get().wrongDecompressedLength)); } int used = this._enclosing.bAvail - this.inf.getRemaining(); if (0 < used) { this._enclosing.onObjectData(this.src, this._enclosing.buf, this.p, used); this._enclosing.use(used); } this.inf.reset(); }
public DescribeModelPackageResponse describeModelPackage(DescribeModelPackageRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeModelPackageRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeModelPackageResponseUnmarshaller.getInstance()); return invoke(request, options); }
public void Construct(CellValueRecordInterface rec, RecordStream rs, SharedValueManager sfh) { if (rec instanceof FormulaRecord) { FormulaRecord formulaRec = (FormulaRecord)rec; StringRecord cachedText = null; Type nextClass = rs.PeekNextClass(); if (nextClass == typeof(StringRecord)) { cachedText = (StringRecord)rs.GetNext(); } else { cachedText = null; } InsertCell(new FormulaRecordAggregate(formulaRec, cachedText, sfh)); } else { InsertCell(rec); } }
@Override public Object clone() { return new DeflateDecompressor(); }
public UpdateS3ResourcesResponse UpdateS3Resources(UpdateS3ResourcesRequest request) { InvokeOptions options = new InvokeOptions(); options.RequestMarshaller = UpdateS3ResourcesRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateS3ResourcesResponseUnmarshaller.Instance; return Invoke<UpdateS3ResourcesResponse>(request, options); }
public GroupQueryNode(IQueryNode query) { if (query == null) { throw new QueryNodeError(new Message(QueryParserMessages.PARAMETER_VALUE_NOT_SUPPORTED, "query", "null")); } Allocate(); IsLeaf = false; Add(query); }
public String ToQueryString(IEscapeQuerySyntax escaper) { StringBuilder path = new StringBuilder(); path.append("/").append(GetFirstPathElement()); for (QueryText pathelement : GetPathElements(1)) { String value = escaper.Escape( new StringCharSequence(pathelement.Value), CultureInfo.InvariantCulture, EscapeQuerySyntaxType.STRING ).toString(); path.append("/\"").append(value).append("\""); } return path.toString(); }
public void removeCellComment() { HSSFComment comment2 = _sheet.findCellComment(_record.getRow(), _record.getColumn()); comment = null; if (comment2 == null) { return; } ((HSSFPatriarch) _sheet.getDrawingPatriarch()).removeShape(comment2); }
public void reset() { count = 0; assert forwardCount == 0 : "pos=" + pos + " forwardCount=" + forwardCount; }
public ActivateUserResponse activateUser(ActivateUserRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ActivateUserRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ActivateUserResponseUnmarshaller.getInstance()); return invoke(request, options); }
public boolean isCharsetDetected() { throw new UnsupportedOperationException(); }
public ModifySnapshotCopyRetentionPeriodResponse modifySnapshotCopyRetentionPeriod(ModifySnapshotCopyRetentionPeriodRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ModifySnapshotCopyRetentionPeriodRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ModifySnapshotCopyRetentionPeriodResponseUnmarshaller.getInstance()); return invoke(request, options, ModifySnapshotCopyRetentionPeriodResponse.class); }
public DeleteClusterSubnetGroupResponse deleteClusterSubnetGroup(DeleteClusterSubnetGroupRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteClusterSubnetGroupRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DeleteClusterSubnetGroupResponseUnmarshaller.getInstance()); return invoke(request, options, DeleteClusterSubnetGroupResponse.class); }
public static String decode(byte[] buffer) { return decode(buffer, 0, buffer.length); }
public int getDefaultPort() { return -1; }
public StopTaskResponse stopTask(StopTaskRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(StopTaskRequestMarshaller.getInstance()); options.setResponseUnmarshaller(StopTaskResponseUnmarshaller.getInstance()); return invoke(request, options, StopTaskResponse.class); }
public void seekExact(BytesRef target, TermState otherState) { if (!target.equals(term)) { state.copyFrom(otherState); term = BytesRef.deepCopyOf(target); seekPending = true; } }
public SeriesToChartGroupRecord(RecordInputStream in1) { field_1_chartGroupIndex = in1.readShort(); }
public static void writeUnicodeStringFlagAndData(ILittleEndianOutput out1, String value) { boolean is16Bit = hasMultibyte(value); out1.writeByte(is16Bit ? 0x01 : 0x00); if (is16Bit) { putUnicodeLE(value, out1); } else { putCompressedUnicode(value, out1); } }
public AuthorizeSecurityGroupIngressResponse authorizeSecurityGroupIngress(AuthorizeSecurityGroupIngressRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(AuthorizeSecurityGroupIngressRequestMarshaller.getInstance()); options.setResponseUnmarshaller(AuthorizeSecurityGroupIngressResponseUnmarshaller.getInstance()); return invoke(request, options, AuthorizeSecurityGroupIngressResponse.class); }
public void addFile(String file) { checkFileNames(new String[] { file }); setFiles.add(file); }
public void setSize(int width, int height) { mWidth = width; mHeight = height; }
public void setPrecedenceFilterSuppressed(boolean value) { if (value) { this.reachesIntoOuterContext |= SUPPRESS_PRECEDENCE_FILTER; } else { this.reachesIntoOuterContext &= ~SUPPRESS_PRECEDENCE_FILTER; } }
public IntervalSet look(ATNState s, RuleContext ctx) { return look(s, null, ctx); }
@Override public void serialize(ILittleEndianOutput out1) { out1.writeShort(OptionFlags); out1.writeShort(RowHeight); }
public Builder(boolean dedup) { this.dedup = dedup; }
public Hashtable(int capacity, float loadFactor) { this(capacity); if (loadFactor <= 0 || Float.isNaN(loadFactor)) { throw new IllegalArgumentException("Load factor: " + loadFactor); } }
public Object get(String key) { int bucket = normalCompletion.getBucket(key); return bucket == -1 ? null : (long)bucket; }
public ListHyperParameterTuningJobsResponse listHyperParameterTuningJobs(ListHyperParameterTuningJobsRequest request) { var options = new InvokeOptions(); options.requestMarshaller = ListHyperParameterTuningJobsRequestMarshaller.Instance; options.responseUnmarshaller = ListHyperParameterTuningJobsResponseUnmarshaller.Instance; return invoke(request, options, ListHyperParameterTuningJobsResponse.class); }
public DeleteTableResponse deleteTable(String tableName) { DeleteTableRequest request = new DeleteTableRequest(); request.setTableName(tableName); return deleteTable(request); }
protected boolean lessThan(TextFragment fragA, TextFragment fragB) { if (fragA.getScore() == fragB.getScore()) return fragA.getFragNum() > fragB.getFragNum(); else return fragA.getScore() < fragB.getScore(); }
public void freeBefore(int pos){ assert pos >= 0; assert pos <= nextPos; int newCount = nextPos - pos; assert newCount <= count : "newCount=" + newCount + " count=" + count; assert newCount <= buffer.length : "newCount=" + newCount + " buf.length=" + buffer.length; count = newCount; }
public UpdateHITTypeOfHITResponse updateHITTypeOfHIT(UpdateHITTypeOfHITRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(UpdateHITTypeOfHITRequestMarshaller.getInstance()); options.setResponseUnmarshaller(UpdateHITTypeOfHITResponseUnmarshaller.getInstance()); return invoke(request, options); }
public UpdateRecommenderConfigurationResponse UpdateRecommenderConfiguration(UpdateRecommenderConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateRecommenderConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateRecommenderConfigurationResponseUnmarshaller.Instance; return Invoke<UpdateRecommenderConfigurationResponse>(request, options); }
public int compareTo(Object other) { BytesRef br = (BytesRef) other; assert br != null; return utf8SortedAsUnicodeSortOrder.compare(this, br); }
public int stem(char[] s, int len){ if (len > 4 && s[len - 1] == 's'){ len--; } if (len > 5 && (StemmerUtil.endsWith(s, len, "ene") || (StemmerUtil.endsWith(s, len, "ane") && useNynorsk))){ return len - 3; } if (len > 4 && (StemmerUtil.endsWith(s, len, "er") || StemmerUtil.endsWith(s, len, "en") || StemmerUtil.endsWith(s, len, "et") || (StemmerUtil.endsWith(s, len, "ar") && useNynorsk))){ return len - 2; } if (len > 3){ switch (s[len - 1]){ case 'a': case 'e': return len - 1; } } return len; }
public DescribeDBSnapshotsResponse describeDBSnapshots(DescribeDBSnapshotsRequest request){ InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeDBSnapshotsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeDBSnapshotsResponseUnmarshaller.getInstance()); return invoke(request, options); }
public SortedSetDocValuesFacetField(String dim, String label) { super("dummy", TYPE); FacetField.VerifyLabel(label); FacetField.VerifyLabel(dim); this.Dim = dim; this.Label = label; }
public CreateDocumentationPartResponse createDocumentationPart(CreateDocumentationPartRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateDocumentationPartRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateDocumentationPartResponseUnmarshaller.getInstance()); return invoke(CreateDocumentationPartResponse.class, request, options); }
public String getValue() { return value; }
@Override public ShortBuffer asReadOnlyBuffer() { return duplicate(); }
public UpdateDataSourcePermissionsResponse updateDataSourcePermissions(UpdateDataSourcePermissionsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(UpdateDataSourcePermissionsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(UpdateDataSourcePermissionsResponseUnmarshaller.getInstance()); return invoke(request, options, UpdateDataSourcePermissionsResponse.class); }
public static Record createSingleRecord(RecordInputStream in1) { if (_recordCreatorsById.containsKey(in1.getSid())) { I_RecordCreator constructor = _recordCreatorsById.get(in1.getSid()); return constructor.create(in1); } else { return new UnknownRecord(in1); } }
@Override public int getCount() { return this._enclosing.mTabLayout.getChildCount(); }
public DeleteApplicationReferenceDataSourceResponse deleteApplicationReferenceDataSource(DeleteApplicationReferenceDataSourceRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteApplicationReferenceDataSourceRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DeleteApplicationReferenceDataSourceResponseUnmarshaller.getInstance()); return invoke(request, options, DeleteApplicationReferenceDataSourceResponse.class); }
public CreateProjectVersionResponse createProjectVersion(CreateProjectVersionRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateProjectVersionRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateProjectVersionResponseUnmarshaller.getInstance()); return invoke(request, options, CreateProjectVersionResponse.class); }
@Override public java.nio.IntBuffer slice() { return new java.nio.ReadOnlyIntArrayBuffer(remaining(), backingArray, offset + _position); }
@Override public byte get() { throw new UnsupportedOperationException(); }
@Override public java.nio.LongBuffer put(int index, long c) { checkIndex(index); backingArray[offset + index] = c; return this; }
public StoredField(String name, float value) { super(name, TYPE); FieldsData = new Single(value); }
public IntervalSet getExpectedTokensWithinCurrentRule() { ATN atn = interpreter.atn; ATNState s = atn.states[state]; return atn.nextTokens(s); }
@Override public String toString() { StringBuilder buffer = new StringBuilder(); buffer.append("[FILESHARING]\n"); buffer.append("    .Readonly       = ").append(ReadOnly == 1 ? "true" : "false").append("\n"); buffer.append("    .password       = ").append(StringUtil.toHexString(Password)).append("\n"); buffer.append("    .username       = ").append(Username).append("\n"); buffer.append("[/FILESHARING]\n"); return buffer.toString(); }
protected SubmoduleInitCommand(Repository repo) { super(repo); paths = new ArrayList<String>(); }
public void include(String name, AnyObjectId id) { if (!Repository.isValidRefName(name)) { throw new ArgumentException(MessageFormat.format(JGitText.get().invalidRefName, name)); } if (include.containsKey(name)) { throw new InvalidOperationException(JGitText.get().duplicateRef + name); } include.put(name, id.toObjectId()); }
public EnableSnapshotCopyResponse enableSnapshotCopy(EnableSnapshotCopyRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(EnableSnapshotCopyRequestMarshaller.Instance); options.setResponseUnmarshaller(EnableSnapshotCopyResponseUnmarshaller.Instance); return Invoke(request, options); }
public ValueFiller getValueFiller() { return new ValueFiller() { @Override public void fillValue(FieldInfo fieldInfo, Object instance) { fillValue(fieldInfo, (Object) instance); } }; }
@Override public void serialize(ILittleEndianOutput out1) { out1.writeByte(Pane); out1.writeShort(ActiveCellRow); out1.writeShort(ActiveCellCol); out1.writeShort(ActiveCellRef); int nRefs = field_6_refs.length; out1.writeShort(nRefs); for (int i = 0; i < field_6_refs.length; i++) { field_6_refs[i].serialize(out1); } }
public static Counter newCounter() { return newCounter(false); }
public int Get(String name, int dflt) { int[] vals; Object temp; if (valByRound.TryGetValue(name, out temp) && temp != null) { vals = (int[]) temp; return vals[roundNumber % vals.Length]; } String sval; if (!props.TryGetValue(name, out sval)) { sval = Integer.toString(dflt); } if (sval.indexOf(':') < 0) { return Integer.parseInt(sval, CultureInfo.InvariantCulture); } int k = sval.indexOf(':'); String colName = sval.substring(0, k - 0); sval = sval.substring(k + 1); colForValByRound.put(name, colName); vals = PropToInt32Array(sval); valByRound.put(name, vals); return vals[roundNumber % vals.Length]; }
public void preSerialize() { if (records.Tabpos > 0) { TabIdRecord tir = (TabIdRecord)records.get(records.Tabpos); if (tir._tabids.length < boundsheets.size()) { fixTabIdRecord(); } } }
public LimitTokenCountAnalyzer(Analyzer delegate, int maxTokenCount, boolean consumeAllTokens) { super(delegate.getReuseStrategy()); this.delegate = delegate; this.maxTokenCount = maxTokenCount; this.consumeAllTokens = consumeAllTokens; }
public ExternalBookBlock(int numberOfSheets) { _externalBookRecord = SupBookRecord.CreateInternalReferences((short) numberOfSheets); _externalNameRecords = new ExternalNameRecord[0]; _crnBlocks = new CRNBlock[0]; }
public String toString() { StringBuilder buffer = new StringBuilder(); buffer.append("[SCENARIOPROTECT]\n"); buffer.append("    .protect         = ").append(protect).append("\n"); buffer.append("[/SCENARIOPROTECT]\n"); return buffer.toString(); }
public NGit.Api.PushCommand setThin(boolean thin) { checkCallable(); this.thin = thin; return this; }
public int compareTo(SearcherTracker other) { return Integer.compare(other.recordTimeSec, recordTimeSec); }
public TokenStream create(TokenStream input) { return new ReverseStringFilter(m_luceneMatchVersion, input); }
public BlockList() { directory = NGit.Util.BlockList<T>.NewDirectory(256); directory[0] = NGit.Util.BlockList<T>.NewBlock(); tailBlock = directory[0]; }
public QueryScorer(WeightedSpanTerm[] weightedTerms) { this.fieldWeightedSpanTerms = new HashMap<String, WeightedSpanTerm>(weightedTerms.length); for (WeightedSpanTerm t : weightedTerms) { WeightedSpanTerm existingTerm; if (!fieldWeightedSpanTerms.containsKey(t.getTerm()) || (existingTerm = fieldWeightedSpanTerms.get(t.getTerm())) == null || (existingTerm.getWeight() < t.getWeight())) { fieldWeightedSpanTerms.put(t.getTerm(), t); maxTermWeight = Math.max(maxTermWeight, t.getWeight()); } } skipInitExtractor = true; }
@Override public boolean equals(Object other) { assert NeverEquals(other); if (other instanceof MergedGroup<?>) { MergedGroup<?> otherMergedGroup = (MergedGroup<?>) other; if (groupValue == null) { return otherMergedGroup == null; } else { return groupValueIsValueType ? JCG.EqualityComparer<T>.Default.Equals(groupValue, otherMergedGroup.groupValue) : J2N.Collections.StructuralEqualityComparer.Default.Equals(groupValue, otherMergedGroup.groupValue); } } else { return false; } }
public java.nio.charset.Charset charset() { return cs; }
public DescribeExperimentResponse describeExperiment(DescribeExperimentRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeExperimentRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeExperimentResponseUnmarshaller.getInstance()); return invoke(request, options); }
public EscherGraphics(HSSFShapeGroup escherGroup, HSSFWorkbook workbook, Color forecolor, float verticalPointsPerPixel) { this.escherGroup = escherGroup; this.workbook = workbook; this.verticalPointsPerPixel = verticalPointsPerPixel; this.verticalPixelsPerPoint = 1 / verticalPointsPerPixel; this.font = new Font("Arial", 10); this.foreground = forecolor; }
public String Pattern() { return patternText; }
public DeleteRouteTableResponse deleteRouteTable(DeleteRouteTableRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteRouteTableRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DeleteRouteTableResponseUnmarshaller.getInstance()); return invoke(request, options); }
public AssociateVPCWithHostedZoneResponse associateVPCWithHostedZone(AssociateVPCWithHostedZoneRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(AssociateVPCWithHostedZoneRequestMarshaller.getInstance()); options.setResponseUnmarshaller(AssociateVPCWithHostedZoneResponseUnmarshaller.getInstance()); return invoke(request, options); }
public PutIntegrationResponse PutIntegration(PutIntegrationRequest request) { InvokeOptions options = new InvokeOptions(); options.RequestMarshaller = PutIntegrationRequestMarshaller.Instance; options.ResponseUnmarshaller = PutIntegrationResponseUnmarshaller.Instance; return Invoke<PutIntegrationResponse>(request, options); }
Java public SimpleEntry(K theKey, V theValue){ key = theKey; value = theValue; }
public void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations){ for (int i = 0; i < iterations; ++i) { int byte0 = blocks[blocksOffset++] & 0xFF; int byte1 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = (byte0 << 4) | ((byte1 >>> 4) & 0xF); int byte2 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte1 & 0xF) << 8) | byte2; } }
public DisassociateConnectionFromLagResponse disassociateConnectionFromLag(DisassociateConnectionFromLagRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DisassociateConnectionFromLagRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DisassociateConnectionFromLagResponseUnmarshaller.getInstance()); return invoke(request, options); }
public FileMode GetOldMode() { return oldMode; }
@Override public String toString() { return mapEntry.toString(); }
public StopKeyPhrasesDetectionJobResponse stopKeyPhrasesDetectionJob(StopKeyPhrasesDetectionJobRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(StopKeyPhrasesDetectionJobRequestMarshaller.getInstance()); options.setResponseUnmarshaller(StopKeyPhrasesDetectionJobResponseUnmarshaller.getInstance()); return invoke(request, options, StopKeyPhrasesDetectionJobResponse.class); }
public String toString() { StringBuilder buffer = new StringBuilder("[Array Formula or Shared Formula]\n"); buffer.append("row = ").append(row).append("\n"); buffer.append("col = ").append(column).append("\n"); return buffer.toString(); }
public ListDominantLanguageDetectionJobsResponse ListDominantLanguageDetectionJobs(ListDominantLanguageDetectionJobsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListDominantLanguageDetectionJobsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListDominantLanguageDetectionJobsResponseUnmarshaller.Instance; return Invoke<ListDominantLanguageDetectionJobsResponse>(request, options); }
@Override public String toString() { return "slice start=" + start + " length=" + length + " readerIndex=" + readerIndex; }
public static int parseHexInt4(byte digit) { byte r = digits16[digit]; if (r < 0) { throw new IndexOutOfBoundsException(); } return r; }
public Attribute(String name, String value) { this._name = name; this._value = value; }
public DescribeStackSetOperationResponse describeStackSetOperation(DescribeStackSetOperationRequest request){ InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeStackSetOperationRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeStackSetOperationResponseUnmarshaller.getInstance()); return invoke(request, options, DescribeStackSetOperationResponse.class); }
public ICell getCell(short cellnum) { int ushortCellNum = cellnum & 0x0000FFFF; return getCell(ushortCellNum); }
public void write(byte[] b) { writeContinueIfRequired(b.length); _ulrOutput.write(b); }
public ResetImageAttributeRequest(String imageId, ResetImageAttributeName attribute){ _imageId = imageId; _attribute = attribute; }
public void discardResultContents() { resultContents = null; }
public ObjectId getPeeledObjectId() { return getLeaf().getPeeledObjectId(); }
public UndeprecateDomainResponse undeprecateDomain(UndeprecateDomainRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(UndeprecateDomainRequestMarshaller.getInstance()); options.setResponseUnmarshaller(UndeprecateDomainResponseUnmarshaller.getInstance()); return invoke(request, options, UndeprecateDomainResponse.class); }
public void write(ILittleEndianOutput out1) { out1.writeByte(sid + PtgClass); out1.writeByte(field_3_string.length()); out1.writeByte(_is16bitUnicode ? 0x01 : 0x00); if (_is16bitUnicode) { StringUtil.putUnicodeLE(field_3_string, out1); } else { StringUtil.putCompressedUnicode(field_3_string, out1); } }
public DeleteQueueResponse deleteQueue(String queueUrl) { DeleteQueueRequest request = new DeleteQueueRequest(); request.setQueueUrl(queueUrl); return deleteQueue(request); }
public void setCheckEofAfterPackFooter(boolean b) { checkEofAfterPackFooter = b; }
public void swap() { int sBegin = beginA; int sEnd = endA; beginA = beginB; endA = endB; beginB = sBegin; endB = sEnd; }
public int getPackedGitWindowSize() { return packedGitWindowSize; }
public PutMetricDataResponse putMetricData(PutMetricDataRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(PutMetricDataRequestMarshaller.getInstance()); options.setResponseUnmarshaller(PutMetricDataResponseUnmarshaller.getInstance()); return invoke(request, options, PutMetricDataResponse.class); }
public GetCelebrityRecognitionResponse getCelebrityRecognition(GetCelebrityRecognitionRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetCelebrityRecognitionRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetCelebrityRecognitionResponseUnmarshaller.getInstance()); return invoke(request, options, GetCelebrityRecognitionResponse.class); }
public CreateQueueRequest(String queueName) { _queueName = queueName; }
public Area3DPxg(int externalWorkbookNumber, SheetIdentifier sheetName, AreaReference arearef) { super(arearef); this.externalWorkbookNumber = externalWorkbookNumber; this.firstSheetName = sheetName.getSheetId().getName(); if (sheetName instanceof SheetRangeIdentifier) { this.lastSheetName = ((SheetRangeIdentifier)sheetName).getLastSheetIdentifier().getName(); } else { this.lastSheetName = null; } }
public void setBaseline(long clockTime) { t0 = clockTime; timeout = t0 + ticksAllowed; }
public MoveAddressToVpcResponse moveAddressToVpc(MoveAddressToVpcRequest request) { var options = new InvokeOptions(); options.setRequestMarshaller(MoveAddressToVpcRequestMarshaller.getInstance()); options.setResponseUnmarshaller(MoveAddressToVpcResponseUnmarshaller.getInstance()); return invoke(request, options); }
public String toString() { String coll = m_collectionModel.GetName(); if (coll != null) { return String.format("LM %s - %s", GetName(), coll); } else { return String.format("LM %s", GetName()); } }
public DescribeLagsResponse DescribeLags(DescribeLagsRequest request) { InvokeOptions options = new InvokeOptions(); options.RequestMarshaller = DescribeLagsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLagsResponseUnmarshaller.Instance; return Invoke<DescribeLagsResponse>(request, options); }
public AreaEval Offset(int relFirstRowIx, int relLastRowIx, int relFirstColIx, int relLastColIx) { if (_refEval == null) { return _areaEval.Offset(relFirstRowIx, relLastRowIx, relFirstColIx, relLastColIx); } return _refEval.Offset(relFirstRowIx, relLastRowIx, relFirstColIx, relLastColIx); }
@Override public java.nio.ShortBuffer put(short[] src, int srcOffset, int shortCount) { byteBuffer.limit(_limit * libcore.io.SizeOf.SHORT); byteBuffer.position(_position * libcore.io.SizeOf.SHORT); if (byteBuffer instanceof java.nio.ReadWriteDirectByteBuffer) { ((java.nio.ReadWriteDirectByteBuffer) byteBuffer).put(src, srcOffset, shortCount); } else { ((java.nio.ReadWriteHeapByteBuffer) byteBuffer).put(src, srcOffset, shortCount); } this._position += shortCount; return this; }
public void Initialize(String cat){ this._cat = cat; }
public void write(int oneByte) throws IOException { throw new UnsupportedOperationException(); }
public DescribeImportImageTasksResponse describeImportImageTasks(DescribeImportImageTasksRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeImportImageTasksRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeImportImageTasksResponseUnmarshaller.getInstance()); return invoke(request, options, DescribeImportImageTasksResponse.class); }
public ColumnInfoRecord(RecordInputStream in1) { _first_col = in1.readUShort(); _last_col = in1.readUShort(); _col_width = in1.readUShort(); _xf_index = in1.readUShort(); _options = in1.readUShort(); switch (in1.remaining()) { case 2: field_6_reserved = in1.readUShort(); break; case 1: field_6_reserved = in1.readByte(); break; case 0: field_6_reserved = 0; break; default: throw new Exception("Unusual record size remaining=(" + in1.remaining() + ")"); } }
public Status(IndexDiff diff) { super(); this.diff = diff; clean = diff.getAdded().isEmpty() && diff.getChanged().isEmpty() && diff.getRemoved().isEmpty() && diff.getMissing().isEmpty() && diff.getModified().isEmpty() && diff.getUntracked().isEmpty() && diff.getConflicting().isEmpty(); }
public CreateExperimentResponse createExperiment(CreateExperimentRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateExperimentRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateExperimentResponseUnmarshaller.getInstance()); return invoke(request, options, CreateExperimentResponse.class); }
@Override public Object clone() { return this; }
public FloatBuffer slice() { byteBuffer.limit(_limit * libcore.io.SizeOf.FLOAT); byteBuffer.position(_position * libcore.io.SizeOf.FLOAT); ByteBuffer bb = byteBuffer.slice().order(byteBuffer.order()); FloatBuffer result = new FloatToByteBufferAdapter(bb); byteBuffer.clear(); return result; }
public DescribeSnapshotSchedulesResponse DescribeSnapshotSchedules(DescribeSnapshotSchedulesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeSnapshotSchedulesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeSnapshotSchedulesResponseUnmarshaller.Instance; return Invoke<DescribeSnapshotSchedulesResponse>(request, options); }
public ListImagesResponse listImages(ListImagesRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ListImagesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ListImagesResponseUnmarshaller.getInstance()); return invoke(request, options); }
public Diff(int ins, int del, int rep, int noop){ this.INSERT = ins; this.DELETE = del; this.REPLACE = rep; this.NOOP = noop; }
@Override public String toFormulaString(String[] operands) { StringBuilder buffer = new StringBuilder(); buffer.append(operands[0]); buffer.append(","); buffer.append(operands[1]); return buffer.toString(); }
public static void SetupEnvironment(String[] workbookNames, ForkedEvaluator[] Evaluators) { WorkbookEvaluator[] wbEvals = new WorkbookEvaluator[Evaluators.length]; for (int i = 0; i < wbEvals.length; i++) { wbEvals[i] = Evaluators[i]._evaluator; } CollaboratingWorkbooksEnvironment.Setup(workbookNames, wbEvals); }
public ListPhotoTagsRequest() { super("CloudPhoto", "2017-07-11", "ListPhotoTags", "cloudphoto", "openAPI"); setProtocol(ProtocolType.HTTPS); }
public RandomSamplingFacetsCollector(int sampleSize, long seed) { super(false); this.sampleSize = sampleSize; this.random = new XORShift64Random(seed); this.sampledDocs = null; }
public AllocateStaticIpResponse allocateStaticIp(AllocateStaticIpRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(AllocateStaticIpRequestMarshaller.Instance); options.setResponseUnmarshaller(AllocateStaticIpResponseUnmarshaller.Instance); return invoke(request, options); }
public FeatRecord(RecordInputStream in1) { futureHeader = new FtrHeader(in1); isf_sharedFeatureType = in1.readShort(); reserved1 = (byte) in1.readByte(); reserved2 = in1.readInt(); int cref = in1.readUShort(); cbFeatData = in1.readInt(); reserved3 = in1.readShort(); cellRefs = new CellRangeAddress[cref]; for (int i = 0; i < cellRefs.length; i++) { cellRefs[i] = new CellRangeAddress(in1); } switch (isf_sharedFeatureType) { case FeatHdrRecord.SHAREDFEATURES_ISFPROTECTION: sharedFeature = new FeatProtection(in1); break; case FeatHdrRecord.SHAREDFEATURES_ISFFEC2: sharedFeature = new FeatFormulaErr2(in1); break; case FeatHdrRecord.SHAREDFEATURES_ISFFACTOID: sharedFeature = new FeatSmartTag(in1); break; default: logger.log(POILogger.ERROR, "Unknown Shared Feature " + isf_sharedFeatureType + " found!"); break; } }
public RevCommit tryFastForward(RevCommit newCommit) throws IOException, RefNotFoundException { Ref head = repo.getRef(Constants.HEAD); if (head == null || head.getObjectId() == null) { throw new RefNotFoundException(MessageFormat.format(JGitText.get().refNotResolved, Constants.HEAD)); } ObjectId headId = head.getObjectId(); if (headId == null) { throw new RefNotFoundException(MessageFormat.format(JGitText.get().refNotResolved, Constants.HEAD)); } RevCommit headCommit = walk.lookupCommit(headId); if (walk.isMergedInto(newCommit, headCommit)) { return newCommit; } String headName; if (head.isSymbolic()) { headName = head.getTarget().getName(); } else { headName = "detached HEAD"; } return tryFastForward(headName, headCommit, newCommit); }
public CreateSnapshotScheduleResponse createSnapshotSchedule(CreateSnapshotScheduleRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateSnapshotScheduleRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateSnapshotScheduleResponseUnmarshaller.getInstance()); return invoke(request, options, CreateSnapshotScheduleResponse.class); }
public Record getNext() { if (_nextIndex >= _list.size()) { throw new Exception("Attempt to Read past end of record stream"); } _countRead++; return (Record) _list.get(_nextIndex++); }
@Override public String toString() { return RawParseUtils.decode(buf.toByteArray()); }
public ListTablesRequest(String exclusiveStartTableName) { this._exclusiveStartTableName = exclusiveStartTableName; }
public EnableAlarmActionsResponse enableAlarmActions(EnableAlarmActionsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(EnableAlarmActionsRequestMarshaller.Instance); options.setResponseUnmarshaller(EnableAlarmActionsResponseUnmarshaller.Instance); return invoke(request, options); }
public Builder() { super(); lastDocID = -1; wordNum = -1; word = 0; }
@Override public boolean equals(Object obj) { State other = (State) obj; return is_final == other.is_final && Arrays.equals(this.labels, other.labels) && this.states == other.states; }
public TokenStream create(TokenStream input) { return new EnglishPossessiveFilter(m_luceneMatchVersion, input); }
public void clearFormatting() { _string = cloneStringIfRequired(); _string.clearFormatting(); addToSSTIfRequired(); }
@Override public int get(int index, long[] arr, int off, int len) { assert len > 0 : "len must be > 0 (got " + len + ")"; assert index >= 0 && index < valueCount; len = Math.min(len, valueCount - index); Arrays.fill(arr, off, off + len, 0); return len; }
public DeleteRouteResponseResponse DeleteRouteResponse(DeleteRouteResponseRequest request) { InvokeOptions options = new InvokeOptions(); options.RequestMarshaller = DeleteRouteResponseRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteRouteResponseResponseUnmarshaller.Instance; return Invoke<DeleteRouteResponseResponse>(request, options); }
public String toPrivateString() { return format(true, false); }
public CreatePresignedDomainUrlResponse createPresignedDomainUrl(CreatePresignedDomainUrlRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreatePresignedDomainUrlRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreatePresignedDomainUrlResponseUnmarshaller.getInstance()); return invoke(request, options, CreatePresignedDomainUrlResponse.class); }
public void write(int oneChar) { doWrite(new char[] {(char)oneChar}, 0, 1); }
public SSTRecord getSSTRecord() { return sstRecord; }
public String toString() { return "term=" + term + ",field=" + field + ",value=" + value; }
public boolean isSaturated(FuzzySet bloomFilter, FieldInfo fieldInfo) { return bloomFilter.getSaturation() > 0.9f; }
public Builder(boolean ignoreCase) { this.ignoreCase = ignoreCase; }
public String toString() { return getClass().getSimpleName() + "(maxBasicQueries: " + maxBasicQueries + ", queriesMade: " + queriesMade + ")"; }
public DeleteDataSourceResponse deleteDataSource(DeleteDataSourceRequest request) { var options = new InvokeOptions(); options.setRequestMarshaller(DeleteDataSourceRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DeleteDataSourceResponseUnmarshaller.getInstance()); return invoke(request, options); }
public RebootNodeResponse rebootNode(RebootNodeRequest request) { var options = new InvokeOptions(); options.setRequestMarshaller(RebootNodeRequestMarshaller.getInstance()); options.setResponseUnmarshaller(RebootNodeResponseUnmarshaller.getInstance()); return invoke(request, options); }
public void processChildRecords() { convertRawBytesToEscherRecords(); }
public CreateOrUpdateTagsResponse createOrUpdateTags(CreateOrUpdateTagsRequest request) { var options = new InvokeOptions(); options.setRequestMarshaller(CreateOrUpdateTagsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateOrUpdateTagsResponseUnmarshaller.getInstance()); return invoke(request, options); }
public FileSnapshot getSnapShot() { return snapShot; }
public Stream openResource(String resource) throws IOException { Stream stream = this.clazz.getTypeInfo().getAssembly().findAndGetManifestResourceStream(clazz, resource); if (stream == null) { throw new IOException("Resource not found: " + resource); } return stream; }
public String toString() { StringBuilder sb = new StringBuilder(64); sb.append(getClass().getSimpleName()).append(" ["); sb.append("sid=").append(HexDump.shortToHex(_sid)); sb.append(" size=").append(_data.length); sb.append(" : ").append(HexDump.toHex(_data)); sb.append("]\n"); return sb.toString(); }
public int nextIndex() { return index; }
public String toQueryString(IEscapeQuerySyntax escaper) { if (isDefaultField(this.m_field)) { return "\"" + getTermEscapeQuoted(escaper) + "\""; } else { return this.m_field + ":" + "\"" + getTermEscapeQuoted(escaper) + "\""; } }
public Object clone() { CalcModeRecord rec = new CalcModeRecord(); rec.field_1_calcmode = field_1_calcmode; return rec; }
public boolean isOutput() { return output; }
public CreateNetworkInterfaceResponse createNetworkInterface(CreateNetworkInterfaceRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateNetworkInterfaceRequestMarshaller.Instance); options.setResponseUnmarshaller(CreateNetworkInterfaceResponseUnmarshaller.Instance); return Invoke<CreateNetworkInterfaceResponse>(request, options); }
public void serialize(ILittleEndianOutput out1) { out1.writeShort(field_1_password); }
public StopDominantLanguageDetectionJobResponse stopDominantLanguageDetectionJob(StopDominantLanguageDetectionJobRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(StopDominantLanguageDetectionJobRequestMarshaller.getInstance()); options.setResponseUnmarshaller(StopDominantLanguageDetectionJobResponseUnmarshaller.getInstance()); return invoke(request, options, StopDominantLanguageDetectionJobResponse.class); }
public void withConnectionTimeout(int milliseconds) { connectionTimeoutInMilliseconds = milliseconds; }
public GetGatewayGroupResponse getGatewayGroup(GetGatewayGroupRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetGatewayGroupRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetGatewayGroupResponseUnmarshaller.getInstance()); return invoke(request, options); }
public java.nio.FloatBuffer slice() { return java.nio.ReadOnlyFloatArrayBuffer .newInstance(backingArray, offset + position, remaining()); }
public static String join(Collection<String> parts, String separator, String lastSeparator) { StringBuilder sb = new StringBuilder(); int i = 0; int lastIndex = parts.size() - 1; for (String part : parts) { sb.append(part); if (i == lastIndex - 1) { sb.append(lastSeparator); } else { if (i != lastIndex) { sb.append(separator); } } i++; } return sb.toString(); }
public String toString() { return "(" + a.toString() + " AND " + b.toString() + ")"; }
public ListSubscriptionsByTopicRequest(String topicArn, String nextToken){ this._topicArn = topicArn; this._nextToken = nextToken; }
public byte readByte() { return bytes[pos--]; }
public TerminateClientVpnConnectionsResponse terminateClientVpnConnections(TerminateClientVpnConnectionsRequest request){ InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(TerminateClientVpnConnectionsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(TerminateClientVpnConnectionsResponseUnmarshaller.getInstance()); return invoke(request, options); }
public ReceiveMessageRequest(String queueUrl) { this._queueUrl = queueUrl; }
public void serialize(ILittleEndianOutput out1) { out1.writeShort(field_1_barSpace); out1.writeShort(field_2_categorySpace); out1.writeShort(field_3_formatFlags); }
public Object Common(Object output1, Object output2) { return outputs.Common((T) output1, (T) output2); }
public CreateVariableResponse createVariable(CreateVariableRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateVariableRequestMarshaller.Instance); options.setResponseUnmarshaller(CreateVariableResponseUnmarshaller.Instance); return invoke(request, options, CreateVariableResponse.class); }
public static int match(byte[] b, int ptr, byte[] src) { if (ptr + src.length > b.length) { return -1; } for (int i = 0; i < src.length; i++, ptr++) { if (b[ptr] != src[i]) { return -1; } } return ptr; }
@Override public int FillFields(byte[] data, int offset, IEscherRecordFactory recordFactory) { int bytesRemaining = ReadHeader(data, offset); int pos = offset + 8; int size = 0; field_1_rectX1 = LittleEndian.getInt(data, pos + size); size += 4; field_2_rectY1 = LittleEndian.getInt(data, pos + size); size += 4; field_3_rectX2 = LittleEndian.getInt(data, pos + size); size += 4; field_4_rectY2 = LittleEndian.getInt(data, pos + size); size += 4; bytesRemaining -= size; if (bytesRemaining != 0) throw new RecordFormatException("Expected no remaining bytes but got " + bytesRemaining); return 8 + size + bytesRemaining; }
public CreateCloudFrontOriginAccessIdentityResponse createCloudFrontOriginAccessIdentity(CreateCloudFrontOriginAccessIdentityRequest request){ InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateCloudFrontOriginAccessIdentityRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateCloudFrontOriginAccessIdentityResponseUnmarshaller.getInstance()); return invoke(request, options, CreateCloudFrontOriginAccessIdentityResponse.class); }
public boolean isNamespaceAware() { return getFeature(org.xmlpull.v1.XmlPullParser.FEATURE_PROCESS_NAMESPACES); }
public void setOverridable(boolean on) { overridable = on; }
public String getClassName() { return className; }
public synchronized DirectoryReader getIndexReader() { if (indexReader != null) { indexReader.incRef(); } return indexReader; }
public int indexOfKey(int key) { return Arrays.binarySearch(mKeys, 0, mSize, key); }
public BlankRecord(RecordInputStream in1) { field_1_row = in1.readUShort(); field_2_col = in1.readShort(); field_3_xf = in1.readShort(); }
public long length() { return lengthRenamed; }
public PasswordRecord(RecordInputStream in1) { field_1_password = in1.readShort(); }
public HashMap(int capacity, float loadFactor) { this(capacity); if (loadFactor <= 0 || Float.isNaN(loadFactor)) { throw new IllegalArgumentException("Load factor: " + loadFactor); } }
public void run() { long lastReopenStartNS = System.currentTimeMillis() * 100; while (!finish) { boolean hasWaiting; synchronized (this) { hasWaiting = waitingGen > searchingGen; } long nextReopenStartNS = lastReopenStartNS + (hasWaiting ? targetMinStaleNS : targetMaxStaleNS); long sleepNS = nextReopenStartNS - System.nanoTime(); if (sleepNS > 0) { try { reopenCond.await(sleepNS / Time.MILLISECONDS_PER_NANOSECOND, TimeUnit.MILLISECONDS); } catch (InterruptedException ie) { Thread.currentThread().interrupt(); return; } } if (finish) { break; } lastReopenStartNS = System.nanoTime(); refreshStartGen = writer.getAndIncrementGeneration(); try { manager.maybeRefreshBlocking(); } catch (IOException ioe) { throw new RuntimeException(ioe); } } refreshDone(); }
public DeleteLoginProfileRequest(String userName) { this._userName = userName; }
public E pollFirst() { return (_size == 0) ? null : removeFirstImpl(); }
public CreatePhotoRequest() { super("CloudPhoto", "2017-07-11", "CreatePhoto", "cloudphoto", "openAPI"); setProtocol(ProtocolType.HTTPS); }
@Override public String getName() { return "resolve"; }
public int findEndOffset(StringBuilder buffer, int start) { if (start > buffer.length() || start < 0) { return start; } int offset, count = m_maxScan; for (offset = start; offset < buffer.length() && count > 0; count--) { if (m_boundaryChars.contains(buffer.charAt(offset))) { return offset; } offset++; } return start; }
public void setObjectChecker(ObjectChecker oc){ objCheck = oc; }
public BaseRef(AreaEval ae) { _refEval = null; _areaEval = ae; _firstRowIndex = ae.getFirstRow(); _firstColumnIndex = ae.getFirstColumn(); _height = ae.getLastRow() - ae.getFirstRow() + 1; _width = ae.getLastColumn() - ae.getFirstColumn() + 1; }
public CreateVpcEndpointResponse createVpcEndpoint(CreateVpcEndpointRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateVpcEndpointRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateVpcEndpointResponseUnmarshaller.getInstance()); return invoke(request, options, CreateVpcEndpointResponse.class); }
public DeregisterWorkspaceDirectoryResponse deregisterWorkspaceDirectory(DeregisterWorkspaceDirectoryRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeregisterWorkspaceDirectoryRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DeregisterWorkspaceDirectoryResponseUnmarshaller.getInstance()); return invoke(request, options, DeregisterWorkspaceDirectoryResponse.class); }
public ChartFRTInfoRecord(RecordInputStream in1) { rt = in1.readShort(); grbitFrt = in1.readShort(); verOriginator = (byte)in1.read(); verWriter = (byte)in1.read(); int cCFRTID = in1.readShort(); rgCFRTID = new CFRTID[cCFRTID]; for (int i = 0; i < cCFRTID; i++) { rgCFRTID[i] = new CFRTID(in1); } }
@Override public Merger newMerger(Repository db) { return new StrategyOneSided.OneSide(db, treeIndex); }
public CreateDataSourceFromRedshiftResponse createDataSourceFromRedshift(CreateDataSourceFromRedshiftRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateDataSourceFromRedshiftRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateDataSourceFromRedshiftResponseUnmarshaller.getInstance()); return invoke(request, options, CreateDataSourceFromRedshiftResponse.class); }
@Override public void clearDFA() { for (int d = 0; d < decisionToDFA.length; d++) { decisionToDFA[d] = new DFA(atn.getDecisionState(d), d); } }
public void removeName(String name) { int index = getNameIndex(name); removeName(index); }
@Override public String toString() { StringBuilder buffer = new StringBuilder(); buffer.append("[RightMargin]\n"); buffer.append("    .margin               = ").append(" (").append(margin).append(" )\n"); buffer.append("[/RightMargin]\n"); return buffer.toString(); }
@Override public Object clone() { return new RefreshAllRecord(options); }
public StandardQueryNodeProcessorPipeline(QueryConfigHandler queryConfig) { super(queryConfig); add(new WildcardQueryNodeProcessor()); add(new MultiFieldQueryNodeProcessor()); add(new FuzzyQueryNodeProcessor()); add(new MatchAllDocsQueryNodeProcessor()); add(new OpenRangeQueryNodeProcessor()); add(new NumericQueryNodeProcessor()); add(new NumericRangeQueryNodeProcessor()); add(new LowercaseExpandedTermsQueryNodeProcessor()); add(new TermRangeQueryNodeProcessor()); add(new AllowLeadingWildcardProcessor()); add(new AnalyzerQueryNodeProcessor()); add(new PhraseSlopQueryNodeProcessor()); add(new BooleanQuery2ModifierNodeProcessor()); add(new NoChildOptimizationQueryNodeProcessor()); add(new RemoveDeletedQueryNodesProcessor()); add(new RemoveEmptyNonLeafQueryNodeProcessor()); add(new BooleanSingleChildOptimizationQueryNodeProcessor()); add(new DefaultPhraseSlopQueryNodeProcessor()); add(new BoostQueryNodeProcessor()); add(new MultiTermRewriteMethodProcessor()); }
public String FormatAsString(String sheetName, boolean useAbsoluteAddress) { StringBuilder sb = new StringBuilder(); if (sheetName != null) { sb.append(SheetNameFormatter.Format(sheetName)); sb.append("!"); } CellReference cellRefFrom = new CellReference(FirstRow, FirstColumn, useAbsoluteAddress, useAbsoluteAddress); CellReference cellRefTo = new CellReference(LastRow, LastColumn, useAbsoluteAddress, useAbsoluteAddress); sb.append(cellRefFrom.FormatAsString()); if (!cellRefFrom.Equals(cellRefTo) || IsFullColumnRange || IsFullRowRange) { sb.append(':'); sb.append(cellRefTo.FormatAsString()); } return sb.toString(); }
public java.nio.ByteBuffer put(int index, byte value) { throw new UnsupportedOperationException(); }
public void mode(int m) { _mode = m; }
public java.nio.ShortBuffer slice() { return new java.nio.ReadWriteShortArrayBuffer(remaining(), backingArray, offset + position()); }
public void set(int index, long n){ if (count < index){ throw new IndexOutOfRangeException(index); } else { if (count == index) { add(n); } else { entries[index] = n; } } }
public java.nio.ByteBuffer putFloat(float value){ throw new java.nio.ReadOnlyBufferException(); }
public static double max(double[] values) { double max = Double.NEGATIVE_INFINITY; for (int i = 0, size = values.length; i < size; i++) { max = Math.max(max, values[i]); } return max; }
public UpdateRepoWebhookRequest() { super("cr", "2016-06-07", "UpdateRepoWebhook", "cr", "openAPI"); UriPattern = "/repos/[RepoNamespace]/[RepoName]/webhooks/[WebhookId]"; Method = MethodType.POST; }
public DeleteAttributesRequest(String domainName, String itemName, List<Attribute> attributes, UpdateCondition expected) { _domainName = domainName; _itemName = itemName; _attributes = attributes; _expected = expected; }
public String toString() { StringBuilder sb = new StringBuilder(); sb.append("[SXPI]\n"); for (int i = 0; i < _fieldInfos.length; i++) { sb.append("    item[").append(i).append("]="); _fieldInfos[i].appendDebugInfo(sb); sb.append('\n'); } sb.append("[/SXPI]\n"); return sb.toString(); }
public boolean isSuccessful() { if (mergeResult != null) { return mergeResult.getMergeStatus().isSuccessful(); } else if (rebaseResult != null) { return rebaseResult.getStatus().isSuccessful(); } else { return true; } }
public void setBytesValue(byte[] value) { setBytesValue(new BytesRef(value)); }
public DescribeConnectionsResponse describeConnections(DescribeConnectionsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeConnectionsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeConnectionsResponseUnmarshaller.getInstance()); return invoke(request, options, DescribeConnectionsResponse.class); }
public DeletePhotosRequest() { super("CloudPhoto", "2017-07-11", "DeletePhotos", "cloudphoto", "openAPI"); setProtocol(ProtocolType.HTTPS); }
public void add(E object) { iterator.add(object); subList.sizeChanged(true); end++; }
public static java.nio.ByteBuffer allocate(int capacity_1) { if (capacity_1 < 0) { throw new java.lang.IllegalArgumentException(); } return new java.nio.ReadWriteHeapByteBuffer(capacity_1); }
public SrndQuery getSubQuery(int qn) { return m_queries[qn]; }
public float currentScore(int docId, String field, int start, int end, int numPayloadsSeen, float currentScore, float currentPayloadScore) { if (numPayloadsSeen == 0) { return currentPayloadScore; } else { return Math.min(currentPayloadScore, currentScore); } }
public String toString() { StringBuilder buffer = new StringBuilder(); buffer.append("[BLANK]\n"); buffer.append("row       = ").append(HexDump.shortToHex(Row)).append("\n"); buffer.append("col       = ").append(HexDump.shortToHex(Column)).append("\n"); buffer.append("xf        = ").append(HexDump.shortToHex(XFIndex)).append("\n"); buffer.append("[/BLANK]\n"); return buffer.toString(); }
public DescribeLogPatternResponse describeLogPattern(DescribeLogPatternRequest request) { var options = new InvokeOptions(); options.requestMarshaller(DescribeLogPatternRequestMarshaller.Instance); options.responseUnmarshaller(DescribeLogPatternResponseUnmarshaller.Instance); return invoke(request, options, DescribeLogPatternResponse.class); }
public RegisterTransitGatewayMulticastGroupMembersResponse registerTransitGatewayMulticastGroupMembers(RegisterTransitGatewayMulticastGroupMembersRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(RegisterTransitGatewayMulticastGroupMembersRequestMarshaller.getInstance()); options.setResponseUnmarshaller(RegisterTransitGatewayMulticastGroupMembersResponseUnmarshaller.getInstance()); return invoke(request, options, RegisterTransitGatewayMulticastGroupMembersResponse.class); }
public GetPhoneNumberSettingsResponse getPhoneNumberSettings(GetPhoneNumberSettingsRequest request){ var options = new InvokeOptions(); options.setRequestMarshaller(GetPhoneNumberSettingsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetPhoneNumberSettingsResponseUnmarshaller.getInstance()); return invoke<GetPhoneNumberSettingsResponse>(request, options); }
public ObjectId getData() { return data; }
@Override public boolean isDirect() { return false; }
public DeleteServerCertificateRequest(String serverCertificateName) { this._serverCertificateName = serverCertificateName; }
public StringBuffer append(boolean b){return append(b ? "true" : "false");}
public GetEvaluationResponse getEvaluation(GetEvaluationRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetEvaluationRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetEvaluationResponseUnmarshaller.getInstance()); return invoke(request, options, GetEvaluationResponse.class); }
public BRAIRecord getDataName() { return dataName; }
public boolean find(int start) { findPos = start; if (findPos < _regionStart) { findPos = _regionStart; } else { if (findPos >= _regionEnd) { matchFound = false; return false; } } matchFound = findImpl(address, input, findPos, matchOffsets); if (matchFound) { findPos = matchOffsets[1]; } return matchFound; }
public GetLifecyclePolicyPreviewResponse getLifecyclePolicyPreview(GetLifecyclePolicyPreviewRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetLifecyclePolicyPreviewRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetLifecyclePolicyPreviewResponseUnmarshaller.getInstance()); return invoke(request, options, GetLifecyclePolicyPreviewResponse.class); }
public SinglePositionTokenStream(String word) { termAtt = addAttribute(CharTermAttribute.class); posIncrAtt = addAttribute(PositionIncrementAttribute.class); this.word = word; returned = true; }
public void Serialize(ILittleEndianOutput out1){ out1.WriteShort(field_1_print_gridlines); }
public String toString() { StringBuilder s = new StringBuilder(); s.append(Constants.TypeString(type)); s.append(' '); s.append(name); s.append(' '); s.append(commitTime); s.append(' '); appendCoreFlags(s); return s.toString(); }
public NGit.Api.LsRemoteCommand setRemote(String remote) { checkCallable(); this.remote = remote; return this; }
public void collapseRow(int rowNumber) { int startRow = findStartOfRowOutlineGroup(rowNumber); RowRecord rowRecord = getRow(startRow); int lastRow = writeHidden(rowRecord, startRow, true); if (getRow(lastRow + 1) != null) { getRow(lastRow + 1).setCollapsed(true); } else { RowRecord row = createRow(lastRow + 1); row.setCollapsed(true); insertRow(row); } }
public AssociateSkillGroupWithRoomResponse AssociateSkillGroupWithRoom(AssociateSkillGroupWithRoomRequest request){ var options = new InvokeOptions(); options.RequestMarshaller = AssociateSkillGroupWithRoomRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateSkillGroupWithRoomResponseUnmarshaller.Instance; return Invoke<AssociateSkillGroupWithRoomResponse>(request, options); }
@Override public String toString() { StringBuilder buffer = new StringBuilder(); buffer.append("[SERIESLIST]\n"); buffer.append("    .seriesNumbers        = ").append(" (").append(seriesNumbers).append(" )"); buffer.append(System.lineSeparator()); buffer.append("[/SERIESLIST]\n"); return buffer.toString(); }
public QueryConfigHandler getQueryConfigHandler(){ return this.queryConfig; }
public String getClassArg() { if (originalArgs != null) { String className = originalArgs[CLASS_NAME]; if (className != null) { return className; } } return this.getClass().getSimpleName(); }
