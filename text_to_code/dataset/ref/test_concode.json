{"memberVariables": {"parentScope=0": "int", "functionBracePositions=new ArrayList()": "ArrayList", "funcObjects=new ObjArray()": "ObjArray", "functionNum=0": "int", "functionVarMappings=new ArrayList()": "ArrayList", "lastTokenCount=0": "int", "replacedTokens=new ArrayList()": "ArrayList"}, "code": ["void", "function", "(", "ScriptOrFnNode", "parseTree", ")", "{", "int", "level", "=", "-", "1", ";", "collectFuncNodes", "(", "parseTree", ",", "level", ",", "null", ")", ";", "}"], "memberFunctions": {"isInScopeChain": [["boolean", "String token"]], "reset": [["void"]], "leaveNestingLevel": [["void", "int braceNesting"]], "getMappedToken": [["String", "String token", "boolean hasNewMapping"]], "getPreviousTokenMapping": [["String", "String token", "boolean hasNewMapping"]], "collectFuncNodes": [["void", "ScriptOrFnNode parseTree", "int level", "ScriptOrFnNode parent"]], "sourceCompress": [["int", "String encodedSource", "int offset", "boolean asQuotedString", "StringBuffer sb", "int prevToken", "boolean inArgsList", "int currentLevel", "ScriptOrFnNode parseTree"]], "enterNestingLevel": [["void", "int braceNesting"]]}, "className": "TokenMapper", "renamed": ["void", "function", "(", "ScriptOrFnNode", "arg0", ")", "{", "int", "loc0", "=", "-", "1", ";", "collectFuncNodes", "(", "arg0", ",", "loc0", ",", "null", ")", ";", "}"], "nl": "Generate mappings for each Function node and parameters and variables names associated with it. ", "nlToks": ["Generate", "mappings", "for", "each", "Function", "node", "and", "parameters", "and", "variables", "names", "associated", "with", "it", "."], "path": "adamfisk/littleshoot-client/tree/master/server/static/build/src/main/webapp/dojo/util/shrinksafe/src/org/dojotoolkit/shrinksafe/TokenMapper.java", "idx": 0}
{"memberVariables": {"ZERO_HASH=new Sha256Hash(new byte[32])": "Sha256Hash", "bytes": "byte[]"}, "code": ["Sha256Hash", "function", "(", "File", "f", ")", "{", "FileInputStream", "in", "=", "new", "FileInputStream", "(", "f", ")", ";", "try", "{", "return", "create", "(", "ByteStreams", ".", "toByteArray", "(", "in", ")", ")", ";", "}", "finally", "{", "in", ".", "close", "(", ")", ";", "}", "}"], "memberFunctions": {"createDouble": [["Sha256Hash", "byte[] contents"]], "hashCode": [["int"]], "equals": [["boolean", "Object o"]], "create": [["Sha256Hash", "byte[] contents"]], "toBigInteger": [["BigInteger"]], "toString": [["String"]], "duplicate": [["Sha256Hash"]], "compareTo": [["int", "Sha256Hash o"]], "getBytes": [["byte[]"]]}, "className": "Sha256Hash", "renamed": ["Sha256Hash", "function", "(", "File", "arg0", ")", "{", "FileInputStream", "loc0", "=", "new", "FileInputStream", "(", "arg0", ")", ";", "try", "{", "return", "create", "(", "ByteStreams", ".", "toByteArray", "(", "loc0", ")", ")", ";", "}", "finally", "{", "loc0", ".", "close", "(", ")", ";", "}", "}"], "nl": "Returns a hash of the given files contents. Reads the file fully into memory before hashing so only use with small files.", "nlToks": ["Returns", "a", "hash", "of", "the", "given", "files", "contents", ".", "Reads", "the", "file", "fully", "into", "memory", "before", "hashing", "so", "only", "use", "with", "small", "files", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/core/Sha256Hash.java", "idx": 2}
{"memberVariables": {"LOG=Logger.getLogger(ItemUID.class)": "Logger", "MYCLASS=(new ItemUID()).getClass()": "Class", "id": "String"}, "code": ["String", "function", "(", "Object", "obj", ",", "boolean", "canCreate", ")", "{", "String", "s", "=", "readObjectID", "(", "obj", ")", ";", "if", "(", "s", "==", "null", "&&", "canCreate", ")", "{", "s", "=", "createObjectID", "(", "obj", ")", ";", "}", "return", "s", ";", "}"], "memberFunctions": {"readObjectID": [["String", "Object obj"]], "createObjectID": [["String", "Object obj"]], "generateID": [["String"]], "toString": [["String"]]}, "className": "ItemUID", "renamed": ["String", "function", "(", "Object", "arg0", ",", "boolean", "arg1", ")", "{", "String", "loc0", "=", "readObjectID", "(", "arg0", ")", ";", "if", "(", "loc0", "==", "null", "&&", "arg1", ")", "{", "loc0", "=", "createObjectID", "(", "arg0", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Obtains the ID of an object and returns it as a String. If canCreate is true it will try to create a new ID for the object if it has none.", "nlToks": ["Obtains", "the", "ID", "of", "an", "object", "and", "returns", "it", "as", "a", "String", ".", "If", "canCreate", "is", "true", "it", "will", "try", "to", "create", "a", "new", "ID", "for", "the", "object", "if", "it", "has", "none", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/util/ItemUID.java", "idx": 3}
{"memberVariables": {}, "code": ["Matcher", "<", "T", ">", "function", "(", "T", "value", ")", "{", "return", "ComparatorMatcherBuilder", ".", "<", "T", ">", "usingNaturalOrdering", "(", ")", ".", "greaterThan", "(", "value", ")", ";", "}"], "memberFunctions": {"lessThan": [["Matcher<T>", "T value"]], "comparesEqualTo": [["Matcher<T>", "T value"]], "greaterThanOrEqualTo": [["Matcher<T>", "T value"]], "lessThanOrEqualTo": [["Matcher<T>", "T value"]]}, "className": "OrderingComparison", "renamed": ["Matcher", "<", "T", ">", "function", "(", "T", "arg0", ")", "{", "return", "ComparatorMatcherBuilder", ".", "<", "T", ">", "usingNaturalOrdering", "(", ")", ".", "greaterThan", "(", "arg0", ")", ";", "}"], "nl": "Creates a matcher of  {@link Comparable} object that matches when the examined object isgreater than the specified value, as reported by the compareTo method of the examined object. For example: assertThat(2, greaterThan(1))", "nlToks": ["Creates", "a", "matcher", "of", "-LCB-", "@link", "Comparable", "-RCB-", "object", "that", "matches", "when", "the", "examined", "object", "isgreater", "than", "the", "specified", "value", ",", "as", "reported", "by", "the", "compareTo", "method", "of", "the", "examined", "object", ".", "For", "example", ":", "assertThat", "-LRB-", "2", ",", "greaterThan", "-LRB-", "1", "-RRB-", "-RRB-"], "path": "plow/JavaHamcrest/tree/master/hamcrest-library/src/main/java/org/hamcrest/number/OrderingComparison.java", "idx": 4}
{"memberVariables": {"denom=1": "int", "num=1": "int"}, "code": ["int", "function", "(", ")", "{", "return", "denom", ";", "}"], "memberFunctions": {"isOne": [["boolean"]], "getScaled": [["int", "int dimension"]], "equals": [["boolean", "TJScalingFactor other"]], "getNum": [["int"]]}, "className": "TJScalingFactor", "renamed": ["int", "function", "(", ")", "{", "return", "denom", ";", "}"], "nl": "Returns denominator", "nlToks": ["Returns", "denominator"], "path": "princeofdream/USBCamera/tree/master/libuvccamera/src/main/jni/libjpeg-turbo-1.5.0/java/org/libjpegturbo/turbojpeg/TJScalingFactor.java", "idx": 5}
{"memberVariables": {"lat=0.0": "double", "id_str=null": "String", "screen_name=\"unknown\"": "String", "place_name=\"unknown\"": "String", "image=null": "String", "user_name=\"unknown@unknown\"": "String", "lng=0.0": "double", "created_at=null": "Date", "loc_radius=0": "int", "user_id=\"unknown\"": "String", "text=\"\"": "String", "extras=new ArrayList<String>()": "ArrayList<String>"}, "code": ["GenericJSONBuilder", "function", "(", "String", "link_", ")", "{", "image", "=", "link_", ";", "return", "this", ";", "}"], "memberFunctions": {"setIDstr": [["GenericJSONBuilder", "String id_str_"]], "setPlaceName": [["GenericJSONBuilder", "String name"]], "addText": [["GenericJSONBuilder", "String text_"]], "addField": [["GenericJSONBuilder", "String key", "String value"]], "insert": [["void", "Insertable msg"]], "setCoordinateRadius": [["GenericJSONBuilder", "int radius"]], "setAuthor": [["GenericJSONBuilder", "String author", "String domain"]], "builder": [["GenericJSONBuilder"]], "setCoordinate": [["GenericJSONBuilder", "double longtitude", "double latitude"]], "setCreatedTime": [["GenericJSONBuilder", "Date createdTime"]], "persist": [["void"]], "buildFieldJSON": [["String"]], "setUserid": [["GenericJSONBuilder", "String user_id_"]]}, "className": "DAOWrapper", "renamed": ["GenericJSONBuilder", "function", "(", "String", "arg0", ")", "{", "image", "=", "arg0", ";", "return", "this", ";", "}"], "nl": "Not required", "nlToks": ["Not", "required"], "path": "adarsh-ideal/loklak_server/tree/master/src/org/loklak/data/DAOWrapper.java", "idx": 6}
{"memberVariables": {"environments=null": "IEnvironments", "factories=new HashMap<String,XMPPConnectionFactory>()": "HashMap<String,XMPPConnectionFactory>", "config=null": "AutoSIMXMPPConfig"}, "code": ["void", "function", "(", "BundleContext", "context", ")", "{", "for", "(", "AutoSIMConnectionConfig", "connectionConfig", ":", "config", ".", "connections", ")", "{", "environments", ".", "deregisterConnectionFactory", "(", "connectionConfig", ".", "name", ")", ";", "factories", ".", "remove", "(", "connectionConfig", ".", "name", ")", ";", "}", "}"], "memberFunctions": {"start": [["void", "BundleContext context"]]}, "className": "XMPPServiceActivator", "renamed": ["void", "function", "(", "BundleContext", "arg0", ")", "{", "for", "(", "AutoSIMConnectionConfig", "loc0", ":", "config", ".", "connections", ")", "{", "environments", ".", "deregisterConnectionFactory", "(", "loc0", ".", "name", ")", ";", "factories", ".", "remove", "(", "loc0", ".", "name", ")", ";", "}", "}"], "nl": "Implements BundleActivator.stop(). Does nothing since the framework will automatically unregister any registered services.", "nlToks": ["Implements", "BundleActivator.stop", "-LRB-", "-RRB-", ".", "Does", "nothing", "since", "the", "framework", "will", "automatically", "unregister", "any", "registered", "services", "."], "path": "adityayadav76/internet_of_things_simulator/tree/master/AutoSIM-XMPP/src/com/automatski/autosim/xmpp/XMPPServiceActivator.java", "idx": 7}
{"memberVariables": {"mTestStream": "TestBufferedBlockInStream", "mBlockSize": "long", "mBufferSize": "long"}, "code": ["void", "function", "(", ")", "{", "mTestStream", ".", "seek", "(", "10", ")", ";", "Assert", ".", "assertEquals", "(", "10", ",", "mTestStream", ".", "read", "(", ")", ")", ";", "mTestStream", ".", "seek", "(", "2", ")", ";", "Assert", ".", "assertEquals", "(", "2", ",", "mTestStream", ".", "read", "(", ")", ")", ";", "mTestStream", ".", "seek", "(", "mBlockSize", ")", ";", "Assert", ".", "assertEquals", "(", "-", "1", ",", "mTestStream", ".", "read", "(", ")", ")", ";", "}"], "memberFunctions": {"before": [["void"]], "bufferRead": [["void"]], "skip": [["void"]], "bulkRead": [["void"]], "singleByteRead": [["void"]]}, "className": "BufferedBlockInStreamTest", "renamed": ["void", "function", "(", ")", "{", "mTestStream", ".", "seek", "(", "10", ")", ";", "Assert", ".", "assertEquals", "(", "10", ",", "mTestStream", ".", "read", "(", ")", ")", ";", "mTestStream", ".", "seek", "(", "2", ")", ";", "Assert", ".", "assertEquals", "(", "2", ",", "mTestStream", ".", "read", "(", ")", ")", ";", "mTestStream", ".", "seek", "(", "mBlockSize", ")", ";", "Assert", ".", "assertEquals", "(", "-", "1", ",", "mTestStream", ".", "read", "(", ")", ")", ";", "}"], "nl": "Tests for the  {@link BufferedBlockInStream#seek(long)} method.", "nlToks": ["Tests", "for", "the", "-LCB-", "@link", "BufferedBlockInStream", "#seek", "-LRB-", "long", "-RRB-", "-RCB-", "method", "."], "path": "poemlin/alluxio/tree/master/core/client/src/test/java/alluxio/client/block/BufferedBlockInStreamTest.java", "idx": 10}
{"memberVariables": {}, "code": ["void", "function", "(", ")", "{", "final", "CountDownLatch", "finalizerRan", "=", "new", "CountDownLatch", "(", "1", ")", ";", "WeakReference", "<", "Object", ">", "ref", "=", "new", "WeakReference", "<", "Object", ">", "(", "new", "Object", "(", ")", "{", "@", "Override", "protected", "void", "finalize", "(", ")", "{", "finalizerRan", ".", "countDown", "(", ")", ";", "}", "}", ")", ";", "await", "(", "finalizerRan", ")", ";", "awaitClear", "(", "ref", ")", ";", "System", ".", "runFinalization", "(", ")", ";", "}"], "memberFunctions": {"formatRuntimeException": [["RuntimeException", "String format", "Object... args"]], "await": [["void", "CountDownLatch latch"]], "createUnreachableLatchFinalizer": [["void", "final CountDownLatch latch"]], "timeoutSeconds": [["long"]], "isDone": [["boolean"]], "awaitDone": [["void", "Future<?> future"], ["void", "FinalizationPredicate predicate"]], "awaitClear": [["void", "final WeakReference<?> ref"]]}, "className": "GcFinalization", "renamed": ["void", "function", "(", ")", "{", "final", "CountDownLatch", "loc0", "=", "new", "CountDownLatch", "(", "1", ")", ";", "WeakReference", "<", "Object", ">", "loc1", "=", "new", "WeakReference", "<", "Object", ">", "(", "new", "Object", "(", ")", "{", "@", "Override", "protected", "void", "finalize", "(", ")", "{", "loc0", ".", "countDown", "(", ")", ";", "}", "}", ")", ";", "await", "(", "loc0", ")", ";", "awaitClear", "(", "loc1", ")", ";", "System", ".", "runFinalization", "(", ")", ";", "}"], "nl": "Tries to perform a \"full\" garbage collection cycle (including processing of weak references and invocation of finalize methods) and waits for it to complete.  Ensures that at least one weak reference has been cleared and one  {@code finalize} method has been run before thismethod returns.  This method may be useful when testing the garbage collection mechanism itself, or inhibiting a spontaneous GC initiation in subsequent code. In contrast, a plain call to  {@link java.lang.System#gc()} does not ensure finalizationprocessing and may run concurrently, for example, if the JVM flag  {@code -XX:+ExplicitGCInvokesConcurrent} is used.Whenever possible, it is preferable to test directly for some observable change resulting from GC, as with  {@link #awaitClear}.  Because there are no guarantees for the order of GC finalization processing, there may still be some unfinished work for the GC to do after this method returns. This method does not create any memory pressure as would be required to cause soft references to be processed.", "nlToks": ["Tries", "to", "perform", "a", "``", "full", "''", "garbage", "collection", "cycle", "-LRB-", "including", "processing", "of", "weak", "references", "and", "invocation", "of", "finalize", "methods", "-RRB-", "and", "waits", "for", "it", "to", "complete", ".", "Ensures", "that", "at", "least", "one", "weak", "reference", "has", "been", "cleared", "and", "one", "-LCB-", "@code", "finalize", "-RCB-", "method", "has", "been", "run", "before", "thismethod", "returns", ".", "This", "method", "may", "be", "useful", "when", "testing", "the", "garbage", "collection", "mechanism", "itself", ",", "or", "inhibiting", "a", "spontaneous", "GC", "initiation", "in", "subsequent", "code", ".", "In", "contrast", ",", "a", "plain", "call", "to", "-LCB-", "@link", "java.lang.System", "#gc", "-LRB-", "-RRB-", "-RCB-", "does", "not", "ensure", "finalizationprocessing", "and", "may", "run", "concurrently", ",", "for", "example", ",", "if", "the", "JVM", "flag", "-LCB-", "@code", "-", "XX", ":", "+", "ExplicitGCInvokesConcurrent", "-RCB-", "is", "used.Whenever", "possible", ",", "it", "is", "preferable", "to", "test", "directly", "for", "some", "observable", "change", "resulting", "from", "GC", ",", "as", "with", "-LCB-", "@link", "#awaitClear", "-RCB-", ".", "Because", "there", "are", "no", "guarantees", "for", "the", "order", "of", "GC", "finalization", "processing", ",", "there", "may", "still", "be", "some", "unfinished", "work", "for", "the", "GC", "to", "do", "after", "this", "method", "returns", ".", "This", "method", "does", "not", "create", "any", "memory", "pressure", "as", "would", "be", "required", "to", "cause", "soft", "references", "to", "be", "processed", "."], "path": "hazendaz/guava/tree/master/guava-testlib/src/com/google/common/testing/GcFinalization.java", "idx": 12}
{"memberVariables": {"mManager": "TransferManager", "BUCKET_NAME=\"testBucket\"": "String", "KEY=\"testKey\"": "String", "mStream": "S3ADirectOutputStream"}, "code": ["void", "function", "(", ")", "{", "mManager", "=", "Mockito", ".", "mock", "(", "TransferManager", ".", "class", ")", ";", "Upload", "result", "=", "Mockito", ".", "mock", "(", "Upload", ".", "class", ")", ";", "Mockito", ".", "when", "(", "mManager", ".", "upload", "(", "Mockito", ".", "any", "(", "PutObjectRequest", ".", "class", ")", ")", ")", ".", "thenReturn", "(", "result", ")", ";", "mStream", "=", "new", "S3ADirectOutputStream", "(", "BUCKET_NAME", ",", "KEY", ",", "mManager", ")", ";", "}"], "memberFunctions": {"close": [["void"]]}, "className": "S3ADirectOutputStreamTest", "renamed": ["void", "function", "(", ")", "{", "mManager", "=", "Mockito", ".", "mock", "(", "TransferManager", ".", "class", ")", ";", "Upload", "loc0", "=", "Mockito", ".", "mock", "(", "Upload", ".", "class", ")", ";", "Mockito", ".", "when", "(", "mManager", ".", "upload", "(", "Mockito", ".", "any", "(", "PutObjectRequest", ".", "class", ")", ")", ")", ".", "thenReturn", "(", "loc0", ")", ";", "mStream", "=", "new", "S3ADirectOutputStream", "(", "BUCKET_NAME", ",", "KEY", ",", "mManager", ")", ";", "}"], "nl": "Sets the properties and configuration before each test runs.", "nlToks": ["Sets", "the", "properties", "and", "configuration", "before", "each", "test", "runs", "."], "path": "poemlin/alluxio/tree/master/underfs/s3a/src/test/java/alluxio/underfs/s3a/S3ADirectOutputStreamTest.java", "idx": 14}
{"memberVariables": {"LINE_SEPARATOR=System.getProperty(\"line.separator\")": "String"}, "code": ["String", "function", "(", "Object", "o", ",", "String", "indent", ")", "{", "return", "getDocs", "(", "o", ",", "indent", ",", "\"/** \"", ",", "\" *  \"", ",", "\" */\"", ")", ";", "}"], "memberFunctions": {"setDocs": [["void", "Object o", "String s"]], "appendComment": [["int", "StringBuffer sb", "String prefix", "String comment", "int nlprefix"]], "hasDocs": [["boolean", "Object o"]], "getComments": [["String", "Object o"], ["String", "Object o", "String header", "String prefix", "String footer"]], "defaultFor": [["String", "Object o", "String indent"]]}, "className": "DocumentationManager", "renamed": ["String", "function", "(", "Object", "arg0", ",", "String", "arg1", ")", "{", "return", "getDocs", "(", "arg0", ",", "arg1", ",", "\"srini_string\"", ",", "\"srini_string\"", ",", "\"srini_string\"", ")", ";", "}"], "nl": "This function returns the documentation in C-style comment format.", "nlToks": ["This", "function", "returns", "the", "documentation", "in", "C-style", "comment", "format", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/uml/DocumentationManager.java", "idx": 15}
{"memberVariables": {"LOG=LogUtils.getL7dLogger(AbstractStaticFailoverStrategy.class)": "Logger", "delayBetweenRetries": "long", "alternateAddresses": "List<String>"}, "code": ["Level", "function", "(", ")", "{", "return", "Level", ".", "WARNING", ";", "}"], "memberFunctions": {"selectAlternateAddress": [["String", "List<String> alternates"]], "setDelayBetweenRetries": [["void", "long delay"]], "getEndpoints": [["List<Endpoint>", "Exchange exchange", "boolean acceptCandidatesWithSameAddress"]], "getNextAlternate": [["T", "List<T> alternates"]], "getDelayBetweenRetries": [["long"]], "setAlternateAddresses": [["void", "List<String> alternateAddresses"]], "getAlternateEndpoints": [["List<Endpoint>", "Exchange exchange"]], "selectAlternateEndpoint": [["Endpoint", "List<Endpoint> alternates"]], "getAlternateAddresses": [["List<String>", "Exchange exchange"]]}, "className": "AbstractStaticFailoverStrategy", "renamed": ["Level", "function", "(", ")", "{", "return", "Level", ".", "WARNING", ";", "}"], "nl": "Get the log level for reporting the selection of the new alternative address or endpoint", "nlToks": ["Get", "the", "log", "level", "for", "reporting", "the", "selection", "of", "the", "new", "alternative", "address", "or", "endpoint"], "path": "primesign/cxf/tree/master/rt/features/clustering/src/main/java/org/apache/cxf/clustering/AbstractStaticFailoverStrategy.java", "idx": 17}
{"memberVariables": {"middle": "TSTNode", "data": "char", "left": "TSTNode", "root": "TSTNode", "right": "TSTNode", "al": "ArrayList<String>", "is_End_Of_String": "boolean"}, "code": ["boolean", "function", "(", "String", "word", ")", "{", "return", "search", "(", "root", ",", "word", ".", "toCharArray", "(", ")", ",", "0", ")", ";", "}"], "memberFunctions": {"traverse": [["void", "TSTNode key", "String str"]], "makeEmpty": [["void"]], "isEmpty": [["boolean"]], "insert": [["void", "String word"], ["TSTNode", "TSTNode key", "char[] word", "int pos"]], "toString": [["String"]], "main": [["void", "String[] args"]], "delete": [["void", "String word"], ["void", "TSTNode key", "char[] word", "int pos"]]}, "className": "TernarySearchTree", "renamed": ["boolean", "function", "(", "String", "arg0", ")", "{", "return", "search", "(", "root", ",", "arg0", ".", "toCharArray", "(", ")", ",", "0", ")", ";", "}"], "nl": "function to search for a word", "nlToks": ["function", "to", "search", "for", "a", "word"], "path": "piyushbajaj/Java_Tutorial_DS/tree/master/Trie/TernarySearchTree.java", "idx": 18}
{"memberVariables": {"tx": "Transaction", "ti": "TableInfo", "nextblknum": "int", "lhsscan": "Scan", "chunksize": "int", "filesize": "int", "prodscan": "Scan", "rhsscan=null": "Scan"}, "code": ["void", "function", "(", ")", "{", "prodscan", ".", "close", "(", ")", ";", "}"], "memberFunctions": {"next": [["boolean"]], "getInt": [["int", "String fldname"]], "getVal": [["Constant", "String fldname"]], "useNextChunk": [["boolean"]], "beforeFirst": [["void"]], "getString": [["String", "String fldname"]], "hasField": [["boolean", "String fldname"]]}, "className": "MultiBufferProductScan", "renamed": ["void", "function", "(", ")", "{", "prodscan", ".", "close", "(", ")", ";", "}"], "nl": "Closes the current scans.", "nlToks": ["Closes", "the", "current", "scans", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/multibuffer/MultiBufferProductScan.java", "idx": 21}
{"memberVariables": {"userStoreManagers=new HashMap<String,Map<String,String>>()": "Map<String,Map<String,String>>"}, "code": ["Map", "<", "String", ",", "String", ">", "function", "(", "PropertyDTO", "[", "]", "properties", ")", "{", "Map", "<", "String", ",", "String", ">", "propertyMap", "=", "new", "HashMap", "<", "String", ",", "String", ">", "(", ")", ";", "for", "(", "PropertyDTO", "propertyDTO", ":", "properties", ")", "{", "if", "(", "propertyDTO", ".", "getValue", "(", ")", "!=", "null", ")", "{", "propertyMap", ".", "put", "(", "propertyDTO", ".", "getName", "(", ")", ",", "propertyDTO", ".", "getValue", "(", ")", ")", ";", "}", "}", "return", "propertyMap", ";", "}"], "memberFunctions": {"getAvailableDomainNames": [["Set<String>"]], "clearUserStoreManager": [["void"]], "addUserStoreManager": [["void", "PropertyDTO[] userStoreManager", "String domainName"]], "getUserStoreManager": [["Map<String,String>", "String domainName"]]}, "className": "UserStoreMgtDataKeeper", "renamed": ["Map", "<", "String", ",", "String", ">", "function", "(", "PropertyDTO", "[", "]", "arg0", ")", "{", "Map", "<", "String", ",", "String", ">", "loc0", "=", "new", "HashMap", "<", "String", ",", "String", ">", "(", ")", ";", "for", "(", "PropertyDTO", "loc1", ":", "arg0", ")", "{", "if", "(", "loc1", ".", "getValue", "(", ")", "!=", "null", ")", "{", "loc0", ".", "put", "(", "loc1", ".", "getName", "(", ")", ",", "loc1", ".", "getValue", "(", ")", ")", ";", "}", "}", "return", "loc0", ";", "}"], "nl": "Convert a given String[] propertyName#propertyValue to a Map", "nlToks": ["Convert", "a", "given", "String", "-LSB-", "-RSB-", "propertyName", "#propertyValue", "to", "a", "Map"], "path": "harsha1979/carbon-identity/tree/master/components/user-store/org.wso2.carbon.identity.user.store.configuration.ui/src/main/java/org/wso2/carbon/identity/user/store/configuration/ui/utils/UserStoreMgtDataKeeper.java", "idx": 22}
{"memberVariables": {"XML_NAMESPACE=\"http://www.w3.org/XML/1998/namespace\"": "String", "stream": "InputStream", "doc": "Document", "namespaces": "Map<String,String>"}, "code": ["String", "[", "]", "function", "(", "String", "expression", ",", "Map", "<", "String", ",", "String", ">", "namespaces", ")", "{", "return", "getNodes", "(", "expression", ",", "namespaces", ",", "String", ".", "class", ")", ";", "}"], "memberFunctions": {"getLinks": [["URI[]", "String expression", "Map<String,String> namespaces"]], "getPrefix": [["String", "String namespace"]], "getNodes": [["T[]", "String expression", "Class<T> cls"], ["T[]", "String expression", "Map<String,String> namespaces", "Class<T> cls"]], "setBuffering": [["void"]], "getValue": [["String", "String expression"], ["String", "String expression", "Map<String,String> namespaces"], ["T", "String expression", "Map<String,String> namespaces", "Class<T> cls"]], "getLink": [["URI", "String expression"], ["URI", "String expression", "Map<String,String> namespaces"]], "getNamespaceURI": [["String", "String prefix"]], "getPrefixes": [["Iterator<?>", "String namespace"]], "readPrimitiveValue": [["Object", "Node node", "Class<T> cls"]], "getNode": [["T", "String expression", "Class<T> cls"], ["T", "String expression", "Map<String,String> namespaces", "Class<T> cls"]], "getBaseURI": [["URI"]], "evaluate": [["Object", "String expression", "Map<String,String> namespaces", "QName type"]], "readNode": [["T", "Node node", "Class<T> cls"]]}, "className": "XMLSource", "renamed": ["String", "[", "]", "function", "(", "String", "arg0", ",", "Map", "<", "String", ",", "String", ">", "arg1", ")", "{", "return", "getNodes", "(", "arg0", ",", "arg1", ",", "String", ".", "class", ")", ";", "}"], "nl": "Find the attributes or simple/text nodes", "nlToks": ["Find", "the", "attributes", "or", "simple/text", "nodes"], "path": "primesign/cxf/tree/master/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/ext/xml/XMLSource.java", "idx": 24}
{"memberVariables": {"extensionInfo": "ExtensionInfo", "loader": "ClassFileLoader", "eq": "ErrorQueue", "outputFiles=new LinkedHashSet<>()": "Collection<JavaFileObject>", "allExtensions": "List<ExtensionInfo>", "jobs=new ArrayList<>()": "List<Job>"}, "code": ["boolean", "function", "(", "Collection", "<", "Source", ">", "sources", ")", "{", "return", "runToGoal", "(", "sources", ",", "new", "GoalFactory", "(", ")", "{", "@", "Override", "public", "Goal", "getGoal", "(", "Job", "job", ")", "{", "return", "sourceExtension", "(", ")", ".", "getValidationGoal", "(", "job", ")", ";", "}", "}", ")", ";", "}"], "memberFunctions": {"outputFiles": [["Collection<JavaFileObject>"]], "outputWidth": [["int"]], "loader": [["ClassFileLoader"]], "createCodeWriter": [["CodeWriter", "OutputStream w"], ["CodeWriter", "OutputStream w", "int width"], ["CodeWriter", "Writer w"], ["CodeWriter", "Writer w", "int width"]], "jobs": [["List<Job>"]], "errorQueue": [["ErrorQueue"]], "useFullyQualifiedNames": [["boolean"]], "compile": [["boolean", "Collection<FileSource> sources"]], "getGoal": [["Goal", "Job job"]], "sourceExtension": [["ExtensionInfo"]], "compileFiles": [["boolean", "Collection<String> filenames"]], "addExtension": [["void", "ExtensionInfo ext"]], "serializeClassInfo": [["boolean"]], "runToGoal": [["boolean", "Collection<? extends Source> sources", "GoalFactory goalFactory"]], "allExtensions": [["List<ExtensionInfo>"]]}, "className": "Compiler", "renamed": ["boolean", "function", "(", "Collection", "<", "Source", ">", "arg0", ")", "{", "return", "runToGoal", "(", "arg0", ",", "new", "GoalFactory", "(", ")", "{", "@", "Override", "public", "Goal", "getGoal", "(", "Job", "arg1", ")", "{", "return", "sourceExtension", "(", ")", ".", "getValidationGoal", "(", "arg1", ")", ";", "}", "}", ")", ";", "}"], "nl": "Validates the files listed in the set of Sources  {@code source} byrunning passes that are dependent on the validation goal. Returns true on success.", "nlToks": ["Validates", "the", "files", "listed", "in", "the", "set", "of", "Sources", "-LCB-", "@code", "source", "-RCB-", "byrunning", "passes", "that", "are", "dependent", "on", "the", "validation", "goal", ".", "Returns", "true", "on", "success", "."], "path": "polyglot-compiler/polyglot/tree/master/src/polyglot/frontend/Compiler.java", "idx": 26}
{"memberVariables": {"context": "Context"}, "code": ["void", "function", "(", "boolean", "value", ")", "{", "ContentResolver", "localContentResolver", "=", "context", ".", "getContentResolver", "(", ")", ";", "Settings", ".", "Secure", ".", "setLocationProviderEnabled", "(", "localContentResolver", ",", "LocationManager", ".", "GPS_PROVIDER", ",", "value", ")", ";", "}"], "memberFunctions": {"reboot": [["void"]], "getGPS": [["boolean"]]}, "className": "SystemCommands", "renamed": ["void", "function", "(", "boolean", "arg0", ")", "{", "ContentResolver", "loc0", "=", "context", ".", "getContentResolver", "(", ")", ";", "Settings", ".", "Secure", ".", "setLocationProviderEnabled", "(", "loc0", ",", "LocationManager", ".", "GPS_PROVIDER", ",", "arg0", ")", ";", "}"], "nl": "Enable/Disable GPS", "nlToks": ["Enable/Disable", "GPS"], "path": "0-kaladin/ad-away/tree/master/libraries/RootCommands/src/main/java/org/sufficientlysecure/rootcommands/SystemCommands.java", "idx": 27}
{"memberVariables": {"mTmpValue=new TypedValue()": "TypedValue"}, "code": ["boolean", "function", "(", "View", "view", ")", "{", "if", "(", "Build", ".", "VERSION", ".", "SDK_INT", ">=", "VERSION_CODES", ".", "JELLY_BEAN_MR1", ")", "{", "return", "view", ".", "getLayoutDirection", "(", ")", "==", "View", ".", "LAYOUT_DIRECTION_RTL", ";", "}", "else", "{", "return", "false", ";", "}", "}"], "memberFunctions": {"showSystemUI": [["void", "Activity activity"]], "getSystemBarHeightInDp": [["int", "Context context"]], "getStatusBarHeight": [["int", "Context context"]], "getStatusBarHeightInDp": [["int", "Context context"]], "getActionBarHeightInDp": [["int", "Context context"]], "hideSystemUI": [["void", "Activity activity"]], "getSystemBarHeight": [["int", "Context context"]], "pxToDp": [["int", "Context context", "int px"], ["int", "float px"]], "getActionBarHeight": [["int", "Context context"]], "getResourceValue": [["int", "Context context", "int resId"]], "findById": [["T", "View view", "int id"], ["T", "Activity activity", "int id"]], "dpToPx": [["int", "Context context", "int dp"], ["int", "float dp"]], "getScreenRawSize": [["Point", "Display display"]]}, "className": "ViewUtils", "renamed": ["boolean", "function", "(", "View", "arg0", ")", "{", "if", "(", "Build", ".", "VERSION", ".", "SDK_INT", ">=", "VERSION_CODES", ".", "JELLY_BEAN_MR1", ")", "{", "return", "arg0", ".", "getLayoutDirection", "(", ")", "==", "View", ".", "LAYOUT_DIRECTION_RTL", ";", "}", "else", "{", "return", "false", ";", "}", "}"], "nl": "23       Returns true if view's layout direction is right-to-left. 24       25       @param view the View whose layout is being considered 26", "nlToks": ["23", "Returns", "true", "if", "view", "'s", "layout", "direction", "is", "right-to-left", ".", "24", "25", "@param", "view", "the", "View", "whose", "layout", "is", "being", "considered", "26"], "path": "16ren/Android-Next/tree/master/core/src/main/java/com/mcxiaoke/next/utils/ViewUtils.java", "idx": 28}
{"memberVariables": {"lists=new Hashtable()": "Hashtable", "statuses=new Hashtable()": "Hashtable"}, "code": ["Checklist", "function", "(", "Object", "dm", ")", "{", "Checklist", "cl", ";", "java", ".", "lang", ".", "Class", "cls", "=", "dm", ".", "getClass", "(", ")", ";", "while", "(", "cls", "!=", "null", ")", "{", "cl", "=", "lookupChecklist", "(", "cls", ")", ";", "if", "(", "cl", "!=", "null", ")", "{", "return", "cl", ";", "}", "cls", "=", "cls", ".", "getSuperclass", "(", ")", ";", "}", "return", "null", ";", "}"], "memberFunctions": {"getStatusFor": [["ChecklistStatus", "Object dm"]], "lookupChecklist": [["Checklist", "Class cls"]], "register": [["void", "Object dm", "Checklist cl"]]}, "className": "CheckManager", "renamed": ["Checklist", "function", "(", "Object", "arg0", ")", "{", "Checklist", "loc0", ";", "java", ".", "lang", ".", "Class", "loc1", "=", "arg0", ".", "getClass", "(", ")", ";", "while", "(", "loc1", "!=", "null", ")", "{", "loc0", "=", "lookupChecklist", "(", "loc1", ")", ";", "if", "(", "loc0", "!=", "null", ")", "{", "return", "loc0", ";", "}", "loc1", "=", "loc1", ".", "getSuperclass", "(", ")", ";", "}", "return", "null", ";", "}"], "nl": "Gets the checklist for an element.", "nlToks": ["Gets", "the", "checklist", "for", "an", "element", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/cognitive/checklist/CheckManager.java", "idx": 30}
{"memberVariables": {"instance": "Date", "cal": "GregorianCalendar"}, "code": ["void", "function", "(", ")", "{", "int", "day", "=", "0", ";", "try", "{", "instance", ".", "setDay", "(", "day", ")", ";", "fail", "(", "\"Did not throw exception\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "e", ")", "{", "}", "day", "=", "32", ";", "try", "{", "instance", ".", "setDay", "(", "day", ")", ";", "fail", "(", "\"Did not throw exception\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "e", ")", "{", "}", "}"], "memberFunctions": {"testConstructorWithString": [["void"]], "testSetMonth": [["void"]], "testSetYearThreeDigits": [["void"]], "testConstructor": [["void"]], "testToStringFourDigitYear": [["void"]], "testEqualsAfterInit": [["void"]], "testEqualsWrongType": [["void"]], "testSetYearTwoDigit": [["void"]], "testEqualsWhenChanged": [["void"]], "testToISO8601WithTime": [["void"]], "setUp": [["void"]], "testGetMonth": [["void"]], "testEqualsItself": [["void"]], "testSetYearNegative": [["void"]], "testConstructorWithValues": [["void"]], "testGetYear": [["void"]], "testToISO8601WithTimeAndZeroZone": [["void"]], "testToISO8601FourDigitYear": [["void"]], "testSetDay": [["void"]], "testSetYearFourDigit": [["void"]], "testToStringTwoDigitYear": [["void"]], "testToISO8601WithTimeAndPositiveOffset": [["void"]], "testToISO8601TwoDigitYear": [["void"]], "testSetYearFiveDigits": [["void"]], "testToISO8601WithTimeAndNegativeOffset": [["void"]], "testGetDay": [["void"]], "testSetMonthOutOfBounds": [["void"]]}, "className": "DateTest", "renamed": ["void", "function", "(", ")", "{", "int", "loc0", "=", "0", ";", "try", "{", "instance", ".", "setDay", "(", "loc0", ")", ";", "fail", "(", "\"srini_string\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "loc1", ")", "{", "}", "loc0", "=", "32", ";", "try", "{", "instance", ".", "setDay", "(", "loc0", ")", ";", "fail", "(", "\"srini_string\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "loc1", ")", "{", "}", "}"], "nl": "Test method for  {@link net.sf.marineapi.nmea.util.Date#setDay(int)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.util.Date", "#setDay", "-LRB-", "int", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/util/DateTest.java", "idx": 32}
{"memberVariables": {"tiles": "Array<Array<Array<Card>>>", "HUMAN_PLAYER=1": "int", "name": "String", "id": "int", "COMPUTER_PLAYER=-1": "int"}, "code": ["int", "function", "(", "int", "lane", ",", "int", "player", ")", "{", "int", "tile", "=", "0", ";", "return", "tile", ";", "}"], "memberFunctions": {"playerBaseAttacked": [["int"]], "laneWithMoreEnemiesInvading": [["int", "int player"]], "nextAvailableLane": [["int", "int player"]], "read": [["void", "Json json", "JsonValue jsonData"]], "nextAvailableTile": [["int", "int lane", "int player"]], "laneWithMoreEnemies": [["int", "int player"]], "getName": [["String"]], "tileFurthestFromBase": [["int", "int lane", "int player"]], "enemyBaseAttacked": [["int"]], "getEnemyCards": [["Array<Card>"]], "cardOnMap": [["boolean", "Card c", "int lane", "int player"]], "addCard": [["void", "Card card", "int tile", "int lane"]], "getPlayerCards": [["Array<Card>"]], "setTiles": [["void", "Array<Array<Array<Card>>> tiles"]], "write": [["void", "Json json"]], "laneWithLessAllies": [["int", "int player"]], "getTiles": [["Array<Array<Array<Card>>>"]]}, "className": "BattleMap", "renamed": ["int", "function", "(", "int", "arg0", ",", "int", "arg1", ")", "{", "int", "loc0", "=", "0", ";", "return", "loc0", ";", "}"], "nl": "Returns the next available tile in the specified lane that is closest to the base. A tile is available if it's not occupied by a card.", "nlToks": ["Returns", "the", "next", "available", "tile", "in", "the", "specified", "lane", "that", "is", "closest", "to", "the", "base", ".", "A", "tile", "is", "available", "if", "it", "'s", "not", "occupied", "by", "a", "card", "."], "path": "prativa/shadowstruggles/tree/master/Shadow Struggles/model/br/edu/ifsp/pds/shadowstruggles/model/BattleMap.java", "idx": 34}
{"memberVariables": {}, "code": ["Matrix", "function", "(", "Matrix", "matrix", ")", "{", "return", "(", "transpose", "(", "cofactor", "(", "matrix", ")", ")", ".", "multiplyByConstant", "(", "1.0", "/", "determinant", "(", "matrix", ")", ")", ")", ";", "}"], "memberFunctions": {"changeSign": [["int", "int i"]], "add": [["Matrix", "Matrix matrix1", "Matrix matrix2"]], "cofactor": [["Matrix", "Matrix matrix"]], "subtract": [["Matrix", "Matrix matrix1", "Matrix matrix2"]], "transpose": [["Matrix", "Matrix matrix"]], "multiply": [["Matrix", "Matrix matrix1", "Matrix matrix2"]], "createSubMatrix": [["Matrix", "Matrix matrix", "int excluding_row", "int excluding_col"]], "determinant": [["double", "Matrix matrix"]]}, "className": "MatrixMathematics", "renamed": ["Matrix", "function", "(", "Matrix", "arg0", ")", "{", "return", "(", "transpose", "(", "cofactor", "(", "arg0", ")", ")", ".", "multiplyByConstant", "(", "1.0", "/", "determinant", "(", "arg0", ")", ")", ")", ";", "}"], "nl": "Inverse of a matrix - A-1  A = I where I is the identity matrix A matrix that have inverse is called non-singular or invertible. If the matrix does not have inverse it is called singular. For a singular matrix the values of the inverted matrix are either NAN or Infinity Only square matrices have inverse and the following method will throw exception if the matrix is not square.", "nlToks": ["Inverse", "of", "a", "matrix", "-", "A-1", "A", "=", "I", "where", "I", "is", "the", "identity", "matrix", "A", "matrix", "that", "have", "inverse", "is", "called", "non-singular", "or", "invertible", ".", "If", "the", "matrix", "does", "not", "have", "inverse", "it", "is", "called", "singular", ".", "For", "a", "singular", "matrix", "the", "values", "of", "the", "inverted", "matrix", "are", "either", "NAN", "or", "Infinity", "Only", "square", "matrices", "have", "inverse", "and", "the", "following", "method", "will", "throw", "exception", "if", "the", "matrix", "is", "not", "square", "."], "path": "poi233/GoGo/tree/master/gogo/src/main/java/com/example/cc/gogo/LinearRegression/MatrixMathematics.java", "idx": 35}
{"memberVariables": {"NOOP=new JobExitStatus(\"NOOP\")": "JobExitStatus", "FILES_AVAILABLE=new JobExitStatus(\"FILES_AVAILABLE\",\"Files avaialable to Process\")": "JobExitStatus", "CAPTURE_SOURCE_METADATA_ERRORS=new JobExitStatus(\"CAPTURE_SOURCE_METADATA_ERRORS\",\"There are some errors when capturing the file metadata from publisher\")": "JobExitStatus", "SOURCE_DELETION_ERRORS=new JobExitStatus(\"SOURCE_DELETION_ERRORS\",\"There are some errors when deleting the file from publisher\")": "JobExitStatus", "DOWNLOAD_ERRORS=new JobExitStatus(\"DOWNLOAD_ERRORS\",\"There are some errors when downloading the file from publisher\")": "JobExitStatus", "CONFIG_VALIDATION_FAIL=new JobExitStatus(\"CONFIG_VALIDATION_FAIL\",\"The required parameters are not available or Invalid Parameters are Provided\")": "JobExitStatus", "MOVEFILES_WORKAREA_ERRORS=new JobExitStatus(\"MOVEFILES_WORKAREA_ERRORS\",\"There are some files already exists in the destination\")": "JobExitStatus", "EXECUTING=new JobExitStatus(\"EXECUTING\")": "JobExitStatus", "DB_NOT_ACCESSABLE=new JobExitStatus(\"DB_NOT_ACCESSABLE\",\"Database is not accessible at this time. Please contact support immediately\")": "JobExitStatus", "ANOTHER_FETCHER_IS_RUNNING=new JobExitStatus(\"ANOTHER_FETCHER_IS_RUNNING\",\"Another Fetcher Already running\")": "JobExitStatus", "RUNFAILED=new JobExitStatus(\"RUNFAILED\",\"Current Run failed Due To Internal System Error\")": "JobExitStatus", "MULTIPLE_PARTIAL_ERRORS=new JobExitStatus(\"MULTIPLE_PARTIAL_ERRORS\",\"There are some errors while deleting or downloading the file from publisher\")": "JobExitStatus", "MOVEFILES_DESTINATION_ERRORS=new JobExitStatus(\"MOVEFILES_DESTINATION_ERRORS\",\"There are some files already exists in the destination\")": "JobExitStatus", "NO_NEW_FILES_FOUND=new JobExitStatus(\"NO_NEW_FILES_FOUND\",\"No new files found in the source\")": "JobExitStatus", "WORK_AREA_NOT_ACCESSABLE=new JobExitStatus(\"WORK_AREA_NOT_ACCESSABLE\",\"File system work area is not accessible. Please contact support immediately\")": "JobExitStatus", "PROCESS_VALIDATION_FAIL=new JobExitStatus(\"PROCESS_VALIDATION_FAIL\",\"Consistency check between work area and data unit failed. Please Contact Support immediately \")": "JobExitStatus", "DESTINATION_NOT_ACCESSABLE=new JobExitStatus(\"DESTINATION_NOT_ACCESSABLE\",\"Archive Filesystem(I Drive?) is not accessible. Please contact support immediately\")": "JobExitStatus", "UNKNOWN=new JobExitStatus(\"UNKNOWN\")": "JobExitStatus", "DELAYERING_ERRORS=new JobExitStatus(\"DELAYERING_ERRORS\",\"There are some errors when delayering the file from publisher\")": "JobExitStatus", "thisExitStatus": "ExitStatus", "partialExitCodes": "List<JobExitStatus>", "NO_FILES_FOUND=new JobExitStatus(\"NO_FILES_FOUND\",\"No files found in the source\")": "JobExitStatus", "SOURCE_NOT_ACCESSABLE=new JobExitStatus(\"SOURCE_NOT_ACCESSABLE\",\"Source is not accessible at this time. Please contact support immediately\")": "JobExitStatus", "COMPLETED=new JobExitStatus(\"COMPLETED\",\"Current Run was successful\")": "JobExitStatus"}, "code": ["String", "function", "(", ")", "{", "return", "thisExitStatus", ".", "getExitCode", "(", ")", ";", "}"], "memberFunctions": {"getPartialFailureCodes": [["List<JobExitStatus>"]], "hashCode": [["int"]], "equals": [["boolean", "Object obj"]], "getExitStatus": [["ExitStatus"]], "toString": [["String"]], "isPartialFailureCode": [["boolean", "ExitStatus exitStatus"], ["boolean", "JobExitStatus exitStatus"]], "getExitDescription": [["String"]]}, "className": "JobExitStatus", "renamed": ["String", "function", "(", ")", "{", "return", "thisExitStatus", ".", "getExitCode", "(", ")", ";", "}"], "nl": "Getter for the exit code (defaults to blank).", "nlToks": ["Getter", "for", "the", "exit", "code", "-LRB-", "defaults", "to", "blank", "-RRB-", "."], "path": "pkesireddy/portico_fletcher/tree/master/fetcher-master/fetcher-core/src/main/java/org/ithaka/cm/fetcher/core/jobs/JobExitStatus.java", "idx": 36}
{"memberVariables": {"nsh": "NamespaceHandler", "ui": "UserInterface", "uac": "UserAgentCallback"}, "code": ["boolean", "function", "(", "Object", "e", ")", "{", "return", "ui", ".", "isHover", "(", "(", "Element", ")", "e", ")", ";", "}"], "memberFunctions": {"getClass": [["String", "Object e"]], "isLink": [["boolean", "Object e"]], "getAttributeValue": [["String", "Object e", "String attrName"], ["String", "Object e", "String namespaceURI", "String attrName"]], "isVisited": [["boolean", "Object e"]], "isFocus": [["boolean", "Object e"]], "getLang": [["String", "Object e"]], "getID": [["String", "Object e"]], "getNonCssStyling": [["String", "Object e"]], "getElementStyling": [["String", "Object e"]], "isActive": [["boolean", "Object e"]]}, "className": "StandardAttributeResolver", "renamed": ["boolean", "function", "(", "Object", "arg0", ")", "{", "return", "ui", ".", "isHover", "(", "(", "Element", ")", "arg0", ")", ";", "}"], "nl": "Gets the hover attribute of the StandardAttributeResolver object", "nlToks": ["Gets", "the", "hover", "attribute", "of", "the", "StandardAttributeResolver", "object"], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/context/StandardAttributeResolver.java", "idx": 38}
{"memberVariables": {"signToken=true": "boolean", "conditionsProvider=new DefaultConditionsProvider()": "ConditionsProvider", "LOG=LogUtils.getL7dLogger(SCTSAMLTokenProvider.class)": "Logger", "attributeStatementProviders": "List<AttributeStatementProvider>", "subjectProvider=new DefaultSubjectProvider()": "SubjectProvider"}, "code": ["List", "<", "AttributeStatementProvider", ">", "function", "(", ")", "{", "return", "attributeStatementProviders", ";", "}"], "memberFunctions": {"canHandleToken": [["boolean", "String tokenType"], ["boolean", "String tokenType", "String realm"]], "createSamlToken": [["SamlAssertionWrapper", "TokenProviderParameters tokenParameters", "byte[] secret", "Document doc"]], "isSignToken": [["boolean"]], "setSubjectProvider": [["void", "SubjectProvider subjectProvider"]], "getConditionsProvider": [["ConditionsProvider"]], "testKeyType": [["void", "TokenProviderParameters tokenParameters"]], "createToken": [["TokenProviderResponse", "TokenProviderParameters tokenParameters"]], "setAttributeStatementProviders": [["void", "List<AttributeStatementProvider> attributeStatementProviders"]], "createCallbackHandler": [["SamlCallbackHandler", "TokenProviderParameters tokenParameters", "byte[] secret", "Document doc"]], "getSubjectProvider": [["SubjectProvider"]], "setConditionsProvider": [["void", "ConditionsProvider conditionsProvider"]], "setSignToken": [["void", "boolean signToken"]]}, "className": "SCTSAMLTokenProvider", "renamed": ["List", "<", "AttributeStatementProvider", ">", "function", "(", ")", "{", "return", "attributeStatementProviders", ";", "}"], "nl": "Get the List of AttributeStatementProviders.", "nlToks": ["Get", "the", "List", "of", "AttributeStatementProviders", "."], "path": "primesign/cxf/tree/master/services/sts/systests/advanced/src/test/java/org/apache/cxf/systest/sts/secure_conv/SCTSAMLTokenProvider.java", "idx": 39}
{"memberVariables": {"game": "ShadowStruggles", "textures": "Array<Asset>", "sounds": "Array<Asset>", "rpgMaps": "Array<Asset>", "assetName": "String", "textureRegions": "Array<Asset>", "LOG=DataManager.class.getName()": "String", "assetType": "String"}, "code": ["void", "function", "(", ")", "{", "if", "(", "this", ".", "sounds", "!=", "null", ")", "{", "for", "(", "Asset", "asset", ":", "this", ".", "sounds", ")", "{", "game", ".", "getAssets", "(", ")", ".", "unload", "(", "FileMap", ".", "resourcesToDirectory", ".", "get", "(", "asset", ".", "assetType", ")", "+", "asset", ".", "assetName", ")", ";", "}", "this", ".", "sounds", "=", "null", ";", "}", "}"], "memberFunctions": {"loadMaps": [["void"]], "getTextureRegion": [["TextureRegion", "String regionName", "String resourceType"]], "getTiledMap": [["TiledMap", "String mapName", "String resourceType"]], "disposeTextures": [["void"]], "disposeMaps": [["void"]], "getTexture": [["Texture", "String textureName", "String resourceType"]], "unloadSounds": [["void", "Array<Asset> soundsToLoad"]], "loadSounds": [["void"]], "equals": [["boolean", "Object obj"]], "setAssetsToLoad": [["void", "Array<Asset> textureRegions", "Array<Asset> textures", "Array<Asset> sounds", "Array<Asset> rpgMaps"]], "loadAssets": [["void"]], "dispose": [["void"]], "loadTextureAtlas": [["void"]], "createTextureAtlas": [["void"]], "disposeAtlas": [["void"]], "loadTextures": [["void"]]}, "className": "Loader", "renamed": ["void", "function", "(", ")", "{", "if", "(", "this", ".", "sounds", "!=", "null", ")", "{", "for", "(", "Asset", "loc0", ":", "this", ".", "sounds", ")", "{", "game", ".", "getAssets", "(", ")", ".", "unload", "(", "FileMap", ".", "resourcesToDirectory", ".", "get", "(", "loc0", ".", "assetType", ")", "+", "loc0", ".", "assetName", ")", ";", "}", "this", ".", "sounds", "=", "null", ";", "}", "}"], "nl": "Unloads the sounds from memory.", "nlToks": ["Unloads", "the", "sounds", "from", "memory", "."], "path": "prativa/shadowstruggles/tree/master/Shadow Struggles/src/br/edu/ifsp/pds/shadowstruggles/data/Loader.java", "idx": 40}
{"memberVariables": {"settings": "IStoredSettings", "runtimeManager": "IRuntimeManager", "projectConfigs": "FileBasedConfig", "logger=LoggerFactory.getLogger(getClass())": "Logger", "repositoryManager": "IRepositoryManager", "projectCache=new ConcurrentHashMap<String,ProjectModel>()": "Map<String,ProjectModel>", "userManager": "IUserManager", "projectMarkdownCache=new ObjectCache<String>()": "ObjectCache<String>", "projectRepositoriesMarkdownCache=new ObjectCache<String>()": "ObjectCache<String>"}, "code": ["ProjectModel", "function", "(", "String", "name", ",", "UserModel", "user", ")", "{", "for", "(", "ProjectModel", "project", ":", "getProjectModels", "(", "user", ",", "true", ")", ")", "{", "if", "(", "project", ".", "name", ".", "equalsIgnoreCase", "(", "name", ")", ")", "{", "return", "project", ";", "}", "}", "return", "null", ";", "}"], "memberFunctions": {"stop": [["ProjectManager"]], "reloadProjectMarkdown": [["void", "ProjectModel project"]], "start": [["ProjectManager"]], "getProjectConfigs": [["Map<String,ProjectModel>"]], "getProjectModels": [["List<ProjectModel>", "UserModel user", "boolean includeUsers"], ["List<ProjectModel>", "List<RepositoryModel> repositoryModels", "boolean includeUsers"]]}, "className": "ProjectManager", "renamed": ["ProjectModel", "function", "(", "String", "arg0", ",", "UserModel", "arg1", ")", "{", "for", "(", "ProjectModel", "loc0", ":", "getProjectModels", "(", "arg1", ",", "true", ")", ")", "{", "if", "(", "loc0", ".", "arg0", ".", "equalsIgnoreCase", "(", "arg0", ")", ")", "{", "return", "loc0", ";", "}", "}", "return", "null", ";", "}"], "nl": "Returns the project model for the specified user.", "nlToks": ["Returns", "the", "project", "model", "for", "the", "specified", "user", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/manager/ProjectManager.java", "idx": 42}
{"memberVariables": {"r": "int", "b": "int", "namedColors=new HashMap<>()": "Map<RGB,String>", "g": "int"}, "code": ["String", "function", "(", "String", "hexString", ")", "{", "int", "hexColor", "=", "Integer", ".", "parseInt", "(", "hexString", ",", "16", ")", ";", "int", "r", "=", "(", "hexColor", "&", "0xFF0000", ")", ">>", "16", ";", "int", "g", "=", "(", "hexColor", "&", "0xFF00", ")", ">>", "8", ";", "int", "b", "=", "(", "hexColor", "&", "0xFF", ")", ";", "return", "getClosestNamedColor", "(", "r", ",", "g", ",", "b", ")", ";", "}"], "memberFunctions": {"hashCode": [["int"]], "equals": [["boolean", "Object object"]], "getColor": [["Color"]], "getNamedColor": [["Optional<String>", "int r", "int g", "int b"], ["Optional<String>", "String hexString"]], "calculateColorDistSq": [["double", "Color color0", "Color color1"]]}, "className": "ColorUtils", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "int", "loc0", "=", "Integer", ".", "parseInt", "(", "arg0", ",", "16", ")", ";", "int", "loc1", "=", "(", "loc0", "&", "0xFF0000", ")", ">>", "16", ";", "int", "loc2", "=", "(", "loc0", "&", "0xFF00", ")", ">>", "8", ";", "int", "loc3", "=", "(", "loc0", "&", "0xFF", ")", ";", "return", "getClosestNamedColor", "(", "loc1", ",", "loc2", ",", "loc3", ")", ";", "}"], "nl": "Get the color name of the color that is closest to the given hex color value (as a 6-digit hex String).", "nlToks": ["Get", "the", "color", "name", "of", "the", "color", "that", "is", "closest", "to", "the", "given", "hex", "color", "value", "-LRB-", "as", "a", "6-digit", "hex", "String", "-RRB-", "."], "path": "hastebrot/TestFX/tree/master/subprojects/testfx-core/src/main/java/org/testfx/util/ColorUtils.java", "idx": 43}
{"memberVariables": {"schema": "String", "name": "String", "LOG=Logger.getLogger(CLASS_NAME)": "Logger", "type": "String", "CLASS_NAME=SourceObject.class.getName()": "String", "revision": "String"}, "code": ["String", "function", "(", ")", "{", "String", "falseFilePath", "=", "String", ".", "format", "(", "\"/Database/%s/%s/%s%s\"", ",", "getSchema", "(", ")", ",", "getType", "(", ")", ",", "getName", "(", ")", ",", "getSuffixFromType", "(", ")", ")", ";", "return", "falseFilePath", ";", "}"], "memberFunctions": {"setName": [["void", "String name"]], "getName": [["String"]], "getType": [["String"]], "toString": [["String"]], "setRevision": [["void", "String revision"]], "getSuffixFromType": [["String"]], "setType": [["void", "String type"]], "setSchema": [["void", "String schema"]], "getSchema": [["String"]], "getRevision": [["String"]]}, "className": "SourceObject", "renamed": ["String", "function", "(", ")", "{", "String", "loc0", "=", "String", ".", "format", "(", "\"srini_string\"", ",", "getSchema", "(", ")", ",", "getType", "(", ")", ",", "getName", "(", ")", ",", "getSuffixFromType", "(", ")", ")", ";", "return", "loc0", ";", "}"], "nl": "Gets the data source as a pseudo file name (faux-file). Adding a suffix matching the source object type ensures that the appropriate language parser is used.", "nlToks": ["Gets", "the", "data", "source", "as", "a", "pseudo", "file", "name", "-LRB-", "faux-file", "-RRB-", ".", "Adding", "a", "suffix", "matching", "the", "source", "object", "type", "ensures", "that", "the", "appropriate", "language", "parser", "is", "used", "."], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/util/database/SourceObject.java", "idx": 44}
{"memberVariables": {"addressHeader": "int", "INTERVAL=TARGET_TIMESPAN / TARGET_SPACING": "int", "alertSigningKey": "byte[]", "acceptableAddressCodes": "int[]", "packetMagic": "long", "p2shHeader": "int", "paramSet=Collections.synchronizedList(new ArrayList<NetworkParameters>())": "List<NetworkParameters>", "PROTOCOL_VERSION=70001": "int", "genesisBlock": "Block", "proofOfWorkLimit": "BigInteger", "subsidyDecreaseBlockCount": "int", "port": "int", "MAX_MONEY=new BigInteger(\"21000000\",10).multiply(COIN)": "BigInteger", "TARGET_SPACING=10 * 60": "int", "dnsSeeds": "String[]", "checkpoints=new HashMap<Integer,Sha256Hash>()": "Map<Integer,Sha256Hash>", "SATOSHI_KEY=Hex.decode(\"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\")": "byte[]", "interval": "int", "id": "String", "spendableCoinbaseDepth": "int", "dumpedPrivateKeyHeader": "int", "targetTimespan": "int", "TARGET_TIMESPAN=14 * 24 * 60* 60": "int", "BIP16_ENFORCE_TIME=1333238400": "int"}, "code": ["int", "function", "(", ")", "{", "return", "port", ";", "}"], "memberFunctions": {"regTests": [["NetworkParameters"]], "allowEmptyPeerChain": [["boolean"]], "getDumpedPrivateKeyHeader": [["int"]], "testNet2": [["NetworkParameters"]], "testNet3": [["NetworkParameters"]], "unitTests": [["NetworkParameters"]], "getId": [["String"]], "getAddressHeader": [["int"]], "getAcceptableAddressCodes": [["int[]"]], "prodNet": [["NetworkParameters"]], "fromID": [["NetworkParameters", "String id"]], "getTargetTimespan": [["int"]], "getDnsSeeds": [["String[]"]], "hashCode": [["int"]], "getSpendableCoinbaseDepth": [["int"]], "testNet": [["NetworkParameters"]], "calculateBlockPoWHash": [["Sha256Hash", "Block b"]], "getMaxMoney": [["BigInteger"]], "getParamsFromAddressByte": [["NetworkParameters", "int version"]], "registerParams": [["void", "NetworkParameters params"]], "isCheckpoint": [["boolean", "int height"]], "getP2SHHeader": [["int"]], "getInterval": [["int"]], "getRetargetBlockCount": [["int"], ["int", "StoredBlock cursor"]], "getGenesisBlock": [["Block"]], "getSubsidyDecreaseBlockCount": [["int"]], "createGenesis": [["Block", "NetworkParameters n"]], "getPacketMagic": [["long"]], "getAlertSigningKey": [["byte[]"]], "equals": [["boolean", "Object other"]], "passesCheckpoint": [["boolean", "int height", "Sha256Hash hash"]], "isAcceptableAddressVersion": [["boolean", "int version"]], "getURIScheme": [["String"]], "getProofOfWorkLimit": [["BigInteger"]]}, "className": "NetworkParameters", "renamed": ["int", "function", "(", ")", "{", "return", "port", ";", "}"], "nl": "Default TCP port on which to connect to nodes.", "nlToks": ["Default", "TCP", "port", "on", "which", "to", "connect", "to", "nodes", "."], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/core/NetworkParameters.java", "idx": 45}
{"memberVariables": {"jedis": "Jedis"}, "code": ["Set", "<", "String", ">", "function", "(", ")", "{", "return", "jedis", ".", "keys", "(", "\"URLSet:*\"", ")", ";", "}"], "memberFunctions": {"add": [["void", "String term", "TermCounter tc"]], "isIndexed": [["boolean", "String url"]], "deleteAllKeys": [["void"]], "getCounts": [["Map<String,Integer>", "String term"]], "main": [["void", "String[] args"]], "printIndex": [["void"]], "termCounterKey": [["String", "String url"]], "termSet": [["Set<String>"]], "pushTermCounterToRedis": [["List<Object>", "TermCounter tc"]], "loadIndex": [["void", "JedisIndex index"]], "deleteTermCounters": [["void"]], "urlSetKey": [["String", "String term"]], "getCount": [["Integer", "String url", "String term"]], "indexPage": [["void", "String url", "Elements paragraphs"]], "deleteURLSets": [["void"]], "termCounterKeys": [["Set<String>"]], "getURLs": [["Set<String>", "String term"]], "getCountsFaster": [["Map<String,Integer>", "String term"]]}, "className": "JedisIndex", "renamed": ["Set", "<", "String", ">", "function", "(", ")", "{", "return", "jedis", ".", "keys", "(", "\"srini_string\"", ")", ";", "}"], "nl": "Returns URLSet keys for the terms that have been indexed. Should be used for development and testing, not production.", "nlToks": ["Returns", "URLSet", "keys", "for", "the", "terms", "that", "have", "been", "indexed", ".", "Should", "be", "used", "for", "development", "and", "testing", ",", "not", "production", "."], "path": "hayleycall/cs-application-backing-with-redis-lab-codeU/tree/master/javacs-lab10/src/com/flatironschool/javacs/JedisIndex.java", "idx": 46}
{"memberVariables": {"mManagerView": "BlockMetadataManagerView", "mDir": "StorageDir", "mBlocksToMoveOutSize=0L": "long", "mBlocksToMoveInSize=0L": "long", "mTierView": "StorageTierView", "mBlocksToMoveIn=new HashSet<>()": "Set<Long>", "mBlocksToMoveOut=new HashSet<>()": "Set<Long>"}, "code": ["void", "function", "(", ")", "{", "mBlocksToMoveIn", ".", "clear", "(", ")", ";", "mBlocksToMoveOut", ".", "clear", "(", ")", ";", "mBlocksToMoveInSize", "=", "mBlocksToMoveOutSize", "=", "0L", ";", "}"], "memberFunctions": {"getEvitableBytes": [["long"]], "getParentTierView": [["StorageTierView"]], "isMarkedToMoveOut": [["boolean", "long blockId"]], "markBlockMoveIn": [["void", "long blockId", "long blockSize"]], "createTempBlockMeta": [["TempBlockMeta", "long sessionId", "long blockId", "long initialBlockSize"]], "getDirViewIndex": [["int"]], "getCommittedBytes": [["long"]], "getEvictableBlocks": [["List<BlockMeta>"]], "getCapacityBytes": [["long"]], "getAvailableBytes": [["long"]], "toBlockStoreLocation": [["BlockStoreLocation"]], "markBlockMoveOut": [["void", "long blockId", "long blockSize"]]}, "className": "StorageDirView", "renamed": ["void", "function", "(", ")", "{", "mBlocksToMoveIn", ".", "clear", "(", ")", ";", "mBlocksToMoveOut", ".", "clear", "(", ")", ";", "mBlocksToMoveInSize", "=", "mBlocksToMoveOutSize", "=", "0L", ";", "}"], "nl": "Clears all marks about blocks to move in/out in this view.", "nlToks": ["Clears", "all", "marks", "about", "blocks", "to", "move", "in/out", "in", "this", "view", "."], "path": "poemlin/alluxio/tree/master/core/server/src/main/java/alluxio/worker/block/meta/StorageDirView.java", "idx": 47}
{"memberVariables": {"issuedAt=-1": "long", "scopes=Collections.emptyList()": "List<OAuthPermission>", "subject": "UserSubject", "client": "Client", "preAuthorized": "boolean", "tokenString": "String", "lifetime=-1": "long", "tokenSecret": "String"}, "code": ["UserSubject", "function", "(", ")", "{", "return", "subject", ";", "}"], "memberFunctions": {"setScopes": [["void", "List<OAuthPermission> scopes"]], "setPreAuthorized": [["void", "boolean preAuthorized"]], "setSubject": [["void", "UserSubject subject"]], "getTokenKey": [["String"]], "isPreAuthorized": [["boolean"]], "getLifetime": [["long"]], "getClient": [["Client"]], "getIssuedAt": [["long"]], "getTokenSecret": [["String"]], "getScopes": [["List<OAuthPermission>"]]}, "className": "Token", "renamed": ["UserSubject", "function", "(", ")", "{", "return", "subject", ";", "}"], "nl": "Returns a subject capturing the login name  the end user used to login to the resource server when authorizing a given client request", "nlToks": ["Returns", "a", "subject", "capturing", "the", "login", "name", "the", "end", "user", "used", "to", "login", "to", "the", "resource", "server", "when", "authorizing", "a", "given", "client", "request"], "path": "primesign/cxf/tree/master/rt/rs/security/oauth-parent/oauth/src/main/java/org/apache/cxf/rs/security/oauth/data/Token.java", "idx": 48}
{"memberVariables": {"formatOff": "int", "formatRepeatCount": "int", "format": "String"}, "code": ["int", "function", "(", "boolean", "advance", ")", "{", "int", "valueLen", "=", "getIntFromFormat", "(", "advance", ")", ";", "if", "(", "valueLen", "==", "0", ")", "{", "valueLen", "=", "1", ";", "}", "return", "valueLen", ";", "}"], "memberFunctions": {"checkType": [["void", "char asking", "boolean consume"]], "getType": [["char"]], "available": [["int"]], "reset": [["void"]], "toString": [["String"]], "consume": [["void"]], "getIntFromFormat": [["int", "boolean advance"]]}, "className": "PackFormatInputStream", "renamed": ["int", "function", "(", "boolean", "arg0", ")", "{", "int", "loc0", "=", "getIntFromFormat", "(", "arg0", ")", ";", "if", "(", "loc0", "==", "0", ")", "{", "loc0", "=", "1", ";", "}", "return", "loc0", ";", "}"], "nl": "Retrieve a length from the format string. Either for a repeat count or a string length. Return one if no explicit repeat count. \\param advance whether to move the stream position.", "nlToks": ["Retrieve", "a", "length", "from", "the", "format", "string", ".", "Either", "for", "a", "repeat", "count", "or", "a", "string", "length", ".", "Return", "one", "if", "no", "explicit", "repeat", "count", ".", "\\", "param", "advance", "whether", "to", "move", "the", "stream", "position", "."], "path": "pgunn/wiredtiger/tree/master/lang/java/src/com/wiredtiger/db/PackFormatInputStream.java", "idx": 49}
{"memberVariables": {"expectedDataUnitId": "Long", "seqNo": "Long", "dataSetId": "Long", "dataUnitId": "Long", "expectedValue": "String", "actualValue": "String", "expectedDataSetId": "Long", "errorCode": "String", "testId": "Long", "failedAttributeName": "String", "srcFileName": "String", "errorMsg": "String"}, "code": ["String", "function", "(", ")", "{", "return", "errorMsg", ";", "}"], "memberFunctions": {"setExpectedValue": [["void", "String expectedValue"]], "getExpectedValue": [["String"]], "getExpectedDataSetId": [["Long"]], "setExpectedDataSetId": [["void", "Long expectedDataSetId"]], "setActualValue": [["void", "String actualValue"]], "getDataSetId": [["Long"]], "setSrcFileName": [["void", "String srcFileName"]], "getExpectedDataUnitId": [["Long"]], "setExpectedDataUnitId": [["void", "Long expectedDataUnitId"]], "getSrcFileName": [["String"]], "getSeqNo": [["Long"]], "getFailedAttributeName": [["String"]], "setTestId": [["void", "Long testId"]], "setFailedAttributeName": [["void", "String failedAttributeName"]], "getTestId": [["Long"]], "setErrorCode": [["void", "String errorCode"]], "getActualValue": [["String"]], "getDataUnitId": [["Long"]], "setSeqNo": [["void", "Long seqNo"]], "setErrorMsg": [["void", "String errorMsg"]], "getErrorCode": [["String"]], "setDataUnitId": [["void", "Long dataUnitId"]], "setDataSetId": [["void", "Long dataSetId"]], "toString": [["String"]]}, "className": "TestResultDetailsDTO", "renamed": ["String", "function", "(", ")", "{", "return", "errorMsg", ";", "}"], "nl": "Gets the error msg.", "nlToks": ["Gets", "the", "error", "msg", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/TestResultDetailsDTO.java", "idx": 51}
{"memberVariables": {"_all=new HashMap<>(11)": "HashMap<String,symbol>"}, "code": ["boolean", "function", "(", "symbol", "sym", ")", "{", "return", "_all", ".", "containsKey", "(", "sym", ".", "name", "(", ")", ")", ";", "}"], "memberFunctions": {"add": [["boolean", "symbol sym"], ["boolean", "symbol_set other"]], "iterator": [["Iterator<symbol>"]], "size": [["int"]], "not_null": [["void", "Object obj"]], "hashCode": [["int"]], "is_superset_of": [["boolean", "symbol_set other"]], "equals": [["boolean", "symbol_set other"], ["boolean", "Object other"]], "is_subset_of": [["boolean", "symbol_set other"]], "toString": [["String"]], "remove": [["void", "symbol sym"], ["void", "symbol_set other"]]}, "className": "symbol_set", "renamed": ["boolean", "function", "(", "symbol", "arg0", ")", "{", "return", "_all", ".", "containsKey", "(", "arg0", ".", "name", "(", ")", ")", ";", "}"], "nl": "Determine if the set contains a particular symbol.", "nlToks": ["Determine", "if", "the", "set", "contains", "a", "particular", "symbol", "."], "path": "polyglot-compiler/polyglot/tree/master/tools/java_cup/src/java_cup/symbol_set.java", "idx": 52}
{"memberVariables": {"SPACE=' '": "char"}, "code": ["String", "function", "(", "Node", "n", ")", "{", "StringBuilder", "sb", "=", "new", "StringBuilder", "(", ")", ";", "for", "(", "Node", "child", ":", "new", "IterableNodeList", "(", "n", ".", "getChildNodes", "(", ")", ")", ")", "{", "if", "(", "child", "instanceof", "Text", "||", "child", "instanceof", "CDATASection", ")", "{", "String", "s", "=", "child", ".", "getNodeValue", "(", ")", ";", "if", "(", "s", "!=", "null", ")", "{", "sb", ".", "append", "(", "s", ")", ";", "}", "}", "}", "return", "sb", ".", "toString", "(", ")", ";", "}"], "memberFunctions": {"stripWhitespace": [["Node", "Node original"]], "getAttributes": [["Map<QName,String>", "Node n"]], "normalizeWhitespace": [["Node", "Node original"]], "normalize": [["String", "String s"]], "getQName": [["QName", "Node n"]], "handleWsRec": [["void", "Node n", "boolean normalize"]]}, "className": "Nodes", "renamed": ["String", "function", "(", "Node", "arg0", ")", "{", "StringBuilder", "loc0", "=", "new", "StringBuilder", "(", ")", ";", "for", "(", "Node", "loc1", ":", "new", "IterableNodeList", "(", "arg0", ".", "getChildNodes", "(", ")", ")", ")", "{", "if", "(", "loc1", "instanceof", "Text", "||", "loc1", "instanceof", "CDATASection", ")", "{", "String", "loc2", "=", "loc1", ".", "getNodeValue", "(", ")", ";", "if", "(", "loc2", "!=", "null", ")", "{", "loc0", ".", "append", "(", "loc2", ")", ";", "}", "}", "}", "return", "loc0", ".", "toString", "(", ")", ";", "}"], "nl": "Tries to merge all direct Text and CDATA children of the given Node and concatenates their value.", "nlToks": ["Tries", "to", "merge", "all", "direct", "Text", "and", "CDATA", "children", "of", "the", "given", "Node", "and", "concatenates", "their", "value", "."], "path": "phbenisc/xmlunit/tree/master/xmlunit-core/src/main/java/org/xmlunit/util/Nodes.java", "idx": 53}
{"memberVariables": {"nextId": "int", "instances=new IdentityHashMap<Object,String>()": "Map<Object,String>", "notMarshalled=new LinkedHashMap<String,Object>()": "Map<String,Object>"}, "code": ["MarshalRegistry", "function", "(", "Context", "context", ")", "{", "MarshalRegistry", "marshalRegistry", "=", "context", ".", "getProperty", "(", "MarshalRegistry", ".", "class", ")", ";", "if", "(", "marshalRegistry", "==", "null", ")", "{", "marshalRegistry", "=", "new", "MarshalRegistry", "(", ")", ";", "context", ".", "setProperty", "(", "marshalRegistry", ")", ";", "}", "return", "marshalRegistry", ";", "}"], "memberFunctions": {"getInstanceId": [["String", "Object instance"]], "iterator": [["Iterator<Object>"]]}, "className": "MarshalRegistry", "renamed": ["MarshalRegistry", "function", "(", "Context", "arg0", ")", "{", "MarshalRegistry", "loc0", "=", "arg0", ".", "getProperty", "(", "MarshalRegistry", ".", "class", ")", ";", "if", "(", "loc0", "==", "null", ")", "{", "loc0", "=", "new", "MarshalRegistry", "(", ")", ";", "arg0", ".", "setProperty", "(", "loc0", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Get the MarshalRegistry stored in the context, and if necessary create a new one.", "nlToks": ["Get", "the", "MarshalRegistry", "stored", "in", "the", "context", ",", "and", "if", "necessary", "create", "a", "new", "one", "."], "path": "primesign/cxf/tree/master/rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/encoded/MarshalRegistry.java", "idx": 54}
{"memberVariables": {}, "code": ["List", "<", "T", ">", "function", "(", "T", "o1", ",", "T", "o2", ")", "{", "List", "<", "T", ">", "l", "=", "new", "ArrayList", "<", ">", "(", "2", ")", ";", "l", ".", "add", "(", "o1", ")", ";", "l", ".", "add", "(", "o2", ")", ";", "return", "l", ";", "}"], "memberFunctions": {"add": [["List<T>", "List<T> l", "T o"]], "firstOrElse": [["T", "Collection<U> l", "V alt"]], "equals": [["boolean", "Collection<T> a", "Collection<U> b"]], "nonNullList": [["List<T>", "List<T> l"]], "map": [["List<U>", "List<T> l", "Transformation<T,U> t"]], "pairs": [["Iterator<Pair<T,T>>", "Collection<T> l"]]}, "className": "CollectionUtil", "renamed": ["List", "<", "T", ">", "function", "(", "T", "arg0", ",", "T", "arg1", ")", "{", "List", "<", "T", ">", "loc0", "=", "new", "ArrayList", "<", ">", "(", "2", ")", ";", "loc0", ".", "add", "(", "arg0", ")", ";", "loc0", ".", "add", "(", "arg1", ")", ";", "return", "loc0", ";", "}"], "nl": "Return a list containing  {@code o1} and {@code o2}.", "nlToks": ["Return", "a", "list", "containing", "-LCB-", "@code", "o1", "-RCB-", "and", "-LCB-", "@code", "o2", "-RCB-", "."], "path": "polyglot-compiler/polyglot/tree/master/src/polyglot/util/CollectionUtil.java", "idx": 55}
{"memberVariables": {"template": "MetaData.Template", "workflowImpl": "MetaData.WorkflowImpl", "workflowImplId": "String", "parametersMetaData": "ParametersMetaData", "templateName": "String", "templateDescription": "String", "templateId": "String", "workflowImplName": "String", "workflowImplDescription": "String"}, "code": ["void", "function", "(", "ParametersMetaData", "value", ")", "{", "this", ".", "parametersMetaData", "=", "value", ";", "}"], "memberFunctions": {"getWorkflowImpl": [["MetaData.WorkflowImpl"]], "getTemplate": [["MetaData.Template"]], "setWorkflowImplId": [["void", "String value"]], "getParametersMetaData": [["ParametersMetaData"], ["ParametersMetaData"]], "setWorkflowImplName": [["void", "String value"]], "setTemplateId": [["void", "String value"], ["void", "String value"]], "getTemplateDescription": [["String"]], "setTemplateDescription": [["void", "String value"]], "setTemplateName": [["void", "String value"]], "getWorkflowImplName": [["String"]], "setTemplate": [["void", "MetaData.Template value"]], "getTemplateId": [["String"], ["String"]], "getWorkflowImplId": [["String"]], "getWorkflowImplDescription": [["String"]], "getTemplateName": [["String"]], "setWorkflowImpl": [["void", "MetaData.WorkflowImpl value"]], "setWorkflowImplDescription": [["void", "String value"]]}, "className": "MetaData", "renamed": ["void", "function", "(", "ParametersMetaData", "arg0", ")", "{", "this", ".", "parametersMetaData", "=", "arg0", ";", "}"], "nl": "Sets the value of the parametersMetaData property.", "nlToks": ["Sets", "the", "value", "of", "the", "parametersMetaData", "property", "."], "path": "harsha1979/carbon-identity/tree/master/components/workflow-mgt/org.wso2.carbon.identity.workflow.mgt/src/main/java/org/wso2/carbon/identity/workflow/mgt/bean/metadata/MetaData.java", "idx": 56}
{"memberVariables": {"serialVersionUID=-2570516012301142091L": "long", "aboutName=\"Dev module\"": "String", "LOG=Logger.getLogger(DeveloperModule.class)": "Logger"}, "code": ["List", "<", "AbstractArgoJPanel", ">", "function", "(", ")", "{", "List", "<", "AbstractArgoJPanel", ">", "result", "=", "new", "ArrayList", "<", "AbstractArgoJPanel", ">", "(", ")", ";", "result", ".", "add", "(", "TestPanel", ".", "getInstance", "(", ")", ")", ";", "return", "result", ";", "}"], "memberFunctions": {"getName": [["String"]], "getInfo": [["String", "int type"]], "enable": [["boolean"]], "disable": [["boolean"]]}, "className": "DeveloperModule", "renamed": ["List", "<", "AbstractArgoJPanel", ">", "function", "(", ")", "{", "List", "<", "AbstractArgoJPanel", ">", "loc0", "=", "new", "ArrayList", "<", "AbstractArgoJPanel", ">", "(", ")", ";", "loc0", ".", "add", "(", "TestPanel", ".", "getInstance", "(", ")", ")", ";", "return", "loc0", ";", "}"], "nl": "Return our details tab(s).  Proof of concept only.", "nlToks": ["Return", "our", "details", "tab", "-LRB-", "s", "-RRB-", ".", "Proof", "of", "concept", "only", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/modules/dev/src/org/argouml/dev/DeveloperModule.java", "idx": 57}
{"memberVariables": {"writer": "XMLStreamWriter"}, "code": ["void", "function", "(", "byte", "[", "]", "data", ")", "{", "try", "{", "if", "(", "data", ".", "length", "!=", "0", ")", "{", "writer", ".", "writeStartElement", "(", "\"chars\"", ")", ";", "writer", ".", "writeCharacters", "(", "new", "String", "(", "data", ")", ")", ";", "writer", ".", "writeEndElement", "(", ")", ";", "}", "}", "catch", "(", "XMLStreamException", "ex", ")", "{", "throw", "new", "RuntimeException", "(", "ex", ")", ";", "}", "}"], "memberFunctions": {"processGroupStart": [["void"]], "processDocumentEnd": [["void"]], "processGroupEnd": [["void"]], "processCommand": [["void", "Command command", "int parameter", "boolean hasParameter", "boolean optional"]], "processString": [["void", "String string"]], "processDocumentStart": [["void"]], "processBinaryBytes": [["void", "byte[] data"]]}, "className": "RtfDumpListener", "renamed": ["void", "function", "(", "byte", "[", "]", "arg0", ")", "{", "try", "{", "if", "(", "arg0", ".", "length", "!=", "0", ")", "{", "writer", ".", "writeStartElement", "(", "\"srini_string\"", ")", ";", "writer", ".", "writeCharacters", "(", "new", "String", "(", "arg0", ")", ")", ";", "writer", ".", "writeEndElement", "(", ")", ";", "}", "}", "catch", "(", "XMLStreamException", "loc0", ")", "{", "throw", "new", "RuntimeException", "(", "loc0", ")", ";", "}", "}"], "nl": "Write character bytes - note that we cheat, we just convert them directly to a string for output with no regard to the encoding.", "nlToks": ["Write", "character", "bytes", "-", "note", "that", "we", "cheat", ",", "we", "just", "convert", "them", "directly", "to", "a", "string", "for", "output", "with", "no", "regard", "to", "the", "encoding", "."], "path": "harrisaoz/rtfparserkit/tree/master/RTF Parser Kit/src/main/java/com/rtfparserkit/utils/RtfDumpListener.java", "idx": 58}
{"memberVariables": {"serialVersionUID=1L": "long", "isSystemDerived": "String", "isActive": "String", "predecessorId": "BigDecimal", "srcFileName": "String", "successorId": "BigDecimal", "feedId": "BigDecimal", "checksum": "String", "transmissionDatasetId": "String", "comments": "String", "inactivationReasonType": "String", "isFormatValid": "String", "dataUnitId": "long", "receiptDate": "Timestamp", "srcUniqueFileName": "String", "createdDate": "Timestamp", "dataSetId": "Long", "fileSize": "BigDecimal", "destFileName": "String", "loadedInCats": "String", "checksumType": "String", "modifiedDate": "Timestamp", "runId": "BigDecimal", "isPrepopulated": "String", "isBulk": "String", "isUpdate": "String", "receiptDateType": "String", "status": "String"}, "code": ["String", "function", "(", ")", "{", "return", "this", ".", "isActive", ";", "}"], "memberFunctions": {"setIsSystemDerived": [["void", "String isSystemDerived"]], "setIsPrepopulated": [["void", "String isPrepopulated"]], "getStatus": [["String"]], "getIsUpdate": [["String"]], "getDataUnitId": [["long"]], "getFileSize": [["BigDecimal"]], "setInactivationReasonType": [["void", "String inactivationReasonType"]], "setDataUnitId": [["void", "long dataUnitId"]], "getComments": [["String"]], "getCreatedDate": [["Timestamp"]], "setFileSize": [["void", "BigDecimal fileSize"]], "getPredecessorId": [["BigDecimal"]], "setIsUpdate": [["void", "String isUpdate"]], "getReceiptDateType": [["String"]], "getFeedId": [["BigDecimal"]], "setReceiptDate": [["void", "Timestamp receiptDate"]], "getModifiedDate": [["Timestamp"]], "setSuccessorId": [["void", "BigDecimal successorId"]], "setDestFileName": [["void", "String destFileName"]], "setIsBulk": [["void", "String isBulk"]], "getIsFormatValid": [["String"]], "setDataSetId": [["void", "Long dataSetId"]], "setIsActive": [["void", "String isActive"]], "setChecksumType": [["void", "String checksumType"]], "setFeedId": [["void", "BigDecimal feedId"]], "getInactivationReasonType": [["String"]], "getSrcUniqueFileName": [["String"]], "getDataSetId": [["Long"]], "setReceiptDateType": [["void", "String receiptDateType"]], "getRunId": [["BigDecimal"]], "setSrcFileName": [["void", "String srcFileName"]], "getChecksumType": [["String"]], "getSrcFileName": [["String"]], "getChecksum": [["String"]], "getDestFileName": [["String"]], "getReceiptDate": [["Timestamp"]], "setTransmissionDatasetId": [["void", "String transmissionDatasetId"]], "getTransmissionDatasetId": [["String"]], "setComments": [["void", "String comments"]], "getLoadedInCats": [["String"]], "getSuccessorId": [["BigDecimal"]], "setLoadedInCats": [["void", "String loadedInCats"]], "getIsPrepopulated": [["String"]], "setSrcUniqueFileName": [["void", "String srcUniqueFileName"]], "setChecksum": [["void", "String checksum"]], "setIsFormatValid": [["void", "String isFormatValid"]], "getIsBulk": [["String"]], "setRunId": [["void", "BigDecimal runId"]], "setStatus": [["void", "String status"]], "setModifiedDate": [["void", "Timestamp modifiedDate"]], "setCreatedDate": [["void", "Timestamp createdDate"]], "setPredecessorId": [["void", "BigDecimal predecessorId"]], "getIsSystemDerived": [["String"]]}, "className": "PCLDataUnitEntity", "renamed": ["String", "function", "(", ")", "{", "return", "this", ".", "isActive", ";", "}"], "nl": "Gets the checks if is active.", "nlToks": ["Gets", "the", "checks", "if", "is", "active", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLDataUnitEntity.java", "idx": 60}
{"memberVariables": {}, "code": ["DataServer", "function", "(", "final", "InetSocketAddress", "dataAddress", ",", "final", "AlluxioWorkerService", "worker", ")", "{", "try", "{", "return", "CommonUtils", ".", "createNewClassInstance", "(", "Configuration", ".", "<", "DataServer", ">", "getClass", "(", "PropertyKey", ".", "WORKER_DATA_SERVER_CLASS", ")", ",", "new", "Class", "[", "]", "{", "InetSocketAddress", ".", "class", ",", "AlluxioWorkerService", ".", "class", "}", ",", "new", "Object", "[", "]", "{", "dataAddress", ",", "worker", "}", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "throw", "Throwables", ".", "propagate", "(", "e", ")", ";", "}", "}"], "memberFunctions": {"getPort": [["int"]], "isClosed": [["boolean"]], "getBindHost": [["String"]]}, "className": "DataServer", "renamed": ["DataServer", "function", "(", "final", "InetSocketAddress", "arg0", ",", "final", "AlluxioWorkerService", "arg1", ")", "{", "try", "{", "return", "CommonUtils", ".", "createNewClassInstance", "(", "Configuration", ".", "<", "DataServer", ">", "getClass", "(", "PropertyKey", ".", "WORKER_DATA_SERVER_CLASS", ")", ",", "new", "Class", "[", "]", "{", "InetSocketAddress", ".", "class", ",", "AlluxioWorkerService", ".", "class", "}", ",", "new", "Object", "[", "]", "{", "arg0", ",", "arg1", "}", ")", ";", "}", "catch", "(", "Exception", "loc0", ")", "{", "throw", "Throwables", ".", "propagate", "(", "loc0", ")", ";", "}", "}"], "nl": "Factory for  {@link DataServer}.", "nlToks": ["Factory", "for", "-LCB-", "@link", "DataServer", "-RCB-", "."], "path": "poemlin/alluxio/tree/master/core/server/src/main/java/alluxio/worker/DataServer.java", "idx": 61}
{"memberVariables": {"keys": "List<ECKey>", "redeemScript": "Script"}, "code": ["ECKey", "function", "(", ")", "{", "for", "(", "ECKey", "key", ":", "keys", ")", "{", "try", "{", "if", "(", "key", ".", "getPrivKey", "(", ")", "!=", "null", ")", "return", "key", ";", "}", "catch", "(", "IllegalStateException", "e", ")", "{", "}", "catch", "(", "ECKey", ".", "MissingPrivateKeyException", "e", ")", "{", "}", "}", "return", "null", ";", "}"], "memberFunctions": {"of": [["RedeemData", "List<ECKey> keys", "Script redeemScript"], ["RedeemData", "ECKey key", "Script program"]]}, "className": "RedeemData", "renamed": ["ECKey", "function", "(", ")", "{", "for", "(", "ECKey", "loc0", ":", "keys", ")", "{", "try", "{", "if", "(", "loc0", ".", "getPrivKey", "(", ")", "!=", "null", ")", "return", "loc0", ";", "}", "catch", "(", "IllegalStateException", "loc1", ")", "{", "}", "catch", "(", "ECKey", ".", "MissingPrivateKeyException", "loc1", ")", "{", "}", "}", "return", "null", ";", "}"], "nl": "Returns the first key that has private bytes", "nlToks": ["Returns", "the", "first", "key", "that", "has", "private", "bytes"], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/wallet/RedeemData.java", "idx": 62}
{"memberVariables": {"CONF_LOGGING_INTERVAL=CONF_PREFIX + \"logging.interval\"": "String", "JVM_INSTRUMENTATION_GROUP=\"jvm\"": "String", "log=XLog.getLog(\"oozieinstrumentation\")": "XLog", "instrumentation": "Instrumentation", "CONF_PREFIX=Service.CONF_PREFIX + \"InstrumentationService.\"": "String"}, "code": ["void", "function", "(", ")", "{", "instrumentation", "=", "null", ";", "}"], "memberFunctions": {"init": [["void", "Services services"]], "getInterface": [["Class<? extends Service>"]], "get": [["Instrumentation"]], "mapToString": [["String", "Map<String,String> map"]]}, "className": "InstrumentationService", "renamed": ["void", "function", "(", ")", "{", "instrumentation", "=", "null", ";", "}"], "nl": "Destroy the instrumentation service.", "nlToks": ["Destroy", "the", "instrumentation", "service", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/service/InstrumentationService.java", "idx": 64}
{"memberVariables": {"acceptedC14nAlgorithms=new ArrayList<>()": "List<String>", "signatureAlgorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\"": "String", "maximumKeySize=512": "long", "keySize=256": "long", "acceptedSignatureAlgorithms=new ArrayList<>()": "List<String>", "c14nAlgorithm=WSConstants.C14N_EXCL_OMIT_COMMENTS": "String", "digestAlgorithm=WSConstants.SHA256": "String", "minimumKeySize=128": "long", "useKeyValue": "boolean"}, "code": ["void", "function", "(", "long", "maximumKeySize", ")", "{", "this", ".", "maximumKeySize", "=", "maximumKeySize", ";", "}"], "memberFunctions": {"getC14nAlgorithm": [["String"]], "isUseKeyValue": [["boolean"]], "getAcceptedC14nAlgorithms": [["List<String>"]], "setUseKeyValue": [["void", "boolean useKeyValue"]], "getMinimumKeySize": [["long"]], "setAcceptedC14nAlgorithms": [["void", "List<String> acceptedC14nAlgorithms"]], "setC14nAlgorithm": [["void", "String c14nAlgorithm"]], "setDigestAlgorithm": [["void", "String digestAlgorithm"]], "setMinimumKeySize": [["void", "long minimumKeySize"]], "setAcceptedSignatureAlgorithms": [["void", "List<String> acceptedSignatureAlgorithms"]], "getDigestAlgorithm": [["String"]], "getAcceptedSignatureAlgorithms": [["List<String>"]], "getSignatureAlgorithm": [["String"]], "setSignatureAlgorithm": [["void", "String signatureAlgorithm"]], "getKeySize": [["long"]], "setKeySize": [["void", "long keySize"]], "getMaximumKeySize": [["long"]]}, "className": "SignatureProperties", "renamed": ["void", "function", "(", "long", "arg0", ")", "{", "this", ".", "maximumKeySize", "=", "arg0", ";", "}"], "nl": "Set the maximum key size to use when generating a symmetric key to sign an issued token. The requestor can specify a KeySize value to use. The default is 512 bits.", "nlToks": ["Set", "the", "maximum", "key", "size", "to", "use", "when", "generating", "a", "symmetric", "key", "to", "sign", "an", "issued", "token", ".", "The", "requestor", "can", "specify", "a", "KeySize", "value", "to", "use", ".", "The", "default", "is", "512", "bits", "."], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/SignatureProperties.java", "idx": 66}
{"memberVariables": {"s": "Scan", "joinfield": "String", "idx": "Index", "ts": "TableScan"}, "code": ["Constant", "function", "(", "String", "fldname", ")", "{", "if", "(", "ts", ".", "hasField", "(", "fldname", ")", ")", "return", "ts", ".", "getVal", "(", "fldname", ")", ";", "else", "return", "s", ".", "getVal", "(", "fldname", ")", ";", "}"], "memberFunctions": {"next": [["boolean"]], "getInt": [["int", "String fldname"]], "resetIndex": [["void"]], "beforeFirst": [["void"]], "getString": [["String", "String fldname"]], "close": [["void"]], "hasField": [["boolean", "String fldname"]]}, "className": "IndexJoinScan", "renamed": ["Constant", "function", "(", "String", "arg0", ")", "{", "if", "(", "ts", ".", "hasField", "(", "arg0", ")", ")", "return", "ts", ".", "getVal", "(", "arg0", ")", ";", "else", "return", "s", ".", "getVal", "(", "arg0", ")", ";", "}"], "nl": "Returns the Constant value of the specified field.", "nlToks": ["Returns", "the", "Constant", "value", "of", "the", "specified", "field", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/index/query/IndexJoinScan.java", "idx": 68}
{"memberVariables": {"INTERVAL=TARGET_TIMESPAN / TARGET_SPACING": "int", "ID_UNITTESTNET=\"org.bitcoinj.unittest\"": "String", "MAX_COINS=21000000": "long", "p2shHeader": "int", "PROTOCOL_VERSION=70001": "int", "maxTarget": "BigInteger", "TARGET_SPACING=10 * 60": "int", "dnsSeeds": "String[]", "id": "String", "spendableCoinbaseDepth": "int", "dumpedPrivateKeyHeader": "int", "targetTimespan": "int", "TARGET_TIMESPAN=14 * 24 * 60* 60": "int", "PAYMENT_PROTOCOL_ID_MAINNET=\"main\"": "String", "addressHeader": "int", "MAX_MONEY=COIN.multiply(MAX_COINS)": "Coin", "bip32HeaderPriv": "int", "alertSigningKey": "byte[]", "acceptableAddressCodes": "int[]", "bip32HeaderPub": "int", "ID_MAINNET=\"org.bitcoin.production\"": "String", "packetMagic": "long", "SATOSHI_KEY=Utils.HEX.decode(\"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\")": "byte[]", "genesisBlock": "Block", "PAYMENT_PROTOCOL_ID_TESTNET=\"test\"": "String", "subsidyDecreaseBlockCount": "int", "port": "int", "ID_TESTNET=\"org.bitcoin.test\"": "String", "checkpoints=new HashMap<Integer,Sha256Hash>()": "Map<Integer,Sha256Hash>", "interval": "int", "ID_REGTEST=\"org.bitcoin.regtest\"": "String", "BIP16_ENFORCE_TIME=1333238400": "int"}, "code": ["int", "function", "(", ")", "{", "return", "bip32HeaderPub", ";", "}"], "memberFunctions": {"regTests": [["NetworkParameters"]], "allowEmptyPeerChain": [["boolean"]], "getDumpedPrivateKeyHeader": [["int"]], "testNet2": [["NetworkParameters"]], "getBip32HeaderPriv": [["int"]], "testNet3": [["NetworkParameters"]], "unitTests": [["NetworkParameters"]], "getId": [["String"]], "getPaymentProtocolId": [["String"]], "getAddressHeader": [["int"]], "getAcceptableAddressCodes": [["int[]"]], "prodNet": [["NetworkParameters"]], "fromID": [["NetworkParameters", "String id"]], "getTargetTimespan": [["int"]], "getDnsSeeds": [["String[]"]], "hashCode": [["int"]], "getSpendableCoinbaseDepth": [["int"]], "testNet": [["NetworkParameters"]], "isCheckpoint": [["boolean", "int height"]], "getP2SHHeader": [["int"]], "getInterval": [["int"]], "getGenesisBlock": [["Block"]], "getSubsidyDecreaseBlockCount": [["int"]], "createGenesis": [["Block", "NetworkParameters n"]], "getMaxTarget": [["BigInteger"]], "getPacketMagic": [["long"]], "getPort": [["int"]], "getAlertSigningKey": [["byte[]"]], "equals": [["boolean", "Object o"]], "passesCheckpoint": [["boolean", "int height", "Sha256Hash hash"]], "fromPmtProtocolID": [["NetworkParameters", "String pmtProtocolId"]]}, "className": "NetworkParameters", "renamed": ["int", "function", "(", ")", "{", "return", "bip32HeaderPub", ";", "}"], "nl": "Returns the 4 byte header for BIP32 (HD) wallet - public key part.", "nlToks": ["Returns", "the", "4", "byte", "header", "for", "BIP32", "-LRB-", "HD", "-RRB-", "wallet", "-", "public", "key", "part", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/core/NetworkParameters.java", "idx": 69}
{"memberVariables": {"MICROCOIN=MILLICOIN.divide(1000)": "Coin", "SMALLEST_UNIT_EXPONENT=8": "int", "COIN_VALUE=LongMath.pow(10,SMALLEST_UNIT_EXPONENT)": "long", "SATOSHI=Coin.valueOf(1)": "Coin", "FRIENDLY_FORMAT=MonetaryFormat.BTC.minDecimals(2).repeatOptionalDecimals(1,6).postfixCode()": "MonetaryFormat", "COIN=Coin.valueOf(COIN_VALUE)": "Coin", "CENT=COIN.divide(100)": "Coin", "FIFTY_COINS=COIN.multiply(50)": "Coin", "NEGATIVE_SATOSHI=Coin.valueOf(-1)": "Coin", "MILLICOIN=COIN.divide(1000)": "Coin", "MAX_SATOSHIS=COIN_VALUE * NetworkParameters.MAX_COINS": "long", "ZERO=Coin.valueOf(0)": "Coin", "value": "long", "PLAIN_FORMAT=MonetaryFormat.BTC.minDecimals(0).repeatOptionalDecimals(1,8).noCode()": "MonetaryFormat"}, "code": ["long", "function", "(", ")", "{", "return", "value", ";", "}"], "memberFunctions": {"add": [["Coin", "final Coin value"]], "signum": [["int"]], "isNegative": [["boolean"]], "isLessThan": [["boolean", "Coin other"]], "valueOf": [["Coin", "final long satoshis"], ["Coin", "final int coins", "final int cents"]], "subtract": [["Coin", "final Coin value"]], "isGreaterThan": [["boolean", "Coin other"]], "isPositive": [["boolean"]], "toPlainString": [["String"]], "smallestUnitExponent": [["int"]], "compareTo": [["int", "final Coin other"]], "longValue": [["long"]], "parseCoin": [["Coin", "final String str"]], "toFriendlyString": [["String"]], "shiftLeft": [["Coin", "final int n"]], "shiftRight": [["Coin", "final int n"]], "divideAndRemainder": [["Coin[]", "final long divisor"]], "hashCode": [["int"]], "negate": [["Coin"]], "equals": [["boolean", "final Object o"]], "isZero": [["boolean"]], "divide": [["Coin", "final long divisor"], ["long", "final Coin divisor"]], "toString": [["String"]], "multiply": [["Coin", "final long factor"]]}, "className": "Coin", "renamed": ["long", "function", "(", ")", "{", "return", "value", ";", "}"], "nl": "Returns the number of satoshis of this monetary value.", "nlToks": ["Returns", "the", "number", "of", "satoshis", "of", "this", "monetary", "value", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/core/Coin.java", "idx": 70}
{"memberVariables": {"mMenuItem": "android.view.MenuItem"}, "code": ["MenuItem", "function", "(", "int", "resId", ")", "{", "if", "(", "mMenuItem", "!=", "null", ")", "{", "HoneycombMenuItem", ".", "setActionView", "(", "mMenuItem", ",", "resId", ")", ";", "}", "return", "this", ";", "}"], "memberFunctions": {"hasSubMenu": [["boolean"]], "getTitleCondensed": [["CharSequence"]], "getGroupId": [["int"]], "getItemId": [["int"]], "getActionView": [["View", "android.view.MenuItem item"], ["View"]], "getTitle": [["CharSequence"]], "setChecked": [["MenuItem", "boolean checked"]], "getAlphabeticShortcut": [["char"]], "setOnMenuItemClickListener": [["MenuItem", "android.view.MenuItem.OnMenuItemClickListener menuItemClickListener"], ["MenuItem", "OnMenuItemClickListener menuItemClickListener"]], "getIntent": [["Intent"]], "isCheckable": [["boolean"]], "setShortcut": [["MenuItem", "char numericChar", "char alphaChar"]], "setVisible": [["MenuItem", "boolean visible"]], "setShowAsAction": [["void", "android.view.MenuItem item", "int actionEnum"], ["void", "int actionEnum"]], "getSubMenu": [["SubMenu"]], "setIntent": [["MenuItem", "Intent intent"]], "setCheckable": [["MenuItem", "boolean checkable"]], "setAlphabeticShortcut": [["MenuItem", "char alphaChar"]], "setTitle": [["MenuItem", "CharSequence title"], ["MenuItem", "int title"]], "setNumericShortcut": [["MenuItem", "char numericChar"]], "isVisible": [["boolean"]], "isChecked": [["boolean"]], "setTitleCondensed": [["MenuItem", "CharSequence title"]], "getIcon": [["Drawable"]], "setIcon": [["MenuItem", "Drawable icon"], ["MenuItem", "int iconRes"]], "setEnabled": [["MenuItem", "boolean enabled"]], "getOrder": [["int"]], "isEnabled": [["boolean"]], "getNumericShortcut": [["char"]], "getMenuInfo": [["ContextMenuInfo"]]}, "className": "MenuItemWrapper", "renamed": ["MenuItem", "function", "(", "int", "arg0", ")", "{", "if", "(", "mMenuItem", "!=", "null", ")", "{", "HoneycombMenuItem", ".", "setActionView", "(", "mMenuItem", ",", "arg0", ")", ";", "}", "return", "this", ";", "}"], "nl": "Set an action view for this menu item. An action view will be displayed in place of an automatically generated menu item element in the UI when this item is shown as an action within a parent.", "nlToks": ["Set", "an", "action", "view", "for", "this", "menu", "item", ".", "An", "action", "view", "will", "be", "displayed", "in", "place", "of", "an", "automatically", "generated", "menu", "item", "element", "in", "the", "UI", "when", "this", "item", "is", "shown", "as", "an", "action", "within", "a", "parent", "."], "path": "prateeka/AndroidDev/tree/master/SherlockActionBar/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java", "idx": 71}
{"memberVariables": {"mockServerMessage=mock(ServerMessage.class)": "ServerMessage", "mockServerSession=mock(ServerSession.class)": "ServerSession", "testEventProperties": "HashMap<String,Object>", "MOCK_SESSION_ID=\"1234-5678-9012-3456\"": "String", "notificationController": "NotificationController"}, "code": ["void", "function", "(", ")", "{", "notificationController", ".", "deletePersistentNotification", "(", "null", ",", "mockServerMessage", ")", ";", "}"], "memberFunctions": {"testHandleEventThrowsIllegalArgumentExceptionOnEmptyUser": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnEmptyApplication": [["void"]], "testDeregisterUserSessionWithNullServerSessonThrowsException": [["void"]], "testDeregisterUserSessionWithNullServerSessionIdThrowsException": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullTitle": [["void"]], "testGetServerSessionByUserId": [["void"]], "tearDown": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnEmptyTitle": [["void"]], "testDeregisterUserSessionRemovesUserFromKnownClients": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnEmptyMessage": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullApplication": [["void"]], "testDeletePersistentNotificationThrowsIllegalArgumentOnNullUserId": [["void"]], "testRegisterUserSessionWithNullServerSessionThrowsException": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullUser": [["void"]], "testRegisterUserSession": [["void"]], "setUp": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullTimestamp": [["void"]], "testRegisterUserSessionWithNullServerSessionIdThrowsException": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullMessage": [["void"]]}, "className": "NotificationControllerTest", "renamed": ["void", "function", "(", ")", "{", "notificationController", ".", "deletePersistentNotification", "(", "null", ",", "mockServerMessage", ")", ";", "}"], "nl": "Test method for deletePersistentNotification(ServerSession serverSession, ServerMessage serverMessage) Verifies that  {@code IllegalArgumentException} is thrown when serverSession is null.", "nlToks": ["Test", "method", "for", "deletePersistentNotification", "-LRB-", "ServerSession", "serverSession", ",", "ServerMessage", "serverMessage", "-RRB-", "Verifies", "that", "-LCB-", "@code", "IllegalArgumentException", "-RCB-", "is", "thrown", "when", "serverSession", "is", "null", "."], "path": "pklinef/ddf-ui/tree/master/search-ui/search-endpoint/src/test/java/org/codice/ddf/ui/searchui/query/controller/NotificationControllerTest.java", "idx": 73}
{"memberVariables": {"offsetHours=0": "int", "offsetMinutes=0": "int", "seconds=0.0": "double", "minutes=0": "int", "hour=0": "int", "TIME_PATTERN=\"%02d:%02d:%02d%+03d:%02d\"": "String"}, "code": ["void", "function", "(", "double", "seconds", ")", "{", "if", "(", "seconds", "<", "0", "||", "seconds", ">=", "60", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"Invalid value for second (0 < seconds < 60)\"", ")", ";", "}", "this", ".", "seconds", "=", "seconds", ";", "}"], "memberFunctions": {"getOffsetHours": [["int"]], "toDate": [["Date", "Date d"]], "toISO8601": [["String"]], "setMinutes": [["void", "int minutes"]], "setHour": [["void", "int hour"]], "getMilliseconds": [["long"]], "setOffsetMinutes": [["void", "int minutes"]], "getMinutes": [["int"]], "getSeconds": [["double"]], "hashCode": [["int"]], "equals": [["boolean", "final Object obj"]], "getOffsetMinutes": [["int"]], "getHour": [["int"]], "toString": [["String"]], "setOffsetHours": [["void", "int hours"]], "setTime": [["void", "Date d"]]}, "className": "Time", "renamed": ["void", "function", "(", "double", "arg0", ")", "{", "if", "(", "arg0", "<", "0", "||", "arg0", ">=", "60", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"srini_string\"", ")", ";", "}", "this", ".", "seconds", "=", "arg0", ";", "}"], "nl": "Set seconds of minute.", "nlToks": ["Set", "seconds", "of", "minute", "."], "path": "pkoziol/marine-api/tree/master/src/main/java/net/sf/marineapi/nmea/util/Time.java", "idx": 75}
{"memberVariables": {"data": "byte[]", "offset=0": "int", "length": "int", "serviceID": "ServiceID", "capacity": "int", "address=null": "InetAddress"}, "code": ["void", "function", "(", "ServiceID", "aServiceID", ")", "{", "serviceID", "=", "aServiceID", ";", "}"], "memberFunctions": {"getServiceID": [["ServiceID"]], "setLengthOnly": [["void", "int len"]], "setLength": [["void", "int len"]], "setAddress": [["void", "InetAddress addr"]], "setData": [["void", "byte[] buf", "int anOffset", "int aLength"], ["void", "byte[] buf"]], "getSocketAddress": [["SocketAddress"]], "getOffset": [["int"]], "getLength": [["int"]], "getAddress": [["InetAddress"]], "setSocketAddress": [["void", "SocketAddress sockAddr"]], "getData": [["byte[]"]], "getCapacity": [["int"]]}, "className": "ServalDatagramPacket", "renamed": ["void", "function", "(", "ServiceID", "arg0", ")", "{", "serviceID", "=", "arg0", ";", "}"], "nl": "Sets the  {@code ServiceID} for this datagram packet.", "nlToks": ["Sets", "the", "-LCB-", "@code", "ServiceID", "-RCB-", "for", "this", "datagram", "packet", "."], "path": "princeton-sns/serval/tree/master/src/javasock/java/org/servalarch/net/ServalDatagramPacket.java", "idx": 77}
{"memberVariables": {"log=LoggerFactory.getLogger(SPVBlockStore.class)": "Logger", "lock=Threading.lock(\"SPVBlockStore\")": "ReentrantLock", "lastChainHead=null": "StoredBlock", "params": "NetworkParameters", "HEADER_MAGIC=\"SPVB\"": "String", "RECORD_SIZE=32 + StoredBlock.COMPACT_SERIALIZED_SIZE": "int", "FILE_PROLOGUE_BYTES=1024": "int", "notFoundCache=new LinkedHashMap<Sha256Hash,Object>(){\n  @Override protected boolean removeEldestEntry(  Map.Entry<Sha256Hash,Object> entry){\n    return size() > 100;\n  }\n}\n": "LinkedHashMap<Sha256Hash,Object>", "DEFAULT_NUM_HEADERS=5000": "int", "numHeaders": "int", "notFoundMarker=new Object()": "Object", "fileLock=null": "FileLock", "randomAccessFile=null": "RandomAccessFile", "buffer": "MappedByteBuffer", "blockCache=new LinkedHashMap<Sha256Hash,StoredBlock>(){\n  @Override protected boolean removeEldestEntry(  Map.Entry<Sha256Hash,StoredBlock> entry){\n    return size() > 2050;\n  }\n}\n": "LinkedHashMap<Sha256Hash,StoredBlock>"}, "code": ["int", "function", "(", ")", "{", "return", "RECORD_SIZE", "*", "numHeaders", "+", "FILE_PROLOGUE_BYTES", ";", "}"], "memberFunctions": {"removeEldestEntry": [["boolean", "Map.Entry<Sha256Hash,StoredBlock> entry"], ["boolean", "Map.Entry<Sha256Hash,Object> entry"]], "setRingCursor": [["void", "ByteBuffer buffer", "int newCursor"]], "getChainHead": [["StoredBlock"]], "setChainHead": [["void", "StoredBlock chainHead"]], "get": [["StoredBlock", "Sha256Hash hash"]], "getRingCursor": [["int", "ByteBuffer buffer"]], "initNewStore": [["void", "NetworkParameters params"]], "close": [["void"]], "put": [["void", "StoredBlock block"]]}, "className": "SPVBlockStore", "renamed": ["int", "function", "(", ")", "{", "return", "RECORD_SIZE", "*", "numHeaders", "+", "FILE_PROLOGUE_BYTES", ";", "}"], "nl": "Returns the size in bytes of the file that is used to store the chain with the current parameters.", "nlToks": ["Returns", "the", "size", "in", "bytes", "of", "the", "file", "that", "is", "used", "to", "store", "the", "chain", "with", "the", "current", "parameters", "."], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/store/SPVBlockStore.java", "idx": 78}
{"memberVariables": {"mParents": "List<DirectedAcyclicGraphNode<T>>", "mChildren": "List<DirectedAcyclicGraphNode<T>>", "mPayload": "T"}, "code": ["T", "function", "(", ")", "{", "return", "mPayload", ";", "}"], "memberFunctions": {"getParents": [["List<DirectedAcyclicGraphNode<T>>"]], "getChildren": [["List<DirectedAcyclicGraphNode<T>>"]], "removeChild": [["void", "DirectedAcyclicGraphNode<T> child"]], "addParent": [["void", "DirectedAcyclicGraphNode<T> parent"]], "addChild": [["void", "DirectedAcyclicGraphNode<T> child"]]}, "className": "DirectedAcyclicGraphNode", "renamed": ["T", "function", "(", ")", "{", "return", "mPayload", ";", "}"], "nl": "Gets the payload of the node.", "nlToks": ["Gets", "the", "payload", "of", "the", "node", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/collections/DirectedAcyclicGraphNode.java", "idx": 79}
{"memberVariables": {"ext": "String", "addedDate": "Date", "rating": "int", "previousPlayCounter": "int", "ratingModifDate": "Date", "lastPlayed": "Date", "relativeFullPath": "String", "updateRatingModifDate=false": "boolean", "idPath": "int", "filename": "String", "deleted": "boolean", "BPM=0": "float", "relativePath": "String", "idFile": "int", "sourceName": "String", "playCounter": "int"}, "code": ["String", "function", "(", ")", "{", "return", "DateTime", ".", "formatUTCtoSqlUTC", "(", "this", ".", "addedDate", ")", ";", "}"], "memberFunctions": {"getFormattedRatingModifDate": [["String"]], "setIdPath": [["void", "int idPath"]], "setAddedDate": [["void", "Date addedDate"]], "getSourceName": [["String"]], "equalsStats": [["boolean", "FileInfo thatFileInfo"]], "getIdFile": [["int"]], "compareTo": [["int", "Object o"]], "setFilename": [["void", "String filename"]], "setRelativePath": [["void", "String relativePath"]], "getPreviousPlayCounter": [["int"]], "isDeleted": [["boolean"]], "hashCode": [["int"]], "setPlayCounter": [["void", "int playCounter"]], "getLastPlayedLocalTime": [["String"]], "setBPM": [["void", "float BPM"]], "getRelativeFullPath": [["String"]], "getAddedDateLocalTime": [["String"]], "getBPM": [["float"]], "setIdFile": [["void", "int idFile"]], "getAddedDate": [["Date"]], "getExt": [["String"]], "getRatingModifDate": [["Date"]], "setLastPlayed": [["void", "Date lastPlayed"]], "setRelativeFullPath": [["void", "String relativeFullPath"]], "setPath": [["void", "String relativeFullPath"]], "setSourceName": [["void", "String sourceName"]], "getFilename": [["String"]], "getFormattedLastPlayed": [["String"]], "getLastPlayed": [["Date"]], "equals": [["boolean", "Object obj"]], "clone": [["Object"]], "toString": [["String"]], "setUpdateRatingModifDate": [["void", "boolean updateRatingModifDate"]], "getIdPath": [["int"]], "getRelativePath": [["String"]], "setRating": [["void", "int rating"]], "getPlayCounter": [["int"]], "getRating": [["int"]]}, "className": "FileInfo", "renamed": ["String", "function", "(", ")", "{", "return", "DateTime", ".", "formatUTCtoSqlUTC", "(", "this", ".", "addedDate", ")", ";", "}"], "nl": "Returns added date in \"yyyy-MM-dd HH:mm:ss\" format", "nlToks": ["Returns", "added", "date", "in", "``", "yyyy-MM-dd", "HH", ":", "mm", ":", "ss", "''", "format"], "path": "phramusca/JaMuz/tree/master/src/jamuz/FileInfo.java", "idx": 81}
{"memberVariables": {"mParents": "List<DirectedAcyclicGraphNode<T>>", "mChildren": "List<DirectedAcyclicGraphNode<T>>", "mPayload": "T"}, "code": ["List", "<", "DirectedAcyclicGraphNode", "<", "T", ">>", "function", "(", ")", "{", "return", "mChildren", ";", "}"], "memberFunctions": {"getParents": [["List<DirectedAcyclicGraphNode<T>>"]], "getPayload": [["T"]], "removeChild": [["void", "DirectedAcyclicGraphNode<T> child"]], "addParent": [["void", "DirectedAcyclicGraphNode<T> parent"]], "addChild": [["void", "DirectedAcyclicGraphNode<T> child"]]}, "className": "DirectedAcyclicGraphNode", "renamed": ["List", "<", "DirectedAcyclicGraphNode", "<", "T", ">>", "function", "(", ")", "{", "return", "mChildren", ";", "}"], "nl": "Gets the children nodes of the node.", "nlToks": ["Gets", "the", "children", "nodes", "of", "the", "node", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/collections/DirectedAcyclicGraphNode.java", "idx": 82}
{"memberVariables": {"mOrientationProvider": "OrientationProvider", "mAdapter": "StickyRecyclerHeadersAdapter", "mDimensionCalculator": "DimensionCalculator", "mHeaderProvider": "HeaderProvider"}, "code": ["View", "function", "(", "RecyclerView", "parent", ",", "View", "firstHeader", ")", "{", "for", "(", "int", "i", "=", "0", ";", "i", "<", "parent", ".", "getChildCount", "(", ")", ";", "i", "++", ")", "{", "View", "child", "=", "parent", ".", "getChildAt", "(", "i", ")", ";", "if", "(", "!", "itemIsObscuredByHeader", "(", "parent", ",", "child", ",", "firstHeader", ",", "mOrientationProvider", ".", "getOrientation", "(", "parent", ")", ")", ")", "{", "return", "child", ";", "}", "}", "return", "null", ";", "}"], "memberFunctions": {"getListLeft": [["int", "RecyclerView view"]], "hasNewHeader": [["boolean", "int position"]], "getListTop": [["int", "RecyclerView view"]], "translateHeaderWithNextHeader": [["void", "RecyclerView recyclerView", "int orientation", "Rect translation", "View currentHeader", "View viewAfterNextHeader", "View nextHeader"]], "getDefaultHeaderOffset": [["Rect", "RecyclerView recyclerView", "View header", "View firstView", "int orientation"]], "isStickyHeaderBeingPushedOffscreen": [["boolean", "RecyclerView recyclerView", "View stickyHeader"]], "itemIsObscuredByHeader": [["boolean", "RecyclerView parent", "View item", "View header", "int orientation"]], "indexOutOfBounds": [["boolean", "int position"]], "getHeaderBounds": [["Rect", "RecyclerView recyclerView", "View header", "View firstView", "boolean firstHeader"]]}, "className": "HeaderPositionCalculator", "renamed": ["View", "function", "(", "RecyclerView", "arg0", ",", "View", "arg1", ")", "{", "for", "(", "int", "loc0", "=", "0", ";", "loc0", "<", "arg0", ".", "getChildCount", "(", ")", ";", "loc0", "++", ")", "{", "View", "loc1", "=", "arg0", ".", "getChildAt", "(", "loc0", ")", ";", "if", "(", "!", "itemIsObscuredByHeader", "(", "arg0", ",", "loc1", ",", "arg1", ",", "mOrientationProvider", ".", "getOrientation", "(", "arg0", ")", ")", ")", "{", "return", "loc1", ";", "}", "}", "return", "null", ";", "}"], "nl": "Returns the first item currently in the RecyclerView that is not obscured by a header.", "nlToks": ["Returns", "the", "first", "item", "currently", "in", "the", "RecyclerView", "that", "is", "not", "obscured", "by", "a", "header", "."], "path": "prashant31191/UltimateRecyclerView/tree/master/UltimateRecyclerView/ultimaterecyclerview/src/main/java/com/marshalchen/ultimaterecyclerview/stickyheadersrecyclerview/HeaderPositionCalculator.java", "idx": 83}
{"memberVariables": {"lastModifiedTimeStamp": "Date", "feedId": "Long", "createdBy": "String", "fetcherStartTimeStamp": "Date", "createTimeStamp": "Date", "testId": "Long", "runId": "Long", "fetcherEndTimeStamp": "Date", "regTestResultDetailsLst": "List<TestResultDetailsDTO>", "outcome": "OutcomeType", "runStatus": "RunStatusType", "errorMsg": "String"}, "code": ["void", "function", "(", "List", "<", "TestResultDetailsDTO", ">", "regTestResultDetailsLst", ")", "{", "this", ".", "regTestResultDetailsLst", "=", "regTestResultDetailsLst", ";", "}"], "memberFunctions": {"setLastModifiedTimeStamp": [["void", "Date lastModifiedTimeStamp"]], "getFetcherEndTimeStamp": [["Date"]], "setFeedId": [["void", "Long feedId"]], "setFetcherStartTimeStamp": [["void", "Date fetcherStartTimeStamp"]], "getLastModifiedTimeStamp": [["Date"]], "getOutcome": [["OutcomeType"]], "getRunId": [["Long"]], "getRegTestResultDetailsLst": [["List<TestResultDetailsDTO>"]], "getFeedId": [["Long"]], "setTestId": [["void", "Long testId"]], "getTestId": [["Long"]], "getFetcherStartTimeStamp": [["Date"]], "setRunId": [["void", "Long runId"]], "setErrorMsg": [["void", "String errorMsg"]], "setFetcherEndTimeStamp": [["void", "Date fetcherEndTimeStamp"]], "setCreateTimeStamp": [["void", "Date createTimeStamp"]], "setCreatedBy": [["void", "String createdBy"]], "getRunStatus": [["RunStatusType"]], "getCreateTimeStamp": [["Date"]], "setOutcome": [["void", "OutcomeType outcome"]], "toString": [["String"]], "getCreatedBy": [["String"]], "getErrorMsg": [["String"]], "setRunStatus": [["void", "RunStatusType runStatus"]]}, "className": "TestResultDTO", "renamed": ["void", "function", "(", "List", "<", "TestResultDetailsDTO", ">", "arg0", ")", "{", "this", ".", "regTestResultDetailsLst", "=", "arg0", ";", "}"], "nl": "Sets the reg test result details lst.", "nlToks": ["Sets", "the", "reg", "test", "result", "details", "lst", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/TestResultDTO.java", "idx": 84}
{"memberVariables": {"lastModifiedTimeStamp": "Timestamp", "fetcherStartTimestamp": "Timestamp", "createTimeStamp": "Timestamp", "serialVersionUID=1L": "long", "batchId": "BigDecimal", "errorMsg": "String", "outcomeType": "OutcomeType", "createdBy": "String", "feedId": "BigDecimal", "testId": "long", "runId": "BigDecimal", "fetcherEndTimeStamp": "Timestamp", "regPclTestResultDetails": "List<RegPCLTestResultDetailsEntity>", "runStatus": "RunStatusType"}, "code": ["long", "function", "(", ")", "{", "return", "this", ".", "testId", ";", "}"], "memberFunctions": {"setLastModifiedTimeStamp": [["void", "Timestamp lastModifiedTimeStamp"]], "setFeedId": [["void", "BigDecimal feedId"]], "setFetcherStartTimestamp": [["void", "Timestamp fetcherStartTimestamp"]], "getOutcomeType": [["OutcomeType"]], "updateLastModifiedTimeStamp": [["void"]], "updateCreateTimeStamp": [["void"]], "getRunId": [["BigDecimal"]], "setBatchId": [["void", "BigDecimal batchId"]], "getRegPclTestResultDetails": [["List<RegPCLTestResultDetailsEntity>"]], "setTestId": [["void", "long testId"]], "removeRegPclTestResultDetail": [["RegPCLTestResultDetailsEntity", "RegPCLTestResultDetailsEntity regPclTestResultDetail"]], "setRegPclTestResultDetails": [["void", "List<RegPCLTestResultDetailsEntity> regPclTestResultDetails"]], "setErrorMsg": [["void", "String errorMsg"]], "getRunStatus": [["RunStatusType"]], "addRegPclTestResultDetail": [["RegPCLTestResultDetailsEntity", "RegPCLTestResultDetailsEntity regPclTestResultDetail"]], "getErrorMsg": [["String"]], "setRunStatus": [["void", "RunStatusType runStatus"]], "getFetcherEndTimeStamp": [["Timestamp"]], "getLastModifiedTimeStamp": [["Timestamp"]], "getFeedId": [["BigDecimal"]], "setRunId": [["void", "BigDecimal runId"]], "getFetcherStartTimestamp": [["Timestamp"]], "setFetcherEndTimeStamp": [["void", "Timestamp fetcherEndTimeStamp"]], "setCreateTimeStamp": [["void", "Timestamp createTimeStamp"]], "setCreatedBy": [["void", "String createdBy"]], "getCreateTimeStamp": [["Timestamp"]], "getBatchId": [["BigDecimal"]], "setOutcomeType": [["void", "OutcomeType outcomeType"]], "getCreatedBy": [["String"]]}, "className": "RegPCLTestResultEntity", "renamed": ["long", "function", "(", ")", "{", "return", "this", ".", "testId", ";", "}"], "nl": "Gets the test id.", "nlToks": ["Gets", "the", "test", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/RegPCLTestResultEntity.java", "idx": 85}
{"memberVariables": {"time": "Time"}, "code": ["void", "function", "(", ")", "{", "Date", "now", "=", "new", "Date", "(", ")", ";", "time", ".", "setTime", "(", "now", ")", ";", "Date", "result", "=", "time", ".", "toDate", "(", "now", ")", ";", "assertEquals", "(", "now", ",", "result", ")", ";", "assertEquals", "(", "now", ".", "getTime", "(", ")", ",", "result", ".", "getTime", "(", ")", ")", ";", "}"], "memberFunctions": {"testParseTimeWithOneDecimal": [["void"]], "testSetNegativeMinutes": [["void"]], "testFormatTimeWithOneDecimal": [["void"]], "testSetMinutes": [["void"]], "testParseTimeWithoutDecimals": [["void"]], "testGetMinutes": [["void"]], "testParseTimeWithDecimals": [["void"]], "testSetInvalidSeconds": [["void"]], "testSetNegativeHour": [["void"]], "testToDate": [["void"]], "testGetSeconds": [["void"]], "testSetHour": [["void"]], "testGetHour": [["void"]], "testSetSeconds": [["void"]], "testSetTime": [["void"]], "testGetMilliseconds": [["void"]], "testSetInvalidHour": [["void"]], "testSetNegativeSeconds": [["void"]], "setUp": [["void"]], "testSetInvalidMinutes": [["void"]], "testFormatTimeNoDecimals": [["void"]], "testFormatTimeWithDecimals": [["void"]], "testEquals": [["void"]]}, "className": "TimeTest", "renamed": ["void", "function", "(", ")", "{", "Date", "loc0", "=", "new", "Date", "(", ")", ";", "time", ".", "setTime", "(", "loc0", ")", ";", "Date", "loc1", "=", "time", ".", "toDate", "(", "loc0", ")", ";", "assertEquals", "(", "loc0", ",", "loc1", ")", ";", "assertEquals", "(", "loc0", ".", "getTime", "(", ")", ",", "loc1", ".", "getTime", "(", ")", ")", ";", "}"], "nl": "Test method for setTime() and toDate() round-trip.", "nlToks": ["Test", "method", "for", "setTime", "-LRB-", "-RRB-", "and", "toDate", "-LRB-", "-RRB-", "round-trip", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/util/TimeTest.java", "idx": 87}
{"memberVariables": {"endDate": "Timestamp", "feedConfigId": "BigDecimal", "resultCode": "String", "serialVersionUID=1L": "long", "resultMessage": "String", "fileCount": "BigDecimal", "maxReceiptDate": "Timestamp", "downloadSize": "BigDecimal", "feedId": "BigDecimal", "configInfo": "String", "runId": "long", "errors": "byte[]", "runStatus": "String", "startDate": "Timestamp"}, "code": ["void", "function", "(", "BigDecimal", "feedConfigId", ")", "{", "this", ".", "feedConfigId", "=", "feedConfigId", ";", "}"], "memberFunctions": {"getFeedConfigId": [["BigDecimal"]], "getStartDate": [["Timestamp"]], "setFeedId": [["void", "BigDecimal feedId"]], "getResultCode": [["String"]], "setMaxReceiptDate": [["void", "Timestamp maxReceiptDate"]], "getRunId": [["long"]], "getEndDate": [["Timestamp"]], "setErrors": [["void", "byte[] errors"]], "getConfigInfo": [["String"]], "setEndDate": [["void", "Timestamp endDate"]], "getErrors": [["byte[]"]], "setFileCount": [["void", "BigDecimal fileCount"]], "getDownloadSize": [["BigDecimal"]], "getResultMessage": [["String"]], "setResultMessage": [["void", "String resultMessage"]], "getFileCount": [["BigDecimal"]], "getRunStatus": [["String"]], "setRunStatus": [["void", "String runStatus"]], "setStartDate": [["void", "Timestamp startDate"]], "getFeedId": [["BigDecimal"]], "setResultCode": [["void", "String resultCode"]], "setRunId": [["void", "long runId"]], "getMaxReceiptDate": [["Timestamp"]], "setConfigInfo": [["void", "String configInfo"]], "setDownloadSize": [["void", "BigDecimal downloadSize"]]}, "className": "PCLFetcherRunRecorderEntity", "renamed": ["void", "function", "(", "BigDecimal", "arg0", ")", "{", "this", ".", "feedConfigId", "=", "arg0", ";", "}"], "nl": "Sets the feed config id.", "nlToks": ["Sets", "the", "feed", "config", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLFetcherRunRecorderEntity.java", "idx": 89}
{"memberVariables": {"imageFormat": "String", "writeCompressionQuality": "float", "writeCompressionType": "String", "writeCompressionMode": "int", "DEFAULT_IMAGE_FORMAT=\"png\"": "String"}, "code": ["void", "function", "(", "String", "type", ")", "{", "this", ".", "writeCompressionType", "=", "type", ";", "}"], "memberFunctions": {"setWriteCompressionMode": [["void", "int mode"]], "newJpegWriter": [["FSImageWriter", "float quality"]], "setWriteCompressionQuality": [["void", "float q"]], "write": [["void", "BufferedImage bimg", "String filePath"], ["void", "BufferedImage bimg", "OutputStream os"]], "getImageWriteParameters": [["ImageWriteParam", "ImageWriter writer"]], "lookupImageWriterForFormat": [["ImageWriter", "String imageFormat"]]}, "className": "FSImageWriter", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "writeCompressionType", "=", "arg0", ";", "}"], "nl": "Compression type for images to be generated from this writer. See {@link javax.imageio.ImageWriteParam#setCompressionType(String)} for a description of what this meansand valid range of values.", "nlToks": ["Compression", "type", "for", "images", "to", "be", "generated", "from", "this", "writer", ".", "See", "-LCB-", "@link", "javax.imageio.ImageWriteParam", "#setCompressionType", "-LRB-", "String", "-RRB-", "-RCB-", "for", "a", "description", "of", "what", "this", "meansand", "valid", "range", "of", "values", "."], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/util/FSImageWriter.java", "idx": 91}
{"memberVariables": {}, "code": ["boolean", "function", "(", "Iterable", "<", "Range", "<", "C", ">>", "other", ")", "{", "for", "(", "Range", "<", "C", ">", "range", ":", "other", ")", "{", "if", "(", "!", "encloses", "(", "range", ")", ")", "{", "return", "false", ";", "}", "}", "return", "true", ";", "}"], "memberFunctions": {"add": [["void", "Range<C> range"]], "asDescendingSetOfRanges": [["Set<Range<C>>"]], "intersects": [["boolean", "Range<C> otherRange"]], "isEmpty": [["boolean"]], "clear": [["void"]], "subRangeSet": [["RangeSet<C>", "Range<C> view"]], "remove": [["void", "Range<C> range"]], "contains": [["boolean", "C value"]], "rangeContaining": [["Range<C>", "C value"]], "removeAll": [["void", "RangeSet<C> other"], ["void", "Iterable<Range<C>> ranges"]], "addAll": [["void", "RangeSet<C> other"], ["void", "Iterable<Range<C>> ranges"]], "hashCode": [["int"]], "equals": [["boolean", "@Nullable Object obj"]], "toString": [["String"]], "complement": [["RangeSet<C>"]], "encloses": [["boolean", "Range<C> otherRange"]], "asRanges": [["Set<Range<C>>"]], "span": [["Range<C>"]]}, "className": "RangeSet", "renamed": ["boolean", "function", "(", "Iterable", "<", "Range", "<", "C", ">>", "arg0", ")", "{", "for", "(", "Range", "<", "C", ">", "loc0", ":", "arg0", ")", "{", "if", "(", "!", "encloses", "(", "loc0", ")", ")", "{", "return", "false", ";", "}", "}", "return", "true", ";", "}"], "nl": "Returns  {@code true} if for each range in {@code other} there exists a member range in thisrange set which  {@linkplain Range#encloses encloses} it. Returns {@code true} if {@code other}is empty. This is equivalent to checking if this range set  {@link #encloses} each range in {@code other}.", "nlToks": ["Returns", "-LCB-", "@code", "true", "-RCB-", "if", "for", "each", "range", "in", "-LCB-", "@code", "other", "-RCB-", "there", "exists", "a", "member", "range", "in", "thisrange", "set", "which", "-LCB-", "@linkplain", "Range", "#encloses", "encloses", "-RCB-", "it", ".", "Returns", "-LCB-", "@code", "true", "-RCB-", "if", "-LCB-", "@code", "other", "-RCB-", "is", "empty", ".", "This", "is", "equivalent", "to", "checking", "if", "this", "range", "set", "-LCB-", "@link", "#encloses", "-RCB-", "each", "range", "in", "-LCB-", "@code", "other", "-RCB-", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/collect/RangeSet.java", "idx": 93}
{"memberVariables": {"functions": "Map<String,Method>", "current=new ThreadLocal<ELEvaluator>()": "ThreadLocal<ELEvaluator>", "context": "Context", "evaluator=new ExpressionEvaluatorImpl()": "ExpressionEvaluator", "vars": "Map<String,Object>"}, "code": ["void", "function", "(", "Map", "<", "String", ",", "Object", ">", "vars", ")", "{", "this", ".", "vars", ".", "putAll", "(", "vars", ")", ";", "}"], "memberFunctions": {"resolveFunction": [["Method", "String prefix", "String name"]], "addFunction": [["void", "String prefix", "String functionName", "Method method"]], "resolveVariable": [["Object", "String name"]], "setVariable": [["void", "String name", "Object value"], ["void", "String name", "Object value"]], "getCurrent": [["ELEvaluator"]], "getVariable": [["Object", "String name"], ["Object", "String name"]], "getContext": [["Context"]], "evaluate": [["T", "String expr", "Class<T> clazz"]]}, "className": "ELEvaluator", "renamed": ["void", "function", "(", "Map", "<", "String", ",", "Object", ">", "arg0", ")", "{", "this", ".", "vars", ".", "putAll", "(", "arg0", ")", ";", "}"], "nl": "Add variables to the context. ", "nlToks": ["Add", "variables", "to", "the", "context", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/util/ELEvaluator.java", "idx": 95}
{"memberVariables": {"mode": "int", "buffer=null": "ByteBuffer", "allocator": "ByteBufferAllocator", "OUTPUT_MODE=1": "int", "INPUT_MODE=0": "int"}, "code": ["boolean", "function", "(", ")", "{", "setOutputMode", "(", ")", ";", "return", "this", ".", "buffer", ".", "hasRemaining", "(", ")", ";", "}"], "memberFunctions": {"expandCapacity": [["void", "int capacity"]], "setOutputMode": [["void"]], "expand": [["void"]], "setInputMode": [["void"]], "length": [["int"]], "available": [["int"]], "clear": [["void"]], "toString": [["String"]], "getMode": [["int"]], "ensureCapacity": [["void", "int requiredCapacity"]], "capacity": [["int"]]}, "className": "ExpandableBuffer", "renamed": ["boolean", "function", "(", ")", "{", "setOutputMode", "(", ")", ";", "return", "this", ".", "buffer", ".", "hasRemaining", "(", ")", ";", "}"], "nl": "Determines if the buffer contains data.", "nlToks": ["Determines", "if", "the", "buffer", "contains", "data", "."], "path": "pritamkhose/open-gpstracker.code/tree/master/external_sources/httpcore-4.1.1/httpcore-nio/src/main/java/org/apache/http/nio/util/ExpandableBuffer.java", "idx": 97}
{"memberVariables": {"blk": "Block", "oldval": "String", "offset": "int", "txnum": "int", "newval": "String"}, "code": ["int", "function", "(", ")", "{", "Object", "[", "]", "rec", "=", "new", "Object", "[", "]", "{", "SETSTRING", ",", "txnum", ",", "blk", ".", "fileName", "(", ")", ",", "blk", ".", "number", "(", ")", ",", "offset", ",", "oldval", ",", "newval", "}", ";", "return", "logMgr", ".", "append", "(", "rec", ")", ";", "}"], "memberFunctions": {"op": [["int"]], "undo": [["void", "int txnum"]], "toString": [["String"]], "redo": [["void", "int txnum"]], "txNumber": [["int"]]}, "className": "SetStringRecord", "renamed": ["int", "function", "(", ")", "{", "Object", "[", "]", "loc0", "=", "new", "Object", "[", "]", "{", "SETSTRING", ",", "txnum", ",", "blk", ".", "fileName", "(", ")", ",", "blk", ".", "number", "(", ")", ",", "offset", ",", "oldval", ",", "newval", "}", ";", "return", "logMgr", ".", "append", "(", "loc0", ")", ";", "}"], "nl": "Writes a setString record to the log. This log record contains the SETSTRING operator, followed by the transaction id, the filename, number, and offset of the modified block, and the previous string value at that offset.", "nlToks": ["Writes", "a", "setString", "record", "to", "the", "log", ".", "This", "log", "record", "contains", "the", "SETSTRING", "operator", ",", "followed", "by", "the", "transaction", "id", ",", "the", "filename", ",", "number", ",", "and", "offset", "of", "the", "modified", "block", ",", "and", "the", "previous", "string", "value", "at", "that", "offset", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/tx/recovery/SetStringRecord.java", "idx": 98}
{"memberVariables": {"dataFlow=new ArrayList<>()": "List<DataFlowNode>", "continueBreakReturnStack=new Stack<>()": "Stack<StackObject>", "LOGGER=Logger.getLogger(Structure.class.getName())": "Logger", "dataFlowHandler": "DataFlowHandler", "braceStack=new Stack<>()": "Stack<StackObject>"}, "code": ["DataFlowNode", "function", "(", "Node", "node", ")", "{", "return", "dataFlowHandler", ".", "createDataFlowNode", "(", "dataFlow", ",", "node", ")", ";", "}"], "memberFunctions": {"getContinueBreakReturnStack": [["List<StackObject>"]], "createStartNode": [["DataFlowNode", "int line"]], "createEndNode": [["DataFlowNode", "int line"]], "getFirst": [["DataFlowNode"]], "getBraceStack": [["List<StackObject>"]], "dump": [["String"]], "getLast": [["DataFlowNode"]], "pushOnStack": [["void", "int type", "DataFlowNode node"]]}, "className": "Structure", "renamed": ["DataFlowNode", "function", "(", "Node", "arg0", ")", "{", "return", "dataFlowHandler", ".", "createDataFlowNode", "(", "dataFlow", ",", "arg0", ")", ";", "}"], "nl": "This class encapsulates the access to the DataFlowNode class. Is this worthwhile? TODO I think it's too confusing to have the DataFlowNode constructor add the created instance to the List. I think it'd be clearer if we did that more \"procedurally\", i.e., create the object, then add it to the list.", "nlToks": ["This", "class", "encapsulates", "the", "access", "to", "the", "DataFlowNode", "class", ".", "Is", "this", "worthwhile", "?", "TODO", "I", "think", "it", "'s", "too", "confusing", "to", "have", "the", "DataFlowNode", "constructor", "add", "the", "created", "instance", "to", "the", "List", ".", "I", "think", "it", "'d", "be", "clearer", "if", "we", "did", "that", "more", "``", "procedurally", "''", ",", "i.e.", ",", "create", "the", "object", ",", "then", "add", "it", "to", "the", "list", "."], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/lang/dfa/Structure.java", "idx": 99}
{"memberVariables": {"sUserThreadLocal=new ThreadLocal<>()": "ThreadLocal<User>"}, "code": ["User", "function", "(", ")", "{", "if", "(", "!", "SecurityUtils", ".", "isAuthenticationEnabled", "(", ")", ")", "{", "throw", "new", "IOException", "(", "ExceptionMessage", ".", "AUTHENTICATION_IS_NOT_ENABLED", ".", "getMessage", "(", ")", ")", ";", "}", "return", "sUserThreadLocal", ".", "get", "(", ")", ";", "}"], "memberFunctions": {"set": [["void", "String userName"]], "remove": [["void"]]}, "className": "AuthenticatedClientUser", "renamed": ["User", "function", "(", ")", "{", "if", "(", "!", "SecurityUtils", ".", "isAuthenticationEnabled", "(", ")", ")", "{", "throw", "new", "IOException", "(", "ExceptionMessage", ".", "AUTHENTICATION_IS_NOT_ENABLED", ".", "getMessage", "(", ")", ")", ";", "}", "return", "sUserThreadLocal", ".", "get", "(", ")", ";", "}"], "nl": "Gets the  {@link User} from the {@link ThreadLocal} variable.", "nlToks": ["Gets", "the", "-LCB-", "@link", "User", "-RCB-", "from", "the", "-LCB-", "@link", "ThreadLocal", "-RCB-", "variable", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/security/authentication/AuthenticatedClientUser.java", "idx": 101}
{"memberVariables": {"enableClaims=\"false\"": "String", "enableRecipients=\"false\"": "String", "selectedClaims=new ArrayList<String>()": "List<String>", "attributeConsumingServiceIndex=null": "String", "singleLogoutUrl=\"\"": "String", "enableAudiences=\"false\"": "String", "enableSignatureValidation=\"false\"": "String", "selectedAudiences=new ArrayList<String>()": "List<String>", "issuer=\"\"": "String", "certificateAlias=\"\"": "String", "isIdPInitSSOEnabled": "String", "assertionConsumerUrl=\"\"": "String", "enableAssertionSigning=\"false\"": "String", "enableSingleLogout=\"false\"": "String", "selectedRecipients=new ArrayList<String>()": "List<String>"}, "code": ["boolean", "function", "(", "String", "recipient", ")", "{", "if", "(", "selectedRecipients", ".", "contains", "(", "recipient", ")", ")", "{", "return", "false", ";", "}", "selectedRecipients", ".", "add", "(", "recipient", ")", ";", "return", "true", ";", "}"], "memberFunctions": {"getSelectedAudiences": [["List<String>"]], "setIdPInitSSOEnabled": [["void", "String idPInitSSOEnabled"]], "getAttributeConsumingServiceIndex": [["String"]], "getEnableClaims": [["String"]], "getSelectedClaimsAttay": [["String[]"]], "addAudienceToList": [["boolean", "String audience"]], "getSelectedAudiencesArray": [["String[]"]], "removeClaimFromList": [["void", "String claim"]], "getEnableSignatureValidation": [["String"]], "getSelectedClaims": [["List<String>"]], "removeRecipientFromList": [["void", "String recipient"]], "setEnableAssertionSigning": [["void", "String enableAssertionSigning"]], "getSelectedRecipients": [["List<String>"]], "setEnableSignatureValidation": [["void", "String enableSignatureValidation"]], "getAssertionConsumerUrl": [["String"]], "getIssuer": [["String"]], "getCertificateAlias": [["String"]], "setAttributeConsumingServiceIndex": [["void", "String attributeConsumingServiceIndex"]], "clearBean": [["void"]], "setSelectedAttributes": [["void", "List<String> selectedClaims"]], "getSingleLogoutUrl": [["String"]], "getSelectedRecipientsArray": [["String[]"]], "addClaimToList": [["boolean", "String claim"]], "setEnableAudiences": [["void", "String enableAudiences"]], "getEnableAssertionSigning": [["String"]], "setCertificateAlias": [["void", "String certificateAlias"]], "getEnableAudiences": [["String"]], "getEnableSingleLogout": [["String"]], "setIssuer": [["void", "String issuer"]], "setSingleLogoutUrl": [["void", "String singleLogoutUrl"]], "setEnableClaims": [["void", "String enableClaims"]], "setEnableRecipients": [["void", "String enableRecipients"]], "isIdPInitSSOEnabled": [["String"]], "getEnableRecipients": [["String"]], "removeAudienceFromList": [["void", "String audience"]], "setAssertionConsumerUrl": [["void", "String assertionConsumerUrl"]], "setEnableSingleLogout": [["void", "String enableSingleLogout"]]}, "className": "SAMLSSOProviderConfigBean", "renamed": ["boolean", "function", "(", "String", "arg0", ")", "{", "if", "(", "selectedRecipients", ".", "contains", "(", "arg0", ")", ")", "{", "return", "false", ";", "}", "selectedRecipients", ".", "add", "(", "arg0", ")", ";", "return", "true", ";", "}"], "nl": "add an recipient to the required recipients list", "nlToks": ["add", "an", "recipient", "to", "the", "required", "recipients", "list"], "path": "harsha1979/carbon-identity/tree/master/components/sso-saml/org.wso2.carbon.identity.sso.saml.ui/src/main/java/org/wso2/carbon/identity/sso/saml/ui/SAMLSSOProviderConfigBean.java", "idx": 102}
{"memberVariables": {"mException=ExpectedException.none()": "ExpectedException", "mTestFolder=new TemporaryFolder()": "TemporaryFolder"}, "code": ["void", "function", "(", ")", "{", "File", "ghostFile", "=", "new", "File", "(", "mTestFolder", ".", "getRoot", "(", ")", ",", "\"ghost.txt\"", ")", ";", "mException", ".", "expect", "(", "IOException", ".", "class", ")", ";", "FileUtils", ".", "delete", "(", "ghostFile", ".", "getAbsolutePath", "(", ")", ")", ";", "Assert", ".", "fail", "(", "\"deleting a non-existent file should have failed\"", ")", ";", "}"], "memberFunctions": {"deleteFile": [["void"]], "setLocalDirStickyBit": [["void"]], "getLocalFileMode": [["void"]], "changeNonExistentFile": [["void"]], "moveNonExistentFile": [["void"]], "moveFile": [["void"]], "createFile": [["void"]], "createStorageDirPath": [["void"]], "changeLocalDirPermissionTests": [["void"]], "concurrentCreateStorageDirPath": [["void"]], "createDir": [["void"]], "createBlockPath": [["void"]], "changeLocalFilePermission": [["void"]], "deletePathRecursively": [["void"]]}, "className": "FileUtilsTest", "renamed": ["void", "function", "(", ")", "{", "File", "loc0", "=", "new", "File", "(", "mTestFolder", ".", "getRoot", "(", ")", ",", "\"srini_string\"", ")", ";", "mException", ".", "expect", "(", "IOException", ".", "class", ")", ";", "FileUtils", ".", "delete", "(", "loc0", ".", "getAbsolutePath", "(", ")", ")", ";", "Assert", ".", "fail", "(", "\"srini_string\"", ")", ";", "}"], "nl": "Tests the  {@link FileUtils#delete(String)} method to throw an exception when trying to delete anon-existent file.", "nlToks": ["Tests", "the", "-LCB-", "@link", "FileUtils", "#delete", "-LRB-", "String", "-RRB-", "-RCB-", "method", "to", "throw", "an", "exception", "when", "trying", "to", "delete", "anon-existent", "file", "."], "path": "poemlin/alluxio/tree/master/core/common/src/test/java/alluxio/util/io/FileUtilsTest.java", "idx": 103}
{"memberVariables": {"fields=new HashMap<>()": "Map<FieldSignature,Set<String>>", "nestedClasses=new HashMap<>()": "Map<String,ClassStats>", "memo=new HashMap<>()": "Map<ClassMetricKey,Double>", "operations=new HashMap<>()": "Map<OperationSignature,Map<String,OperationStats>>"}, "code": ["boolean", "function", "(", "String", "name", ",", "OperationSigMask", "mask", ")", "{", "for", "(", "OperationSignature", "sig", ":", "operations", ".", "keySet", "(", ")", ")", "{", "if", "(", "mask", ".", "covers", "(", "sig", ")", ")", "{", "if", "(", "operations", ".", "get", "(", "sig", ")", ".", "containsKey", "(", "name", ")", ")", "{", "return", "true", ";", "}", "}", "}", "return", "false", ";", "}"], "memberFunctions": {"compute": [["double", "OperationMetricKey key", "ASTMethodOrConstructorDeclaration node", "String name", "boolean force"], ["double", "Metrics.ClassMetricKey key", "ASTClassOrInterfaceDeclaration node", "boolean force"]], "addOperation": [["void", "String name", "OperationSignature sig"]], "addField": [["void", "String name", "FieldSignature sig"]], "getNestedClassStats": [["ClassStats", "String className", "boolean createIfNotFound"]]}, "className": "ClassStats", "renamed": ["boolean", "function", "(", "String", "arg0", ",", "OperationSigMask", "arg1", ")", "{", "for", "(", "OperationSignature", "loc0", ":", "operations", ".", "keySet", "(", ")", ")", "{", "if", "(", "arg1", ".", "covers", "(", "loc0", ")", ")", "{", "if", "(", "operations", ".", "get", "(", "loc0", ")", ".", "containsKey", "(", "arg0", ")", ")", "{", "return", "true", ";", "}", "}", "}", "return", "false", ";", "}"], "nl": "Checks whether the class declares an operation by the name given which is covered by the signature mask.", "nlToks": ["Checks", "whether", "the", "class", "declares", "an", "operation", "by", "the", "name", "given", "which", "is", "covered", "by", "the", "signature", "mask", "."], "path": "adangel/pmd/tree/master/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/oom/ClassStats.java", "idx": 105}
{"memberVariables": {"settings": "IStoredSettings", "legacyBackingServices": "Map<String,String>", "runtimeManager": "IRuntimeManager", "logger=LoggerFactory.getLogger(getClass())": "Logger", "userService": "IUserService"}, "code": ["boolean", "function", "(", "Collection", "<", "UserModel", ">", "models", ")", "{", "return", "userService", ".", "updateUserModels", "(", "models", ")", ";", "}"], "memberFunctions": {"deleteRepositoryRole": [["boolean", "String role"]], "getAllUsernames": [["List<String>"]], "getAllUsers": [["List<UserModel>"]], "getUserModel": [["UserModel", "char[] cookie"], ["UserModel", "String username"]], "updateUserModel": [["boolean", "UserModel model"], ["boolean", "String username", "UserModel model"]], "getTeamModel": [["TeamModel", "String teamname"]], "updateTeamModel": [["boolean", "TeamModel model"], ["boolean", "String teamname", "TeamModel model"]], "isInternalAccount": [["boolean", "String username"]], "getTeamNamesForRepositoryRole": [["List<String>", "String role"]], "deleteTeam": [["boolean", "String teamname"]], "getUsernamesForRepositoryRole": [["List<String>", "String role"]], "deleteTeamModel": [["boolean", "TeamModel model"]], "start": [["UserManager"]], "setUserService": [["void", "IUserService userService"]], "createUserService": [["IUserService", "File realmFile"]], "getAllTeams": [["List<TeamModel>"]], "getCookie": [["String", "UserModel model"]], "deleteUserModel": [["boolean", "UserModel model"]], "stop": [["UserManager"]], "deleteUser": [["boolean", "String username"]], "setup": [["void", "IRuntimeManager runtimeManager"]], "renameRepositoryRole": [["boolean", "String oldRole", "String newRole"]], "getAllTeamNames": [["List<String>"]], "updateTeamModels": [["boolean", "Collection<TeamModel> models"]]}, "className": "UserManager", "renamed": ["boolean", "function", "(", "Collection", "<", "UserModel", ">", "arg0", ")", "{", "return", "userService", ".", "updateUserModels", "(", "arg0", ")", ";", "}"], "nl": "Updates/writes all specified user objects.", "nlToks": ["Updates/writes", "all", "specified", "user", "objects", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/manager/UserManager.java", "idx": 106}
{"memberVariables": {"CLASSPATH_PREFIX=\"META-INF\"": "String", "config": "FilterConfig"}, "code": ["void", "function", "(", "String", "msg", ",", "Throwable", "t", ")", "{", "this", ".", "config", ".", "getServletContext", "(", ")", ".", "log", "(", "this", ".", "config", ".", "getFilterName", "(", ")", "+", "\": \"", "+", "msg", ",", "t", ")", ";", "}"], "memberFunctions": {"init": [["void", "FilterConfig filterConfig"]], "findResource": [["URL", "String path"]], "loadResource": [["String", "String path"]], "doFilter": [["void", "ServletRequest request", "ServletResponse response", "FilterChain chain"]], "destroy": [["void"]]}, "className": "ConcatFilter", "renamed": ["void", "function", "(", "String", "arg0", ",", "Throwable", "arg1", ")", "{", "this", ".", "config", ".", "getServletContext", "(", ")", ".", "log", "(", "this", ".", "config", ".", "getFilterName", "(", ")", "+", "\"srini_string\"", "+", "arg0", ",", "arg1", ")", ";", "}"], "nl": "logs the message and Throwable prepended by the filter name (copy of  {@link GenericServlet#log(String,Throwable)})", "nlToks": ["logs", "the", "message", "and", "Throwable", "prepended", "by", "the", "filter", "name", "-LRB-", "copy", "of", "-LCB-", "@link", "GenericServlet", "#log", "-LRB-", "String", ",", "Throwable", "-RRB-", "-RCB-", "-RRB-"], "path": "piejanssens/openui5/tree/master/src/testsuite-utils/src/main/java/com/sap/openui5/ConcatFilter.java", "idx": 110}
{"memberVariables": {"LOG=LoggerFactory.getLogger(JsonControllerUtils.class)": "Logger"}, "code": ["void", "function", "(", "final", "HttpServletRequest", "request", ",", "final", "HttpServletResponse", "response", ")", "{", "writeResponse", "(", "request", ",", "response", ",", "\"\"", ")", ";", "}"], "memberFunctions": {}, "className": "JsonControllerUtils", "renamed": ["void", "function", "(", "final", "HttpServletRequest", "arg0", ",", "final", "HttpServletResponse", "arg1", ")", "{", "writeResponse", "(", "arg0", ",", "arg1", ",", "\"srini_string\"", ")", ";", "}"], "nl": "Writes an empty response for calls that are purely one-way RPC.", "nlToks": ["Writes", "an", "empty", "response", "for", "calls", "that", "are", "purely", "one-way", "RPC", "."], "path": "adamfisk/littleshoot-client/tree/master/client/services/src/main/java/org/lastbamboo/client/handlers/JsonControllerUtils.java", "idx": 111}
{"memberVariables": {"consoleMode": "boolean", "logger=org.apache.log4j.Logger.getLogger(ProgressMonitor.class)": "org.apache.log4j.Logger", "maxValue": "int", "showProgress": "boolean", "progressMonitor=new ProgressMonitor()": "ProgressMonitor", "log=new StringBuffer()": "StringBuffer", "currentMessage": "String", "debugMessages=new ArrayList<>()": "List<String>", "warnings=new TreeSet<>()": "TreeSet<String>", "curValue": "int", "warningCounts=new HashMap<>()": "HashMap<String,Integer>"}, "code": ["void", "function", "(", "int", "curValue", ")", "{", "progressMonitor", ".", "curValue", "=", "curValue", ";", "}"], "memberFunctions": {"setConsoleModeAndParseShowProgress": [["void", "String[] args"]], "setShowProgress": [["void", "boolean showProgress"]], "setCurrentMessage": [["void", "String currentMessage"]], "getMaxValue": [["int"]], "getLog": [["String"]], "logWarning": [["void", "String warning"]], "getWarnings": [["ArrayList<String>"]], "logDebug": [["void", "String debugMessage"]], "getMessages": [["ArrayList<String>"]], "isConsoleMode": [["boolean"]], "getDebugMessages": [["List<String>"]], "setMaxValue": [["void", "int maxValue"]], "incrementCurValue": [["void"]], "isRunningOnServer": [["boolean"]], "getCurrentMessage": [["String"]], "setConsoleMode": [["void", "boolean consoleFlag"]], "getCurValue": [["int"]], "isShowProgress": [["boolean"]], "getPercentComplete": [["double"]]}, "className": "ProgressMonitor", "renamed": ["void", "function", "(", "int", "arg0", ")", "{", "progressMonitor", ".", "arg0", "=", "arg0", ";", "}"], "nl": "Sets the Current Value.", "nlToks": ["Sets", "the", "Current", "Value", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/util/ProgressMonitor.java", "idx": 112}
{"memberVariables": {"m_fileMapper": "FileMapper", "m_escapedJson": "String", "m_log=LoggerFactory.getLogger(getClass())": "Logger", "STOP_DOWNLOAD_DELETE_FILES=1": "int", "m_libTorrent": "JLibTorrent"}, "code": ["String", "function", "(", ")", "{", "return", "this", ".", "m_escapedJson", ";", "}"], "memberFunctions": {"addDownload": [["void", "final JSONArray array", "final Entry<URI,Pair<Downloader<MoverDState<Sha1DState<MsDState>>>,VisitableDownloader<MsDState>>> entry"]], "normalizeId": [["String", "final String id"]], "addComplete": [["boolean", "final JSONArray array", "final File file"]]}, "className": "JsonDownloadsVisitor", "renamed": ["String", "function", "(", ")", "{", "return", "this", ".", "m_escapedJson", ";", "}"], "nl": "Accessor for the JSON string.", "nlToks": ["Accessor", "for", "the", "JSON", "string", "."], "path": "adamfisk/littleshoot-client/tree/master/client/services/src/main/java/org/lastbamboo/client/services/JsonDownloadsVisitor.java", "idx": 113}
{"memberVariables": {"documentTraversal": "DocumentTraversal", "nodeTypes": "short[]", "rootNode": "Node"}, "code": ["void", "function", "(", "NodeTester", "tester", ",", "short", "[", "]", "nodeTypes", ")", "{", "NodeIterator", "iter", "=", "documentTraversal", ".", "createNodeIterator", "(", "rootNode", ",", "NodeFilter", ".", "SHOW_ALL", ",", "new", "NodeTypeNodeFilter", "(", "nodeTypes", ")", ",", "true", ")", ";", "for", "(", "Node", "nextNode", "=", "iter", ".", "nextNode", "(", ")", ";", "nextNode", "!=", "null", ";", "nextNode", "=", "iter", ".", "nextNode", "(", ")", ")", "{", "tester", ".", "testNode", "(", "nextNode", ",", "this", ")", ";", "}", "tester", ".", "noMoreNodes", "(", "this", ")", ";", "}"], "memberFunctions": {"acceptNode": [["short", "Node aNode"]], "getDocumentTraversal": [["DocumentTraversal", "Document document"]], "acceptNodeType": [["boolean", "short shortVal"]]}, "className": "NodeTest", "renamed": ["void", "function", "(", "NodeTester", "arg0", ",", "short", "[", "]", "arg1", ")", "{", "NodeIterator", "loc0", "=", "documentTraversal", ".", "createNodeIterator", "(", "rootNode", ",", "NodeFilter", ".", "SHOW_ALL", ",", "new", "NodeTypeNodeFilter", "(", "arg1", ")", ",", "true", ")", ";", "for", "(", "Node", "loc1", "=", "loc0", ".", "loc1", "(", ")", ";", "loc1", "!=", "null", ";", "loc1", "=", "loc0", ".", "loc1", "(", ")", ")", "{", "arg0", ".", "testNode", "(", "loc1", ",", "this", ")", ";", "}", "arg0", ".", "noMoreNodes", "(", "this", ")", ";", "}"], "nl": "Does this NodeTest pass using the specified NodeTester instance?", "nlToks": ["Does", "this", "NodeTest", "pass", "using", "the", "specified", "NodeTester", "instance", "?"], "path": "phbenisc/xmlunit/tree/master/xmlunit-legacy/src/main/java/org/custommonkey/xmlunit/NodeTest.java", "idx": 114}
{"memberVariables": {"BLOCK_WORKER_THRIFT_CLIENT_HEARTBEAT_POOL=new ConcurrentHashMapV8<>()": "ConcurrentHashMapV8<InetSocketAddress,BlockWorkerThriftClientPool>", "mBlockMasterClientPool": "BlockMasterClientPool", "mHasLocalWorker": "Boolean", "BLOCK_WORKER_THRIFT_CLIENT_POOL=new ConcurrentHashMapV8<>()": "ConcurrentHashMapV8<InetSocketAddress,BlockWorkerThriftClientPool>", "NETTY_CHANNEL_POOL_MAP=new ConcurrentHashMapV8<>()": "ConcurrentHashMapV8<InetSocketAddress,NettyChannelPool>", "CACHED_CONTEXTS=new ConcurrentHashMap<>()": "Map<InetSocketAddress,BlockStoreContext>"}, "code": ["BlockStoreContext", "function", "(", "InetSocketAddress", "masterAddress", ")", "{", "BlockStoreContext", "context", "=", "CACHED_CONTEXTS", ".", "get", "(", "masterAddress", ")", ";", "if", "(", "context", "==", "null", ")", "{", "context", "=", "new", "BlockStoreContext", "(", "masterAddress", ")", ";", "CACHED_CONTEXTS", ".", "put", "(", "masterAddress", ",", "context", ")", ";", "}", "return", "context", ";", "}"], "memberFunctions": {"acquireWorkerClient": [["BlockWorkerClient", "WorkerNetAddress address"]], "releaseBlockWorkerThriftClient": [["void", "InetSocketAddress address", "BlockWorkerClientService.Client client"]], "initializeGauges": [["void"]], "hasLocalWorker": [["boolean"]], "releaseBlockWorkerThriftClientHeartbeat": [["void", "InetSocketAddress address", "BlockWorkerClientService.Client client"]], "releaseWorkerClient": [["void", "BlockWorkerClient blockWorkerClient"]], "acquireMasterClientResource": [["CloseableResource<BlockMasterClient>"]], "releaseNettyChannel": [["void", "InetSocketAddress address", "Channel channel"]], "acquireBlockWorkerThriftClient": [["BlockWorkerClientService.Client", "final InetSocketAddress address"]], "getWorkerAddresses": [["List<WorkerNetAddress>", "String hostname"]], "acquireNettyChannel": [["Channel", "final InetSocketAddress address", "final Callable<Bootstrap> bootstrapBuilder"]], "acquireBlockWorkerThriftClientHeartbeat": [["BlockWorkerClientService.Client", "final InetSocketAddress address"]]}, "className": "BlockStoreContext", "renamed": ["BlockStoreContext", "function", "(", "InetSocketAddress", "arg0", ")", "{", "BlockStoreContext", "loc0", "=", "CACHED_CONTEXTS", ".", "get", "(", "arg0", ")", ";", "if", "(", "loc0", "==", "null", ")", "{", "loc0", "=", "new", "BlockStoreContext", "(", "arg0", ")", ";", "CACHED_CONTEXTS", ".", "put", "(", "arg0", ",", "loc0", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Gets a context with the specified master address from the cache if it's created before. Otherwise creates a new one and puts it in the cache.", "nlToks": ["Gets", "a", "context", "with", "the", "specified", "master", "address", "from", "the", "cache", "if", "it", "'s", "created", "before", ".", "Otherwise", "creates", "a", "new", "one", "and", "puts", "it", "in", "the", "cache", "."], "path": "poemlin/alluxio/tree/master/core/client/src/main/java/alluxio/client/block/BlockStoreContext.java", "idx": 115}
{"memberVariables": {"imageFormat": "String", "writeCompressionQuality": "float", "writeCompressionType": "String", "writeCompressionMode": "int", "DEFAULT_IMAGE_FORMAT=\"png\"": "String"}, "code": ["FSImageWriter", "function", "(", "float", "quality", ")", "{", "FSImageWriter", "writer", "=", "new", "FSImageWriter", "(", "\"jpg\"", ")", ";", "writer", ".", "setWriteCompressionMode", "(", "ImageWriteParam", ".", "MODE_EXPLICIT", ")", ";", "writer", ".", "setWriteCompressionType", "(", "\"JPEG\"", ")", ";", "writer", ".", "setWriteCompressionQuality", "(", "quality", ")", ";", "return", "writer", ";", "}"], "memberFunctions": {"setWriteCompressionMode": [["void", "int mode"]], "setWriteCompressionType": [["void", "String type"]], "setWriteCompressionQuality": [["void", "float q"]], "write": [["void", "BufferedImage bimg", "String filePath"], ["void", "BufferedImage bimg", "OutputStream os"]], "getImageWriteParameters": [["ImageWriteParam", "ImageWriter writer"]], "lookupImageWriterForFormat": [["ImageWriter", "String imageFormat"]]}, "className": "FSImageWriter", "renamed": ["FSImageWriter", "function", "(", "float", "arg0", ")", "{", "FSImageWriter", "loc0", "=", "new", "FSImageWriter", "(", "\"srini_string\"", ")", ";", "loc0", ".", "setWriteCompressionMode", "(", "ImageWriteParam", ".", "MODE_EXPLICIT", ")", ";", "loc0", ".", "setWriteCompressionType", "(", "\"srini_string\"", ")", ";", "loc0", ".", "setWriteCompressionQuality", "(", "arg0", ")", ";", "return", "loc0", ";", "}"], "nl": "Convenience method for initializing a writer for the JPEG image format.", "nlToks": ["Convenience", "method", "for", "initializing", "a", "writer", "for", "the", "JPEG", "image", "format", "."], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/util/FSImageWriter.java", "idx": 116}
{"memberVariables": {"OMA_REDIRECT_LINK=\"omaRedirect.do?\"": "String", "SITE_PARAM=\"site\"": "String"}, "code": ["String", "function", "(", "String", "omaUrl", ")", "{", "omaUrl", "=", "conditionallyPrependHttp", "(", "omaUrl", ")", ";", "URL", "url", "=", "new", "URL", "(", "omaUrl", ")", ";", "String", "site", "=", "url", ".", "getHost", "(", ")", ";", "String", "path", "=", "url", ".", "getPath", "(", ")", ";", "String", "query", "=", "url", ".", "getQuery", "(", ")", ";", "return", "OMA_REDIRECT_LINK", "+", "SITE_PARAM", "+", "\"=\"", "+", "site", "+", "path", "+", "\"&\"", "+", "query", ";", "}"], "memberFunctions": {"removePath": [["String", "String omaQueryString"]], "conditionallyPrependHttp": [["String", "String omaUrl"]], "createOmaLink": [["String", "String omaQueryString"]], "createQueryString": [["String", "ArrayList<String> keyList", "HashMap<String,String> paramMap"]], "getParameterMap": [["HashMap<String,String>", "String params[]"]], "getKeyList": [["ArrayList<String>", "HashMap<String,String> paramMap"]], "getDelimiter": [["String", "int i", "ArrayList<String> keyList"]]}, "className": "OmaLinkUtil", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "arg0", "=", "conditionallyPrependHttp", "(", "arg0", ")", ";", "URL", "loc0", "=", "new", "URL", "(", "arg0", ")", ";", "String", "loc1", "=", "loc0", ".", "getHost", "(", ")", ";", "String", "loc2", "=", "loc0", ".", "getPath", "(", ")", ";", "String", "loc3", "=", "loc0", ".", "getQuery", "(", ")", ";", "return", "OMA_REDIRECT_LINK", "+", "SITE_PARAM", "+", "\"srini_string\"", "+", "loc1", "+", "loc2", "+", "\"srini_string\"", "+", "loc3", ";", "}"], "nl": "Creates a Redirect Link from Portal to OMA. Incoming links look like this: http://mutationassessor.org/?cm=var&var=17,7517830,G,C&fts=all Outgoing links look like this: omaRedirect.do?path=/&cm=var&var=17,7517830,G,C&fts=all", "nlToks": ["Creates", "a", "Redirect", "Link", "from", "Portal", "to", "OMA", ".", "Incoming", "links", "look", "like", "this", ":", "http://mutationassessor.org/?cm=var&var=17,7517830,G,C&fts=all", "Outgoing", "links", "look", "like", "this", ":", "omaRedirect.do?path", "=", "/", "&", "cm", "=", "var", "&", "var", "=", "17,7517830", ",", "G", ",", "C", "&", "fts", "=", "all"], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/util/OmaLinkUtil.java", "idx": 117}
{"memberVariables": {"LOG=LogUtils.getL7dLogger(JettyHTTPServerEngineFactory.class)": "Logger", "bus": "Bus", "mBeanContainer": "Container.Listener", "portMap=new ConcurrentHashMap<Integer,JettyHTTPServerEngine>()": "ConcurrentHashMap<Integer,JettyHTTPServerEngine>", "fallbackThreadingParameters": "ThreadingParameters", "FALLBACK_THREADING_PARAMS_KEY=0": "int", "threadingParametersMap=new TreeMap<String,ThreadingParameters>()": "Map<String,ThreadingParameters>", "tlsParametersMap=new TreeMap<String,TLSServerParameters>()": "Map<String,TLSServerParameters>", "lifeCycleManager": "BusLifeCycleManager"}, "code": ["void", "function", "(", "Map", "<", "String", ",", "ThreadingParameters", ">", "threadingParamsMap", ")", "{", "threadingParametersMap", "=", "threadingParamsMap", ";", "}"], "memberFunctions": {"setTlsServerParametersMap": [["void", "Map<String,TLSServerParameters> tlsParamsMap"]], "getMBeanServer": [["MBeanServer"]], "getBus": [["Bus"]], "retrieveJettyHTTPServerEngine": [["JettyHTTPServerEngine", "int port"]], "setEnginesList": [["void", "List<JettyHTTPServerEngine> enginesList"]], "initComplete": [["void"], ["void"]], "destroyForPort": [["void", "int port"]], "getThreadingParametersMap": [["Map<String,ThreadingParameters>"]], "isJetty8": [["boolean"]], "postShutdown": [["void"], ["void"]], "getMBeanContainer": [["Container.Listener"]], "getOrCreate": [["JettyHTTPServerEngine", "JettyHTTPServerEngineFactory factory", "String host", "int port", "TLSServerParameters tlsParams"]], "getTlsServerParametersMap": [["Map<String,TLSServerParameters>"]], "createJettyHTTPServerEngine": [["JettyHTTPServerEngine", "String host", "int port", "String protocol"], ["JettyHTTPServerEngine", "int port", "String protocol"]], "setBus": [["void", "Bus bus"]], "preShutdown": [["void"], ["void"]], "setTLSServerParametersForPort": [["void", "String host", "int port", "TLSServerParameters tlsParams"], ["void", "int port", "TLSServerParameters tlsParams"]]}, "className": "JettyHTTPServerEngineFactory", "renamed": ["void", "function", "(", "Map", "<", "String", ",", "ThreadingParameters", ">", "arg0", ")", "{", "threadingParametersMap", "=", "arg0", ";", "}"], "nl": "This call sets the ThreadingParameters for a JettyHTTPServerEngine", "nlToks": ["This", "call", "sets", "the", "ThreadingParameters", "for", "a", "JettyHTTPServerEngine"], "path": "primesign/cxf/tree/master/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPServerEngineFactory.java", "idx": 118}
{"memberVariables": {"INSTANCE=new GeneratorManager()": "GeneratorManager", "LOG=Logger.getLogger(GeneratorManager.class)": "Logger", "currLanguage=null": "Language", "generators=new HashMap<Language,CodeGenerator>()": "Map<Language,CodeGenerator>"}, "code": ["void", "function", "(", "Language", "lang", ",", "CodeGenerator", "gen", ")", "{", "if", "(", "currLanguage", "==", "null", ")", "{", "currLanguage", "=", "lang", ";", "}", "generators", ".", "put", "(", "lang", ",", "gen", ")", ";", "ArgoEventPump", ".", "fireEvent", "(", "new", "ArgoGeneratorEvent", "(", "ArgoEventTypes", ".", "GENERATOR_ADDED", ",", "gen", ")", ")", ";", "LOG", ".", "debug", "(", "\"Added generator \"", "+", "gen", "+", "\" for \"", "+", "lang", ")", ";", "}"], "memberFunctions": {"getCodePath": [["String", "Object me"]], "getGenerator": [["CodeGenerator", "Language lang"], ["CodeGenerator", "String name"]], "getCurrLanguage": [["Language"]], "removeGenerator": [["CodeGenerator", "Language lang"], ["CodeGenerator", "String name"]], "getLanguages": [["Set<Language>"]], "getInstance": [["GeneratorManager"]], "findLanguage": [["Language", "String name"]], "getCurrGenerator": [["CodeGenerator"]], "getGenerators": [["Map<Language,CodeGenerator>"]]}, "className": "GeneratorManager", "renamed": ["void", "function", "(", "Language", "arg0", ",", "CodeGenerator", "arg1", ")", "{", "if", "(", "currLanguage", "==", "null", ")", "{", "currLanguage", "=", "arg0", ";", "}", "generators", ".", "put", "(", "arg0", ",", "arg1", ")", ";", "ArgoEventPump", ".", "fireEvent", "(", "new", "ArgoGeneratorEvent", "(", "ArgoEventTypes", ".", "GENERATOR_ADDED", ",", "arg1", ")", ")", ";", "LOG", ".", "debug", "(", "\"srini_string\"", "+", "arg1", "+", "\"srini_string\"", "+", "arg0", ")", ";", "}"], "nl": "Registers a new generator. If a generator with the same language is already registered, it's replaced by the new one.", "nlToks": ["Registers", "a", "new", "generator", ".", "If", "a", "generator", "with", "the", "same", "language", "is", "already", "registered", ",", "it", "'s", "replaced", "by", "the", "new", "one", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/uml/generator/GeneratorManager.java", "idx": 120}
{"memberVariables": {"functions": "Map<String,Method>", "current=new ThreadLocal<ELEvaluator>()": "ThreadLocal<ELEvaluator>", "context": "Context", "evaluator=new ExpressionEvaluatorImpl()": "ExpressionEvaluator", "vars": "Map<String,Object>"}, "code": ["void", "function", "(", "String", "name", ",", "Object", "value", ")", "{", "context", ".", "setVariable", "(", "name", ",", "value", ")", ";", "}"], "memberFunctions": {"setVariables": [["void", "Map<String,Object> vars"]], "resolveFunction": [["Method", "String prefix", "String name"]], "addFunction": [["void", "String prefix", "String functionName", "Method method"]], "resolveVariable": [["Object", "String name"]], "getCurrent": [["ELEvaluator"]], "getVariable": [["Object", "String name"], ["Object", "String name"]], "getContext": [["Context"]], "evaluate": [["T", "String expr", "Class<T> clazz"]]}, "className": "ELEvaluator", "renamed": ["void", "function", "(", "String", "arg0", ",", "Object", "arg1", ")", "{", "context", ".", "setVariable", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl": "Convenience method that sets a variable in the EL evaluator context. ", "nlToks": ["Convenience", "method", "that", "sets", "a", "variable", "in", "the", "EL", "evaluator", "context", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/util/ELEvaluator.java", "idx": 121}
{"memberVariables": {"NONCOINBASE_HEIGHT=-200": "int", "serialVersionUID=-8744924157056340509L": "long", "index": "long", "value": "BigInteger", "scriptBytes": "byte[]", "hash": "Sha256Hash", "height": "int"}, "code": ["long", "function", "(", ")", "{", "return", "index", ";", "}"], "memberFunctions": {"getValue": [["BigInteger"]], "getHeight": [["int"]], "getHash": [["Sha256Hash"]], "hashCode": [["int"]], "serializeToStream": [["void", "OutputStream bos"]], "equals": [["boolean", "Object o"]], "toString": [["String"]], "getScriptBytes": [["byte[]"]]}, "className": "StoredTransactionOutput", "renamed": ["long", "function", "(", ")", "{", "return", "index", ";", "}"], "nl": "The index of this output in the transaction which holds it", "nlToks": ["The", "index", "of", "this", "output", "in", "the", "transaction", "which", "holds", "it"], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/core/StoredTransactionOutput.java", "idx": 122}
{"memberVariables": {"xStartPos": "float", "lModelAmbient": "FloatBuffer", "zPos": "float", "yPos": "float", "MOVE_FORWARD_SPEED=0.25f": "float", "yStartPos": "float", "walkbiasangle": "float", "walkbias": "float", "BULLET_INTERVAL=0": "int", "bulletTime": "long", "MAX_BULLETS": "int", "ROTATE_SPEED=1.0f": "float", "monsters": "Monster[]", "xPos": "float", "MOVE_BACKWARD_SPEED=0.3f": "float", "MAX_MONSTERS=30": "int", "lightPosition": "FloatBuffer", "whiteLight": "FloatBuffer", "monstersLiving": "boolean[]", "heading=0.0f": "float", "STRAFE_SPEED=0.3f": "float", "zStartPos": "float", "bullets": "ArrayList<Bullet>"}, "code": ["void", "function", "(", ")", "{", "if", "(", "bulletTime", "-", "System", ".", "nanoTime", "(", ")", ">=", "BULLET_INTERVAL", "&&", "bullets", ".", "size", "(", ")", "<", "MAX_BULLETS", ")", "{", "bullets", ".", "add", "(", "new", "Bullet", "(", "xPos", ",", "yPos", ",", "zPos", ",", "heading", ")", ")", ";", "}", "}"], "memberFunctions": {"turnRight": [["void"]], "restart": [["void"]], "start": [["void"]], "update": [["void"]], "isFinished": [["boolean"]], "walkForwards": [["void"]], "renderFloor": [["void", "float x", "float y", "float z", "float width", "float length"]], "walkBackwards": [["void"]], "strafeLeft": [["void"]], "LoadFromFile": [["Level", "String filename"]], "strafeRight": [["void"]], "renderWalls": [["void", "float x", "float y", "float z", "float height", "float width", "float length"]], "turnLeft": [["void"]], "ReadFromXML": [["Level", "Element element"]], "render": [["void"]]}, "className": "Level", "renamed": ["void", "function", "(", ")", "{", "if", "(", "bulletTime", "-", "System", ".", "nanoTime", "(", ")", ">=", "BULLET_INTERVAL", "&&", "bullets", ".", "size", "(", ")", "<", "MAX_BULLETS", ")", "{", "bullets", ".", "add", "(", "new", "Bullet", "(", "xPos", ",", "yPos", ",", "zPos", ",", "heading", ")", ")", ";", "}", "}"], "nl": "Fire a bullet.", "nlToks": ["Fire", "a", "bullet", "."], "path": "philipwhiuk/3D-FPS-Game-Engine/tree/master/src/fps3d/Level.java", "idx": 123}
{"memberVariables": {}, "code": ["GetOfferDetailsResponse", ".", "Return", ".", "DetailOfferData", ".", "OfferDisplay", "function", "(", ")", "{", "return", "new", "GetOfferDetailsResponse", ".", "Return", ".", "DetailOfferData", ".", "OfferDisplay", "(", ")", ";", "}"], "memberFunctions": {"createGetOfferDetailsResponseReturnDetailOfferDataSourceGeos": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos"]], "createGetOfferDetailsResponseReturnDetailOfferDataSeo": [["GetOfferDetailsResponse.Return.DetailOfferData.Seo"]], "createGetOfferDetailsResponseReturnDetailOfferDataMerchantAddresses": [["GetOfferDetailsResponse.Return.DetailOfferData.Merchant.Addresses"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeoCountry": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo.Country"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImageEntry": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage.Entry"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeo": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMedia": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia"]], "createGetOfferDetailsResponseReturnDetailOfferDataFulfillmentPartner": [["GetOfferDetailsResponse.Return.DetailOfferData.FulfillmentPartner"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImageEntryValue": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage.Entry.Value"]], "createGetOfferDetailsResponseReturnDetailOfferDataProductsProduct": [["GetOfferDetailsResponse.Return.DetailOfferData.Products.Product"]], "createGetOfferDetailsResponseReturnDetailOfferDataRedemptionAddressesRedemptionAddress": [["GetOfferDetailsResponse.Return.DetailOfferData.RedemptionAddresses.RedemptionAddress"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeoRegion": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo.Region"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeoCity": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo.City"]], "createGetOfferDetailsResponseReturnDetailOfferData": [["GetOfferDetailsResponse.Return.DetailOfferData"]], "createGetOfferDetailsResponse": [["GetOfferDetailsResponse"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeoCity": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo.City"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImageEntryValueItem": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage.Entry.Value.Item"]], "createGetOfferDetailsResponseReturnDetailOfferDataProducts": [["GetOfferDetailsResponse.Return.DetailOfferData.Products"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImage": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage"]], "createGetOfferDetailsResponseReturnDetailOfferDataRedemptionAddresses": [["GetOfferDetailsResponse.Return.DetailOfferData.RedemptionAddresses"]], "createGetOfferDetailsResponseReturn": [["GetOfferDetailsResponse.Return"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeoCountry": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo.Country"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeos": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeoRegion": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo.Region"]], "createGetOfferDetailsResponseReturnDetailOfferDataMerchant": [["GetOfferDetailsResponse.Return.DetailOfferData.Merchant"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeo": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo"]]}, "className": "ObjectFactory", "renamed": ["GetOfferDetailsResponse", ".", "Return", ".", "DetailOfferData", ".", "OfferDisplay", "function", "(", ")", "{", "return", "new", "GetOfferDetailsResponse", ".", "Return", ".", "DetailOfferData", ".", "OfferDisplay", "(", ")", ";", "}"], "nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.OfferDisplay }", "nlToks": ["Create", "an", "instance", "of", "-LCB-", "@link", "GetOfferDetailsResponse.Return.DetailOfferData.OfferDisplay", "-RCB-"], "path": "priyankgandhi/mastercard/tree/master/eop-openapi-client/src/main/java/com/eop/api/offerdetail/gen/ObjectFactory.java", "idx": 124}
{"memberVariables": {"deliveryAssurance": "DeliveryAssurance", "inactivityTimeout": "Long", "acknowledgementInterval": "Long", "rmNamespace": "String", "sequenceTransportSecurityRequired": "boolean", "rm10AddressingNamespace": "String", "inOrder": "boolean", "exponentialBackoff": "boolean", "baseRetransmissionInterval": "Long", "sequenceSTRRequired": "boolean"}, "code": ["long", "function", "(", ")", "{", "return", "acknowledgementInterval", "==", "null", "?", "0", ":", "acknowledgementInterval", ".", "longValue", "(", ")", ";", "}"], "memberFunctions": {"setInactivityTimeout": [["void", "Long inactivityTimeout"]], "setRMNamespace": [["void", "String uri"]], "getInactivityTimeout": [["Long"]], "setAcknowledgementInterval": [["void", "Long acknowledgementInterval"]], "setDeliveryAssurance": [["void", "DeliveryAssurance deliveryAssurance"]], "getAcknowledgementInterval": [["Long"]], "setSequenceSTRRequired": [["void", "boolean sequenceSTRRequired"]], "isSequenceTransportSecurityRequired": [["boolean"]], "getAddressingNamespace": [["String"]], "setRM10AddressingNamespace": [["void", "String addrns"]], "getRMNamespace": [["String"]], "getProtocolVariation": [["ProtocolVariation"]], "getRM10AddressingNamespace": [["String"]], "isSequenceSTRRequired": [["boolean"]], "setExponentialBackoff": [["void", "boolean exponentialBackoff"]], "isExponentialBackoff": [["boolean"]], "getInactivityTimeoutTime": [["long"]], "setInOrder": [["void", "boolean inOrder"]], "getBaseRetransmissionInterval": [["Long"]], "isInOrder": [["boolean"]], "setSequenceTransportSecurityRequired": [["void", "boolean sequenceTransportSecurityRequired"]], "setBaseRetransmissionInterval": [["void", "Long baseRetransmissionInterval"]], "getDeliveryAssurance": [["DeliveryAssurance"]]}, "className": "RMConfiguration", "renamed": ["long", "function", "(", ")", "{", "return", "acknowledgementInterval", "==", "null", "?", "0", ":", "acknowledgementInterval", ".", "longValue", "(", ")", ";", "}"], "nl": "Get the number of milliseconds for the acknowledgment interval.", "nlToks": ["Get", "the", "number", "of", "milliseconds", "for", "the", "acknowledgment", "interval", "."], "path": "primesign/cxf/tree/master/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/RMConfiguration.java", "idx": 125}
{"memberVariables": {"eventHandlerFactory": "HandlerFactory", "server": "NioServer", "wallet": "Wallet", "broadcaster": "TransactionBroadcaster", "protobufHandlerListener": "ProtobufParser.Listener<Protos.TwoWayChannelMessage>", "socketProtobufHandler": "ProtobufParser<Protos.TwoWayChannelMessage>", "timeoutSeconds": "int", "paymentChannelManager": "PaymentChannelServer", "closeReason": "PaymentChannelCloseException.CloseReason", "minAcceptedChannelSize": "Coin", "eventHandler": "ServerConnectionEventHandler"}, "code": ["void", "function", "(", ")", "{", "server", ".", "stopAsync", "(", ")", ";", "server", ".", "awaitTerminated", "(", ")", ";", "}"], "memberFunctions": {"bindAndStart": [["void", "int port"]], "onNewConnection": [["ServerConnectionEventHandler", "SocketAddress clientAddress"]]}, "className": "PaymentChannelServerListener", "renamed": ["void", "function", "(", ")", "{", "server", ".", "stopAsync", "(", ")", ";", "server", ".", "awaitTerminated", "(", ")", ";", "}"], "nl": "Closes all client connections currently connected gracefully. Note that this does not settle the actual payment channels (and broadcast payment transactions), which must be done using the  {@link StoredPaymentChannelServerStates} which manages the states for the associatedwallet.", "nlToks": ["Closes", "all", "client", "connections", "currently", "connected", "gracefully", ".", "Note", "that", "this", "does", "not", "settle", "the", "actual", "payment", "channels", "-LRB-", "and", "broadcast", "payment", "transactions", "-RRB-", ",", "which", "must", "be", "done", "using", "the", "-LCB-", "@link", "StoredPaymentChannelServerStates", "-RCB-", "which", "manages", "the", "states", "for", "the", "associatedwallet", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/protocols/channels/PaymentChannelServerListener.java", "idx": 128}
{"memberVariables": {"types=\"types\"": "String", "verbose=\"verbose\"": "String", "reportTopics=new HashMap<>()": "Map<String,Integer>", "dataflow=\"dataflow\"": "String", "should_report=new Stack<>()": "Stack<String>", "frontend=\"frontend\"": "String", "imports=\"imports\"": "String", "eq": "ErrorQueue", "loader=\"loader\"": "String", "time=\"time\"": "String", "debug=\"debug\"": "String", "cfg=\"cfg\"": "String", "context=\"context\"": "String", "visit=\"visit\"": "String", "resolver=\"resolver\"": "String", "topics=new LinkedHashSet<>()": "Collection<String>", "serialize=\"serialize\"": "String", "noReporting=true": "boolean", "errors=\"errors\"": "String"}, "code": ["void", "function", "(", "int", "level", ",", "String", "message", ",", "Position", "pos", ")", "{", "StringBuffer", "buf", "=", "new", "StringBuffer", "(", "message", ".", "length", "(", ")", "+", "level", ")", ";", "for", "(", "int", "j", "=", "1", ";", "j", "<", "level", ";", "j", "++", ")", "{", "buf", ".", "append", "(", "\" \"", ")", ";", "}", "buf", ".", "append", "(", "message", ")", ";", "getQueue", "(", ")", ".", "enqueue", "(", "ErrorInfo", ".", "DEBUG", ",", "buf", ".", "toString", "(", ")", ",", "pos", ")", ";", "}"], "memberFunctions": {"should_report": [["boolean", "String topic", "int level"], ["boolean", "String[] topics", "int level"], ["boolean", "Collection<String> topics", "int level"]], "setQueue": [["void", "ErrorQueue eq"]], "level": [["int", "String name"]], "pushTopic": [["void", "String topic"]], "popTopic": [["void"]], "addTopic": [["void", "String topic", "int level"]], "getQueue": [["ErrorQueue"]], "setTopic": [["void", "String topic", "int level"]]}, "className": "Report", "renamed": ["void", "function", "(", "int", "arg0", ",", "String", "arg1", ",", "Position", "arg2", ")", "{", "StringBuffer", "loc0", "=", "new", "StringBuffer", "(", "arg1", ".", "length", "(", ")", "+", "arg0", ")", ";", "for", "(", "int", "loc1", "=", "1", ";", "loc1", "<", "arg0", ";", "loc1", "++", ")", "{", "loc0", ".", "append", "(", "\"srini_string\"", ")", ";", "}", "loc0", ".", "append", "(", "arg1", ")", ";", "getQueue", "(", ")", ".", "enqueue", "(", "ErrorInfo", ".", "DEBUG", ",", "loc0", ".", "toString", "(", ")", ",", "arg2", ")", ";", "}"], "nl": "This is the standard way to report debugging information in the compiler.  It reports a message of the specified level (which controls the presentation of the message. To test whether such message should be reported, use \"should_report\". NOTE: This is a change of spec from earlier versions of Report. NOTE: This version takes an explicit Position, so that position info gets properly associated with the ErrorInfo that gets created by enqueue().", "nlToks": ["This", "is", "the", "standard", "way", "to", "report", "debugging", "information", "in", "the", "compiler", ".", "It", "reports", "a", "message", "of", "the", "specified", "level", "-LRB-", "which", "controls", "the", "presentation", "of", "the", "message", ".", "To", "test", "whether", "such", "message", "should", "be", "reported", ",", "use", "``", "should_report", "''", ".", "NOTE", ":", "This", "is", "a", "change", "of", "spec", "from", "earlier", "versions", "of", "Report", ".", "NOTE", ":", "This", "version", "takes", "an", "explicit", "Position", ",", "so", "that", "position", "info", "gets", "properly", "associated", "with", "the", "ErrorInfo", "that", "gets", "created", "by", "enqueue", "-LRB-", "-RRB-", "."], "path": "polyglot-compiler/polyglot/tree/master/src/polyglot/main/Report.java", "idx": 130}
{"memberVariables": {"_SignCertificateResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"signCertificateResponse\")": "QName", "_Access_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"access\")": "QName", "_CheckServiceAccessResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"checkServiceAccessResponse\")": "QName", "_SignCertificateRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"signCertificateRequest\")": "QName", "_CertificateChainInfo_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"certificateChainInfo\")": "QName", "_RegistrationRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"registrationRequest\")": "QName", "_User_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"user\")": "QName", "_AuthenticateResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"authenticateResponse\")": "QName", "_CheckServiceAccessRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"checkServiceAccessRequest\")": "QName", "_ValidateTokenResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"validateTokenResponse\")": "QName", "_AuthenticateRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"authenticateRequest\")": "QName", "_Auth_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"auth\")": "QName", "_ValidateAccess_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"validateAccess\")": "QName", "_RegistrationResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"registrationResponse\")": "QName", "_Roles_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"roles\")": "QName"}, "code": ["Access", "function", "(", ")", "{", "return", "new", "Access", "(", ")", ";", "}"], "memberFunctions": {"createValidateTokenResponse": [["ValidateTokenResponse"], ["JAXBElement<ValidateTokenResponse>", "ValidateTokenResponse value"]], "createCertificateChainInfo": [["CertificateChainInfo"], ["JAXBElement<CertificateChainInfo>", "CertificateChainInfo value"]], "createRoleList": [["RoleList"]], "createCheckServiceAccessRequest": [["CheckServiceAccessRequest"], ["JAXBElement<CheckServiceAccessRequest>", "CheckServiceAccessRequest value"]], "createRole": [["Role"]], "createToken": [["Token"]], "createCheckServiceAccessResponse": [["CheckServiceAccessResponse"], ["JAXBElement<CheckServiceAccessResponse>", "CheckServiceAccessResponse value"]], "createPasswordCredentials": [["PasswordCredentials"]], "createAuthenticateResponse": [["AuthenticateResponse"], ["JAXBElement<AuthenticateResponse>", "AuthenticateResponse value"]], "createValidateAccess": [["ValidateAccess"], ["JAXBElement<ValidateAccess>", "ValidateAccess value"]], "createAuthenticateRequest": [["AuthenticateRequest"], ["JAXBElement<AuthenticateRequest>", "AuthenticateRequest value"]], "createAuth": [["Auth"], ["JAXBElement<Auth>", "Auth value"]], "createCertificateInfo": [["CertificateInfo"]], "createUserValidation": [["UserValidation"]], "createCertificateCredentials": [["CertificateCredentials"]], "createRegistrationResponse": [["RegistrationResponse"], ["JAXBElement<RegistrationResponse>", "RegistrationResponse value"]], "createUser": [["User"], ["JAXBElement<User>", "User value"]], "createRoles": [["JAXBElement<RoleList>", "RoleList value"]], "createRegistrationRequest": [["RegistrationRequest"], ["JAXBElement<RegistrationRequest>", "RegistrationRequest value"]], "createProjectValidation": [["ProjectValidation"]], "createSignCertificateResponse": [["SignCertificateResponse"], ["JAXBElement<SignCertificateResponse>", "SignCertificateResponse value"]], "createSignCertificateRequest": [["SignCertificateRequest"], ["JAXBElement<SignCertificateRequest>", "SignCertificateRequest value"]]}, "className": "ObjectFactory", "renamed": ["Access", "function", "(", ")", "{", "return", "new", "Access", "(", ")", ";", "}"], "nl": "Create an instance of  {@link Access }", "nlToks": ["Create", "an", "instance", "of", "-LCB-", "@link", "Access", "-RCB-"], "path": "platformlayer/platformlayer/tree/master/auth/client/src/generated/xjc/org/platformlayer/auth/v1/ObjectFactory.java", "idx": 131}
{"memberVariables": {"expectedDataUnitId": "Long", "seqNo": "Long", "dataSetId": "Long", "dataUnitId": "Long", "expectedValue": "String", "actualValue": "String", "expectedDataSetId": "Long", "errorCode": "String", "testId": "Long", "failedAttributeName": "String", "srcFileName": "String", "errorMsg": "String"}, "code": ["void", "function", "(", "String", "failedAttributeName", ")", "{", "this", ".", "failedAttributeName", "=", "failedAttributeName", ";", "}"], "memberFunctions": {"setExpectedValue": [["void", "String expectedValue"]], "getExpectedValue": [["String"]], "getExpectedDataSetId": [["Long"]], "setExpectedDataSetId": [["void", "Long expectedDataSetId"]], "setActualValue": [["void", "String actualValue"]], "getDataSetId": [["Long"]], "setSrcFileName": [["void", "String srcFileName"]], "getExpectedDataUnitId": [["Long"]], "setExpectedDataUnitId": [["void", "Long expectedDataUnitId"]], "getSrcFileName": [["String"]], "getSeqNo": [["Long"]], "getFailedAttributeName": [["String"]], "setTestId": [["void", "Long testId"]], "getTestId": [["Long"]], "setErrorCode": [["void", "String errorCode"]], "getActualValue": [["String"]], "getDataUnitId": [["Long"]], "setSeqNo": [["void", "Long seqNo"]], "setErrorMsg": [["void", "String errorMsg"]], "getErrorCode": [["String"]], "setDataUnitId": [["void", "Long dataUnitId"]], "setDataSetId": [["void", "Long dataSetId"]], "toString": [["String"]], "getErrorMsg": [["String"]]}, "className": "TestResultDetailsDTO", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "failedAttributeName", "=", "arg0", ";", "}"], "nl": "Sets the failed attribute name.", "nlToks": ["Sets", "the", "failed", "attribute", "name", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/TestResultDetailsDTO.java", "idx": 132}
{"memberVariables": {}, "code": ["List", "<", "String", ">", "function", "(", "String", "user", ")", "{", "List", "<", "String", ">", "groups", "=", "CommonUtils", ".", "getUnixGroups", "(", "user", ")", ";", "return", "new", "ArrayList", "<", ">", "(", "new", "LinkedHashSet", "<", ">", "(", "groups", ")", ")", ";", "}"], "memberFunctions": {}, "className": "ShellBasedUnixGroupsMapping", "renamed": ["List", "<", "String", ">", "function", "(", "String", "arg0", ")", "{", "List", "<", "String", ">", "loc0", "=", "CommonUtils", ".", "getUnixGroups", "(", "arg0", ")", ";", "return", "new", "ArrayList", "<", ">", "(", "new", "LinkedHashSet", "<", ">", "(", "loc0", ")", ")", ";", "}"], "nl": "Returns list of groups for a user.", "nlToks": ["Returns", "list", "of", "groups", "for", "a", "user", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/security/group/provider/ShellBasedUnixGroupsMapping.java", "idx": 133}
{"memberVariables": {"logger=LoggerFactory.getLogger(getClass())": "org.slf4j.Logger", "clientEndpoint": "UDPEndPoint", "clientSession": "ClientSession"}, "code": ["void", "function", "(", ")", "{", "clientSession", ".", "getSocket", "(", ")", ".", "flush", "(", ")", ";", "}"], "memberFunctions": {"sendBlocking": [["void", "byte[] data"]], "read": [["int", "byte[] data"]], "getStatistics": [["UDTStatistics"]], "getSocket": [["Socket"]], "getOutputStream": [["OutputStream"]], "getEndpoint": [["UDPEndPoint"]], "send": [["void", "byte[] data"]], "getInputStream": [["InputStream"]], "connect": [["void", "String host", "int port"], ["void", "InetAddress address", "int port"]], "shutdown": [["void"]]}, "className": "UDTClient", "renamed": ["void", "function", "(", ")", "{", "clientSession", ".", "getSocket", "(", ")", ".", "flush", "(", ")", ";", "}"], "nl": "flush outstanding data (and make sure it is acknowledged)", "nlToks": ["flush", "outstanding", "data", "-LRB-", "and", "make", "sure", "it", "is", "acknowledged", "-RRB-"], "path": "adamfisk/littleshoot-client/tree/master/common/udt/src/main/java/udt/UDTClient.java", "idx": 134}
{"memberVariables": {"HAS_REMOTE_CONTROL_APIS=Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH": "boolean", "mActualMetadataEditor": "Object", "METADATA_KEY_ARTWORK=100": "int", "mActualRemoteControlClient": "Object"}, "code": ["MetadataEditorCompat", "function", "(", "int", "key", ",", "String", "value", ")", "{", "if", "(", "HAS_REMOTE_CONTROL_APIS", ")", "{", "(", "(", "RemoteControlClient", ".", "MetadataEditor", ")", "mActualMetadataEditor", ")", ".", "putString", "(", "key", ",", "value", ")", ";", "}", "return", "this", ";", "}"], "memberFunctions": {"setPlaybackState": [["void", "int state"]], "putBitmap": [["MetadataEditorCompat", "int key", "Bitmap bitmap"]], "apply": [["void"]], "removeFromMediaRouter": [["void", "MediaRouter router"]], "clear": [["void"]], "addToMediaRouter": [["void", "MediaRouter router"]], "getActualRemoteControlClientObject": [["Object"]], "putLong": [["MetadataEditorCompat", "int key", "long value"]], "editMetadata": [["MetadataEditorCompat", "boolean startEmpty"]], "setTransportControlFlags": [["void", "int transportControlFlags"]]}, "className": "RemoteControlClientCompat", "renamed": ["MetadataEditorCompat", "function", "(", "int", "arg0", ",", "String", "arg1", ")", "{", "if", "(", "HAS_REMOTE_CONTROL_APIS", ")", "{", "(", "(", "RemoteControlClient", ".", "MetadataEditor", ")", "mActualMetadataEditor", ")", ".", "putString", "(", "arg0", ",", "arg1", ")", ";", "}", "return", "this", ";", "}"], "nl": "Adds textual information to be displayed. Note that none of the information added after {@link #apply()} has been called, will be displayed.", "nlToks": ["Adds", "textual", "information", "to", "be", "displayed", ".", "Note", "that", "none", "of", "the", "information", "added", "after", "-LCB-", "@link", "#apply", "-LRB-", "-RRB-", "-RCB-", "has", "been", "called", ",", "will", "be", "displayed", "."], "path": "phpeng-ms/CastCompanionLibrary-android/tree/master/src/com/google/android/libraries/cast/companionlibrary/remotecontrol/RemoteControlClientCompat.java", "idx": 135}
{"memberVariables": {"ourInstance=new GeneralMotorCon()": "GeneralMotorCon", "spin90Time=3000": "int", "TAG=\"GMC\"": "String", "batLvl=0": "int", "threadTimer=0": "long", "spinSpeed=2": "int", "cmd": "CommandManager", "hoverTime=2000": "int", "speed=10": "int", "spin90Speed=50": "int", "drone": "ARDrone", "spinTime=50": "int"}, "code": ["void", "function", "(", ")", "{", "SpaceXGUI", ".", "getInstance", "(", ")", ".", "appendToConsole", "(", "TAG", ",", "\" - landing\"", ")", ";", "cmd", ".", "landing", "(", ")", ".", "doFor", "(", "2000", ")", ";", "}"], "memberFunctions": {"spin90Left": [["void"]], "spinRight": [["void"]], "takeoff": [["void"]], "forward": [["void", "int time"]], "spinLeft": [["void"]], "right": [["void"]], "lowerAltitude": [["void"]], "spin90Right": [["void"]], "setDrone": [["void", "ARDrone drone"]], "left": [["void"]], "backward": [["void", "int time"]], "getInstance": [["GeneralMotorCon"]], "setBatLvl": [["void", "int batLvl"]], "waitFor": [["void", "int millis"]], "getBatLvl": [["int"]], "onStop": [["void"]], "raiseAltitude": [["void"]]}, "className": "GeneralMotorCon", "renamed": ["void", "function", "(", ")", "{", "SpaceXGUI", ".", "getInstance", "(", ")", ".", "appendToConsole", "(", "TAG", ",", "\"srini_string\"", ")", ";", "cmd", ".", "landing", "(", ")", ".", "doFor", "(", "2000", ")", ";", "}"], "nl": "Landing Land the drone", "nlToks": ["Landing", "Land", "the", "drone"], "path": "02343Gruppe2/02343_Ardrone/tree/master/src/algo/GeneralMotorCon.java", "idx": 136}
{"memberVariables": {"metadata": "Map<String,String>", "maxEntities": "int", "minEntities": "int", "name": "String", "cooldown": "int"}, "code": ["Builder", "function", "(", "Map", "<", "String", ",", "String", ">", "metadata", ")", "{", "this", ".", "metadata", "=", "metadata", ";", "return", "this", ";", "}"], "memberFunctions": {"toBuilder": [["Builder"]], "getMetadata": [["ImmutableMap<String,String>"]], "metadata": [["Builder", "Map<String,String> metadata"]], "getName": [["String"]], "getMaxEntities": [["int"]], "string": [["ToStringHelper"]], "minEntities": [["Builder", "int minEntities"]], "compareTo": [["int", "GroupConfiguration that"]], "getCooldown": [["int"]], "getMinEntities": [["int"]], "maxEntities": [["Builder", "int maxEntities"]], "build": [["GroupConfiguration"]], "hashCode": [["int"]], "equals": [["boolean", "Object obj"]], "builder": [["Builder"]], "name": [["Builder", "String name"]], "cooldown": [["Builder", "int cooldown"]], "fromGroupConfiguration": [["Builder", "GroupConfiguration in"]], "toString": [["String"]]}, "className": "GroupConfiguration", "renamed": ["Builder", "function", "(", "Map", "<", "String", ",", "String", ">", "arg0", ")", "{", "this", ".", "metadata", "=", "arg0", ";", "return", "this", ";", "}"], "nl": "Optional. This optional parameter specifies custom metadata for your group configuration. You can use the metadata parameter for customer automation, but it does not change any functionality in Auto Scale. There currently is no limitation on depth.", "nlToks": ["Optional", ".", "This", "optional", "parameter", "specifies", "custom", "metadata", "for", "your", "group", "configuration", ".", "You", "can", "use", "the", "metadata", "parameter", "for", "customer", "automation", ",", "but", "it", "does", "not", "change", "any", "functionality", "in", "Auto", "Scale", ".", "There", "currently", "is", "no", "limitation", "on", "depth", "."], "path": "pimenas/jclouds-labs-openstack/tree/master/rackspace-autoscale/src/main/java/org/jclouds/rackspace/autoscale/v1/domain/GroupConfiguration.java", "idx": 137}
{"memberVariables": {"EXAMPLE=\"$GPRMC,120044.567,A,6011.552,N,02501.941,E,000.0,360.0,160705,006.1,E,A*0B\"": "String", "rmc": "RMCParser", "empty": "RMCParser"}, "code": ["void", "function", "(", ")", "{", "assertTrue", "(", "rmc", ".", "getVariation", "(", ")", "<", "0", ")", ";", "assertEquals", "(", "CompassPoint", ".", "EAST", ",", "rmc", ".", "getDirectionOfVariation", "(", ")", ")", ";", "}"], "memberFunctions": {"testSetFaaModeWhenOmitted": [["void"]], "testSetDirectionOfVariationWithInvalidDirection": [["void"]], "testGetCorrectedCourse": [["void"]], "testGetDataStatus": [["void"]], "testConstructor": [["void"]], "testGetTime": [["void"]], "testSetCourse": [["void"]], "testSetFaaMode": [["void"]], "testSetVariation": [["void"]], "setUp": [["void"]], "testGetMonth": [["void"]], "testGetCourse": [["void"]], "testSetDate": [["void"]], "testGetYear": [["void"]], "testSetDataStatus": [["void"]], "testGetDate": [["void"]], "testGetMagneticVariation": [["void"]], "testSetPosition": [["void"]], "testGetPosition": [["void"]], "testSetDirectionOfVariation": [["void"]], "testSetTime": [["void"]], "testGetDay": [["void"]], "testGetSpeed": [["void"]], "testGetFaaMode": [["void"]], "testSetSpeed": [["void"]]}, "className": "RMCTest", "renamed": ["void", "function", "(", ")", "{", "assertTrue", "(", "rmc", ".", "getVariation", "(", ")", "<", "0", ")", ";", "assertEquals", "(", "CompassPoint", ".", "EAST", ",", "rmc", ".", "getDirectionOfVariation", "(", ")", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMCParser#getDirectionOfVariation()}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.RMCParser", "#getDirectionOfVariation", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/RMCTest.java", "idx": 139}
