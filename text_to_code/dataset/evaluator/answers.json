{"code":"void function ( ScriptOrFnNode parseTree ) { int level = - 1 ; collectFuncNodes ( parseTree , level , null ) ; }","nl":"Generate mappings for each Function node and parameters and variables names associated with it. "}
{"code":"Sha256Hash function ( File f ) { FileInputStream in = new FileInputStream ( f ) ; try { return create ( ByteStreams . toByteArray ( in ) ) ; } finally { in . close ( ) ; } }","nl":"Returns a hash of the given files contents. Reads the file fully into memory before hashing so only use with small files."}
{"code":"String function ( Object obj , boolean canCreate ) { String s = readObjectID ( obj ) ; if ( s == null && canCreate ) { s = createObjectID ( obj ) ; } return s ; }","nl":"Obtains the ID of an object and returns it as a String. If canCreate is true it will try to create a new ID for the object if it has none."}
{"code":"Matcher < T > function ( T value ) { return ComparatorMatcherBuilder . < T > usingNaturalOrdering ( ) . greaterThan ( value ) ; }","nl":"Creates a matcher of  {@link Comparable} object that matches when the examined object isgreater than the specified value, as reported by the compareTo method of the examined object. For example: assertThat(2, greaterThan(1))"}
{"code":"int function ( ) { return denom ; }","nl":"Returns denominator"}
{"code":"GenericJSONBuilder function ( String link_ ) { image = link_ ; return this ; }","nl":"Not required"}
{"code":"void function ( BundleContext context ) { for ( AutoSIMConnectionConfig connectionConfig : config . connections ) { environments . deregisterConnectionFactory ( connectionConfig . name ) ; factories . remove ( connectionConfig . name ) ; } }","nl":"Implements BundleActivator.stop(). Does nothing since the framework will automatically unregister any registered services."}
{"code":"void function ( ) { mTestStream . seek ( 10 ) ; Assert . assertEquals ( 10 , mTestStream . read ( ) ) ; mTestStream . seek ( 2 ) ; Assert . assertEquals ( 2 , mTestStream . read ( ) ) ; mTestStream . seek ( mBlockSize ) ; Assert . assertEquals ( - 1 , mTestStream . read ( ) ) ; }","nl":"Tests for the  {@link BufferedBlockInStream#seek(long)} method."}
{"code":"void function ( ) { final CountDownLatch finalizerRan = new CountDownLatch ( 1 ) ; WeakReference < Object > ref = new WeakReference < Object > ( new Object ( ) { @ Override protected void finalize ( ) { finalizerRan . countDown ( ) ; } } ) ; await ( finalizerRan ) ; awaitClear ( ref ) ; System . runFinalization ( ) ; }","nl":"Tries to perform a \"full\" garbage collection cycle (including processing of weak references and invocation of finalize methods) and waits for it to complete.  Ensures that at least one weak reference has been cleared and one  {@code finalize} method has been run before thismethod returns.  This method may be useful when testing the garbage collection mechanism itself, or inhibiting a spontaneous GC initiation in subsequent code. In contrast, a plain call to  {@link java.lang.System#gc()} does not ensure finalizationprocessing and may run concurrently, for example, if the JVM flag  {@code -XX:+ExplicitGCInvokesConcurrent} is used.Whenever possible, it is preferable to test directly for some observable change resulting from GC, as with  {@link #awaitClear}.  Because there are no guarantees for the order of GC finalization processing, there may still be some unfinished work for the GC to do after this method returns. This method does not create any memory pressure as would be required to cause soft references to be processed."}
{"code":"void function ( ) { mManager = Mockito . mock ( TransferManager . class ) ; Upload result = Mockito . mock ( Upload . class ) ; Mockito . when ( mManager . upload ( Mockito . any ( PutObjectRequest . class ) ) ) . thenReturn ( result ) ; mStream = new S3ADirectOutputStream ( BUCKET_NAME , KEY , mManager ) ; }","nl":"Sets the properties and configuration before each test runs."}
{"code":"String function ( Object o , String indent ) { return getDocs ( o , indent , \"/** \" , \" *  \" , \" */\" ) ; }","nl":"This function returns the documentation in C-style comment format."}
{"code":"Level function ( ) { return Level . WARNING ; }","nl":"Get the log level for reporting the selection of the new alternative address or endpoint"}
{"code":"boolean function ( String word ) { return search ( root , word . toCharArray ( ) , 0 ) ; }","nl":"function to search for a word"}
{"code":"void function ( ) { prodscan . close ( ) ; }","nl":"Closes the current scans."}
{"code":"Map < String , String > function ( PropertyDTO [ ] properties ) { Map < String , String > propertyMap = new HashMap < String , String > ( ) ; for ( PropertyDTO propertyDTO : properties ) { if ( propertyDTO . getValue ( ) != null ) { propertyMap . put ( propertyDTO . getName ( ) , propertyDTO . getValue ( ) ) ; } } return propertyMap ; }","nl":"Convert a given String[] propertyName#propertyValue to a Map"}
{"code":"String [ ] function ( String expression , Map < String , String > namespaces ) { return getNodes ( expression , namespaces , String . class ) ; }","nl":"Find the attributes or simple/text nodes"}
{"code":"boolean function ( Collection < Source > sources ) { return runToGoal ( sources , new GoalFactory ( ) { @ Override public Goal getGoal ( Job job ) { return sourceExtension ( ) . getValidationGoal ( job ) ; } } ) ; }","nl":"Validates the files listed in the set of Sources  {@code source} byrunning passes that are dependent on the validation goal. Returns true on success."}
{"code":"void function ( boolean value ) { ContentResolver localContentResolver = context . getContentResolver ( ) ; Settings . Secure . setLocationProviderEnabled ( localContentResolver , LocationManager . GPS_PROVIDER , value ) ; }","nl":"Enable/Disable GPS"}
{"code":"boolean function ( View view ) { if ( Build . VERSION . SDK_INT >= VERSION_CODES . JELLY_BEAN_MR1 ) { return view . getLayoutDirection ( ) == View . LAYOUT_DIRECTION_RTL ; } else { return false ; } }","nl":"23       Returns true if view's layout direction is right-to-left. 24       25       @param view the View whose layout is being considered 26"}
{"code":"Checklist function ( Object dm ) { Checklist cl ; java . lang . Class cls = dm . getClass ( ) ; while ( cls != null ) { cl = lookupChecklist ( cls ) ; if ( cl != null ) { return cl ; } cls = cls . getSuperclass ( ) ; } return null ; }","nl":"Gets the checklist for an element."}
{"code":"void function ( ) { int day = 0 ; try { instance . setDay ( day ) ; fail ( \"Did not throw exception\" ) ; } catch ( IllegalArgumentException e ) { } day = 32 ; try { instance . setDay ( day ) ; fail ( \"Did not throw exception\" ) ; } catch ( IllegalArgumentException e ) { } }","nl":"Test method for  {@link net.sf.marineapi.nmea.util.Date#setDay(int)}."}
{"code":"int function ( int lane , int player ) { int tile = 0 ; return tile ; }","nl":"Returns the next available tile in the specified lane that is closest to the base. A tile is available if it's not occupied by a card."}
{"code":"Matrix function ( Matrix matrix ) { return ( transpose ( cofactor ( matrix ) ) . multiplyByConstant ( 1.0 / determinant ( matrix ) ) ) ; }","nl":"Inverse of a matrix - A-1  A = I where I is the identity matrix A matrix that have inverse is called non-singular or invertible. If the matrix does not have inverse it is called singular. For a singular matrix the values of the inverted matrix are either NAN or Infinity Only square matrices have inverse and the following method will throw exception if the matrix is not square."}
{"code":"String function ( ) { return thisExitStatus . getExitCode ( ) ; }","nl":"Getter for the exit code (defaults to blank)."}
{"code":"boolean function ( Object e ) { return ui . isHover ( ( Element ) e ) ; }","nl":"Gets the hover attribute of the StandardAttributeResolver object"}
{"code":"List < AttributeStatementProvider > function ( ) { return attributeStatementProviders ; }","nl":"Get the List of AttributeStatementProviders."}
{"code":"void function ( ) { if ( this . sounds != null ) { for ( Asset asset : this . sounds ) { game . getAssets ( ) . unload ( FileMap . resourcesToDirectory . get ( asset . assetType ) + asset . assetName ) ; } this . sounds = null ; } }","nl":"Unloads the sounds from memory."}
{"code":"ProjectModel function ( String name , UserModel user ) { for ( ProjectModel project : getProjectModels ( user , true ) ) { if ( project . name . equalsIgnoreCase ( name ) ) { return project ; } } return null ; }","nl":"Returns the project model for the specified user."}
{"code":"String function ( String hexString ) { int hexColor = Integer . parseInt ( hexString , 16 ) ; int r = ( hexColor & 0xFF0000 ) >> 16 ; int g = ( hexColor & 0xFF00 ) >> 8 ; int b = ( hexColor & 0xFF ) ; return getClosestNamedColor ( r , g , b ) ; }","nl":"Get the color name of the color that is closest to the given hex color value (as a 6-digit hex String)."}
{"code":"String function ( ) { String falseFilePath = String . format ( \"/Database/%s/%s/%s%s\" , getSchema ( ) , getType ( ) , getName ( ) , getSuffixFromType ( ) ) ; return falseFilePath ; }","nl":"Gets the data source as a pseudo file name (faux-file). Adding a suffix matching the source object type ensures that the appropriate language parser is used."}
{"code":"int function ( ) { return port ; }","nl":"Default TCP port on which to connect to nodes."}
{"code":"Set < String > function ( ) { return jedis . keys ( \"URLSet:*\" ) ; }","nl":"Returns URLSet keys for the terms that have been indexed. Should be used for development and testing, not production."}
{"code":"void function ( ) { mBlocksToMoveIn . clear ( ) ; mBlocksToMoveOut . clear ( ) ; mBlocksToMoveInSize = mBlocksToMoveOutSize = 0L ; }","nl":"Clears all marks about blocks to move in/out in this view."}
{"code":"UserSubject function ( ) { return subject ; }","nl":"Returns a subject capturing the login name  the end user used to login to the resource server when authorizing a given client request"}
{"code":"int function ( boolean advance ) { int valueLen = getIntFromFormat ( advance ) ; if ( valueLen == 0 ) { valueLen = 1 ; } return valueLen ; }","nl":"Retrieve a length from the format string. Either for a repeat count or a string length. Return one if no explicit repeat count. \\param advance whether to move the stream position."}
{"code":"String function ( ) { return errorMsg ; }","nl":"Gets the error msg."}
{"code":"boolean function ( symbol sym ) { return _all . containsKey ( sym . name ( ) ) ; }","nl":"Determine if the set contains a particular symbol."}
{"code":"String function ( Node n ) { StringBuilder sb = new StringBuilder ( ) ; for ( Node child : new IterableNodeList ( n . getChildNodes ( ) ) ) { if ( child instanceof Text || child instanceof CDATASection ) { String s = child . getNodeValue ( ) ; if ( s != null ) { sb . append ( s ) ; } } } return sb . toString ( ) ; }","nl":"Tries to merge all direct Text and CDATA children of the given Node and concatenates their value."}
{"code":"MarshalRegistry function ( Context context ) { MarshalRegistry marshalRegistry = context . getProperty ( MarshalRegistry . class ) ; if ( marshalRegistry == null ) { marshalRegistry = new MarshalRegistry ( ) ; context . setProperty ( marshalRegistry ) ; } return marshalRegistry ; }","nl":"Get the MarshalRegistry stored in the context, and if necessary create a new one."}
{"code":"List < T > function ( T o1 , T o2 ) { List < T > l = new ArrayList < > ( 2 ) ; l . add ( o1 ) ; l . add ( o2 ) ; return l ; }","nl":"Return a list containing  {@code o1} and {@code o2}."}
{"code":"void function ( ParametersMetaData value ) { this . parametersMetaData = value ; }","nl":"Sets the value of the parametersMetaData property."}
{"code":"List < AbstractArgoJPanel > function ( ) { List < AbstractArgoJPanel > result = new ArrayList < AbstractArgoJPanel > ( ) ; result . add ( TestPanel . getInstance ( ) ) ; return result ; }","nl":"Return our details tab(s).  Proof of concept only."}
{"code":"void function ( byte [ ] data ) { try { if ( data . length != 0 ) { writer . writeStartElement ( \"chars\" ) ; writer . writeCharacters ( new String ( data ) ) ; writer . writeEndElement ( ) ; } } catch ( XMLStreamException ex ) { throw new RuntimeException ( ex ) ; } }","nl":"Write character bytes - note that we cheat, we just convert them directly to a string for output with no regard to the encoding."}
{"code":"String function ( ) { return this . isActive ; }","nl":"Gets the checks if is active."}
{"code":"DataServer function ( final InetSocketAddress dataAddress , final AlluxioWorkerService worker ) { try { return CommonUtils . createNewClassInstance ( Configuration . < DataServer > getClass ( PropertyKey . WORKER_DATA_SERVER_CLASS ) , new Class [ ] { InetSocketAddress . class , AlluxioWorkerService . class } , new Object [ ] { dataAddress , worker } ) ; } catch ( Exception e ) { throw Throwables . propagate ( e ) ; } }","nl":"Factory for  {@link DataServer}."}
{"code":"ECKey function ( ) { for ( ECKey key : keys ) { try { if ( key . getPrivKey ( ) != null ) return key ; } catch ( IllegalStateException e ) { } catch ( ECKey . MissingPrivateKeyException e ) { } } return null ; }","nl":"Returns the first key that has private bytes"}
{"code":"void function ( ) { instrumentation = null ; }","nl":"Destroy the instrumentation service."}
{"code":"void function ( long maximumKeySize ) { this . maximumKeySize = maximumKeySize ; }","nl":"Set the maximum key size to use when generating a symmetric key to sign an issued token. The requestor can specify a KeySize value to use. The default is 512 bits."}
{"code":"Constant function ( String fldname ) { if ( ts . hasField ( fldname ) ) return ts . getVal ( fldname ) ; else return s . getVal ( fldname ) ; }","nl":"Returns the Constant value of the specified field."}
{"code":"int function ( ) { return bip32HeaderPub ; }","nl":"Returns the 4 byte header for BIP32 (HD) wallet - public key part."}
{"code":"long function ( ) { return value ; }","nl":"Returns the number of satoshis of this monetary value."}
{"code":"MenuItem function ( int resId ) { if ( mMenuItem != null ) { HoneycombMenuItem . setActionView ( mMenuItem , resId ) ; } return this ; }","nl":"Set an action view for this menu item. An action view will be displayed in place of an automatically generated menu item element in the UI when this item is shown as an action within a parent."}
{"code":"void function ( ) { notificationController . deletePersistentNotification ( null , mockServerMessage ) ; }","nl":"Test method for deletePersistentNotification(ServerSession serverSession, ServerMessage serverMessage) Verifies that  {@code IllegalArgumentException} is thrown when serverSession is null."}
{"code":"void function ( double seconds ) { if ( seconds < 0 || seconds >= 60 ) { throw new IllegalArgumentException ( \"Invalid value for second (0 < seconds < 60)\" ) ; } this . seconds = seconds ; }","nl":"Set seconds of minute."}
{"code":"void function ( ServiceID aServiceID ) { serviceID = aServiceID ; }","nl":"Sets the  {@code ServiceID} for this datagram packet."}
{"code":"int function ( ) { return RECORD_SIZE * numHeaders + FILE_PROLOGUE_BYTES ; }","nl":"Returns the size in bytes of the file that is used to store the chain with the current parameters."}
{"code":"T function ( ) { return mPayload ; }","nl":"Gets the payload of the node."}
{"code":"String function ( ) { return DateTime . formatUTCtoSqlUTC ( this . addedDate ) ; }","nl":"Returns added date in \"yyyy-MM-dd HH:mm:ss\" format"}
{"code":"List < DirectedAcyclicGraphNode < T >> function ( ) { return mChildren ; }","nl":"Gets the children nodes of the node."}
{"code":"View function ( RecyclerView parent , View firstHeader ) { for ( int i = 0 ; i < parent . getChildCount ( ) ; i ++ ) { View child = parent . getChildAt ( i ) ; if ( ! itemIsObscuredByHeader ( parent , child , firstHeader , mOrientationProvider . getOrientation ( parent ) ) ) { return child ; } } return null ; }","nl":"Returns the first item currently in the RecyclerView that is not obscured by a header."}
{"code":"void function ( List < TestResultDetailsDTO > regTestResultDetailsLst ) { this . regTestResultDetailsLst = regTestResultDetailsLst ; }","nl":"Sets the reg test result details lst."}
{"code":"long function ( ) { return this . testId ; }","nl":"Gets the test id."}
{"code":"void function ( ) { Date now = new Date ( ) ; time . setTime ( now ) ; Date result = time . toDate ( now ) ; assertEquals ( now , result ) ; assertEquals ( now . getTime ( ) , result . getTime ( ) ) ; }","nl":"Test method for setTime() and toDate() round-trip."}
{"code":"void function ( BigDecimal feedConfigId ) { this . feedConfigId = feedConfigId ; }","nl":"Sets the feed config id."}
{"code":"void function ( String type ) { this . writeCompressionType = type ; }","nl":"Compression type for images to be generated from this writer. See {@link javax.imageio.ImageWriteParam#setCompressionType(String)} for a description of what this meansand valid range of values."}
{"code":"boolean function ( Iterable < Range < C >> other ) { for ( Range < C > range : other ) { if ( ! encloses ( range ) ) { return false ; } } return true ; }","nl":"Returns  {@code true} if for each range in {@code other} there exists a member range in thisrange set which  {@linkplain Range#encloses encloses} it. Returns {@code true} if {@code other}is empty. This is equivalent to checking if this range set  {@link #encloses} each range in {@code other}."}
{"code":"void function ( Map < String , Object > vars ) { this . vars . putAll ( vars ) ; }","nl":"Add variables to the context. "}
{"code":"boolean function ( ) { setOutputMode ( ) ; return this . buffer . hasRemaining ( ) ; }","nl":"Determines if the buffer contains data."}
{"code":"int function ( ) { Object [ ] rec = new Object [ ] { SETSTRING , txnum , blk . fileName ( ) , blk . number ( ) , offset , oldval , newval } ; return logMgr . append ( rec ) ; }","nl":"Writes a setString record to the log. This log record contains the SETSTRING operator, followed by the transaction id, the filename, number, and offset of the modified block, and the previous string value at that offset."}
{"code":"DataFlowNode function ( Node node ) { return dataFlowHandler . createDataFlowNode ( dataFlow , node ) ; }","nl":"This class encapsulates the access to the DataFlowNode class. Is this worthwhile? TODO I think it's too confusing to have the DataFlowNode constructor add the created instance to the List. I think it'd be clearer if we did that more \"procedurally\", i.e., create the object, then add it to the list."}
{"code":"User function ( ) { if ( ! SecurityUtils . isAuthenticationEnabled ( ) ) { throw new IOException ( ExceptionMessage . AUTHENTICATION_IS_NOT_ENABLED . getMessage ( ) ) ; } return sUserThreadLocal . get ( ) ; }","nl":"Gets the  {@link User} from the {@link ThreadLocal} variable."}
{"code":"boolean function ( String recipient ) { if ( selectedRecipients . contains ( recipient ) ) { return false ; } selectedRecipients . add ( recipient ) ; return true ; }","nl":"add an recipient to the required recipients list"}
{"code":"void function ( ) { File ghostFile = new File ( mTestFolder . getRoot ( ) , \"ghost.txt\" ) ; mException . expect ( IOException . class ) ; FileUtils . delete ( ghostFile . getAbsolutePath ( ) ) ; Assert . fail ( \"deleting a non-existent file should have failed\" ) ; }","nl":"Tests the  {@link FileUtils#delete(String)} method to throw an exception when trying to delete anon-existent file."}
{"code":"boolean function ( String name , OperationSigMask mask ) { for ( OperationSignature sig : operations . keySet ( ) ) { if ( mask . covers ( sig ) ) { if ( operations . get ( sig ) . containsKey ( name ) ) { return true ; } } } return false ; }","nl":"Checks whether the class declares an operation by the name given which is covered by the signature mask."}
{"code":"boolean function ( Collection < UserModel > models ) { return userService . updateUserModels ( models ) ; }","nl":"Updates/writes all specified user objects."}
{"code":"void function ( String msg , Throwable t ) { this . config . getServletContext ( ) . log ( this . config . getFilterName ( ) + \": \" + msg , t ) ; }","nl":"logs the message and Throwable prepended by the filter name (copy of  {@link GenericServlet#log(String,Throwable)})"}
{"code":"void function ( final HttpServletRequest request , final HttpServletResponse response ) { writeResponse ( request , response , \"\" ) ; }","nl":"Writes an empty response for calls that are purely one-way RPC."}
{"code":"void function ( int curValue ) { progressMonitor . curValue = curValue ; }","nl":"Sets the Current Value."}
{"code":"String function ( ) { return this . m_escapedJson ; }","nl":"Accessor for the JSON string."}
{"code":"void function ( NodeTester tester , short [ ] nodeTypes ) { NodeIterator iter = documentTraversal . createNodeIterator ( rootNode , NodeFilter . SHOW_ALL , new NodeTypeNodeFilter ( nodeTypes ) , true ) ; for ( Node nextNode = iter . nextNode ( ) ; nextNode != null ; nextNode = iter . nextNode ( ) ) { tester . testNode ( nextNode , this ) ; } tester . noMoreNodes ( this ) ; }","nl":"Does this NodeTest pass using the specified NodeTester instance?"}
{"code":"BlockStoreContext function ( InetSocketAddress masterAddress ) { BlockStoreContext context = CACHED_CONTEXTS . get ( masterAddress ) ; if ( context == null ) { context = new BlockStoreContext ( masterAddress ) ; CACHED_CONTEXTS . put ( masterAddress , context ) ; } return context ; }","nl":"Gets a context with the specified master address from the cache if it's created before. Otherwise creates a new one and puts it in the cache."}
{"code":"FSImageWriter function ( float quality ) { FSImageWriter writer = new FSImageWriter ( \"jpg\" ) ; writer . setWriteCompressionMode ( ImageWriteParam . MODE_EXPLICIT ) ; writer . setWriteCompressionType ( \"JPEG\" ) ; writer . setWriteCompressionQuality ( quality ) ; return writer ; }","nl":"Convenience method for initializing a writer for the JPEG image format."}
{"code":"String function ( String omaUrl ) { omaUrl = conditionallyPrependHttp ( omaUrl ) ; URL url = new URL ( omaUrl ) ; String site = url . getHost ( ) ; String path = url . getPath ( ) ; String query = url . getQuery ( ) ; return OMA_REDIRECT_LINK + SITE_PARAM + \"=\" + site + path + \"&\" + query ; }","nl":"Creates a Redirect Link from Portal to OMA. Incoming links look like this: http://mutationassessor.org/?cm=var&var=17,7517830,G,C&fts=all Outgoing links look like this: omaRedirect.do?path=/&cm=var&var=17,7517830,G,C&fts=all"}
{"code":"void function ( Map < String , ThreadingParameters > threadingParamsMap ) { threadingParametersMap = threadingParamsMap ; }","nl":"This call sets the ThreadingParameters for a JettyHTTPServerEngine"}
{"code":"void function ( Language lang , CodeGenerator gen ) { if ( currLanguage == null ) { currLanguage = lang ; } generators . put ( lang , gen ) ; ArgoEventPump . fireEvent ( new ArgoGeneratorEvent ( ArgoEventTypes . GENERATOR_ADDED , gen ) ) ; LOG . debug ( \"Added generator \" + gen + \" for \" + lang ) ; }","nl":"Registers a new generator. If a generator with the same language is already registered, it's replaced by the new one."}
{"code":"void function ( String name , Object value ) { context . setVariable ( name , value ) ; }","nl":"Convenience method that sets a variable in the EL evaluator context. "}
{"code":"long function ( ) { return index ; }","nl":"The index of this output in the transaction which holds it"}
{"code":"void function ( ) { if ( bulletTime - System . nanoTime ( ) >= BULLET_INTERVAL && bullets . size ( ) < MAX_BULLETS ) { bullets . add ( new Bullet ( xPos , yPos , zPos , heading ) ) ; } }","nl":"Fire a bullet."}
{"code":"GetOfferDetailsResponse . Return . DetailOfferData . OfferDisplay function ( ) { return new GetOfferDetailsResponse . Return . DetailOfferData . OfferDisplay ( ) ; }","nl":"Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.OfferDisplay }"}
{"code":"long function ( ) { return acknowledgementInterval == null ? 0 : acknowledgementInterval . longValue ( ) ; }","nl":"Get the number of milliseconds for the acknowledgment interval."}
{"code":"void function ( ) { server . stopAsync ( ) ; server . awaitTerminated ( ) ; }","nl":"Closes all client connections currently connected gracefully. Note that this does not settle the actual payment channels (and broadcast payment transactions), which must be done using the  {@link StoredPaymentChannelServerStates} which manages the states for the associatedwallet."}
{"code":"void function ( int level , String message , Position pos ) { StringBuffer buf = new StringBuffer ( message . length ( ) + level ) ; for ( int j = 1 ; j < level ; j ++ ) { buf . append ( \" \" ) ; } buf . append ( message ) ; getQueue ( ) . enqueue ( ErrorInfo . DEBUG , buf . toString ( ) , pos ) ; }","nl":"This is the standard way to report debugging information in the compiler.  It reports a message of the specified level (which controls the presentation of the message. To test whether such message should be reported, use \"should_report\". NOTE: This is a change of spec from earlier versions of Report. NOTE: This version takes an explicit Position, so that position info gets properly associated with the ErrorInfo that gets created by enqueue()."}
{"code":"Access function ( ) { return new Access ( ) ; }","nl":"Create an instance of  {@link Access }"}
{"code":"void function ( String failedAttributeName ) { this . failedAttributeName = failedAttributeName ; }","nl":"Sets the failed attribute name."}
{"code":"List < String > function ( String user ) { List < String > groups = CommonUtils . getUnixGroups ( user ) ; return new ArrayList < > ( new LinkedHashSet < > ( groups ) ) ; }","nl":"Returns list of groups for a user."}
{"code":"void function ( ) { clientSession . getSocket ( ) . flush ( ) ; }","nl":"flush outstanding data (and make sure it is acknowledged)"}
{"code":"MetadataEditorCompat function ( int key , String value ) { if ( HAS_REMOTE_CONTROL_APIS ) { ( ( RemoteControlClient . MetadataEditor ) mActualMetadataEditor ) . putString ( key , value ) ; } return this ; }","nl":"Adds textual information to be displayed. Note that none of the information added after {@link #apply()} has been called, will be displayed."}
{"code":"void function ( ) { SpaceXGUI . getInstance ( ) . appendToConsole ( TAG , \" - landing\" ) ; cmd . landing ( ) . doFor ( 2000 ) ; }","nl":"Landing Land the drone"}
{"code":"Builder function ( Map < String , String > metadata ) { this . metadata = metadata ; return this ; }","nl":"Optional. This optional parameter specifies custom metadata for your group configuration. You can use the metadata parameter for customer automation, but it does not change any functionality in Auto Scale. There currently is no limitation on depth."}
{"code":"void function ( ) { assertTrue ( rmc . getVariation ( ) < 0 ) ; assertEquals ( CompassPoint . EAST , rmc . getDirectionOfVariation ( ) ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.RMCParser#getDirectionOfVariation()}."}
{"code":"String function ( String dirty ) { String clean = null ; if ( dirty != null ) { clean = StringEscapeUtils . escapeJavaScript ( dirty ) . replaceAll ( \"(?i)javascript\" , \"\" ) ; } return clean ; }","nl":"Escapes JavaScript characters for the given string. Also strips all occurrences of the word \"javascript\" from the string."}
{"code":"String function ( ) { return wsseValueType ; }","nl":"Get the wsse ValueType attribute"}
{"code":"GenericJSONBuilder function ( String user_id_ ) { user_id = user_id_ ; return this ; }","nl":"Not required"}
{"code":"List < Resource > function ( ) { return resources ; }","nl":"Gets the resources."}
{"code":"boolean function ( String key ) { return getString ( key , null ) != null ; }","nl":"Tests for the existence of a setting."}
{"code":"ResourceTypeHandler function ( final String name ) { try { return ResourceTypeHandler . valueOf ( name ) ; } catch ( Exception e ) { return null ; } }","nl":"A wrapper for  {@link #valueOf(String)}. It returns null instead of throwing an exception."}
{"code":"void function ( Notation notation ) { unhandled ( notation ) ; }","nl":"Template delegator for testNode() method. OVERRIDE to add custom logic"}
{"code":"long function ( ) { long total = getTotal ( ) ; if ( total == 0 ) { return 0 ; } return getTotalElapsed ( ) / total ; }","nl":"get average elapsed."}
{"code":"void function ( ) { this . errorLevel = 0 ; }","nl":"Sets result as OK.  Always for match, so not touching errorLevelFolder"}
{"code":"void function ( ) { try { rmb . setBearing ( - 0.001 ) ; fail ( \"Did not throw exception\" ) ; } catch ( IllegalArgumentException e ) { assertTrue ( e . getMessage ( ) . contains ( \"0..360\" ) ) ; } }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.RMBParser#setBearing(double)} ."}
{"code":"AlluxioURI function ( long fileId ) { return mFileSystemMaster . getPath ( fileId ) ; }","nl":"Gets the path of a file with the given id."}
{"code":"int function ( ) { return ( bytes [ 31 ] & 0xFF ) | ( ( bytes [ 30 ] & 0xFF ) << 8 ) | ( ( bytes [ 29 ] & 0xFF ) << 16 ) | ( ( bytes [ 28 ] & 0xFF ) << 24 ) ; }","nl":"Hash code of the byte array as calculated by  {@link Arrays#hashCode()}. Note the difference between a SHA256 secure bytes and the type of quick/dirty bytes used by the Java hashCode method which is designed for use in bytes tables."}
{"code":"int function ( ) { return tag ; }","nl":"Get the tag of the constant."}
{"code":"Block function ( ) { return header ; }","nl":"The block header this object wraps. The referenced block object must not have any transactions in it."}
{"code":"FCKeditorConfig function ( ) { return config ; }","nl":"Get the advanced configuration set. By adding elements to this collection you can override the settings specified in the config.js file."}
{"code":"Difference function ( ) { return additionDifference ; }","nl":"Get the addition difference."}
{"code":"String function ( ) { return version ; }","nl":"Accessor for the language version."}
{"code":"void function ( ) { Symbol stack_sym ; if ( real_next >= real_stack . size ( ) ) return ; stack_sym = real_stack . elementAt ( real_stack . size ( ) - 1 - real_next ) ; real_next ++ ; vstack . push ( new Integer ( stack_sym . parse_state ) ) ; }","nl":"Transfer an element from the real to the virtual stack.  This assumes  that the virtual stack is currently empty."}
{"code":"void function ( Object expectedData ) { Assert . assertTrue ( countDownLatch . await ( 1L , TimeUnit . SECONDS ) ) ; try { Assert . assertEquals ( expectedData , future . get ( ) ) ; } catch ( ExecutionException e ) { throw e . getCause ( ) ; } }","nl":"Verify that the listener completes in a reasonable amount of time, and Asserts that the future returns the expected data."}
{"code":"void function ( int internalId ) { this . gisticID = internalId ; }","nl":"Sets the internal ID associated with this record"}
{"code":"long function ( K key , long delta ) { return accumulateAndGet ( key , delta , Long :: sum ) ; }","nl":"Adds  {@code delta} to the value currently associated with {@code key}, and returns the new value."}
{"code":"void function ( String [ ] args ) { SshExample test = new SshExample ( ) ; }","nl":"Main method for SshExample"}
{"code":"void function ( AbstractPlugin plugin ) { plugin . removePluginObserver ( this ) ; activePlugins . remove ( plugin ) ; allPlugins . remove ( plugin ) ; }","nl":"Remove plugin from available list"}
{"code":"List < String > function ( String user ) { return Lists . newArrayList ( user ) ; }","nl":"Returns list of groups for a user."}
{"code":"void function ( ServiceID localServiceID , int bindBits ) { bind ( localServiceID , null , bindBits ) ; }","nl":"Binds this socket to the specified local serviceID."}
{"code":"void function ( ) { System . out . println ( \"getResponseStringCsv\" ) ; String expResult = \"test\" ; String result = instance . getResponseStringCsv ( ) ; assertEquals ( expResult , result ) ; }","nl":"Test of getResponseStringCsv method, of class LogEntryRequest."}
{"code":"TextButton function ( TextButton actor , float x , float y , float width , float height , Skin skin ) { actor . setX ( x ) ; actor . setY ( y ) ; actor . setWidth ( width ) ; actor . setHeight ( height ) ; actor . getLabel ( ) . setStyle ( new LabelStyle ( skin . getFont ( \"andalus-font\" ) , Color . BLACK ) ) ; return actor ; }","nl":"Builds a TextButton according to the specified parameters, encapsulating its initialization."}
{"code":"Sha256Hash function ( ) { return dataHash ; }","nl":"Returns a hash of the concatenated checkpoint data."}
{"code":"void function ( long value ) { format . checkType ( 'r' , true ) ; packLong ( value , true ) ; }","nl":"Add a record field to the stream. \\param value The record value to be added."}
{"code":"void function ( ) { assertFalse ( hdm . isTrue ( ) ) ; }","nl":"Test method for  {@link net.sf.marineapi.nmea.parser.HDTParser#isTrue()}."}
{"code":"void function ( Signature . Visibility ... visibilities ) { visMask . removeAll ( Arrays . asList ( visibilities ) ) ; }","nl":"Forbid all mentioned visibilities."}
{"code":"String function ( String question ) { System . out . print ( question ) ; return scanner . nextLine ( ) ; }","nl":"Method ask user for an input string"}
{"code":"Options function ( ) { return new Options ( ) ; }","nl":"Gets the supported Options of the command."}
{"code":"void function ( ) { vhw . setHeading ( 90.456 ) ; assertEquals ( 90.5 , vhw . getHeading ( ) , 0.1 ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.VHWParser#setHeading(double)}."}
{"code":"Variable function ( Variable var , Constraint constraint ) { List < Variable > scope = constraint . getScope ( ) ; if ( scope . size ( ) == 2 ) { if ( var == scope . get ( 0 ) ) return scope . get ( 1 ) ; else if ( var == scope . get ( 1 ) ) return scope . get ( 0 ) ; } return null ; }","nl":"Returns for binary constraints the other variable from the scope."}
{"code":"double function ( ) { return occupancy ; }","nl":"Gets the occupancy."}
{"code":"java . lang . String function ( ) { return literalName ; }","nl":"Returns a string representation of the enumeration value."}
{"code":"void function ( Document doc , String base_url ) { panel . setDocument ( doc , base_url ) ; }","nl":"Sets the document to render, lays it out, and renders it."}
{"code":"String function ( ) { return TodoParser . encode ( item . getHeadline ( ) ) ; }","nl":"Encodes the headline of this ToDoItem in an XML safe way and returns the new String. The String can be regained by running the returned String through {@link TodoParser#decode(String)}."}
{"code":"String function ( ) { StringBuffer str = new StringBuffer ( \"Customer Summary\" ) ; for ( Customer c : customers ) { str . append ( \"  - \" + c . getName ( ) + \" (\" + format ( c . getNumberOfAccounts ( ) , \"account\" ) + \")\" ) ; } return str . toString ( ) ; }","nl":"This methods return the account number summary for all existing user that registered in the bank."}
{"code":"double function ( ) { checkState ( count != 0 ) ; return min ; }","nl":"Returns the lowest value in the dataset. The count must be non-zero. Non-finite values If the dataset contains  {@link Double#NaN} then the result is {@link Double#NaN}. If it contains  {@link Double#NEGATIVE_INFINITY} and not {@link Double#NaN} then the result is{@link Double#NEGATIVE_INFINITY}. If it contains  {@link Double#POSITIVE_INFINITY} and finitevalues only then the result is the lowest finite value. If it contains {@link Double#POSITIVE_INFINITY} only then the result is {@link Double#POSITIVE_INFINITY}."}
{"code":"void function ( ) { System . out . println ( \"getDeviceBlock\" ) ; Device instance = null ; DeviceBlock expResult = null ; DeviceBlock result = instance . getDeviceBlock ( ) ; assertEquals ( expResult , result ) ; fail ( \"The test case is a prototype.\" ) ; }","nl":"Test of getDeviceBlock method, of class Device."}
{"code":"void function ( ) { SpaceXGUI . getInstance ( ) . appendToConsole ( TAG , \" - lowering altitude\" ) ; cmd . down ( speed ) . doFor ( 1000 ) ; cmd . hover ( ) . doFor ( hoverTime ) ; }","nl":"Lower Altitude lowering the altitude a little bit"}
{"code":"void function ( ) { bufferSize = 0 ; }","nl":"Clear the buffer."}
{"code":"byte [ ] function ( ) { return alertSigningKey ; }","nl":"The key used to sign  {@link com.google.bitcoin.core.AlertMessage}s. You can use  {@link com.google.bitcoin.core.ECKey#verify(byte[],byte[],byte[])} to verifysignatures using it."}
{"code":"String function ( Uri uri ) { E entry = getMatcherEntry ( uri ) ; return entry . getBaseType ( ) . getType ( ) + \"/\" + entry . getSubType ( ) ; }","nl":"Get full MIME type for the specified URI"}
{"code":"void function ( final short x , final OutputStream os ) { os . write ( ( byte ) x ) ; os . write ( ( byte ) ( x >> 8 ) ) ; }","nl":"Short to little-endian bytes: writes x to given stream."}
{"code":"void function ( double gamma , D1Matrix64F u , D1Matrix64F x , D1Matrix64F y ) { int n = u . getNumElements ( ) ; double sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += u . get ( i ) * x . get ( i ) ; } for ( int i = 0 ; i < n ; i ++ ) { y . set ( i , x . get ( i ) + gamma * u . get ( i ) * sum ) ; } }","nl":" Multiplies a householder reflection against a vector:  y = (I + &gamma; u uT)x   The Householder reflection is used in some implementations of QR decomposition. "}
{"code":"boolean function ( Repository repository , String basePath , String objectId , OutputStream os ) { return tar ( CompressorStreamFactory . XZ , repository , basePath , objectId , os ) ; }","nl":"tar.xz the contents of the tree at the (optionally) specified revision and the (optionally) specified basepath to the supplied outputstream."}
{"code":"SearchConditionBuilder function ( String language ) { return instance ( language , Collections . < String , String > emptyMap ( ) ) ; }","nl":"Creates instance of builder for specific language."}
{"code":"void function ( Node node , Set < T > nodes , Class < T > clazz ) { if ( null != node ) { if ( ( null == clazz ) || ( clazz . equals ( node . getClass ( ) ) ) ) { nodes . add ( ( T ) node ) ; } for ( int i = 0 ; i < node . jjtGetNumChildren ( ) ; i ++ ) { addNodeAndSubnodes ( node . jjtGetChild ( i ) , nodes , clazz ) ; } } }","nl":"Add the given node and its subnodes to the set of nodes. If clazz is not null, only nodes of the given class are put in the set of nodes."}
{"code":"boolean function ( MotionEvent event ) { return ! view . onlyPenInput || ( view . onlyPenInput && ! Hardware . isPenEvent ( event ) ) ; }","nl":"Whether to use the MotionEvent as finger touch"}
{"code":"void function ( ) { if ( ! mc . getSecurityContext ( ) . isSecure ( ) ) { LOG . warning ( \"Unsecure HTTP, Transport Layer Security is recommended\" ) ; if ( blockUnsecureRequests ) { throw ExceptionUtils . toBadRequestException ( null , null ) ; } } }","nl":"HTTPS is the default transport for OAuth 2.0 services. By default this method will issue a warning for open  endpoints"}
{"code":"void function ( ) { if ( workerPool != null && ! workerPool . isShutdown ( ) ) { workerPool . shutdown ( ) ; } }","nl":"Stop XMPP listener & disconnect from all XMPP Servers"}
{"code":"String function ( String key ) { Object tmp = mMap . get ( key ) ; return tmp == null ? null : tmp . toString ( ) ; }","nl":"get string value."}
{"code":"void function ( ByteData pcm ) { line . write ( pcm . getData ( ) , 0 , pcm . getLen ( ) ) ; }","nl":"Process the decoded PCM bytes."}
{"code":"int function ( ) { return sizeOf ( value ) ; }","nl":"Gets the minimum encoded size of the value stored in this VarInt"}
{"code":"boolean function ( ) { return parseRetain ; }","nl":"Whether the serializer will produce cached mode Messages"}
{"code":"void function ( String runStatus ) { this . runStatus = runStatus ; }","nl":"Sets the run status."}
{"code":"void function ( ) { SpaceXGUI . getInstance ( ) . appendToConsole ( TAG , \" - spinning 90 right\" ) ; cmd . setLedsAnimation ( LEDAnimation . BLINK_RED , 3 , ( spinTime / 1000 ) ) ; cmd . spinRight ( spin90Speed ) . doFor ( spin90Time ) ; cmd . hover ( ) . doFor ( hoverTime ) ; }","nl":"Spin 90 Right Spin the drone 90 degrees to the right"}
{"code":"Map < Long , Integer > function ( ) { Map < Long , Integer > counts = new HashMap < > ( ) ; Collection < ClientDetailsEntity > clients = clientService . getAllClients ( ) ; for ( ClientDetailsEntity client : clients ) { counts . put ( client . getId ( ) , 0 ) ; } return counts ; }","nl":"Create a new map of all client ids set to zero"}
{"code":"XPathContext function ( ) { try { XPathContext c = ( XPathContext ) super . clone ( ) ; c . path = new LinkedList < Level > ( ) ; for ( Level l : path ) { c . path . addLast ( l . clone ( ) ) ; } return c ; } catch ( CloneNotSupportedException e ) { throw new RuntimeException ( \"XPathContext cannot be cloned?\" , e ) ; } }","nl":"Creates a deep copy of this XPathContext."}
{"code":"int function ( byte [ ] key ) { int v = INDEX_HASHER . hashBytes ( key ) . asInt ( ) % mNumBuckets ; return ( v >= 0 ) ? v : - v ; }","nl":"Hashes a key in byte array to a bucket index in non-negative integer value."}
{"code":"void function ( ) { assertTrue ( instance . hasParser ( \"GLL\" ) ) ; assertFalse ( instance . hasParser ( \"ABC\" ) ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.SentenceFactory#hasParser(java.lang.String)}."}
{"code":"void function ( String proxiesHeader ) { this . proxiesHeader = proxiesHeader ; }","nl":" The proxiesHeader directive specifies a header into which mod_remoteip will collect a list of all of the intermediate client IP addresses trusted to resolve the actual remote IP. Note that intermediate RemoteIPTrustedProxy addresses are recorded in this header, while any intermediate RemoteIPInternalProxy addresses are discarded.   Name of the http header that holds the list of trusted proxies that has been traversed by the http request.   The value of this header can be comma delimited.   Default value : X-Forwarded-By "}
{"code":"String function ( ) { return getXPath ( path . descendingIterator ( ) ) ; }","nl":"Stringifies the XPath of the current node."}
{"code":"void function ( BigDecimal runId ) { this . runId = runId ; }","nl":"Sets the run id."}
{"code":"boolean function ( ) { assert _dot_pos <= _the_production . rhs_length ( ) ; return _dot_pos == _the_production . rhs_length ( ) ; }","nl":"Is the dot at the end of the production?"}
{"code":"void function ( ) { CompleteFileOptions options = CompleteFileOptions . defaults ( ) ; Assert . assertEquals ( 0 , options . getUfsLength ( ) ) ; }","nl":"Tests that building a  {@link CompleteFileOptions} with the defaults works."}
{"code":"Permission function ( final int id ) { return ( Permission ) PERMISSIONS . get ( new Integer ( id ) ) ; }","nl":"Utility method for accessing Permission instances by their  permission id.  This is used internally by Hibernate to map database  values to instances of this class.  Normal application code should  never call this method."}
{"code":"void function ( ) { cancelled = true ; }","nl":"Cancel all operations."}
{"code":"JsonElement function ( Set < String > value ) { return getAsArray ( value , false ) ; }","nl":"Translate a set of strings to a JSON array, empty array returned as null"}
{"code":"void function ( ) { assertEquals ( 1.85 , vhw . getSpeedKmh ( ) , 0.01 ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.VHWParser#getSpeedKmh()}."}
{"code":"void function ( ) { }","nl":"Validate the message. Throws an Exception if the message is invalid."}
{"code":"boolean function ( String fldname ) { return s1 . hasField ( fldname ) || s2 . hasField ( fldname ) ; }","nl":"Returns true if the specified field is in either of the underlying scans."}
{"code":"void function ( String emailAddress , HttpServletRequest request ) { request . getSession ( ) . setAttribute ( EMAIL , emailAddress ) ; }","nl":"Registers the Users Session as Authenticated."}
{"code":"FullyQualifiedClassType function ( ) { return handlerClass ; }","nl":"Gets the value of the handlerClass property."}
{"code":"void function ( String graph , String format ) { revisionInformation = RevisionManagement . getRevisionInformation ( graph , format ) ; }","nl":"save old revision information of Graph"}
{"code":"int function ( ) { return _size ; }","nl":"Number of columns (terminals) in every row."}
{"code":"Spring function ( ) { return mSprings . get ( mControlSpringIndex ) ; }","nl":"Retrieve the control spring so you can manipulate it to drive the positions of the other springs."}
{"code":"ExtensionInfo function ( ) { return extensionInfo ; }","nl":"Get information about the language extension being compiled."}
{"code":"void function ( ) { try { empty = new RMBParser ( TalkerId . GP ) ; rmb = new RMBParser ( EXAMPLE ) ; } catch ( Exception e ) { fail ( e . getMessage ( ) ) ; } }","nl":"setUp"}
{"code":"void function ( List < OAuthPermission > scopes ) { this . scopes = scopes ; }","nl":"Sets a list of opaque permissions/scopes"}
{"code":"Page < Ingredient > function ( Pageable pageable ) { log . debug ( \"Request to get all Ingredients\" ) ; Page < Ingredient > result = ingredientRepository . findAll ( pageable ) ; return result ; }","nl":"Get all the ingredients."}
{"code":"String function ( int index , String [ ] parts ) { try { if ( index < 0 ) { return \"\" ; } return parts [ index ] . trim ( ) ; } catch ( ArrayIndexOutOfBoundsException e ) { throw new RuntimeException ( \"Unexpected error while parsing column nr: \" + ( index + 1 ) , e ) ; } }","nl":"Return the trimmed string from the column, or an empty string if -1. Require the column to exist before the end of the data line. This can be used instead of getPartString() if NA may be a meaningful value and the file is expected to have been validated."}
{"code":"void function ( int timeoutMillis ) { this . timeoutMillis = timeoutMillis ; resetTimeout ( ) ; }","nl":"Sets the receive timeout to the given number of milliseconds, automatically killing the connection if no messages are received for this long A timeout of 0 is interpreted as no timeout. The default is for timeoutEnabled to be true but timeoutMillis to be set to 0 (ie disabled). This call will reset the current progress towards the timeout."}
{"code":"void function ( BoxFolder folder , int depth ) { String indent = \"\" ; for ( BoxItem . Info itemInfo : folder ) { for ( int i = 0 ; i < depth ; i ++ ) { indent += INDENT_APPEND ; } if ( itemInfo instanceof BoxFolder . Info ) { BoxFolder childFolder = ( BoxFolder ) itemInfo . getResource ( ) ; listFolder ( childFolder , depth + 1 ) ; } } }","nl":"Recurisvely lists folders in the Box account. Primarily used for debugging."}
{"code":"void function ( ) { try { vCloseRequested = true ; socket . close ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }","nl":"Closes the connection to the server, triggering the  {@link StreamParser#connectionClosed()}event on the network-handling thread where all callbacks occur."}
{"code":"int function ( final MediaFormat format ) { if ( mIsStarted ) throw new IllegalStateException ( \"muxer already started\" ) ; final int trackIx = mMediaMuxer . addTrack ( format ) ; if ( DEBUG ) Log . i ( TAG , \"addTrack:trackNum=\" + mEncoderCount + \",trackIx=\" + trackIx + \",format=\" + format ) ; return trackIx ; }","nl":"assign encoder to muxer"}
{"code":"float function ( ) { return mFinal ; }","nl":"Returns where the scroll will end. Valid only for \"fling\" scrolls."}
{"code":"void function ( Map map ) { notEmpty ( map , \"[Assertion failed] - this map must not be empty; it must contain at least one entry\" ) ; }","nl":"Assert that a Map has entries; that is, it must not be  {@code null}and must have at least one entry. Assert.notEmpty(map);"}
{"code":"void function ( ) { notificationController . registerUserSession ( null , mockServerMessage ) ; }","nl":"Test method for {@link NotificationController#registerUserSession(ServerSession,ServerMessage)}. Verifies that method throws  {@code NullPointerException} when ServerSession is null."}
{"code":"void function ( int oldStep ) { }","nl":"Undo the action done after the given step. For example, when the given step is 0, nothing was done, so nothing can be undone; and when the given step is 1, undo the first action.  Undo allows users to work part way through fixing a problem, see the partial result, and explore a different alternative."}
{"code":"int function ( Tag tag ) { int keyResult ; keyResult = this . key . compareTo ( tag . key ) ; if ( keyResult != 0 ) { return keyResult ; } return this . value . compareTo ( tag . value ) ; }","nl":"Compares this tag to the specified tag. The tag comparison is based on a comparison of key and value in that order."}
{"code":"boolean function ( int spacingType , float value ) { if ( mDefaultSpacing == null ) { mDefaultSpacing = newSpacingResultArray ( ) ; } if ( ! FloatUtil . floatsEqual ( mDefaultSpacing [ spacingType ] , value ) ) { mDefaultSpacing [ spacingType ] = value ; return true ; } return false ; }","nl":"Set a default spacing value. This is used as a fallback when no spacing has been set for a particular direction."}
{"code":"List < URL > function ( String basePackage , String extension ) { return findResources ( basePackage , extension , null ) ; }","nl":"Scans list of base packages for all resources with the given extension."}
{"code":"void function ( QName attribute ) { Level current = path . getLast ( ) ; current . attributes . put ( attribute , new Level ( ATTR + getName ( attribute ) ) ) ; }","nl":"Adds knowledge about a single attribute of the current node."}
{"code":"ContentTypeInfo function ( Message message ) { for ( ContentTypeRule rule : rules ) { ContentTypeInfo contentTypeInfo = rule . getContentType ( message ) ; if ( contentTypeInfo != null ) { return contentTypeInfo ; } } return null ; }","nl":"Determine the content type of the given message. This method will try the registered rules in turn until the first rule matches."}
{"code":"GetOfferDetailsResponse . Return . DetailOfferData . FulfillmentPartner function ( ) { return new GetOfferDetailsResponse . Return . DetailOfferData . FulfillmentPartner ( ) ; }","nl":"Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.FulfillmentPartner }"}
{"code":"void function ( ItemList < T > items ) { this . items = items ; }","nl":"Sets the items."}
{"code":"boolean function ( T payload ) { if ( ! contains ( payload ) ) { return false ; } return mRoots . contains ( mIndex . get ( payload ) ) ; }","nl":"Checks if a given payload is in a root of the DAG."}
{"code":"long function ( String pathUri ) { long len = - 1 ; FileStatus fileStatus = getFileStatus ( pathUri ) ; if ( fileStatus != null ) { len = fileStatus . getLen ( ) ; } return len ; }","nl":"Return the len of a file."}
{"code":"void function ( ) { List < String > types = instance . listParsers ( ) ; assertEquals ( SentenceId . values ( ) . length , types . size ( ) ) ; for ( SentenceId id : SentenceId . values ( ) ) { assertTrue ( types . contains ( id . name ( ) ) ) ; } }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.SentenceFactory#createParser(TalkerId,SentenceId) .}"}
{"code":"long function ( ) { return tStop ; }","nl":"Gets the Global Chromosomal Stop."}
{"code":"int function ( ) { return mStartCount ; }","nl":"Returns the starting count number for the count down animation."}
{"code":"int function ( ) { return p1 . recordsOutput ( ) * ii . recordsOutput ( ) ; }","nl":"Estimates the number of output records in the join. The formula is:  R(indexjoin(p1,p2,idx)) = R(p1)R(idx) "}
{"code":"List < String > function ( ) { return getStrings ( \" \" ) ; }","nl":"Returns a list of space-separated strings from the specified key."}
{"code":"void function ( ) { events . clear ( ) ; }","nl":"Clears the list of collected events."}
{"code":"void function ( ) { mClientRWLock = new ClientRWLock ( ) ; mReadLock = mClientRWLock . readLock ( ) ; mWriteLock = mClientRWLock . writeLock ( ) ; }","nl":"Sets up the constructors before a test run."}
{"code":"void function ( int hour ) { if ( hour < 0 || hour > 23 ) { throw new IllegalArgumentException ( \"Valid hour value is between 0..23\" ) ; } this . hour = hour ; }","nl":"Set the hour of day."}
{"code":"Evictor function ( BlockMetadataManagerView view , Allocator allocator ) { try { return CommonUtils . createNewClassInstance ( Configuration . < Evictor > getClass ( PropertyKey . WORKER_EVICTOR_CLASS ) , new Class [ ] { BlockMetadataManagerView . class , Allocator . class } , new Object [ ] { view , allocator } ) ; } catch ( Exception e ) { throw Throwables . propagate ( e ) ; } }","nl":"Factory for  {@link Evictor}."}
{"code":"long function ( ) { return issuedAt ; }","nl":"Returns the time (in seconds) when this token was issued at"}
{"code":"List < E > function ( Iterable < E > i ) { ArrayList < E > a = new ArrayList < E > ( ) ; for ( E e : i ) { a . add ( e ) ; } return a ; }","nl":"Turns the iterable into a list."}
{"code":"UserAuthorities function ( final String username ) { if ( log . isDebugEnabled ( ) ) { log . debug ( \"getPortalUserAuthorities, username: \" + username ) ; } Collection < String > userAuthorities = getUserAuthorities ( username ) ; return ( userAuthorities . size ( ) > 0 ) ? new UserAuthorities ( username , userAuthorities ) : null ; }","nl":"Implementation of  {@code PortalUserDAO}"}
{"code":"EigenDecomposition < DenseMatrix64F > function ( int matrixSize , boolean needVectors ) { return new SwitchingEigenDecomposition ( matrixSize , needVectors , 1e-8 ) ; }","nl":" Returns an  {@link EigenDecomposition} that has been optimized for the specified matrix size.If the input matrix is symmetric within tolerance then the symmetric algorithm will be used, otherwise a general purpose eigenvalue decomposition is used. "}
{"code":"void function ( ComparisonListener l ) { compListeners . add ( l ) ; }","nl":"Registers a listener that is notified of each comparison."}
{"code":"int function ( ) { return mId ; }","nl":"Returns the int identifier of the type. Note: This is only used for getting the int representation of the type for {@link alluxio.worker.DataServerMessage}, since that class needs to manually encode all messages.  {@link alluxio.worker.DataServerMessage} and this method should no longer be neededwhen the client is converted to use Netty."}
{"code":"Matrix function ( Matrix matrix ) { Matrix mat = new Matrix ( matrix . getNrows ( ) , matrix . getNcols ( ) ) ; for ( int i = 0 ; i < matrix . getNrows ( ) ; i ++ ) { for ( int j = 0 ; j < matrix . getNcols ( ) ; j ++ ) { mat . setValueAt ( i , j , changeSign ( i ) * changeSign ( j ) * determinant ( createSubMatrix ( matrix , i , j ) ) ) ; } } return mat ; }","nl":"The cofactor of a matrix"}
{"code":"void function ( boolean cacheTokens ) { this . cacheTokens = cacheTokens ; }","nl":"Configure if the client should cache tokens locally or not"}
{"code":"boolean function ( final File file , final String pattern ) { Pattern regexp = Pattern . compile ( pattern ) ; Matcher matcher = regexp . matcher ( \"\" ) ; FileIterable it = new FileIterable ( file ) ; for ( String line : it ) { matcher . reset ( line ) ; if ( matcher . find ( ) ) { return true ; } } return false ; }","nl":"Handy method to find a certain pattern into a file. While this method lives in the FileUtils, it was designed with with unit test in mind (to check result redirected into a file)"}
{"code":"ServletConfig function ( ) { return ( this . config ) ; }","nl":"Return the  {@link ServletConfig} associated with this instance."}
{"code":"Schema function ( ) { return sch ; }","nl":"Returns the schema of the sorted table, which is the same as in the underlying query."}
{"code":"void function ( ) { System . out . println ( \"setDuration\" ) ; long duration = 100L ; instance . setDuration ( duration ) ; }","nl":"Test of setDuration method, of class LogEntryRequest."}
{"code":"boolean function ( ) { while ( true ) { if ( idx . next ( ) ) { ts . moveToRid ( idx . getDataRid ( ) ) ; return true ; } if ( ! s . next ( ) ) return false ; resetIndex ( ) ; } }","nl":"Moves the scan to the next record. The method moves to the next index record, if possible. Otherwise, it moves to the next LHS record and the first index record. If there are no more LHS records, the method returns false."}
{"code":"double function ( ) { checkState ( count ( ) != 0 ) ; return sumOfProductsOfDeltas / count ( ) ; }","nl":"Returns the population covariance of the values. The count must be non-zero. This is guaranteed to return zero if the dataset contains a single pair of finite values. It is not guaranteed to return zero when the dataset consists of the same pair of values multiple times, due to numerical errors. Non-finite values If the dataset contains any non-finite values ( {@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or  {@link Double#NaN}) then the result is  {@link Double#NaN}."}
{"code":"void function ( ) { assertEquals ( 0 , zda . getLocalZoneMinutes ( ) ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.ZDAParser#getLocalZoneMinutes()}."}
{"code":"void function ( String startTime ) { this . startTime = startTime ; }","nl":"Sets the start time."}
{"code":"boolean function ( String fldname ) { return fields ( ) . contains ( fldname ) ; }","nl":"Returns true if the specified field is in the schema"}
{"code":"boolean function ( Object o ) { if ( this == o ) { return true ; } if ( ! ( o instanceof TtlBucket ) ) { return false ; } TtlBucket that = ( TtlBucket ) o ; return mTtlIntervalStartTimeMs == that . mTtlIntervalStartTimeMs ; }","nl":"Compares to a specific object."}
{"code":"int function ( ) { return eig . getNumberOfEigenvalues ( ) ; }","nl":"Returns the number of eigenvalues/eigenvectors.  This is the matrix's dimension."}
{"code":"CheckServiceAccessRequest function ( ) { return new CheckServiceAccessRequest ( ) ; }","nl":"Create an instance of  {@link CheckServiceAccessRequest }"}
{"code":"void function ( String feedId ) { this . feedId = feedId ; }","nl":"Sets the feed id."}
{"code":"void function ( ) { }","nl":"Invoked to request the service to stop. By default this method does nothing."}
{"code":"double [ ] function ( ) { return gammasU ; }","nl":"Returns gammas from the householder operations for the U matrix."}
{"code":"Bounds function ( Node node ) { return node . getBoundsInParent ( ) ; }","nl":"Retrieve the physical transformed bounds (geom + effect + clip + transform) of a Node."}
{"code":"void function ( MapType value ) { this . mapType = value ; }","nl":"Sets the value of the mapType property."}
{"code":"int function ( int value , String name ) { if ( value <= 0 ) { throw new IllegalArgumentException ( XLog . format ( \"parameter [{0}] = [{1}] must be greater than zero\" , name , value ) ) ; } return value ; }","nl":"Check whether the value is greater than or equals 0."}
{"code":"void function ( ) { String notExistClass = \"alluxio.test.custom.provider\" ; mThrown . expect ( RuntimeException . class ) ; mThrown . expectMessage ( notExistClass + \" not found\" ) ; new CustomAuthenticationProvider ( notExistClass ) ; }","nl":"Tests the  {@link CustomAuthenticationProvider#CustomAuthenticationProvider(String)}constructor to throw an exception when the class cannot be found."}
{"code":"void function ( ) { SpringBolt subject = new SpringBolt ( TestBean . class , \"nullObject()\" , \"y\" ) ; subject . setScatterOutput ( true ) ; run ( subject ) ; verify ( outputCollectorMock ) . ack ( tupleMock ) ; verifyNoMoreInteractions ( outputCollectorMock ) ; }","nl":"Tests a null return."}
{"code":"Escaper function ( ) { return URL_PATH_SEGMENT_ESCAPER ; }","nl":"Returns an  {@link Escaper} instance that escapes strings so they can be safely included inURL path segments. The returned escaper escapes all non-ASCII characters, even though many of these are accepted in modern URLs. (If the escaper were to leave these characters unescaped, they would be escaped by the consumer at parse time, anyway.) Additionally, the escaper escapes the slash character (\"/\"). While slashes are acceptable in URL paths, they are considered by the specification to be separators between \"path segments.\" This implies that, if you wish for your path to contain slashes, you must escape each segment separately and then join them. When escaping a String, the following rules apply:  The alphanumeric characters \"a\" through \"z\", \"A\" through \"Z\" and \"0\" through \"9\" remain the same. The unreserved characters \".\", \"-\", \"~\", and \"_\" remain the same. The general delimiters \"@\" and \":\" remain the same. The subdelimiters \"!\", \"$\", \"&amp;\", \"'\", \"(\", \")\", \"\", \"+\", \",\", \";\", and \"=\" remain the same. The space character \" \" is converted into %20. All other characters are converted into one or more bytes using UTF-8 encoding and each byte is then represented by the 3-character string \"%XY\", where \"XY\" is the two-digit, uppercase, hexadecimal representation of the byte value.  Note: Unlike other escapers, URL escapers produce uppercase hexadecimal sequences."}
{"code":"Long function ( ) { return seqNo ; }","nl":"Gets the seq no."}
{"code":"BufferedByteWriter function ( byte value ) { ensureCapacity ( 3 ) ; mWriter . putShort ( ( short ) 0 ) ; mWriter . put ( value ) ; return this ; }","nl":"Write 24-bit of the given value in big-endian order to the buffer"}
{"code":"void function ( Class clazz , Connection con , PreparedStatement ps , ResultSet rs ) { closeAll ( clazz . getName ( ) , con , rs ) ; }","nl":"Frees Database Connection."}
{"code":"void function ( ClassdiagramNode newUplink ) { uplinks . add ( newUplink ) ; }","nl":"Add an uplink to this node."}
{"code":"void function ( ) { Assert . assertEquals ( TieredBlockStoreTestUtils . TIER_PATH [ TEST_TIER_LEVEL ] . length , mTestTierView . getDirViews ( ) . size ( ) ) ; }","nl":"Tests the  {@link StorageTierView#getDirViews()} method."}
{"code":"boolean function ( int period ) { return periodsElements [ period ] != null && periodsElements [ period ] . size ( ) != 0 ; }","nl":"Check if this itemset appears in a given period"}
{"code":"boolean function ( ) { return ! url . toLowerCase ( ) . startsWith ( \"http://\" ) && ! url . toLowerCase ( ) . startsWith ( \"https://\" ) ; }","nl":"Returns true if this registration represents the result data sent by a pulling Gitblit instance."}
{"code":"Script function ( ECKey key ) { return new ScriptBuilder ( ) . data ( key . getPubKey ( ) ) . op ( OP_CHECKSIG ) . build ( ) ; }","nl":"Creates a scriptPubKey that encodes payment to the given raw public key."}
{"code":"void function ( Cookie [ ] cookies ) { if ( cookies != null ) { for ( Cookie cooky : cookies ) { this . addCookie ( cooky ) ; } } }","nl":"Adds an array of  {@link Cookie HTTP cookies}. Cookies are added individually and in the given array order. If any of the given cookies has already expired it will not be added, but existing values will still be removed."}
{"code":"double function ( ) { return x ; }","nl":"Returns the X coordinate of this Point2D in double precision."}
{"code":"String function ( List < T > list ) { StringBuilder sb = new StringBuilder ( ) ; for ( T s : list ) { if ( sb . length ( ) != 0 ) { sb . append ( \" \" ) ; } sb . append ( s ) ; } return sb . toString ( ) ; }","nl":"Converts a list of objects to a string."}
{"code":"int function ( ) { return _size ; }","nl":"Returns the current number of entries in the map."}
{"code":"int [ ] function ( ) { return originalMatrix . itemNames ; }","nl":"Get the array of items stored in the original Q-matrix"}
{"code":"void function ( ) { if ( mReadResponse != null ) { mReadResponse . getPayloadDataBuffer ( ) . release ( ) ; mReadResponse = null ; } }","nl":"{@inheritDoc}Release the underlying buffer of previous/current read response."}
{"code":"boolean function ( EntityMobWithInventory mob ) { if ( theTarget == null ) { return false ; } if ( theTarget . getEntityId ( ) == mob . getEntityId ( ) ) { mob . setAttackTarget ( null ) ; return false ; } if ( mob . getDistanceToEntity ( theTarget ) > 30.0D ) { return false ; } return true ; }","nl":"Returns whether the EntityAIBase should begin execution."}
{"code":"void function ( ) { numExceptional ++ ; double mag = 0.05 * numExceptional ; if ( mag > 1.0 ) mag = 1.0 ; double theta = 2.0 * ( rand . nextDouble ( ) - 0.5 ) * mag ; performImplicitSingleStep ( theta , true ) ; lastExceptional = steps ; }","nl":"Perform a shift in a random direction that is of the same magnitude as the elements in the matrix."}
{"code":"boolean function ( lalr_item itm ) { return _all . containsKey ( itm ) ; }","nl":"Does the set contain a particular item?"}
{"code":"RemoteBlockWriter function ( ) { try { return CommonUtils . createNewClassInstance ( Configuration . < RemoteBlockWriter > getClass ( PropertyKey . USER_BLOCK_REMOTE_WRITER_CLASS ) , null , null ) ; } catch ( Exception e ) { throw Throwables . propagate ( e ) ; } }","nl":"Factory for  {@link RemoteBlockWriter}."}
{"code":"boolean function ( double a , double b , double epsilon ) { return a == b ? true : Math . abs ( a - b ) < epsilon ; }","nl":"Returns true if two doubles are considered equal. Tests if the absolute difference between the two doubles has a difference less then a given double (epsilon). Determining the given epsilon is highly dependant on the precision of the doubles that are being compared."}
{"code":"CertificateChainInfo function ( ) { return chain ; }","nl":"Gets the value of the chain property."}
{"code":"int function ( ) { return toString ( ) . hashCode ( ) ; }","nl":"Compatible with the equals implementation."}
{"code":"boolean function ( byte b ) { return b == SPACE || b == HT ; }","nl":"Determines whether a specified (US-ASCII) character is an HTTP whitespace character (Space or Horizontal tab)"}
{"code":"EaseUI function ( ) { if ( instance == null ) { instance = new EaseUI ( ) ; } return instance ; }","nl":"get instance of EaseUI"}
{"code":"void function ( Hessian2Output out ) { if ( out == null ) { return ; } out . free ( ) ; _freeHessian2Output . free ( out ) ; }","nl":"Frees a Hessian 2.0 serializer"}
{"code":"Date function ( ) { return this . expires ; }","nl":"Gets the date at which the access token expires."}
{"code":"void function ( ) { final RPCMessage message = new RPCBlockReadRequest ( 0 , 0 , 0 , 0 , 0 ) ; mThrown . expect ( IllegalArgumentException . class ) ; mThrown . expectMessage ( ExceptionMessage . NO_RPC_HANDLER . getMessage ( message . getType ( ) ) ) ; mHandler . channelRead0 ( mContext , message ) ; }","nl":"Makes sure that an  {@link IllegalArgumentException} is thrown when the message isnot a  {@link alluxio.network.protocol.RPCResponse}."}
{"code":"File function ( ) { return runtimeManager . getFileOrFolder ( Keys . federation . proposalsFolder , \"${baseFolder}/proposals\" ) ; }","nl":"Returns the path of the proposals folder. This method checks to see if Gitblit is running on a cloud service and may return an adjusted path."}
{"code":"Bus function ( ) { return bus ; }","nl":"Gets the bus"}
{"code":"ELEvaluator function ( Configuration conf , String group ) { ELEvaluator eval = Services . get ( ) . get ( ELService . class ) . createEvaluator ( group ) ; setConfigToEval ( eval , conf ) ; return eval ; }","nl":"Create an evaluator to be used in resolving configuration vars and frequency constant/functions (used in Stage 1)"}
{"code":"double function ( Metrics . ClassMetricKey key , ASTClassOrInterfaceDeclaration node , boolean force ) { Double prev = memo . get ( key ) ; if ( ! force && prev != null ) { return prev ; } ClassMetric metric = key . getCalculator ( ) ; double val = metric . computeFor ( node , Metrics . getTopLevelPackageStats ( ) ) ; memo . put ( key , val ) ; return val ; }","nl":"Computes the value of a metric for an operation."}
{"code":"String function ( ) { return sender ; }","nl":"Retuen the Phone Number of the Sender"}
{"code":"RepositoryCommit function ( String repository , String branch , RevCommit commit ) { RepositoryCommit commitModel = new RepositoryCommit ( repository , branch , commit ) ; return addCommit ( commitModel ) ; }","nl":"Adds a commit to the activity object as long as the commit is not a duplicate."}
{"code":"boolean function ( int x , int y ) { return steps . contains ( new Step ( x , y ) , false ) ; }","nl":"Check if this path contains the given step"}
{"code":"void function ( int value ) { format . checkType ( 'i' , true ) ; packLong ( value , true ) ; }","nl":"Add an integer field to the stream. \\param value The integer value to be added."}
{"code":"void function ( ) { }","nl":"Destroy the Purge Jobs Service."}
{"code":"Integer function ( byte [ ] bytes , TFieldIdEnum fieldIdPathFirst , TFieldIdEnum ... fieldIdPathRest ) { return ( Integer ) partialDeserializeField ( TType . I32 , bytes , fieldIdPathFirst , fieldIdPathRest ) ; }","nl":"Deserialize only an i32 field (addressed by recursively using field id) from a byte record."}
{"code":"void function ( int mode ) { taskMode = mode ; }","nl":"Set the index of the current task."}
{"code":"Date function ( ) { String name = \"If-Modified-Since\" ; if ( this . request . getHeader ( name ) == null ) return null ; return new Date ( this . request . getDateHeader ( name ) ) ; }","nl":"Check if the client requested a date-based conditional operation."}
{"code":"void function ( Collection < String > i ) { after . addAll ( i ) ; }","nl":"Specifies that the current interceptor needs to be added to the  interceptor chain after the specified collection of interceptors."}
{"code":"void function ( String t ) { to = t ; }","nl":"Sets the to address of this message."}
{"code":"void function ( Entity source ) { this . source = source ; }","nl":"Set the target to run away from."}
{"code":"void function ( ) { mWriter . close ( ) ; Assert . assertTrue ( mOutStream . isClosed ( ) ) ; Assert . assertFalse ( mOutStream . isCanceled ( ) ) ; mWriter . close ( ) ; Assert . assertTrue ( mOutStream . isClosed ( ) ) ; Assert . assertFalse ( mOutStream . isCanceled ( ) ) ; }","nl":"Tests  {@link BaseKeyValuePartitionWriter#close()} after{@link BaseKeyValuePartitionWriter#close()}, expecting a close is a no-op after the previous close."}
{"code":"MetadataEditorCompat function ( boolean startEmpty ) { Object metadataEditor ; if ( HAS_REMOTE_CONTROL_APIS ) { metadataEditor = ( ( RemoteControlClient ) mActualRemoteControlClient ) . editMetadata ( startEmpty ) ; } else { metadataEditor = null ; } return new MetadataEditorCompat ( metadataEditor ) ; }","nl":"Creates a  {@link android.media.RemoteControlClient.MetadataEditor}."}
{"code":"void function ( PersonBlogs pbBlogs , HashMap < String , HashMap < String , Integer >> naiveBayesMap ) { String AgeClass = pbBlogs . getBloggerAgeClass ( ) ; for ( int i = 0 ; i < pbBlogs . getPosts ( ) . size ( ) ; i ++ ) { String post = pbBlogs . getPosts ( ) . get ( i ) ; String [ ] cleanPostTokens = NaiveBayesTrain . cleanPost ( post ) ; updateNaiveBayesMapForSinglePost ( cleanPostTokens , naiveBayesMap , AgeClass ) ; } }","nl":"Given a persons blogs updates the naive bayes map of word probabilities"}
{"code":"String function ( long startTimeNs , String message ) { return message + \" took \" + ( System . nanoTime ( ) - startTimeNs ) + \" ns.\" ; }","nl":"Formats time elapsed since the given start time (in nanoseconds)."}
{"code":"void function ( final HttpServletRequest request ) { LOG . debug ( getRequestHeaders ( request ) . toString ( ) ) ; }","nl":"Prints request headers."}
{"code":"void function ( boolean applyToMaster ) { LOG . info ( \"{}: Loading checkpoint file: {}\" , mMaster . getName ( ) , mJournal . getCheckpointFilePath ( ) ) ; JournalInputStream is = mReader . getCheckpointInputStream ( ) ; if ( applyToMaster ) { mMaster . processJournalCheckpoint ( is ) ; } mLatestSequenceNumber = is . getLatestSequenceNumber ( ) ; is . close ( ) ; }","nl":"Loads and (optionally) processes the journal checkpoint file."}
{"code":"long function ( ) { return mTimeDelta ; }","nl":"Return the time difference in milliseconds between the previous accepted GestureDetector event and the current GestureDetector event."}
{"code":"void function ( byte [ ] data ) { clientSession . getSocket ( ) . doWrite ( data ) ; }","nl":"sends the given data asynchronously"}
{"code":"void function ( ) { String [ ] ids = { \"02\" , \"04\" , \"06\" , \"08\" , \"10\" , \"12\" } ; instance . setSatelliteIds ( ids ) ; String [ ] satellites = instance . getSatelliteIds ( ) ; assertEquals ( ids . length , satellites . length ) ; int i = 0 ; for ( String id : ids ) { assertEquals ( id , satellites [ i ++ ] ) ; } }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.GSAParser#setSatellitesIds(String[])}."}
{"code":"void function ( String host , int port ) { connect ( InetAddress . getByName ( host ) , port ) ; }","nl":"establishes a connection to the given server.  Starts the sender thread."}
{"code":"long function ( ) { return index ; }","nl":"The index of this output in the transaction which holds it."}
{"code":"Constant function ( ) { return dataval ; }","nl":"Returns the dataval component of the entry"}
{"code":"void function ( String wsseValueType ) { this . wsseValueType = wsseValueType ; }","nl":"Set the wsse ValueType attribute"}
{"code":"Map < String , String > function ( Parcel in ) { if ( in == null ) { return null ; } int size = in . readInt ( ) ; if ( size == - 1 ) { return null ; } Map < String , String > map = new HashMap < String , String > ( ) ; for ( int i = 0 ; i < size ; i ++ ) { String key = in . readString ( ) ; map . put ( key , in . readString ( ) ) ; } return map ; }","nl":"Read a HashMap from a Parcel, class of key and value are both String"}
{"code":"void function ( DenseMatrix64F A , DenseMatrix64F H , double lambda ) { final int numParam = param . getNumElements ( ) ; A . set ( H ) ; for ( int i = 0 ; i < numParam ; i ++ ) { A . set ( i , i , A . get ( i , i ) + lambda ) ; } }","nl":"A = H + lambdaI   where I is an identity matrix."}
{"code":"void function ( ComplexNode value ) { this . singleNestedComplexNode = value ; }","nl":"Sets the value of the singleNestedComplexNode property."}
{"code":"BoxFolder function ( String name ) { return this . getFolder ( rootFolder , name ) ; }","nl":"Returns a specific folder in the Box account"}
{"code":"void function ( String units ) { this . units = units ; }","nl":"Sets the units of measurement."}
{"code":"int function ( ) { return i ; }","nl":"Returns the uint32 encoded form of the path element, including the most significant bit."}
{"code":"void function ( String url ) { webEngine . load ( url ) ; }","nl":"Loads the specified URL"}
{"code":"void function ( PropertyChangeListener listener ) { propertyChangeSupport . addPropertyChangeListener ( listener ) ; }","nl":"Add PropertyChangeListener."}
{"code":"String function ( ) { return xmiId ; }","nl":"Get the xmi.id for the reference. This must be unique within the given XMI file (system ID), but is not guaranteed to be globally unique."}
{"code":"boolean function ( ActivityRequest activityRequest ) { if ( activityRequest == null ) { return false ; } if ( activityRequest . getFeedId ( ) == null ) { return false ; } return activityRequest . getConfigProperties ( ) != null ; }","nl":"Validate the incoming request for mandatory parameters."}
{"code":"boolean function ( ) { return mCheckpointRead && ( mCheckpointOpenedTime == mCheckpointLastModifiedTime ) ; }","nl":"Checks to see if the journal checkpoint has not been updated. If it has been updated since the creation of this reader, this reader is no longer valid."}
{"code":"void function ( ) { Time t = rmc . getTime ( ) ; assertNotNull ( t ) ; assertEquals ( 12 , t . getHour ( ) ) ; assertEquals ( 0 , t . getMinutes ( ) ) ; assertEquals ( 44.567 , t . getSeconds ( ) , 0.001 ) ; }","nl":"Test method for  {@link net.sf.marineapi.nmea.parser.RMCParser#getTime()}."}
{"code":"void function ( ) { }","nl":"Load the necessary state to perform an eager precondition check.  This implementation does a NOP.  Subclasses should override this method and load the state needed to do an eager precondition check.  A trivial implementation is calling {link #loadState}."}
{"code":"void function ( ) { handleCharacterData ( ) ; listener . processGroupEnd ( ) ; groupDepth -- ; }","nl":"Inform the listener of a group end."}
{"code":"void function ( ) { File dir = storage . getBackupDir ( ) ; if ( dir == null ) return ; backup ( dir ) ; }","nl":"Backup all notebooks"}
{"code":"void function ( Constant dataval , RID datarid ) { beforeFirst ( dataval ) ; DirEntry e = leaf . insert ( datarid ) ; leaf . close ( ) ; if ( e == null ) return ; BTreeDir root = new BTreeDir ( rootblk , dirTi , tx ) ; DirEntry e2 = root . insert ( e ) ; if ( e2 != null ) root . makeNewRoot ( e2 ) ; root . close ( ) ; }","nl":"Inserts the specified record into the index. The method first traverses the directory to find the appropriate leaf page; then it inserts the record into the leaf. If the insertion causes the leaf to split, then the method calls insert on the root, passing it the directory entry of the new leaf page. If the root node splits, then makeNewRoot is called."}
{"code":"Map < Class < ? > , String > function ( ) { Map < Class < ? > , String > map = new HashMap < > ( ) ; map . putAll ( PRIMITIVE_TYPE_NAMES . asInverseWithShortName ( ) ) ; map . putAll ( TYPES_BY_NAME . asInverseWithShortName ( ) ) ; return map ; }","nl":"Return a map of all the short names of classes we maintain mappings for. The names are keyed by the classes themselves."}
{"code":"void function ( boolean returnEntropy ) { this . returnEntropy = returnEntropy ; }","nl":"Set whether Entropy is returned to the client or not"}
{"code":"String function ( ) { return this . request . getMethod ( ) ; }","nl":"Return the path originally requested by the client."}
{"code":"int function ( ) { return ++ generatedClassSerial ; }","nl":"Internal engine method to return serial number for generated classes to ensure name uniqueness."}
{"code":"int function ( ) { return _index ; }","nl":"Index of this symbol (terminal or non terminal) in the parse tables. Note: indexes are unique among terminals and unique among non terminals, however, a terminal may have the same index as a non-terminal, etc."}
{"code":"String function ( String defaultFile ) { return selectile ( defaultFile , new ArrayList < > ( ) , \"Select file\" ) ; }","nl":"Select a folder (open a folder chooser GUI)"}
{"code":"String function ( final HttpParams params ) { if ( params == null ) { throw new IllegalArgumentException ( \"HTTP parameters may not be null\" ) ; } String charset = ( String ) params . getParameter ( CoreProtocolPNames . HTTP_CONTENT_CHARSET ) ; if ( charset == null ) { charset = HTTP . DEFAULT_CONTENT_CHARSET ; } return charset ; }","nl":"Obtains value of the  {@link CoreProtocolPNames#HTTP_CONTENT_CHARSET} parameter.If not set, defaults to ISO-8859-1."}
{"code":"void function ( int parameter ) { if ( parameter < 0 ) { parameter += 65536 ; } processCharacter ( ( char ) parameter ) ; skipBytes = state . unicodeAlternateSkipCount ; }","nl":"Process an RTF command parameter representing a Unicode character."}
{"code":"void function ( ) { acitivityController . registerUserSession ( null , mockServerMessage ) ; }","nl":"Test method for  {@link ActivityController#registerUserSession(ServerSession,ServerMessage)}. Verifies that method throws  {@code NullPointerException} when ServerSession is null."}
{"code":"void function ( MessageWriter writer , String refId ) { if ( refId == null ) { throw new NullPointerException ( \"refId is null\" ) ; } writeAttribute ( writer , SOAP_ENCODING_REF_1_1 , refId ) ; }","nl":"Writes a SOAP 1.1 ref attribute."}
{"code":"String function ( ) { return this . content ; }","nl":"Gets Full Content retrieved from the CGDS."}
{"code":"void function ( Config value ) { this . config = value ; }","nl":"Sets the value of the config property."}
{"code":"Integer function ( ) { return this . _id ; }","nl":"All get methods"}
{"code":"BrowseOffersResponse . Return function ( ) { return new BrowseOffersResponse . Return ( ) ; }","nl":"Create an instance of  {@link BrowseOffersResponse.Return }"}
{"code":"Builder function ( final String objectType ) { this . objectType = objectType ; return this ; }","nl":"Sets the type of the object for the LikeView"}
{"code":"Script function ( byte [ ] hash ) { checkArgument ( hash . length == 20 ) ; return new ScriptBuilder ( ) . op ( OP_HASH160 ) . data ( hash ) . op ( OP_EQUAL ) . build ( ) ; }","nl":"Creates a scriptPubKey that sends to the given script hash. Read BIP 16 to learn more about this kind of script."}
{"code":"String function ( ) { return getOAuthServerConfiguration ( ) . getOpenIDConnectUserInfoEndpointAccessTokenValidator ( ) ; }","nl":"Returns the access token validator class name"}
{"code":"ResourceTypeHandler function ( final String name ) { ResourceTypeHandler rt = getResourceType ( name ) ; return rt == null ? FILE : rt ; }","nl":"Tries to determine ResourceType from string and return  {@link #FILE} ifprovided string is invalid."}
{"code":"void function ( Double value ) { mPendingQueue . add ( value ) ; runIfIdle ( ) ; }","nl":"Add a single value to the pending animation queue."}
{"code":"JPanel function ( ) { return uiStack . getLastElement ( ) ; }","nl":"Gets the current panel of your stack."}
{"code":"LinearSolver < DenseMatrix64F > function ( boolean computeNorm2 , boolean computeQ ) { QRColPivDecompositionHouseholderColumn_D64 decomposition = new QRColPivDecompositionHouseholderColumn_D64 ( ) ; if ( computeQ ) return new SolvePseudoInverseQrp ( decomposition , computeNorm2 ) ; else return new LinearSolverQrpHouseCol ( decomposition , computeNorm2 ) ; }","nl":" Linear solver which uses QR pivot decomposition.  These solvers can handle singular systems and should never fail.  For singular systems, the solution might not be as accurate as a pseudo inverse that uses SVD.   For singular systems there are multiple correct solutions.  The optimal 2-norm solution is the solution vector with the minimal 2-norm and is unique.  If the optimal solution is not computed then the basic solution is returned.  See  {@link org.ejml.alg.dense.linsol.qr.BaseLinearSolverQrp}for details.  There is only a runtime difference for small matrices, 2-norm solution is slower.   Two different solvers are available.  Compute Q will compute the Q matrix once then use it multiple times. If the solution for a single vector is being found then this should be set to false.  If the pseudo inverse is being found or the solution matrix has more than one columns AND solve is being called numerous multiples times then this should be set to true. "}
{"code":"List < String > function ( ) { return acceptedC14nAlgorithms ; }","nl":"Get the list of accepted c14n algorithms. A request can contain a wst:CanonicalizationAlgorithm uri to use for c14n in an issued token. The algorithm specified must be contained in this list. The default algorithms are C14N_EXCL_OMIT_COMMENTS."}
{"code":"BigDecimal function ( ) { return this . successorId ; }","nl":"Gets the successor id."}
{"code":"String function ( ) { return feedId ; }","nl":"Gets the feed id."}
{"code":"List < NotationName > function ( ) { return Collections . unmodifiableList ( notations ) ; }","nl":"Get all of the registered notations."}
{"code":"void function ( byte [ ] dest , int off , int len ) { format . checkType ( 'U' , false ) ; getByteArrayInternal ( getByteArrayLength ( ) , dest , off , len ) ; }","nl":"Retrieves a byte array field from the stream. \\param dest The byte array where the returned value will be stored. \\param off Offset into the destination buffer to start copying into. \\param len The length should be large enough to store the entire data item, if it is not, a truncated value will be returned."}
{"code":"boolean function ( String cardName ) { boolean b = false ; for ( Card c : enemyHandCards ) { if ( c . getName ( ) . equals ( cardName ) ) { b = true ; } } return b ; }","nl":"Checks for a card on the enemy hand."}
{"code":"String function ( ) { return this . receiptDateType ; }","nl":"Gets the receipt date type."}
{"code":"void function ( int attemptsCount ) { for ( int attempt = 0 ; attempt < attemptsCount ; attempt ++ ) { blockFxThreadWithSemaphore ( ) ; sleep ( SEMAPHORE_SLEEP_IN_MILLIS , MILLISECONDS ) ; } }","nl":"Waits the given  {@code int} attempts for the event queue of JavaFX Application Thread to becompleted, as well as any new events triggered on it."}
{"code":"long function ( ) { return lifetime ; }","nl":"Get the lifetime of the Token to be returned in seconds"}
{"code":"boolean function ( String key ) { return this . json . has ( key ) ; }","nl":"Check the internal JSONObject for a key"}
{"code":"void function ( ) { canvas . setForegroundColor ( color ) ; canvas . fillCircle ( xPosition , yPosition , diameter ) ; }","nl":"Draw this ball at its current position onto the canvas."}
{"code":"void function ( ) { initializeModelImplementation ( \"org.argouml.model.mdr.MDRModelImplementation\" ) ; }","nl":"Initialize the Model subsystem with the MDR ModelImplementation."}
{"code":"int function ( final int salt , final int in ) { short v0 = hi16 ( in ) ; short v1 = lo16 ( in ) ; v0 += ( ( v1 << 2 ) + 0 ^ v1 ) + ( salt ^ ( v1 >>> 3 ) ) + 1 ; v1 += ( ( v0 << 2 ) + 2 ^ v0 ) + ( salt ^ ( v0 >>> 3 ) ) + 3 ; return result ( v0 , v1 ) ; }","nl":"A very simple bit permutation to mask a simple incrementer."}
{"code":"Object function ( String name ) { return parameters . get ( name ) ; }","nl":"See a parameter used for the transformation"}
{"code":"String function ( ) { return this . createdBy ; }","nl":"Gets the created by."}
{"code":"boolean function ( ) { if ( shortmine . isBuilding ( ) || longmine . isBuilding ( ) || smallfarm . isBuilding ( ) || largefarm . isBuilding ( ) || smallhouse . isBuilding ( ) || largehouse . isBuilding ( ) ) { return true ; } return false ; }","nl":"Returns true of the mob is currently building a structure. This is mainly used to prevent a mob from starting to mine or farm when it has not finished building a structure."}
{"code":"int function ( ) { checkState ( isOpCode ( ) ) ; return Script . decodeFromOpN ( opcode ) ; }","nl":"If this chunk is an OP_N opcode returns the equivalent integer value."}
{"code":"Book function ( Book book ) { log . debug ( \"Request to save Book : {}\" , book ) ; Book result = bookRepository . save ( book ) ; return result ; }","nl":"Save a book."}
{"code":"void function ( ) { URLConnection connection = null ; url = new URL ( composeURL ( \"MJPEG\" ) ) ; connection = url . openConnection ( ) ; connection . connect ( ) ; DataInputStream input = new DataInputStream ( new BufferedInputStream ( connection . getInputStream ( ) ) ) ; }","nl":"Starts the video stream"}
{"code":"void function ( TreeModel tm ) { if ( goRules . contains ( tm ) ) { return ; } goRules . add ( tm ) ; }","nl":"Adds a rule to the perspective that will generate child nodes for any given parent node."}
{"code":"void function ( String resultMessage ) { this . resultMessage = resultMessage ; }","nl":"Sets the result message."}
{"code":"long function ( ) { checkReady ( ) ; return mSessionId ; }","nl":"Gets the sessionId of the worker making the request. Make sure the message is ready before calling this method."}
{"code":"void function ( ) { Assert . assertEquals ( \"rwxrwxrwx\" , new Mode ( ( short ) 0777 ) . toString ( ) ) ; Assert . assertEquals ( \"rw-r-----\" , new Mode ( ( short ) 0640 ) . toString ( ) ) ; Assert . assertEquals ( \"rw-------\" , new Mode ( ( short ) 0600 ) . toString ( ) ) ; Assert . assertEquals ( \"---------\" , new Mode ( ( short ) 0000 ) . toString ( ) ) ; }","nl":"Tests the  {@link Mode#toString()} method."}
{"code":"void function ( double gamma , DenseMatrix64F A , DenseMatrix64F u , DenseMatrix64F w ) { int n = u . getNumElements ( ) ; int matrixIndex = 0 ; for ( int i = 0 ; i < n ; i ++ ) { double elementU = u . data [ i ] ; for ( int j = 0 ; j < n ; j ++ ) { A . data [ matrixIndex ++ ] += gamma * elementU * w . data [ j ] ; } } }","nl":" Performs a rank one update on matrix A using vectors u and w.  The results are stored in A.  A = A + &gamma; u wT   This is called a rank1 update because the matrix u wT has a rank of 1. "}
{"code":"void function ( ) { Sentence s = factory . createParser ( HDGTest . EXAMPLE ) ; assertNull ( event ) ; instance . sentenceRead ( new SentenceEvent ( this , s ) ) ; assertNotNull ( event ) ; assertEquals ( 123.4 , event . getHeading ( ) , 0.1 ) ; assertFalse ( event . isTrue ( ) ) ; }","nl":"Test method for {@link net.sf.marineapi.provider.AbstractProvider#sentenceRead(net.sf.marineapi.nmea.event.SentenceEvent)}."}
{"code":"void function ( String c14nAlgorithm ) { this . c14nAlgorithm = c14nAlgorithm ; }","nl":"Set the c14n algorithm to use"}
{"code":"Response function ( String message ) { return Response . serverError ( ) . entity ( message ) . build ( ) ; }","nl":"Creates an error response using the given message."}
{"code":"Iterable < E > function ( final Iterable i ) { return map ( i , new Mapper < Object , E > ( ) { public E apply ( Object o ) { return ( E ) o ; } } ) ; }","nl":"Turns an iterable into its type-safe cousin."}
{"code":"Map < String , Object > function ( ) { return responseContext ; }","nl":"Get the map of properties which affect the responses only.  These additional properties may be optionally set after a  proxy or WebClient has been created."}
{"code":"Sha256Hash function ( byte [ ] contents ) { try { MessageDigest digest = MessageDigest . getInstance ( \"SHA-256\" ) ; return new Sha256Hash ( digest . digest ( contents ) ) ; } catch ( NoSuchAlgorithmException e ) { throw new RuntimeException ( e ) ; } }","nl":"Calculates the (one-time) hash of contents and returns it as a new wrapped hash."}
{"code":"T function ( Class < T > serviceKlass ) { return ( T ) services . get ( serviceKlass ) ; }","nl":"Return a service by its public interface."}
{"code":"int function ( ) { return row ; }","nl":"Get the row that was last edited"}
{"code":"String function ( ) { String result = \"\" ; try { result = address . getPostalZone ( ) . getValue ( ) ; } catch ( NullPointerException npe ) { } return result ; }","nl":"getZip returns a String</code representing the postal zone in a UBL address."}
{"code":"void function ( String methodName , String sql , Exception ex ) { popupError ( Inter . get ( \"Error.SQLException\" ) + \":  \" + methodName + \" \" + sql + \":  \" + ex . toString ( ) ) ; }","nl":"Popup an SQL error"}
{"code":"void function ( String lang ) { _specificityC ++ ; addCondition ( Condition . createLangCondition ( lang ) ) ; }","nl":"the CSS condition :lang(Xx)"}
{"code":"long function ( JSONObject map , String name ) { Long l = ( Long ) map . get ( name ) ; return ( l != null ) ? l : 0 ; }","nl":"Return a long value from a JSONObject."}
{"code":"void function ( String expTypes ) { this . experimentTypes = expTypes ; }","nl":"Sets the Experiment Types."}
{"code":"PasswordCredentials function ( ) { return passwordCredentials ; }","nl":"Gets the value of the passwordCredentials property."}
{"code":"String function ( ) { return reason ; }","nl":"Gets the reason."}
{"code":"void function ( ) { CheckMatrixMultShape check = new CheckMatrixMultShape ( MatrixMatrixMult . class ) ; check . checkAll ( ) ; }","nl":"Checks to see that it only accepts input matrices that have compatible shapes"}
{"code":"void function ( ) { for ( int i = 0 ; i < PROPS . size ( ) ; i ++ ) ( ( AbstractSettings ) PROPS . get ( i ) ) . revertToDefault ( ) ; }","nl":"Revert all settings to their default value."}
{"code":"void function ( ArgoDiagramAppearanceEvent event , ArgoDiagramAppearanceEventListener listener ) { switch ( event . getEventType ( ) ) { case ArgoEventTypes . DIAGRAM_FONT_CHANGED : listener . diagramFontChanged ( event ) ; break ; default : LOG . error ( \"Invalid event:\" + event . getEventType ( ) ) ; break ; } }","nl":"Handle firing a diagram appearance event."}
{"code":"boolean function ( int index ) { double bottom = Math . abs ( diag [ index ] ) + Math . abs ( diag [ index + 1 ] ) ; return ( Math . abs ( off [ index ] ) <= bottom * UtilEjml . EPS ) ; }","nl":"Checks to see if the specified off diagonal element is zero using a relative metric."}
{"code":"void function ( InputStream input ) { BufferedReader reader = new BufferedReader ( new InputStreamReader ( input ) ) ; while ( true ) { String line = reader . readLine ( ) ; if ( line == null ) break ; System . out . println ( \"    \" + line ) ; } System . out . println ( ) ; }","nl":"Displays the contents of the specified input stream as text."}
{"code":"boolean function ( Message message ) { return Boolean . TRUE . equals ( message . get ( Message . PARTIAL_RESPONSE_MESSAGE ) ) ; }","nl":"Determine if the current message is a partial response."}
{"code":"void function ( OutputFieldsDeclarer declarer ) { String streamId = getOutputStreamId ( ) ; Fields names = new Fields ( outputFields ) ; logger . info ( \"{} declares {} for stream '{}'\" , new Object [ ] { this , names , streamId } ) ; declarer . declareStream ( streamId , names ) ; }","nl":"Registers the  {@link #getOutputFields() output field names}."}
{"code":"void function ( ) { for ( int i = 0 ; i < TieredBlockStoreTestUtils . TIER_PATH [ TEST_TIER_LEVEL ] . length ; i ++ ) { Assert . assertEquals ( i , mTestTierView . getDirView ( i ) . getDirViewIndex ( ) ) ; } }","nl":"Tests the  {@link StorageTierView#getDirView(int)} method."}
{"code":"Document function ( ) { DOMResult r = new DOMResult ( ) ; transformTo ( r ) ; return ( Document ) r . getNode ( ) ; }","nl":"Convenience method that returns the result of the transformation as a Document."}
{"code":"URI function ( ) { return this . uri ; }","nl":"Gets URI for connecting to remote server."}
{"code":"T function ( ) { try { return acquire ( 100 , TimeUnit . DAYS ) ; } catch ( TimeoutException e ) { throw Throwables . propagate ( e ) ; } }","nl":"Acquire a resource of type {code T} from the pool."}
{"code":"void function ( ) { if ( mIn != null ) { mIn . close ( ) ; } if ( mOut != null ) { mOut . close ( ) ; } }","nl":"Closes the underlying open streams."}
{"code":"int function ( ) { return column ; }","nl":"The column where the problem occured or  {@link #UNKNOWN UNKNOWN}."}
{"code":"void function ( byte [ ] number ) { if ( number . length != mixednumber . length ) throw new IllegalArgumentException ( \"Invalid number length provided\" ) ; for ( int i = 0 ; i < mixednumber . length ; i ++ ) mixednumber [ i ] ^= number [ i ] ; }","nl":"Adds and verifies a number sent by a player after its corresponding hash was sent"}
{"code":"double function ( Metrics . OperationMetricKey key , ASTMethodOrConstructorDeclaration node , boolean force ) { QualifiedName qname = node . getQualifiedName ( ) ; ClassStats container = getClassStats ( qname , false ) ; return container == null ? Double . NaN : container . compute ( key , node , qname . getOperation ( ) , force ) ; }","nl":"Computes the value of a metric for an operation."}
{"code":"void function ( ) { runTest ( \"katrina_image.xml\" , new YahooImageFactory ( null ) , 763 ) ; }","nl":"Tests the method for handling an input stream from Yahoo."}
{"code":"void function ( String alias ) { if ( ALIAS_PATTERN . matcher ( alias ) . matches ( ) ) { alias = alias . substring ( ALIAS_PREFIX . length ( ) ) ; StrongSwanApplication . getContext ( ) . deleteFile ( FILE_PREFIX + alias ) ; } }","nl":"Delete the certificate with the given alias"}
{"code":"void function ( AuthType authType ) { if ( authType != AuthType . SIMPLE && authType != AuthType . CUSTOM ) { throw new UnsupportedOperationException ( \"User is not supported in \" + authType . getAuthName ( ) + \" mode\" ) ; } }","nl":"Checks whether Alluxio is running in secure mode, such as  {@link AuthType#SIMPLE}, {@link AuthType#KERBEROS},  {@link AuthType#CUSTOM}."}
{"code":"void function ( MediaRouter router ) { if ( mActualRemoteControlClient != null ) { router . addRemoteControlClient ( mActualRemoteControlClient ) ; } }","nl":"Adds/registers RemoteControlClient with the  {@link MediaRouter}"}
{"code":"void function ( ) { initializeModelImplementation ( \"org.argouml.model.mdr.MDRModelImplementation\" ) ; }","nl":"Initialize the Model subsystem with the MDR ModelImplementation."}
{"code":"boolean function ( ) { return ( mob . getPositionVector ( ) . distanceTo ( buildingSpot ) < 1 ) ; }","nl":"Checks if the AI is on the building spot."}
{"code":"long function ( ) { return k ; }","nl":"k is initialised as 2 and increased by 1 each time the number is fed back"}
{"code":"int function ( ) { return _size ; }","nl":"Returns the current number of entries in the map."}
{"code":"String [ ] function ( ) { if ( Build . VERSION . SDK_INT < Build . VERSION_CODES . LOLLIPOP ) { return new String [ ] { Build . CPU_ABI , Build . CPU_ABI2 } ; } else { return LollipopSysdeps . getSupportedAbis ( ) ; } }","nl":"Return an list of ABIs we supported on this device ordered according to preference.  Use a separate inner class to isolate the version-dependent call where it won't cause the whole class to fail preverification."}
{"code":"void function ( ) { server . stop ( ) ; }","nl":"Pausa o servidor"}
{"code":"Map < String , String > function ( ) { return headers ; }","nl":"Returns the connection headers as a  {@link Map}"}
{"code":"void function ( String extension ) { for ( Iterator iter = resourceExtensions . iterator ( ) ; iter . hasNext ( ) ; ) { String ext = ( String ) iter . next ( ) ; if ( ext . equals ( extension ) ) { resourceExtensions . remove ( ext ) ; break ; } } }","nl":"This method removes a extension from the list of known extensions."}
{"code":"SearchFactory function ( ) { if ( instance == null ) instance = new SearchFactory ( ) ; return instance ; }","nl":"Provides access to the factory. Implemented with lazy instantiation."}
{"code":"void function ( ) { System . out . println ( \"listComPorts\" ) ; ComPortController . listComPorts ( ) ; fail ( \"The test case is a prototype.\" ) ; }","nl":"Test of listComPorts method, of class ComPortController."}
{"code":"void function ( ) { String notProviderClass = CustomAuthenticationProviderTest . class . getName ( ) ; mThrown . expect ( RuntimeException . class ) ; mThrown . expectMessage ( notProviderClass + \" instantiate failed :\" ) ; new CustomAuthenticationProvider ( notProviderClass ) ; }","nl":"Tests the  {@link CustomAuthenticationProvider#CustomAuthenticationProvider(String)}constructor to throw an exception when the class is not a provider."}
{"code":"void function ( String errorDescription ) { this . errorDescription = errorDescription ; }","nl":"Sets the error description"}
{"code":"boolean function ( String fldname ) { return prodscan . hasField ( fldname ) ; }","nl":"Returns true if the specified field is in either of the underlying scans."}
{"code":"boolean function ( String sinkSignature ) { return ! findSinkByMethodSignature ( sinkSignature ) . isEmpty ( ) ; }","nl":"Checks whether this result object contains a sink with the given method signature"}
{"code":"void function ( ) { URL dirUrl = ClassLoader . getSystemResource ( \"dist-list.pst\" ) ; PSTFile pstFile = new PSTFile ( new File ( dirUrl . toURI ( ) ) ) ; Assert . assertEquals ( \"Is password protected\" , pstFile . getMessageStore ( ) . isPasswordProtected ( ) , false ) ; }","nl":"Test for non-password protectedness."}
{"code":"void function ( String loc , double dist , int dir ) { Point2D coords = new Point2D ( - Math . sin ( dir * Math . PI / 180.0 ) * dist , Math . cos ( dir * Math . PI / 180.0 ) * dist ) ; links . addVertex ( loc ) ; locationPositions . put ( loc , coords ) ; }","nl":"Defines the position of a location within the map. Using this method, one location should be selected as reference position (dist=0 and dir=0) and all the other location should be placed relative to it."}
{"code":"List < String > function ( ) { return mnemonicCode ; }","nl":"Get the mnemonic code, or null if unknown."}
{"code":"int function ( String fldname ) { return offsets . get ( fldname ) ; }","nl":"Returns the offset of a specified field within a record"}
{"code":"void function ( BundleContext context ) { for ( AutoSIMDeviceConfig deviceConfig : config . devices ) { environments . deregisterConnectionFactory ( deviceConfig . name ) ; factories . remove ( deviceConfig . name ) ; } }","nl":"Implements BundleActivator.stop(). Does nothing since the framework will automatically unregister any registered services."}
{"code":"boolean function ( long fileId ) { return mOutputFileIndex . containsKey ( fileId ) ; }","nl":"Checks if there's an output file with given file id."}
{"code":"RepeatStatus function ( StepContribution sc , ChunkContext cc ) { JobExitStatus exitStatus = fetcherExecutionContextImpl . captureSourceMetadata ( ) ; sc . setExitStatus ( exitStatus . getExitStatus ( ) ) ; return RepeatStatus . FINISHED ; }","nl":"Step execution implementation"}
{"code":"int function ( ) { final View child = findOneVisibleChild ( layoutManager . getChildCount ( ) - 1 , - 1 , false , true ) ; return child == null ? RecyclerView . NO_POSITION : recyclerView . getChildAdapterPosition ( child ) ; }","nl":"Returns the adapter position of the last visible view. This position does not include adapter changes that were dispatched after the last layout pass."}
{"code":"String function ( ConfigurationKey key , String defaultValue ) { return config . getString ( key , defaultValue ) ; }","nl":"Returns the string value of a configuration property."}
{"code":"int function ( Buffer buff , int offset , String oldVal , String newVal ) { Block blk = buff . block ( ) ; if ( isTempBlock ( blk ) ) return - 1 ; else return new SetStringRecord ( txnum , blk , offset , oldVal , newVal ) . writeToLog ( ) ; }","nl":"Writes a setstring record to the log, and returns its lsn. Updates to temporary files are not logged; instead, a \"dummy\" negative lsn is returned."}
{"code":"GenericJSONBuilder function ( String name ) { place_name = name ; return this ; }","nl":"Not required"}
{"code":"DiffBuilder function ( ) { ignoreComments = true ; return this ; }","nl":"Will remove all comment-Tags \"&lt;!-- Comment --&gt;\" from test- and control-XML before comparing."}
{"code":"ResponseEntity < Void > function ( @ PathVariable String id ) { log . debug ( \"REST request to delete DishCollection : {}\" , id ) ; dishCollectionService . delete ( id ) ; return ResponseEntity . ok ( ) . headers ( HeaderUtil . createEntityDeletionAlert ( \"dishCollection\" , id . toString ( ) ) ) . build ( ) ; }","nl":"DELETE  /dish-collections/:id : delete the \"id\" dishCollection."}
{"code":"CategoricalDistribution function ( RandomVariable [ ] X , AssignmentProposition [ ] e , BayesianNetwork bn , int N ) { double [ ] W = new double [ ProbUtil . expectedSizeOfCategoricalDistribution ( X ) ] ; for ( int j = 0 ; j < N ; j ++ ) { Pair < Map < RandomVariable , Object > , Double > x_w = weightedSample ( bn , e ) ; W [ ProbUtil . indexOf ( X , x_w . getFirst ( ) ) ] += x_w . getSecond ( ) ; } return new ProbabilityTable ( W , X ) . normalize ( ) ; }","nl":"The LIKELIHOOD-WEIGHTING algorithm in Figure 14.15. For answering queries given evidence in a Bayesian Network."}
{"code":"int function ( Object key ) { int prime = _prime ; int hash = hashCode ( key ) % prime ; final Object [ ] keys = _keys ; while ( true ) { Object mapKey = keys [ hash ] ; if ( mapKey == null ) { return NULL ; } else if ( mapKey == key ) { return _values [ hash ] ; } hash = ( hash + 1 ) % prime ; } }","nl":"Puts a new value in the property table with the appropriate flags"}
{"code":"byte [ ] function ( ) { int itemLen = getByteArrayLength ( ) ; byte [ ] unpacked = new byte [ itemLen ] ; getByteArrayInternal ( itemLen , unpacked , 0 , itemLen ) ; return unpacked ; }","nl":"Retrieves a byte array field from the stream. Creates a new byte array that is the size of the object being retrieved."}
{"code":"SAMLSSOReqValidationResponseDTO function ( String sessionId ) { SPInitLogoutRequestProcessor logoutReqProcessor = new SPInitLogoutRequestProcessor ( ) ; SAMLSSOReqValidationResponseDTO validationResponseDTO = logoutReqProcessor . process ( null , sessionId , null ) ; return validationResponseDTO ; }","nl":"Invalidates the SSO session for the given session ID"}
{"code":"void function ( PropertyChangeListener listener , Object modelElement ) { addElementListener ( listener , modelElement ) ; }","nl":"Initialise the appropriate model change listeners  for the given modelelement to the given listener. Overrule this when you need more than  listening to all events from the base modelelement."}
{"code":"long function ( ) { return tStart ; }","nl":"Gets the Global Chromosomal strt."}
{"code":"RegistrationRequest function ( ) { return new RegistrationRequest ( ) ; }","nl":"Create an instance of  {@link RegistrationRequest }"}
{"code":"boolean function ( Object file , SuffixFilter [ ] filters ) { if ( ! ( file instanceof File ) ) { return false ; } String fileName = ( ( File ) file ) . getName ( ) ; if ( filters != null ) { for ( int i = 0 ; i < filters . length ; i ++ ) { if ( fileName . endsWith ( filters [ i ] . getSuffix ( ) ) ) { return true ; } } } return false ; }","nl":"Tells if the filename matches one of the given suffixes."}
{"code":"Crypto function ( ) { return signatureCrypto ; }","nl":"Get the signature Crypto object"}
{"code":"void function ( ) { maxMemory = 0 ; }","nl":"Reset the maximum amount of memory recorded."}
{"code":"void function ( File sourceCodeFile ) { this . sourceCodeFile = sourceCodeFile ; }","nl":"Set the File associated with the current source file. While this may be set to null, the exclude/include facilities will not work properly without a File."}
{"code":"void function ( Node node ) { closed . removeValue ( node , false ) ; }","nl":"Remove a node from the closed list"}
{"code":"String function ( ) { return new String ( _messageBody , _encoding ) ; }","nl":"Gets the message body, as a string. The string will be decoded as UTF-16LE, with no byte-order-mark. This is mostly useful after receiving a message.  If the message body is not a legal UTF-16LE bytestream, then this method will return a rubbish string."}
{"code":"void function ( Path path , int [ ] destinationPos ) { model . moveCharacter ( path , destinationPos ) ; }","nl":"Method called only from the Viewer. Sends the move command (in a designated path) from input to the Model and triggers an interactive event, if possible."}
{"code":"boolean function ( ) { return ignoreExceptions ; }","nl":"Gets the configuration whether to skip failing rules (true) or whether to throw a a RuntimeException and abort the processing for the first failing rule."}
{"code":"int function ( int reps ) { int dummy = 0 ; for ( int i = 0 ; i < reps ; i ++ ) { StringBuilder sb = new StringBuilder ( ) ; for ( String comp : components ) { if ( sb . length ( ) > 0 ) { sb . append ( DELIMITER_STRING ) ; } sb . append ( comp ) ; } dummy ^= sb . toString ( ) . length ( ) ; } return dummy ; }","nl":"Only appends delimiter if the accumulated string is non-empty. Note: this isn't a candidate implementation for Joiner since it fails on leading empty components."}
{"code":"void function ( Map < String , List < String >> m ) { for ( String key : m . keySet ( ) ) { SortedSet < String > vals = get ( key ) ; if ( vals == null ) { vals = new TreeSet < String > ( ) ; put ( key , vals ) ; } vals . addAll ( m . get ( key ) ) ; } }","nl":"Convenience method to merge a Map>."}
{"code":"int function ( ) { int hashval = 0 ; for ( Constant c : vals . values ( ) ) hashval += c . hashCode ( ) ; return hashval ; }","nl":"The hashcode of a GroupValue object is the sum of the hashcodes of its field values."}
{"code":"int function ( int lane , int player ) { int tile = 0 ; return tile ; }","nl":"Returns the next available tile in the specified lane that is furthest from the base. A tile is available if it's not occupied by a card."}
{"code":"String function ( ) { return transformedTokenIdentifier ; }","nl":"Get the identifier corresponding to a transformed version of this token"}
{"code":"void function ( String loadedInCats ) { this . loadedInCats = loadedInCats ; }","nl":"Sets the loaded in cats."}
{"code":"int function ( ) { return this . decisions ; }","nl":"Provide number of decisions made by this MutationFilter."}
{"code":"String function ( Date date ) { return formatUTC ( date , DateTimeFormat . SQL , true ) ; }","nl":"Format UTC dateTime to local dateTime in SQL format"}
{"code":"int function ( ) { return mSize ; }","nl":"get stack size."}
{"code":"void function ( ) { final Preferences prefs = Preferences . userRoot ( ) ; prefs . putDouble ( PrefKeys . LAST_VERSION , getVersion ( ) ) ; }","nl":"Sets the last version recorded as having run to the currently running version."}
{"code":"String function ( ) { return host ; }","nl":"Return the hostname the servlet container is bound to."}
{"code":"RepositoryCommit function ( RepositoryCommit commit ) { if ( commits . add ( commit ) ) { authorCount = - 1 ; return commit ; } return null ; }","nl":"Adds a commit to the push entry object as long as the commit is not a duplicate."}
{"code":"void function ( ) { assertEquals ( cal . get ( Calendar . MONTH ) + 1 , instance . getMonth ( ) ) ; }","nl":"Test method for  {@link net.sf.marineapi.nmea.util.Date#getMonth()}."}
{"code":"int function ( ) { TableInfo idxti = new TableInfo ( \"\" , schema ( ) ) ; int rpb = BLOCK_SIZE / idxti . recordLength ( ) ; int numblocks = si . recordsOutput ( ) / rpb ; return HashIndex . searchCost ( numblocks , rpb ) ; }","nl":"Estimates the number of block accesses required to find all index records having a particular search key. The method uses the table's metadata to estimate the size of the index file and the number of index records per block. It then passes this information to the traversalCost method of the appropriate index type, which provides the estimate."}
{"code":"void function ( List < Node > nodes , RuleContext ctx , Language language ) { RuleChainVisitor visitor = getRuleChainVisitor ( language ) ; if ( visitor != null ) { visitor . visitAll ( nodes , ctx ) ; } }","nl":"Apply the RuleChain to the given Nodes using the given RuleContext, for those rules using the given Language."}
{"code":"Builder function ( ) { return new Builder ( ) . fromAddressPair ( this ) ; }","nl":"Gets a Builder configured as this object."}
{"code":"void function ( int number , String text ) { if ( errorElement == null ) { errorElement = document . createElement ( \"Error\" ) ; document . getDocumentElement ( ) . appendChild ( errorElement ) ; } errorElement . setAttribute ( \"number\" , String . valueOf ( number ) ) ; if ( Utils . isNotEmpty ( text ) ) errorElement . setAttribute ( \"text\" , text ) ; }","nl":"Sets an error number with a custom message."}
{"code":"void function ( final String instanceName ) { this . instanceName = instanceName ; }","nl":"Set the unique name of the editor"}
{"code":"boolean function ( Combination combination ) { if ( configurations . containsKey ( combination . toString ( ) ) ) { return configurations . get ( combination . toString ( ) ) ; } return false ; }","nl":"Returns whether or not to rebuild the  {@link hudson.model.Run} If thecombination is not in the database, the method returns true, meaning the run will build."}
{"code":"void function ( boolean consoleFlag ) { progressMonitor . consoleMode = consoleFlag ; }","nl":"Sets Console Flag. When set to true Progress Monitor Messages are displayed to System.out."}
{"code":"boolean function ( StringBuilder builder , String queryString , String paramName ) { String rawParam = HTTPTransportUtils . getRawQueryStringParameter ( queryString , paramName ) ; if ( rawParam == null ) { return false ; } if ( builder . length ( ) > 0 ) { builder . append ( '&' ) ; } builder . append ( rawParam ) ; return true ; }","nl":"Find the raw query string parameter indicated and append it to the string builder.  The appended value will be in the form 'paramName=paramValue' (minus the quotes)."}
{"code":"Object function ( String name , Scriptable start ) { if ( name . equals ( \"dim\" ) ) return new Integer ( dim ) ; return NOT_FOUND ; }","nl":"Get the named property.  Handles the \"dim\" property and returns NOT_FOUND for all other names."}
{"code":"Vector function ( ) { return new Vector ( newFeatures ) ; }","nl":"Get all features not in the source."}
{"code":"ClassStats function ( String className , boolean createIfNotFound ) { if ( createIfNotFound && ! nestedClasses . containsKey ( className ) ) { nestedClasses . put ( className , new ClassStats ( ) ) ; } return nestedClasses . get ( className ) ; }","nl":"Finds a ClassStats in the direct children of this class. This can only be a directly nested class, for example in the following snippet, A can get B and B can get C but A cannot get C without asking B.   class MyClass { // ClassStats A class MyNested { // ClassStats B class MyDeeplyNested { // ClassStats C } } }  "}
{"code":"void function ( String gene ) { this . gene = gene ; }","nl":"Sets the Gene Symbol."}
{"code":"void function ( String location ) { if ( ! containsLocation ( location ) ) { resourceLocations . add ( location ) ; } }","nl":"Adds a location (path) to the list of known locations. Locations are searched in the order they are added, so for best performance add the most likely locations first."}
{"code":"void function ( JournalEntry entry ) { if ( mIsClosed ) { throw new IOException ( ExceptionMessage . JOURNAL_WRITE_AFTER_CLOSE . getMessage ( ) ) ; } mJournal . getJournalFormatter ( ) . serialize ( entry . toBuilder ( ) . setSequenceNumber ( mNextEntrySequenceNumber ++ ) . build ( ) , mOutputStream ) ; }","nl":"Writes an entry to the checkpoint file. The entry should not have its sequence number set. This method will add the proper sequence number to the passed in entry."}
{"code":"boolean function ( byte b ) { return HTTP_CONTROLS [ b ] ; }","nl":"Determines whether a specified (US-ASCII) character is an HTTP control character"}
{"code":"void function ( final String name , final CookieSpecFactory factory ) { if ( name == null ) { throw new IllegalArgumentException ( \"Name may not be null\" ) ; } if ( factory == null ) { throw new IllegalArgumentException ( \"Cookie spec factory may not be null\" ) ; } registeredSpecs . put ( name . toLowerCase ( Locale . ENGLISH ) , factory ) ; }","nl":"Registers a  {@link CookieSpecFactory} with the given identifier.If a specification with the given name already exists it will be overridden. This nameis the same one used to retrieve the  {@link CookieSpecFactory}from  {@link #getCookieSpec(String)}."}
{"code":"BoundingBox function ( BoundingBox bb ) { latMin = Math . max ( latMin , bb . latMin ) ; lonMin = Math . max ( lonMin , bb . lonMin ) ; latMax = Math . min ( latMax , bb . latMax ) ; lonMax = Math . min ( lonMax , bb . lonMax ) ; return this ; }","nl":"Adjusts the box so that the result is the intersection of both boxes."}
{"code":"ExtensionMechanismsHelper function ( ) { return impl ; }","nl":"The component we are decorating."}
{"code":"GeneralRange < T > function ( Comparator < ? super T > comparator , @ Nullable T lower , BoundType lowerType , @ Nullable T upper , BoundType upperType ) { return new GeneralRange < T > ( comparator , true , lower , lowerType , true , upper , upperType ) ; }","nl":"Returns everything between the endpoints relative to the specified comparator, with the specified endpoint behavior."}
{"code":"void function ( InputStream sourceCode , RuleSets ruleSets , RuleContext ctx ) { try { processSourceCode ( new InputStreamReader ( sourceCode , configuration . getSourceEncoding ( ) ) , ruleSets , ctx ) ; } catch ( UnsupportedEncodingException uee ) { throw new PMDException ( \"Unsupported encoding exception: \" + uee . getMessage ( ) ) ; } }","nl":"Processes the input stream against a rule set using the given input encoding."}
{"code":"void function ( ) { String otherId = \"a different id\" ; client . setClientId ( otherId ) ; service . clearApprovedSitesForClient ( client ) ; Mockito . when ( repository . getByClientId ( otherId ) ) . thenReturn ( new HashSet < ApprovedSite > ( ) ) ; Mockito . verify ( repository , never ( ) ) . remove ( any ( ApprovedSite . class ) ) ; }","nl":"Test clearing approved sites for a client that doesn't have any stored approved sites. Ensure that the repository's remove() method is never called in this case."}
{"code":"void function ( String prefix , String uri ) { mapping . put ( prefix , uri ) ; try { writer . setPrefix ( prefix , uri ) ; } catch ( XMLStreamException e ) { throw new SAXException ( e ) ; } }","nl":"Method startPrefixMapping."}
{"code":"ClassLoader function ( ClassLoader loader , Class < ? > [ ] interfaces ) { if ( canSeeAllInterfaces ( loader , interfaces ) ) { return loader ; } ProxyClassLoader combined = new ProxyClassLoader ( loader , interfaces ) ; for ( Class < ? > currentInterface : interfaces ) { combined . addLoader ( currentInterface . getClassLoader ( ) ) ; } return combined ; }","nl":"Return a classloader that can see all the given interfaces If the given loader can see all interfaces then it is used. If not then a combined classloader of all interface classloaders is returned."}
{"code":"void function ( ) { mTestStream = new TestBufferedBlockOutStream ( 1L , BLOCK_LENGTH , BlockStoreContext . get ( ) ) ; }","nl":"Sets up the stream before a test runs."}
{"code":"Constant function ( String fldname ) { if ( sch . type ( fldname ) == INTEGER ) return new IntConstant ( rf . getInt ( fldname ) ) ; else return new StringConstant ( rf . getString ( fldname ) ) ; }","nl":"Returns the value of the specified field, as a Constant. The schema is examined to determine the field's type. If INTEGER, then the record file's getInt method is called; otherwise, the getString method is called."}
{"code":"NodeVisitor function ( Node parent , Node n ) { return enter ( n ) ; }","nl":"Begin normal traversal of a subtree rooted at  {@code n}. This gives the visitor the option of changing internal state or returning a new visitor which will be used to visit the children of  {@code n}.  The default implementation of this method is to call {@link #enter(Node) enter(n)}, as most subclasses do not need to know the parent of the node  {@code n}."}
{"code":"ThreadFactoryBuilder function ( ThreadFactory backingThreadFactory ) { this . backingThreadFactory = checkNotNull ( backingThreadFactory ) ; return this ; }","nl":"Sets the backing  {@link ThreadFactory} for new threads created with this ThreadFactory. Threadswill be created by invoking #newThread(Runnable) on this backing  {@link ThreadFactory}."}
{"code":"Vector < ClassdiagramNode > function ( ) { return new Vector < ClassdiagramNode > ( downlinks ) ; }","nl":"Get the downlinks of this node."}
{"code":"Long function ( ) { return testId ; }","nl":"Gets the test id."}
{"code":"String function ( Object base ) { if ( base instanceof Fig ) { base = ( ( Fig ) base ) . getOwner ( ) ; } if ( base == null ) return null ; if ( base instanceof CommentEdge ) { return ( String ) ( ( CommentEdge ) base ) . getUUID ( ) ; } return Model . getFacade ( ) . getUUID ( base ) ; }","nl":"Return the UUID of the element."}
{"code":"long function ( String key , long defaultValue ) { String val = getString ( key , null ) ; if ( StringUtils . isEmpty ( val ) ) { return defaultValue ; } return com . gitblit . utils . FileUtils . convertSizeToLong ( val , defaultValue ) ; }","nl":"Returns an long filesize from a string value such as 50m or 50mb"}
{"code":"String function ( String s ) { StringBuffer sbuf = new StringBuffer ( ) ; int len = s . length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { int ch = s . charAt ( i ) ; append ( sbuf , ch ) ; } return sbuf . toString ( ) ; }","nl":"Encode a string to the \"x-www-form-urlencoded\" form, enhanced with the UTF-8-in-URL proposal. This is what happens:     The ASCII characters 'a' through 'z', 'A' through 'Z', and '0' through '9' remain the same.    The unreserved characters - _ . ! ~  ' ( ) remain the same.    The space character ' ' is converted into a plus sign '+'.    All other ASCII characters are converted into the 3-character string \"%xy\", where xy is the two-digit hexadecimal representation of the character code    All non-ASCII characters are encoded in two steps: first to a sequence of 2 or 3 bytes, using the UTF-8 algorithm; secondly each of these bytes is encoded as \"%xx\". "}
{"code":"Timestamp function ( ) { return this . createdDate ; }","nl":"Gets the created date."}
{"code":"ELEvaluator function ( Element event , SyncCoordAction appInst , Configuration conf ) { return createInstancesELEvaluator ( \"coord-action-create\" , event , appInst , conf ) ; }","nl":"Create a new Evaluator to resolve the EL functions and variables using action creation time (Phase 2)"}
{"code":"QName function ( ) { return qname ; }","nl":"Gets the value of the qname property."}
{"code":"void function ( TransformerFactory f ) { factory = f ; }","nl":"Set the TraX factory to use."}
{"code":"int function ( ) { return mix ( gen . getAndIncrement ( ) ) ; }","nl":"Produce the next identifier."}
{"code":"void function ( Exchange exchange ) { }","nl":"Called on completion of the MEP for which the Conduit was required."}
{"code":"Executor function ( ) { return new Executor ( ) { @ Override public void execute ( Runnable command ) { MoreExecutors . newThread ( serviceName ( ) , command ) . start ( ) ; } } ; }","nl":"Returns the  {@link Executor} that will be used to run this service. Subclasses may overridethis method to use a custom  {@link Executor}, which may configure its worker thread with a specific name, thread group or priority. The returned executor's  {@link Executor#execute(Runnable) execute()} method is called when this service is started, and shouldreturn promptly. The default implementation returns a new  {@link Executor} that sets the name of its threadsto the string returned by  {@link #serviceName}"}
{"code":"void function ( ) { rmb . setOriginId ( \"ORIGIN\" ) ; assertTrue ( rmb . toString ( ) . contains ( \",ORIGIN,RUSKI,\" ) ) ; assertEquals ( \"ORIGIN\" , rmb . getOriginId ( ) ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.RMBParser#setOriginId(String)}."}
{"code":"Object function ( String name ) { for ( Object mFeature : obsoleteFeatures ) { if ( name . equals ( Model . getFacade ( ) . getName ( mFeature ) ) ) { return mFeature ; } } return null ; }","nl":"Get a feature from the current classifier not yet modeled."}
{"code":"void function ( AbstractDosPlugin instance ) { String result = instance . getVersion ( ) ; assertTrue ( result . length ( ) > 0 ) ; }","nl":"Test of getVersion method, of class TestDosAttack."}
{"code":"Object function ( String name ) { for ( Object feature : obsoleteFeatures ) { if ( Model . getFacade ( ) . isAAttribute ( feature ) && name . equals ( Model . getFacade ( ) . getName ( feature ) ) ) { return feature ; } } return null ; }","nl":"Get a attribute from the current classifier not yet modeled."}
{"code":"Timestamp function ( ) { return this . endDate ; }","nl":"Gets the end date."}
{"code":"String function ( String graphName , String sdd , String user , String commitMessage , String branchNameA , String branchNameB , String triples ) { return String . format ( \"USER \"%s\" %n\" + \"MESSAGE \"%s\" %n\" + \"MERGE GRAPH <%s> SDD <%s> BRANCH \"%s\" INTO \"%s\" WITH { %n\" + \" %s %n\" + \"}\" , user , commitMessage , graphName , sdd , branchNameA , branchNameB , triples ) ; }","nl":"Create MERGE-WITH query."}
{"code":"String function ( ) { return applicationDescription ; }","nl":"Gets the description of the third-party application."}
{"code":"void function ( ) { double vdop = instance . getVerticalDOP ( ) ; assertEquals ( 1.0 , vdop , 0.001 ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.GSAParser#getVerticalDOP()}."}
{"code":"String function ( ) { return code ; }","nl":"Gets the authorization code"}
{"code":"void function ( ) { time . setMinutes ( 30 ) ; assertEquals ( 30 , time . getMinutes ( ) ) ; }","nl":"Test method for  {@link net.sf.marineapi.nmea.util.Time#setMinutes(int)}."}
{"code":"SignatureProperties function ( ) { return signatureProperties ; }","nl":"Get the SignatureProperties to use."}
{"code":"long function ( K key , long x , LongBinaryOperator accumulatorFunction ) { checkNotNull ( accumulatorFunction ) ; return getAndUpdate ( key , oldValue -> accumulatorFunction . applyAsLong ( oldValue , x ) ) ; }","nl":"Updates the value currently associated with  {@code key} by combining it with {@code x}via the specified accumulator function, returning the old value.  The previous value associated with  {@code key} (or zero, if there is none) is passed as the first argumentto  {@code accumulatorFunction}, and  {@code x} is passed as the second argument."}
{"code":"void function ( Object o ) { }","nl":"Initialized some new modelelement o."}
{"code":"Method function ( final String method ) { return getMethod ( method , false ) ; }","nl":"Returns a  {@link Method} corresponding to the given Java methoddeclaration."}
{"code":"void function ( String string , Exception exception ) { if ( sIsLogEnabled ) { Log . e ( sApplicationTag , getContent ( getCurrentStackTraceElement ( ) ) + \" >\" + exception . getMessage ( ) + \" >\" + exception . getStackTrace ( ) + \"   \" + string ) ; exception . printStackTrace ( ) ; } }","nl":"Send an ERROR log message."}
{"code":"void function ( ) { ASTElement elm = element ( \"a\" ) ; ASTElement elm2 = element ( \"b\" ) ; tagList . openTag ( elm ) ; tagList . openTag ( elm2 ) ; tagList . closeTag ( elm ) ; assertFalse ( elm . isUnclosed ( ) ) ; assertTrue ( elm2 . isUnclosed ( ) ) ; }","nl":"&lt;a&gt; &lt;b&gt; &lt;/a&gt;"}
{"code":"void function ( String srcFileName ) { this . srcFileName = srcFileName ; }","nl":"Sets the src file name."}
{"code":"IConfigurationFactory function ( ) { return SINGLETON ; }","nl":"Returns the instance of the singleton."}
{"code":"boolean function ( ) { if ( s2 . next ( ) ) return true ; else { s2 . beforeFirst ( ) ; return s2 . next ( ) && s1 . next ( ) ; } }","nl":"Moves the scan to the next record. The method moves to the next RHS record, if possible. Otherwise, it moves to the next LHS record and the first RHS record. If there are no more LHS records, the method returns false."}
{"code":"V function ( ) { return value ; }","nl":"Returns the value corresponding to this entry."}
{"code":"int function ( ) { return xPosition ; }","nl":"return the horizontal position of this ball"}
{"code":"long function ( byte [ ] buf ) { long sum = 0 ; for ( int i = 0 ; i < buf . length ; ++ i ) { sum += 255 & buf [ i ] ; } return sum ; }","nl":"Calculate checksum"}
{"code":"void function ( final Collection buffers ) { if ( CollectionUtils . exists ( buffers , PredicateUtils . nullPredicate ( ) ) ) { throw new NullPointerException ( \"Cannot accept null buffers\" ) ; } }","nl":"Utility method that throws a NullPointerException if  any of the buffers in the collection is null."}
{"code":"void function ( ) { RPCFileReadRequest req = new RPCFileReadRequest ( TEMP_UFS_FILE_ID , - 1 , LENGTH ) ; assertInvalid ( req ) ; }","nl":"Tests the  {@link RPCFileReadRequest#RPCFileReadRequest(long,long,long)} constructor with anegative offset."}
{"code":"boolean function ( char d ) { return d == ( char ) tok . ttype ; }","nl":"Returns true if the current token is the specified delimiter character."}
{"code":"void function ( boolean expression , String message ) { if ( ! expression ) { throw new IllegalArgumentException ( message ) ; } }","nl":"Assert a boolean expression, throwing  {@code IllegalArgumentException}if the test result is  {@code false}. Assert.isTrue(i &gt; 0, \"The value must be greater than zero\");"}
{"code":"void function ( ) { Whitebox . setInternalState ( LoginUser . class , \"sLoginUser\" , ( String ) null ) ; }","nl":"Resets the singleton  {@link LoginUser} to null."}
{"code":"List < T > function ( List < T > l ) { if ( l != null ) return l ; return Collections . emptyList ( ) ; }","nl":"Return an empty non-null list if the argument list is null."}
{"code":"URI function ( final URI uri , final HttpHost target ) { return rewriteURI ( uri , target , false ) ; }","nl":"A convenience method for {@link URIUtils#rewriteURI(URI,HttpHost,boolean)} that always keeps thefragment."}
{"code":"void function ( ) { mListeners . clear ( ) ; }","nl":"Remove all listeners."}
{"code":"IJavascriptRuntime function ( ) { if ( runtime == null ) { runtime = new JavascriptRuntime ( ) ; } return runtime ; }","nl":"Gets a singleton instance of this class, creating one if it doesn't yet exist."}
{"code":"Date function ( ) { return serverStatus . bootDate ; }","nl":"Returns the boot date of the Gitblit server."}
{"code":"void function ( String name ) { this . name = name ; }","nl":"Sets the name of the gene set."}
{"code":"void function ( ) { assertEquals ( - 1.2 , hdg . getVariation ( ) , 0.1 ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.HDGParser#getVariation()}."}
{"code":"StoredPaymentChannelClientStates function ( Wallet wallet ) { return ( StoredPaymentChannelClientStates ) wallet . getExtensions ( ) . get ( EXTENSION_ID ) ; }","nl":"Returns this extension from the given wallet, or null if no such extension was added."}
{"code":"void function ( ) { Cache < K , V > cache = getOpenIDCache ( ) ; if ( cache != null ) { cache . removeAll ( ) ; } }","nl":"Remove everything in the cache."}
{"code":"void function ( String name ) { this . loginName = name ; }","nl":"Sets the optional login name"}
{"code":"void function ( ) { assertEquals ( Datum . WGS84 , instance . getDatum ( ) ) ; }","nl":"Test for getDatum()"}
{"code":"void function ( Source source ) { if ( source != null && ( source . getSystemId ( ) == null || source . getSystemId ( ) . length ( ) == 0 ) ) { source . setSystemId ( getDefaultSystemId ( ) ) ; } }","nl":"Ensure that the source has a systemId"}
{"code":"List function ( ) { return newFeatures ; }","nl":"Get all features not in the source."}
{"code":"void function ( final OpenIDRememberMeDO rememberMe ) { cache . updateTokenData ( rememberMe ) ; Thread thread = new Thread ( ) { @ Override public void run ( ) { try { dao . updateTokenData ( rememberMe ) ; } catch ( Exception e ) { log . error ( \"Failed to update RememberMe token.\" , e ) ; } } } ; thread . start ( ) ; }","nl":"Updates the rememberMe token"}
{"code":"void function ( ) { serverSocket . close ( ) ; }","nl":"Attempts to close the current serverSocket."}
{"code":"void function ( int lane_id ) { this . lane_id = lane_id ; }","nl":"Sets the lane_id."}
{"code":"void function ( DefaultMapNode node ) { nodes . put ( node . getId ( ) , node ) ; }","nl":"Adds a node to the central node hashtable."}
{"code":"CommitModel function ( ) { return commitModel ; }","nl":"save the commit information and later output it"}
{"code":"void function ( ) { char value = RequestInput . getChar ( \"What are you entering? \" ) ; System . out . println ( \"The lucky number was \" + value ) ; }","nl":"Test method for {@link com.sqa.em.util.helper.RequestInput#getChar(java.lang.String)}."}
{"code":"boolean function ( File file ) { return config . load ( file ) ; }","nl":"Load the configuration from a specified file."}
{"code":"void function ( List < Interceptor < ? extends Message >> interceptors ) { inInterceptors = interceptors ; }","nl":"Sets the list of in interceptors which pre-process  the responses from remote services."}
{"code":"void function ( ConfigurationKey key , boolean newValue ) { config . setBoolean ( key , newValue ) ; }","nl":"Sets the boolean value of a configuration property."}
{"code":"String function ( ) { return mSubjectSecondary ; }","nl":"Get the secondary subject of this certificate (either CN or OU if primary subject is O, empty otherwise)"}
{"code":"Object function ( ) { return source ; }","nl":"Returns the object that originated this event (not the object that originated the wrapped event). This is generally an  {@link EventBus}."}
{"code":"void function ( DAVTransaction transaction , DAVResource resource ) { try { resource . delete ( ) ; transaction . setStatus ( 204 ) ; } catch ( DAVMultiStatus multistatus ) { multistatus . write ( transaction ) ; } }","nl":"Process the DELETE method."}
{"code":"void function ( String tenantDomain ) { this . tenantDomain = tenantDomain ; }","nl":"Set the tenant domain which the authentication request is comming from"}
{"code":"void function ( ) { Assert . assertEquals ( mTestDir . getCapacityBytes ( ) , mTestDirView . getCapacityBytes ( ) ) ; }","nl":"Tests the  {@link StorageDirView#getCapacityBytes()} method."}
{"code":"String function ( ) { if ( uniqueName == null ) { return null ; } String s = PersistenceManager . getInstance ( ) . getProjectBaseName ( project ) ; if ( uniqueName . length ( ) > 0 ) { s += \"_\" + uniqueName ; } if ( ! s . endsWith ( getZipFileExtension ( ) ) ) { s += getZipFileExtension ( ) ; } return s ; }","nl":"Returns a unique member's name for storage in a zipfile. The project's base name is prepended followed by an underscore '_'. The extension is appended. Used by \"argo.tee\"."}
{"code":"void function ( int peakStart ) { this . peakStart = peakStart ; }","nl":"Sets the start of the peak of the ROI"}
{"code":"void function ( ) { long lockId1 = mLockManager . lockBlock ( TEST_SESSION_ID , TEST_BLOCK_ID , BlockLockType . READ ) ; long lockId2 = mLockManager . lockBlock ( TEST_SESSION_ID , TEST_BLOCK_ID , BlockLockType . READ ) ; Assert . assertNotEquals ( lockId1 , lockId2 ) ; }","nl":"Tests the  {@link BlockLockManager#lockBlock(long,long,BlockLockType)} method."}
{"code":"char [ ] function ( final byte [ ] data ) { final int len = data . length ; final char [ ] out = new char [ len << 1 ] ; for ( int i = 0 , j = 0 ; i < len ; i ++ ) { out [ j ++ ] = CHARS [ ( 0xF0 & data [ i ] ) >>> 4 ] ; out [ j ++ ] = CHARS [ 0x0F & data [ i ] ] ; } return out ; }","nl":"Encode given data as lower case hex chars."}
{"code":"void function ( ) { assertTrue ( mwv . isTrue ( ) ) ; mwv . setTrue ( false ) ; assertFalse ( mwv . isTrue ( ) ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.MWVParser#setTrue(boolean)}."}
{"code":"int function ( ) { return maxUpdateRetries ; }","nl":"Returns the number of times to retry a cache update on failure"}
{"code":"void function ( int player , PlayerTickEvent event ) { if ( playerList . containsKey ( player ) ) { if ( playerList . get ( player ) [ 0 ] < 1 ) { runPlayer ( player , event ) ; } playerList . put ( player , new int [ ] { playerList . get ( player ) [ 0 ] - 1 , playerList . get ( player ) [ 1 ] } ) ; } else { playerList . put ( player , new int [ ] { 1200 , 0 } ) ; } }","nl":"Takes a playerID as a arg, and checks if they are currently being ticked.   Takes care of handling adding them to the tick, and incrementing ticks."}
{"code":"void function ( long deliveryTag ) { this . deliveryTag = deliveryTag ; }","nl":"set delivery tag of the message assigned by the transport"}
{"code":"StoredClientChannel function ( Sha256Hash id , Sha256Hash contractHash ) { lock . lock ( ) ; try { Set < StoredClientChannel > setChannels = mapChannels . get ( id ) ; for ( StoredClientChannel channel : setChannels ) { if ( channel . contract . getHash ( ) . equals ( contractHash ) ) return channel ; } return null ; } finally { lock . unlock ( ) ; } }","nl":"Finds a channel with the given id and contract hash and returns it, or returns null."}
{"code":"void function ( ViewGroup container , int position , Object object ) { destroyItem ( ( View ) container , position , object ) ; }","nl":"Remove a page for the given position.  The adapter is responsible for removing the view from its container, although it only must ensure this is done by the time it returns from  {@link #finishUpdate(ViewGroup)}."}
{"code":"void function ( ExceptionListener exceptionListener ) { this . exceptionListener = exceptionListener ; }","nl":"Set exception call-back listener."}
{"code":"void function ( ) { model . triggerEvent ( ) ; }","nl":"Method called by the Viewer to send the trigger command to the model."}
{"code":"String function ( ) { return caseId ; }","nl":"Gets the Case ID."}
{"code":"int function ( String path ) { if ( isWindows ( ) ) { throw new UnsupportedOperationException ( \"The method JnaUtils.getFilemode is not supported under Windows.\" ) ; } Filestat stat = getFilestat ( path ) ; if ( stat == null ) return - 1 ; return stat . mode ; }","nl":"Get the file mode bits of a file. This method is only implemented for OSes of the Unix family. It returns the file mode information as available in the st_mode member of the resulting struct stat when calling 'lstat' on a file."}
{"code":"String function ( ) { return emojiText ; }","nl":"get text of emoji icon"}
{"code":"int function ( ) { return dimension ; }","nl":"get the k-dimensional space that the Points is in calls: none called by: centroid, codebook"}
{"code":"void function ( String checksumType ) { this . checksumType = checksumType ; }","nl":"Sets the checksum type."}
{"code":"Set < T > function ( Class < T > clazz , Set < JspNode > allNodes ) { Set < T > result = new HashSet < > ( ) ; for ( Node node : allNodes ) { if ( clazz . equals ( node . getClass ( ) ) ) { result . add ( ( T ) node ) ; } } return result ; }","nl":"Return a subset of allNodes, containing the items in allNodes that are of the given type."}
{"code":"void function ( ) { rte . setSentenceCount ( 3 ) ; assertEquals ( 3 , rte . getSentenceCount ( ) ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.RTEParser#setSentenceCount(int)}."}
{"code":"void function ( Crypto encryptionCrypto ) { this . encryptionCrypto = encryptionCrypto ; }","nl":"Set the encryption Crypto object"}
{"code":"int function ( int row , int column ) { return originalMatrix . matrixItemUtility [ row ] [ column ] ; }","nl":"Get the utility of a cell in the projected q-matrix at a given cell position (row,column)"}
{"code":"void function ( String identifier , IndividualStructure individualStructure ) { this . individualStructures . put ( identifier , individualStructure ) ; }","nl":"Add an individual structure. If the individual structure identifier already exists the old individual structure will be overwritten."}
{"code":"Context function ( ) { return context ; }","nl":"Return the context with the functions and variables of the EL evaluator. "}
{"code":"SDDTripleStateEnum function ( ) { return tripleStateA ; }","nl":"Get the triple state in A."}
{"code":"void function ( PropertyDTO [ ] userStoreManager , String domainName ) { UserStoreMgtDataKeeper . userStoreManagers . put ( domainName , convertArrayToMap ( userStoreManager ) ) ; }","nl":"Add a new user store manager to in-memory map, at the given domain name"}
{"code":"void function ( JavaMailSender mailSender ) { this . mailSender = mailSender ; }","nl":"Sets the mail sender."}
{"code":"boolean function ( ScriptableObject topScope ) { if ( topScope . getParentScope ( ) != null ) { throw new IllegalArgumentException ( ) ; } if ( this == topScope . associateValue ( AKEY , this ) ) { return true ; } return false ; }","nl":"Associate ClassCache object with the given top-level scope. The ClassCache object can only be associated with the given scope once."}
{"code":"void function ( Bus b ) { if ( bus != null ) { bus = b ; } }","nl":"Sets the Bus"}
{"code":"void function ( ) { DenseMatrix64F mat = new DenseMatrix64F ( 7 , 5 ) ; assertEquals ( 5 , mat . getNumCols ( ) ) ; assertEquals ( 7 , mat . getNumRows ( ) ) ; assertEquals ( 7 * 5 , mat . data . length ) ; }","nl":"Tests the following constructor: DenseMatrix64F( int numCols , int numRows )"}
{"code":"void function ( ) { assertEquals ( 2005 , rmc . getDate ( ) . getYear ( ) ) ; }","nl":"Test method for  {@link net.sf.marineapi.nmea.parser.RMCParser#getYear()}."}
{"code":"void function ( String geneList ) { this . geneList = geneList ; }","nl":"Sets the List of Genes in the Set."}
{"code":"List < Role > function ( ) { if ( roles == null ) { roles = new ArrayList < Role > ( ) ; } return this . roles ; }","nl":"Gets the value of the roles property.  This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a set method for the roles property.  For example, to add a new item, do as follows:  getRoles().add(newItem);   Objects of the following type(s) are allowed in the list {@link Role }"}
{"code":"void function ( String referencedRevisionA ) { this . referencedRevisionA = referencedRevisionA ; }","nl":"Set the referenced revision in A."}
{"code":"void function ( IParserEvent command ) { IParserEventHandler uprHandler = new UprHandler ( handler ) ; uprHandler . handleEvent ( command ) ; handlerStack . push ( handler ) ; handler = uprHandler ; }","nl":"Process a upr command: consume all of the RTF commands relating to this and emit events representing the Unicode content."}
{"code":"BigDecimal function ( ) { return this . downloadSize ; }","nl":"Gets the download size."}
{"code":"void function ( ) { DenseMatrix64F A = new DenseMatrix64F ( 5 , 5 , true , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ) ; if ( ! extractor . process ( A ) ) { throw new RuntimeException ( \"Failed!\" ) ; } assertEquals ( 5 , extractor . getNumberOfEigenvalues ( ) ) ; }","nl":"Special case that requires exceptional shifts to work"}
{"code":"void function ( AbstractSettings setting ) { PROPS . add ( setting ) ; }","nl":"Adds a settings class to the list of factories that  this handler will act upon."}
{"code":"IParserEvent function ( StringEvent event ) { StringEvent lastEvent = ( StringEvent ) events . removeLast ( ) ; StringEvent newEvent = new StringEvent ( lastEvent . getString ( ) + event . getString ( ) ) ; return newEvent ; }","nl":"Removes the string event from the end of the buffer, merges it with the string event we've just received, and adds the new event to the end of the buffer."}
{"code":"boolean function ( ) { if ( getTimeoutDate ( ) != null ) { Date now = new Date ( ) ; if ( now . after ( getTimeoutDate ( ) ) ) { return true ; } else { return false ; } } else { return false ; } }","nl":"Has this approval expired?"}
{"code":"NameValuePair function ( final String name , final String value ) { return new BasicNameValuePair ( name , value ) ; }","nl":"Creates a name-value pair. Called from  {@link #parseNameValuePair}."}
{"code":"String function ( byte [ ] bytes , String charsetName ) { try { return new String ( bytes , charsetName ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( \"Impossible failure: Charset.forName(\"\" + charsetName + \"\") returns invalid name.\" ) ; } }","nl":"Use this function instead of new String(byte[], String) to avoid surprises from  non-standard default encodings."}
{"code":"void function ( short value ) { format . checkType ( 'h' , true ) ; packLong ( value , true ) ; }","nl":"Add a short field to the stream. \\param value The short value to be added."}
{"code":"EmailTemplateDTO function ( int index ) { EmailTemplateDTO template = null ; if ( index <= templates . length ) { template = templates [ index ] ; } return template ; }","nl":"This method is used to get the email template to be displayed with the given index."}
{"code":"JSONArray function ( List < ? extends JsonWorkflowAction > nodes ) { JSONArray array = new JSONArray ( ) ; for ( JsonWorkflowAction node : nodes ) { array . add ( node . toJSONObject ( ) ) ; } return array ; }","nl":"Convert a nodes list into a JSONArray."}
{"code":"Class < ? > function ( String shortName ) { Class < ? > cls = COLLECTION_CLASSES_BY_NAMES . typeFor ( shortName ) ; if ( cls != null ) { return cls ; } return COLLECTION_INTERFACES_BY_NAMES . typeFor ( shortName ) ; }","nl":"Returns the collection type if we recognize it by its short name."}
{"code":"EndpointReferenceType function ( QName serviceName ) { EndpointReferenceType logical = null ; for ( EndpointResolver resolver : resolvers ) { logical = resolver . mint ( serviceName ) ; if ( logical != null ) { break ; } } return logical ; }","nl":"Walk the list of registered EndpointResolvers, so as to mint a new  abstract EPR for a given service name."}
{"code":"void function ( byte [ ] buf , int pos , int v ) { checkBoundary ( buf , pos , 4 ) ; buf [ pos ++ ] = ( byte ) ( 0xff & ( v >> 24 ) ) ; buf [ pos ++ ] = ( byte ) ( 0xff & ( v >> 16 ) ) ; buf [ pos ++ ] = ( byte ) ( 0xff & ( v >> 8 ) ) ; buf [ pos ] = ( byte ) ( 0xff & v ) ; }","nl":"Writes a specific integer value (4 bytes) to the output byte array at the given offset."}
{"code":"void function ( ) { SpaceXGUI . getInstance ( ) . appendToConsole ( TAG , \" - spinning 90 left\" ) ; cmd . setLedsAnimation ( LEDAnimation . BLINK_ORANGE , 3 , ( spinTime / 1000 ) ) ; cmd . spinLeft ( spin90Speed ) . doFor ( spin90Time ) ; cmd . hover ( ) . doFor ( hoverTime ) ; }","nl":"Spin 90 Left Spin the drone 90 degrees to the left"}
{"code":"Measurements function ( ) { if ( singleton == null ) { singleton = new Measurements ( measurementproperties ) ; } return singleton ; }","nl":"Return the singleton Measurements object."}
{"code":"JaxbBuilder function ( final Marshaller marshaller ) { this . marshaller = marshaller ; return this ; }","nl":"Sets a non-default  {@link Marshaller} to use when creating the {@link Source}."}
{"code":"void function ( List < String > acceptedKeyWrapAlgorithms ) { this . acceptedKeyWrapAlgorithms = acceptedKeyWrapAlgorithms ; }","nl":"Set the list of accepted key-wrap algorithms. A request can contain a wst:KeyWrapAlgorithm uri for use in encrypting an issued token. The algorithm specified must be contained in this list. The default algorithms are RSA 1.5 and RSA OEP."}
{"code":"boolean function ( String username , String password ) { try { UserStoreManager userStore = IdentityTenantUtil . getRealm ( null , username ) . getUserStoreManager ( ) ; return userStore . authenticate ( username , password ) ; } catch ( Exception e ) { log . error ( \"Error while authenticating user\" , e ) ; return false ; } }","nl":"Verify user name/password authentication."}
{"code":"boolean function ( long fileId ) { synchronized ( mLock ) { return mPersistedFiles . contains ( fileId ) ; } }","nl":"Checks if the given file is being persisted."}
{"code":"AdjustableLinearSolver function ( ) { return new AdjLinearSolverQr ( ) ; }","nl":"Create a solver which can efficiently add and remove elements instead of recomputing everything from scratch."}
{"code":"EndpointImplFactory function ( ) { return singleton ; }","nl":"Avoid the need to construct these objects over and over in cases where the code knows that it needs the basic case."}
{"code":"void function ( ) { mThrown . expect ( IndexOutOfBoundsException . class ) ; int badDirIndex = TieredBlockStoreTestUtils . TIER_PATH [ TEST_TIER_LEVEL ] . length ; Assert . assertEquals ( badDirIndex , mTestTierView . getDirView ( badDirIndex ) . getDirViewIndex ( ) ) ; }","nl":"Tests that an exception is thrown when trying to get a storage directory view with a bad index."}
{"code":"boolean function ( Map < K , V > sourceMap ) { return ( sourceMap == null || sourceMap . size ( ) == 0 ) ; }","nl":"is null or its size is 0  isEmpty(null)   =   true; isEmpty({})     =   true; isEmpty({1, 2})    =   false; "}
{"code":"List < T > function ( Class < T > parentType ) { List < T > parents = new ArrayList < > ( ) ; Node parentNode = jjtGetParent ( ) ; while ( parentNode != null ) { if ( parentNode . getClass ( ) == parentType ) { parents . add ( ( T ) parentNode ) ; } parentNode = parentNode . jjtGetParent ( ) ; } return parents ; }","nl":"Traverses up the tree to find all of the parent instances of type parentType"}
{"code":"int function ( long value ) { checkArgument ( ( value >> Integer . SIZE ) == 0 , \"out of range: %s\" , value ) ; return ( int ) value ; }","nl":"Returns the  {@code int} value that, when treated as unsigned, is equal to {@code value}, if possible."}
{"code":"void function ( double U [ ] , double [ ] b , int n ) { for ( int i = n - 1 ; i >= 0 ; i -- ) { double sum = b [ i ] ; int indexU = i * n + i + 1 ; for ( int j = i + 1 ; j < n ; j ++ ) { sum -= U [ indexU ++ ] * b [ j ] ; } b [ i ] = sum / U [ i * n + i ] ; } }","nl":" This is a forward substitution solver for non-singular upper triangular matrices.  b = U-1b  where b is a vector, U is an n by n matrix. "}
{"code":"boolean function ( final String line ) { return ! ( \"\" . equals ( line . trim ( ) ) || ( line . startsWith ( \"#\" ) ) ) ; }","nl":"Returns true if the given line is not null or if it is not a comment."}
{"code":"DeterministicKey function ( ) { return get ( rootPath , false , false ) ; }","nl":"Returns the root key that the  {@link DeterministicHierarchy} was created with."}
{"code":"TriConsumer < X , Y , Z > function ( TriConsumer < ? super X , ? super Y , ? super Z > after ) { Objects . requireNonNull ( after ) ; return ( x , y , z ) -> { accept ( x , y , z ) ; after . accept ( x , y , z ) ; } ; }","nl":"Returns a composed  {@code TriConsumer} that performs, in sequence, thisoperation followed by the  {@code after} operation. If performing eitheroperation throws an exception, it is relayed to the caller of the composed operation.  If performing this operation throws an exception, the  {@code after} operation will not be performed."}
{"code":"Function < E , E > function ( ) { return ( Function < E , E > ) IdentityFunction . INSTANCE ; }","nl":"Returns the identity function."}
{"code":"void function ( byte [ ] value ) { this . challenge = ( ( byte [ ] ) value ) ; }","nl":"Sets the value of the challenge property."}
{"code":"void function ( String name , Named type ) { if ( name == null || type == null ) { throw new InternalCompilerError ( \"Bad insertion into TableResolver\" ) ; } if ( Report . should_report ( TOPICS , 3 ) ) Report . report ( 3 , \"TableCR.addNamed(\" + name + \", \" + type + \")\" ) ; table . put ( name , type ) ; }","nl":"Add a named type object to the table."}
{"code":"void function ( String name ) { await ( name ) ; schedule ( name ) ; await ( name ) ; }","nl":"Convenience method for executing a heartbeat and waiting for it to complete."}
{"code":"Matcher < T > function ( T value ) { return ComparatorMatcherBuilder . < T > usingNaturalOrdering ( ) . lessThan ( value ) ; }","nl":"Creates a matcher of  {@link Comparable} object that matches when the examined object isless than the specified value, as reported by the compareTo method of the examined object. For example: assertThat(1, lessThan(2))"}
{"code":"void function ( XCommand < ? > command ) { queue ( command , 0 ) ; }","nl":"Queue a command for execution after the current command execution completes.  All commands queued during the execution of the current command will be queued for a single serial execution.  If the command execution throws an exception, no command will be effectively queued."}
{"code":"void function ( String name ) { try ( LockResource r = new LockResource ( sLock ) ) { while ( ! sTimers . containsKey ( name ) ) { sCondition . await ( ) ; } } }","nl":"Waits for the given thread to be ready to be scheduled."}
{"code":"void function ( final String warning ) { valid = false ; setInvalidationMessage ( warning ) ; }","nl":"Declares the argument value to be invalid. Gui will be redrawn but with a warning drawn in red above the entry widget."}
{"code":"int function ( String s ) { byte [ ] byteArray = s . getBytes ( ) ; int n = byteArray . length ; int hash = 5381 ; for ( int i = 0 ; i < n ; i ++ ) { hash = ( ( hash << 5 ) + hash ) + byteArray [ i ] ; } return hash ; }","nl":"Get Hash Value for String using DJBX33A Algorithm"}
{"code":"String function ( ) { return destination ; }","nl":"Gets the destination."}
{"code":"void function ( int millis ) { waitFor ( millis ) ; }","nl":"Pause for"}
{"code":"String [ ] function ( ) { try { return stub . getIssuersOfSAMLServiceProviders ( ) ; } catch ( RemoteException e ) { log . error ( \"Error loading Issuers\" , e ) ; throw new AxisFault ( e . getMessage ( ) , e ) ; } }","nl":"Get Issuer List"}
{"code":"Object function ( String name ) { return this . attributes . remove ( name ) ; }","nl":"Remove an attribute value on the RuleContext.  Attributes can be shared between RuleContext instances. This operation is thread-safe.  Attribute values should be modified directly via the reference provided. It is not necessary to call setAttribute(String, Object) to update an attribute value. Modifications made to the attribute value will automatically be seen by other threads. Because of this, you must ensure the attribute values are themselves thread safe."}
{"code":"void function ( ) { doAction ( step ) ; step ++ ; JPanel p = makePanel ( step ) ; if ( p != null ) { panels . add ( p ) ; } started = true ; if ( item != null ) { item . changed ( ) ; } }","nl":"The next step of the wizard."}
{"code":"void function ( ) { Date d = new Date ( ) ; assertTrue ( d . equals ( instance ) ) ; Date one = new Date ( 2010 , 6 , 15 ) ; Date two = new Date ( 2010 , 6 , 15 ) ; assertTrue ( one . equals ( two ) ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.util.Date#equals(java.lang.Object)}."}
{"code":"void function ( int num ) { Node newNode = new Node ( num ) ; if ( head == null ) { head = newNode ; return ; } Node temp = head ; while ( temp . next != null ) { temp = temp . next ; } temp . next = newNode ; return ; }","nl":"add new node to list"}
{"code":"Array < Asset > function ( ) { Array < Asset > assets = null ; return assets ; }","nl":"Specifies the particular sounds which must be loaded for this screen. It returns null by default."}
{"code":"void function ( ) { }","nl":"Called when the service transitions from  {@linkplain State#STARTING STARTING} to{@linkplain State#RUNNING RUNNING}. This occurs when a service has successfully started."}
{"code":"double function ( ) { return this . power ; }","nl":"Returns the power."}
{"code":"String function ( ) { return referencedRevisionLabelB ; }","nl":"Get the referenced revision label in B."}
{"code":"String function ( ) { return graph . toString ( ) ; }","nl":"Returns the graph's source description in dot language."}
{"code":"void function ( SentenceListener sl , String type ) { registerListener ( sl , type ) ; }","nl":"Adds a  {@link net.sf.marineapi.nmea.event.SentenceListener} that is interested in receiving onlysentences of certain type."}
{"code":"ListenableFuture < PaymentIncrementAck > function ( Coin size ) { return channelClient . incrementPayment ( size , null ) ; }","nl":"Increments the total value which we pay the server."}
{"code":"String function ( String fullName ) { int lastDot = fullName . lastIndexOf ( '.' ) ; return lastDot >= 0 ? fullName . substring ( 0 , lastDot ) : \"\" ; }","nl":"Given the name for a class, returns the portion which appears to constitute the package -- i.e., all characters up to but not including the last dot, or no characters if the name has no dot."}
{"code":"void function ( ) { Mockito . when ( userInfoRepository . getByUsername ( adminUsername ) ) . thenReturn ( userInfoAdmin ) ; UserInfo user = service . getByUsername ( adminUsername ) ; assertEquals ( user . getSub ( ) , adminSub ) ; }","nl":"Test loading an admin user, ensuring that the UserDetails object returned has both the ROLE_USER and ROLE_ADMIN authorities."}
{"code":"boolean function ( Scan s ) { for ( Term t : terms ) if ( ! t . isSatisfied ( s ) ) return false ; return true ; }","nl":"Returns true if the predicate evaluates to true with respect to the specified scan."}
{"code":"void function ( int port ) { int i = port - basePort - 1 ; if ( ! allocated [ i ] ) { throw new IllegalStateException ( \"Port is not allocated\" ) ; } allocated [ i ] = false ; }","nl":"Release the given port."}
{"code":"XHTMLPanel function ( ) { return panel ; }","nl":"Returns the panel used internally for rendering."}
{"code":"void function ( List < String > sequencedGeneList , List < String > sequencedCaseList , Map < String , String > mutationsMap ) { for ( String sequencedGene : sequencedGeneList ) { for ( String sequencedCase : sequencedCaseList ) { String key = createKey ( sequencedGene , sequencedCase ) ; mutationsMap . put ( key , \"0\" ) ; } } }","nl":"Applies no mutation data to mutation map."}
{"code":"void function ( long xid , int retval , ServiceInfo [ ] info ) { }","nl":"Called as a result of a previous service retrieval request."}
{"code":"void function ( ) { try { writer . writeStartElement ( \"group\" ) ; } catch ( XMLStreamException ex ) { throw new RuntimeException ( ex ) ; } }","nl":"Write a group start tag."}
{"code":"double function ( DenseMatrix64F A , DenseMatrix64F eigenVector ) { double bottom = VectorVectorMult . innerProd ( eigenVector , eigenVector ) ; double top = VectorVectorMult . innerProdA ( eigenVector , A , eigenVector ) ; return top / bottom ; }","nl":" Given matrix A and an eigen vector of A, compute the corresponding eigen value.  This is the Rayleigh quotient.  xTAx / xTx "}
{"code":"boolean function ( ActivityRequest activityRequest ) { if ( activityRequest == null ) { return false ; } if ( activityRequest . getDelayerFileAttributesExtractorStrategy ( ) == null ) { return false ; } if ( activityRequest . getFeedId ( ) == null ) { return false ; } return activityRequest . getConfigProperties ( ) != null ; }","nl":"Validate the incoming request for mandatory parameters."}
{"code":"ModuleConfiguration function ( String moduleName ) { Properties moduleProperties = getModuleProperties ( moduleName ) ; List < Subscription > subscriptionList = buildSubscriptionList ( moduleName , moduleProperties ) ; return new ModuleConfiguration ( getModuleProperties ( moduleName ) , subscriptionList ) ; }","nl":"Building per module configuration objects"}
{"code":"void function ( ) { }","nl":"Test method for  {@link com.alibaba.dubbo.registry.support.injvm.InjvmRegistry#register(java.util.Map)}."}
{"code":"double function ( ) { BlockPos foundBlock = getNextBlock ( 1 ) ; if ( foundBlock == null ) { return 9999 ; } else { return Math . sqrt ( mob . getDistanceSqToCenter ( foundBlock ) ) ; } }","nl":"Returns distance to closest block. If none is found, returns 9999."}
{"code":"boolean function ( ) { playlists = new HashMap < > ( ) ; return getDb ( ) . getPlaylists ( playlists ) ; }","nl":"Reads playlists from database"}
{"code":"void function ( ) { SimpleDB . bufferMgr ( ) . flushAll ( txnum ) ; recoveryMgr . recover ( ) ; }","nl":"Flushes all modified buffers. Then goes through the log, rolling back all uncommitted transactions.  Finally,  writes a quiescent checkpoint record to the log. This method is called only during system startup, before user transactions begin."}
{"code":"void function ( String password ) { this . password = password ; }","nl":"Setea el password del usuario."}
{"code":"String function ( ) { return signatureUsername ; }","nl":"Get the username/alias to use to sign any issued tokens"}
{"code":"void function ( String id ) { log . debug ( \"Request to delete Ingredient : {}\" , id ) ; ingredientRepository . delete ( id ) ; }","nl":"Delete the  ingredient by id."}
{"code":"void function ( ) { try { createTextureAtlas ( ) ; } catch ( IOException e ) { Gdx . app . error ( LOG , \"Error creating texture atlas: \" , e ) ; } loadTextureAtlas ( ) ; loadTextures ( ) ; loadSounds ( ) ; loadMaps ( ) ; }","nl":"Starts loading the assets.  {@link Loader#setAssetsToLoad()} must becalled first."}
{"code":"int function ( ) { return children == null ? 1 : 1 + Math . max ( children [ 0 ] . depth ( ) , children [ 1 ] . depth ( ) ) ; }","nl":"Returns the depth of the tree (longest path length from root to leaf)."}
{"code":"void function ( Range < K > range , V value ) { throw new UnsupportedOperationException ( ) ; }","nl":"Guaranteed to throw an exception and leave the  {@code RangeMap} unmodified."}
{"code":"double [ ] function ( ) { return gammasV ; }","nl":"Returns gammas from the householder operations for the V matrix."}
{"code":"void function ( ) { }","nl":"Properties for the test."}
{"code":"void function ( ) { }","nl":"Called when the service transitions from  {@linkplain State#NEW NEW} to{@linkplain State#STARTING STARTING}. This occurs when  {@link Service#startAsync} is calledthe first time."}
{"code":"ToStringHelper function ( double value ) { return addHolder ( String . valueOf ( value ) ) ; }","nl":"Adds an unnamed value to the formatted output. It is strongly encouraged to use  {@link #add(String,double)} instead and give value areadable name."}
{"code":"void function ( ) { PermissionTicket perm = permissionService . createTicket ( rs1 , scopes1 ) ; assertNotNull ( perm . getTicket ( ) ) ; }","nl":"Test method for  {@link org.mitre.uma.service.impl.DefaultPermissionService#createTicket(org.mitre.uma.model.ResourceSet,java.util.Set)}."}
{"code":"void function ( ) { if ( ! snake . isAlive ) this . gui . setTitle ( \"Game Over! Eigenkollision\" ) ; if ( ! border . isAlive ) this . gui . setTitle ( \"Game Over! Borderkollision\" ) ; if ( gameElements . size ( ) == 2 ) { snake . isAlive = false ; gui . setTitle ( \"Spiel gewonnen.\" ) ; } }","nl":"checkGameOver prueft ob die Bedingung erfuellt wurde die fuer ein Game Over erforderlich sind."}
{"code":"T function ( ) { Node node = extractMinNode ( ) ; return node . key ; }","nl":"Extract min value key from the heap"}
{"code":"void function ( ) { Assert . assertEquals ( NetworkAddressUtils . getFqdnHost ( new InetSocketAddress ( \"localhost\" , 0 ) ) , \"localhost\" ) ; Assert . assertEquals ( NetworkAddressUtils . getFqdnHost ( new WorkerNetAddress ( ) . setHost ( \"localhost\" ) ) , \"localhost\" ) ; }","nl":"Tests the  {@link NetworkAddressUtils#getFqdnHost(InetSocketAddress)} and{@link NetworkAddressUtils#getFqdnHost(WorkerNetAddress)} methods."}
{"code":"double function ( ) { checkState ( count ( ) != 0 ) ; return sumOfProductsOfDeltas / count ( ) ; }","nl":"Returns the population covariance of the values. The count must be non-zero. This is guaranteed to return zero if the dataset contains a single pair of finite values. It is not guaranteed to return zero when the dataset consists of the same pair of values multiple times, due to numerical errors. Non-finite values If the dataset contains any non-finite values ( {@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or  {@link Double#NaN}) then the result is  {@link Double#NaN}."}
{"code":"void function ( ArrayList < String > out_words , ArrayList < Integer > out_counts ) { ArrayList < Map . Entry < String , Int >> entries = new ArrayList < Map . Entry < String , Int >> ( _wordFrequency . entrySet ( ) ) ; Collections . sort ( entries , new ComparatorFrequency ( ) ) ; for ( Map . Entry < String , Int > ent : entries ) { out_words . add ( ent . getKey ( ) ) ; out_counts . add ( ent . getValue ( ) . value ) ; } }","nl":"Stores words and their corresponding frequencies in parallel array lists parameters.  The frequencies are sorted from low to high."}
{"code":"ThreadFactoryBuilder function ( int priority ) { checkArgument ( priority >= Thread . MIN_PRIORITY , \"Thread priority (%s) must be >= %s\" , priority , Thread . MIN_PRIORITY ) ; checkArgument ( priority <= Thread . MAX_PRIORITY , \"Thread priority (%s) must be <= %s\" , priority , Thread . MAX_PRIORITY ) ; this . priority = priority ; return this ; }","nl":"Sets the priority for new threads created with this ThreadFactory."}
{"code":"String function ( String servletPath ) { String path = servletPath ; if ( path . endsWith ( \"*\" ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } return getContextURL ( ) + path ; }","nl":"Return the full URL (including protocol, host, port, context path, servlet path) for a servlet path."}
{"code":"void function ( Attributes a ) { attributes = new AttributesImpl ( a ) ; }","nl":"Change the attributes for this element."}
{"code":"Object function ( Class < ? > hint ) { return ( hint == null || hint == ScriptRuntime . ScriptableClass || hint == ScriptRuntime . FunctionClass ) ? this : obj . getDefaultValue ( hint ) ; }","nl":"Note that this method does not get forwarded to the delegee if the hint parameter is null, ScriptRuntime.ScriptableClass or ScriptRuntime.FunctionClass. Instead the object itself is returned."}
{"code":"byte [ ] function ( ) { return value ; }","nl":"Returns the raw value byte array."}
{"code":"String function ( String uri ) { return _uriResolver . resolve ( uri ) ; }","nl":"Resolves the URI; if absolute, leaves as is, if relative, returns an absolute URI based on the baseUrl for the agent."}
{"code":"String function ( ) { return this . source ; }","nl":"Get the source where this result comes from Source is only a representative string (no object reference)"}
{"code":"Document function ( String select , Document document ) { DOMResult result = new DOMResult ( ) ; performTransform ( getCopyTransformation ( select ) , document , result ) ; return ( Document ) result . getNode ( ) ; }","nl":"Execute the copy-of transform and return the resulting Document. Used for XMLTestCase comparison"}
{"code":"int function ( byte [ ] img , File to ) { try { FileOutputStream fos = new FileOutputStream ( to ) ; fos . write ( img ) ; fos . close ( ) ; } catch ( java . io . IOException ioe ) { return - 1 ; } return 1 ; }","nl":"Writes the graph's image in a file."}
{"code":"void function ( ) { assertEquals ( 360.0 , vtg . getTrueCourse ( ) , 0.001 ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.VTGParser#getTrueCourse()}."}
{"code":"int function ( int dimension ) { return ( dimension * num + denom - 1 ) / denom ; }","nl":"Returns the scaled value of dimension.  This function performs the integer equivalent of ceil(dimension  scalingFactor)."}
{"code":"Scriptable function ( ) { if ( type != SCOPE_PROVIDER ) Kit . codeBug ( ) ; if ( scope == null ) Kit . codeBug ( ) ; return scope ; }","nl":"Returns the scope for script evaluations."}
{"code":"void function ( File dir ) { setFolders ( dir ) ; setFiles ( dir ) ; }","nl":"Lists all folders and files in the given dir as XML tags."}
{"code":"HashMap < String , GeneticProfile > function ( ) { return getDefaultGeneticProfileMap ( true , true ) ; }","nl":"Gets a hashMap of the default mutation and copy number profiles."}
{"code":"String function ( String path ) { if ( ! path . endsWith ( \"/\" ) ) { path = path + \"/\" ; } if ( ! path . startsWith ( \"/\" ) ) { path = \"/\" + path ; } return path ; }","nl":"Check and modify path."}
{"code":"Page < DishCollection > function ( Pageable pageable ) { log . debug ( \"Request to get all DishCollections\" ) ; Page < DishCollection > result = dishCollectionRepository . findAll ( pageable ) ; return result ; }","nl":"Get all the dishCollections."}
{"code":"GetPrice function ( ) { return new GetPrice ( ) ; }","nl":"Create an instance of  {@link GetPrice }"}
{"code":"int function ( ) { return keyIdentifierType ; }","nl":"Get the (WSS4J) key identifier type used to reference a certificate for encryption"}
{"code":"long function ( ) { return this . dataUnitId ; }","nl":"Gets the data unit id."}
{"code":"void function ( BlockMatrix64F B ) { applyQ ( B , false ) ; }","nl":" Multiplies the provided matrix by Q using householder reflectors.  This is more efficient that computing Q then applying it to the matrix.   B = Q  B "}
{"code":"void function ( lalr_item itm ) { not_null ( itm ) ; hashcode_cache = null ; _all . remove ( itm ) ; }","nl":"Remove a single item if it is in the set."}
{"code":"TreeNode function ( TreeNode root , int key ) { if ( root == null || root . value == key ) { return root ; } if ( key < root . value ) { return find ( root . left , key ) ; } else { return find ( root . right , key ) ; } }","nl":"find a element in binary search tree"}
{"code":"double function ( RowD1Matrix64F T ) { double prod = 1.0 ; int N = Math . min ( T . numRows , T . numCols ) ; for ( int i = 0 ; i < N ; i ++ ) { prod *= T . unsafe_get ( i , i ) ; } return prod ; }","nl":"Computes the product of the diagonal elements.  For a diagonal or triangular matrix this is the determinant."}
{"code":"String function ( BufferedReader in ) { StringBuffer buf = new StringBuffer ( ) ; String str ; while ( ( str = in . readLine ( ) ) != null ) { buf . append ( str + \" \" ) ; } in . close ( ) ; return buf . toString ( ) ; }","nl":"Reads Content from a Buffered Reader."}
{"code":"String function ( @ Nullable String string ) { return ( string == null ) ? \"\" : string ; }","nl":"Returns the given string if it is non-null; the empty string otherwise."}
{"code":"Expression function ( ) { return newval ; }","nl":"Returns an expression. Evaluating this expression for a record produces the value that will be stored in the record's target field."}
{"code":"BufferedByteWriter function ( short value ) { return put64 ( value & 0xFFFFL ) ; }","nl":"Write the given long value (64-bit) in big-endian order to the buffer"}
{"code":"String function ( ) { return contentType ; }","nl":"Get content type of the message"}
{"code":"boolean function ( ) { return parseLazy ; }","nl":"Whether the serializer will produce lazy parse mode Messages"}
{"code":"void function ( boolean validateUseKey ) { this . validateUseKey = validateUseKey ; }","nl":"Set whether to validate a client Public Key or Certificate presented as part of a  UseKey element. If this is set to true (the default), the public key must be trusted by the Signature Crypto of the STS."}
{"code":"void function ( Long dataSetId ) { this . dataSetId = dataSetId ; }","nl":"Sets the data set id."}
{"code":"float function ( ) { return dotsPerDeg ; }","nl":"Returns the current  {@link #dotsPerDeg} value."}
{"code":"boolean function ( Object o ) { if ( o instanceof Type ) { Type type = ( Type ) o ; for ( Type t : v ) { if ( ts . isSubtype ( type , t ) ) { return true ; } } } return false ; }","nl":"Check whether object  {@code o} is in the set. Because of the semantics of the subtype set,  {@code o} is in the set iffit descends from (or is equal to) one of the elements in the set."}
{"code":"void function ( ServiceID id , int flags , int prefixBits , InetAddress addr ) { }","nl":"This callback is called on an unregistration event."}
{"code":"String function ( ) { return getWorkflow ( ) . getUser ( ) ; }","nl":"Return the job owner user name."}
{"code":"ProjectActions function ( ) { if ( theInstance == null ) { theInstance = new ProjectActions ( ) ; } return theInstance ; }","nl":"Singleton retrieval method for the projectbrowser. Lazely instantiates the projectbrowser."}
{"code":"void function ( O word , int multiplicity ) { assert data . get ( word ) == null ; data . put ( word , new DocumentElement < O > ( word , new IntegerHolder ( multiplicity ) ) ) ; wordCountMultiSet += multiplicity ; }","nl":"Sets the multiplicity for the given word."}
{"code":"Image function ( ) { if ( _image != null && _image . isDisposed ( ) ) { SWTFSImage fsimg = ( SWTFSImage ) _uac . getImageResource ( _uri ) . getImage ( ) ; if ( fsimg == null ) { _image = null ; } else { _image = fsimg . _image ; } } return _image ; }","nl":"Get the SWT image. Reload it from the UAC if it was disposed."}
{"code":"void function ( ) { double expected = rmc . getCourse ( ) + rmc . getVariation ( ) ; assertEquals ( expected , rmc . getCorrectedCourse ( ) , 0.001 ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.RMCParser#getCourse()} ."}
{"code":"View function ( ) { if ( mMenuItem != null ) { return HoneycombMenuItem . getActionView ( mMenuItem ) ; } return null ; }","nl":"Returns the currently set action view for this menu item."}
{"code":"void function ( ) { final double hdop = 1.98765 ; instance . setHorizontalDOP ( hdop ) ; assertEquals ( hdop , instance . getHorizontalDOP ( ) , 0.1 ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.GSAParser#setHorizontalDOP(double)}."}
{"code":"Character function ( ShadowStruggles game ) { RpgMap rpgMap = new RpgMap ( map , layer , SettingsDAO . getSettings ( ) . defaultTileLayer ) ; Character character = new Character ( x , y , width , height , rpgMap ) ; return character ; }","nl":"Creates a character from this object's parameters."}
{"code":"String function ( String str ) { int sum = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { sum ^= ( byte ) str . charAt ( i ) ; } return String . format ( \"%02X\" , sum ) ; }","nl":"Calculates XOR checksum of given String. Resulting hex value is returned as a String in two digit format, padded with a leading zero if necessary."}
{"code":"void function ( Node node ) { closed . add ( node ) ; }","nl":"Add a node to the closed list"}
{"code":"void function ( long timeMs ) { sleepMs ( null , timeMs ) ; }","nl":"Sleeps for the given number of milliseconds."}
{"code":"T function ( byte [ ] array , Class < T > clazz ) { try { T o = ( T ) ReflectionUtils . newInstance ( clazz , null ) ; o . readFields ( new DataInputStream ( new ByteArrayInputStream ( array ) ) ) ; return o ; } catch ( IOException ex ) { throw new RuntimeException ( ex ) ; } }","nl":"Read a writable from a byte array."}
{"code":"ConfigurationKey function ( String k1 , String k2 , String k3 ) { return new ConfigurationKeyImpl ( k1 , k2 , k3 ) ; }","nl":"Create a three-component configuration key."}
{"code":"void function ( ) { for ( Iterator iter = _imageCache . values ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { ImageResource ir = ( ImageResource ) iter . next ( ) ; ( ( SWTFSImage ) ir . getImage ( ) ) . getImage ( ) . dispose ( ) ; } _imageCache . clear ( ) ; }","nl":"Dispose all images in cache and clean the cache."}
{"code":"void function ( ) { Mockito . when ( mClient . listObjects ( Matchers . any ( ListObjectsRequest . class ) ) ) . thenThrow ( ServiceException . class ) ; boolean result = mOSSUnderFileSystem . delete ( PATH , true ) ; Assert . assertFalse ( result ) ; }","nl":"Test case for  {@link OSSUnderFileSystem#delete(String,boolean)}."}
{"code":"SourceFile function ( String fmt , List < ? > subst ) { return ( SourceFile ) parse ( FILE , fmt , subst . toArray ( ) ) ; }","nl":"Parse a string into a  {@code SourceFile} AST node,applying substitutions."}
{"code":"int function ( ByteBuffer key ) { byte [ ] keyBytes = BufferUtils . newByteArrayFromByteBuffer ( key ) ; return indexHash ( keyBytes ) ; }","nl":"Hashes a key in  {@code ByteBuffer} to a bucket index in non-negative integer value."}
{"code":"String function ( ) { return relativeFullPath ; }","nl":"Get the relative full path"}
{"code":"boolean function ( Language language ) { for ( RuleSet ruleSet : ruleSets ) { if ( ruleSet . usesTypeResolution ( language ) ) { return true ; } } return false ; }","nl":"Does any Rule for the given Language use Type Resolution?"}
{"code":"void function ( String value ) { this . build = value ; }","nl":"Sets the value of the Build property."}
{"code":"Bitmap function ( Bitmap img ) { Bitmap imgz = Bitmap . createScaledBitmap ( img , getDims ( ) [ 0 ] , getDims ( ) [ 1 ] , true ) ; return imgz ; }","nl":"Rescales the image to ideal with and height"}
{"code":"JWSAlgorithm function ( JsonObject o , String member ) { String s = getAsString ( o , member ) ; if ( s != null ) { return JWSAlgorithm . parse ( s ) ; } else { return null ; } }","nl":"Gets the value of the given member as a JWS Algorithm, null if it doesn't exist"}
{"code":"byte [ ] function ( List < String > words , String passphrase ) { String pass = Joiner . on ( ' ' ) . join ( words ) ; String salt = \"mnemonic\" + passphrase ; return PBKDF2SHA512 . derive ( pass , salt , PBKDF2_ROUNDS , 64 ) ; }","nl":"Convert mnemonic word list to seed."}
{"code":"void function ( String value ) { this . testData = value ; }","nl":"Sets the value of the testData property."}
{"code":"void function ( ) { this . m_turnClient . connect ( ) ; }","nl":"Connects to the TURN server"}
{"code":"void function ( final Activity activity , final int requestCode , final String address ) { final Intent intent = makeIntent ( address , null ) ; startForResult ( activity , requestCode , intent ) ; }","nl":"Request any amount of Bitcoins (probably a donation) from user, with feedback from the app. Result intent can be received by overriding  {@link android.app.Activity#onActivityResult()}. Result indicates either {@link Activity#RESULT_OK} or {@link Activity#RESULT_CANCELED}. In the success case, use {@link #transactionHashFromResult(Intent)} to read the transaction hash from the intent.Warning: A success indication is no guarantee! To be on the safe side, you must drive your own Bitcoin infrastructure and validate the transaction."}
{"code":"void function ( ) { final double v = 40.66666 ; rmb . setVelocity ( v ) ; assertTrue ( rmb . toString ( ) . contains ( \",40.7,\" ) ) ; assertEquals ( v , rmb . getVelocity ( ) , 0.1 ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.RMBParser#setVelocity()}."}
{"code":"BiAdAdapterSwitcher function ( final int delay_trigger ) { listview . setDefaultOnRefreshListener ( new SwipeRefreshLayout . OnRefreshListener ( ) { @ Override public void onRefresh ( ) { new Handler ( ) . postDelayed ( refresh_default , delay_trigger ) ; } } ) ; return this ; }","nl":"will implement more functions later"}
{"code":"void function ( ) { Map < String , Long > expectedCapacityBytesOnTiers = ImmutableMap . of ( \"MEM\" , 5000L , \"SSD\" , 60000L ) ; Assert . assertEquals ( expectedCapacityBytesOnTiers , mBlockStoreMeta . getCapacityBytesOnTiers ( ) ) ; }","nl":"Tests the  {@link BlockStoreMeta#getCapacityBytesOnTiers()} method."}
{"code":"Integer function ( ) { return cn . getExitStatus ( ) ; }","nl":"Get the exit code/status from the remote command - if available. Be careful - not all server implementations return this value. It is generally a good idea to call this method only when all data from the remote side has been consumed (see also the  method)."}
{"code":"Proxy function ( final HTTPClientPolicy policy , final String hostname ) { if ( policy . isSetNonProxyHosts ( ) ) { Pattern pattern = PatternBuilder . build ( policy . getNonProxyHosts ( ) ) ; if ( pattern . matcher ( hostname ) . matches ( ) ) { return Proxy . NO_PROXY ; } } return createProxy ( policy ) ; }","nl":"Honor the nonProxyHosts property value (if set)."}
{"code":"void function ( TBase base , byte [ ] bytes , int offset , int length ) { try { trans_ . reset ( bytes , offset , length ) ; base . read ( protocol_ ) ; } finally { trans_ . clear ( ) ; protocol_ . reset ( ) ; } }","nl":"Deserialize the Thrift object from a byte array."}
{"code":"void function ( Exception exception , String string ) { if ( sIsLogEnabled ) { Log . e ( sApplicationTag , getContent ( getCurrentStackTraceElement ( ) ) + \" >\" + exception . getMessage ( ) + \" >\" + exception . getStackTrace ( ) + \"   \" + string ) ; exception . printStackTrace ( ) ; } }","nl":"Send an ERROR log message."}
{"code":"String function ( ) { return signatureAlias ; }","nl":"Get the signature alias to use for this SAML realm"}
{"code":"void function ( ) { testEventProperties . put ( Notification . NOTIFICATION_KEY_APPLICATION , \"\" ) ; notificationController . handleEvent ( new Event ( Notification . NOTIFICATION_TOPIC_BROADCAST , testEventProperties ) ) ; }","nl":"Test method for  {@link NotificationController#handleEvent(org.osgi.service.event.Event)}Verifies that  {@code IllegalArgumentException} is thrown when {@code Event}'s {@link Notification#NOTIFICATION_KEY_APPLICATION} property is empty."}
{"code":"String function ( KeyStroke keyStroke ) { if ( keyStroke != null ) { return getModifiersText ( keyStroke . getModifiers ( ) ) + KeyEventUtils . getKeyText ( keyStroke . getKeyCode ( ) ) ; } else { return \"\" ; } }","nl":"Formats a given KeyStroke into a string"}
{"code":"void function ( String charsetName ) { this . charset = charsetName ; }","nl":"Set the charset of the body of the request"}
{"code":"ClientDetailsEntity function ( String jsonString ) { JsonElement jsonEl = parser . parse ( jsonString ) ; return parse ( jsonEl ) ; }","nl":"Create an unbound ClientDetailsEntity from the given JSON string."}
{"code":"Builder function ( String portId ) { this . portId = portId ; return this ; }","nl":"Provide the portId to the RouterInterface's Builder."}
{"code":"void function ( ) { rte . setRouteType ( RouteType . WORKING ) ; assertTrue ( rte . isWorkingRoute ( ) ) ; assertFalse ( rte . isActiveRoute ( ) ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.RTEParser#isActiveRoute()}."}
{"code":"void function ( ) { for ( Action action : actions ) { action . update ( ) ; } }","nl":"Updates the actions according to the current battle state."}
{"code":"int function ( ) { return id ; }","nl":"hashcode implementation to go with equals."}
{"code":"HexDigest function ( ) { return HexDigest . createFromDigestBytes ( getDigestBytes ( ) ) ; }","nl":"Calculate the digest value of all data processed up until this point and convert the digest into a HexDigest object."}
{"code":"ProctorResult function ( @ Nonnull final Identifiers identifiers , @ Nonnull final Map < String , Object > inputContext , @ Nonnull final Map < String , Integer > forceGroups ) { return determineTestGroups ( identifiers , inputContext , forceGroups , Collections . < String > emptyList ( ) ) ; }","nl":"Determine which test buckets apply to a particular client."}
{"code":"Date function ( String string ) { if ( string == null ) return null ; SimpleDateFormat formatter = new SimpleDateFormat ( FORMAT_ISO , LOCALE ) ; formatter . setTimeZone ( TIMEZONE ) ; try { return formatter . parse ( string ) ; } catch ( ParseException exception ) { return null ; } }","nl":"Parse a  {@link String} into a {@link Date} according to the ISO 8601specification (2000-12-31T11:59:00Z)."}
{"code":"boolean function ( ) { return ( this . errorLevel > 1 ) ; }","nl":"Returns if result is KO"}
{"code":"void function ( ) { ttm . setTimeToCPA ( 15.0 ) ; assertTrue ( ttm . toString ( ) . contains ( \",15.0,\" ) ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#setTimeToCPA()} ."}
{"code":"void function ( final ReadableByteChannel src , final WritableByteChannel dest ) { final ByteBuffer buffer = ByteBuffer . allocateDirect ( 16 * 1024 ) ; while ( src . read ( buffer ) != - 1 ) { buffer . flip ( ) ; dest . write ( buffer ) ; buffer . compact ( ) ; } buffer . flip ( ) ; while ( buffer . hasRemaining ( ) ) { dest . write ( buffer ) ; } }","nl":"An efficient copy between two channels with a fixed-size buffer."}
{"code":"String function ( Object e , String attrName ) { return nsh . getAttributeValue ( ( Element ) e , attrName ) ; }","nl":"Gets the attributeValue attribute of the StandardAttributeResolver object"}
{"code":"void function ( String album ) { this . album = album ; }","nl":"Set the value of album"}
{"code":"FiltersType function ( ) { return cipherSuiteFilters ; }","nl":"Returns the cipher suites filter"}
{"code":"MemoryLogger function ( ) { return instance ; }","nl":"Method to obtain the only instance of this class"}
{"code":"void function ( ) { try { vtg . setMagneticCourse ( - 0.001 ) ; fail ( \"Did not throw exception\" ) ; } catch ( IllegalArgumentException e ) { assertTrue ( e . getMessage ( ) . contains ( \"0..360\" ) ) ; } catch ( Exception e ) { fail ( e . getMessage ( ) ) ; } }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.VTGParser#setMagneticCourse(double)}."}
{"code":"boolean function ( Map < String , Object > props , String key ) { if ( props == null || key == null ) { return false ; } else { return isFalse ( props . get ( key ) ) ; } }","nl":"It might seem odd to return 'true' if a property == FALSE, but it is required sometimes."}
{"code":"void function ( ) { XMLUnit . setIgnoreWhitespace ( true ) ; XMLUnit . setNormalize ( true ) ; Config . readConfig ( \"r43ples.test.conf\" ) ; }","nl":"Initialize TestClass"}
{"code":"String function ( ) { return val ; }","nl":"Unwraps the string and returns it."}
{"code":"void function ( String value ) { PROPS . put ( KEY , value ) ; loadValue ( value ) ; }","nl":"Set new property value"}
{"code":"String function ( Fig f ) { Fig encloser = f . getEnclosingFig ( ) ; if ( encloser == null ) { return null ; } return getId ( encloser ) ; }","nl":"Return the identifier for this Fig which is the encloser  of the given Fig"}
{"code":"Sha256Hash function ( File f ) { FileInputStream in = new FileInputStream ( f ) ; try { return create ( ByteStreams . toByteArray ( in ) ) ; } finally { in . close ( ) ; } }","nl":"Returns a hash of the given files contents. Reads the file fully into memory before hashing so only use with small files."}
{"code":"boolean function ( Connection conn ) { if ( conn . getMetaData ( ) . getDriverName ( ) . toLowerCase ( ) . contains ( DBType . MySQL . name ( ) . toLowerCase ( ) ) ) { return true ; } return false ; }","nl":"Checks if the given connection's driver is MySQL Database Driver"}
{"code":"Class < ? extends Service > function ( ) { return UUIDService . class ; }","nl":"Return the public interface for UUID service."}
{"code":"void function ( ) { System . out . println ( \"Connecting without proxy...\" ) ; HTTPDirectConnection dc = new HTTPDirectConnection ( this . URI ) ; this . urlConn = dc . getURLConnection ( ) ; }","nl":"Method calling to use the direct connection."}
{"code":"Date function ( String date ) { return parseUTC ( date , DateTimeFormat . SQL ) ; }","nl":"Parse SQL formatted UTC dateTime"}
{"code":"void function ( String name ) { this . name = name ; }","nl":"Sets the name of transducer."}
{"code":"void function ( ) { byte [ ] b = new byte [ 10 ] ; mStream . write ( b ) ; mStream . close ( ) ; Mockito . verify ( mLocalOutputStream ) . write ( b , 0 , b . length ) ; }","nl":"Tests to ensure  {@link S3AOutputStream#write(byte[])} calls the underlying output stream."}
{"code":"void function ( ) { Sentence bod = instance . createParser ( BODTest . EXAMPLE ) ; assertNotNull ( bod ) ; assertTrue ( bod instanceof Sentence ) ; assertTrue ( bod instanceof BODSentence ) ; assertTrue ( bod instanceof BODParser ) ; assertEquals ( BODTest . EXAMPLE , bod . toSentence ( ) ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.SentenceFactory#createParser(java.lang.String)}."}
{"code":"void function ( StateListener listener ) { this . listeners . add ( listener ) ; }","nl":"Add listener."}
{"code":"void function ( Project oldProject ) { if ( currentProject == oldProject ) { currentProject = null ; } oldProject . remove ( ) ; }","nl":"Remove the project."}
{"code":"boolean function ( ) { return StringUtils . contains ( content , \"timed out\" ) ; }","nl":"Check for read timed out"}
{"code":"void function ( Element e , ReplacedElement cc , String uri , final int cssWidth , final int cssHeight ) { if ( imageComponents == null ) { imageComponents = new HashMap ( ) ; } CacheKey key = new CacheKey ( e , uri , cssWidth , cssHeight ) ; imageComponents . put ( key , cc ) ; }","nl":"Adds a ReplacedElement containing an image to a cache of images for quick lookup."}
{"code":"void function ( String errorMsg ) { this . errorMsg = errorMsg ; }","nl":"Sets the error msg."}
{"code":"List < String > function ( ) { List < String > tokens = new ArrayList < String > ( ) ; for ( FederationToken type : FederationToken . values ( ) ) { tokens . add ( getFederationToken ( type ) ) ; } for ( String set : settings . getStrings ( Keys . federation . sets ) ) { tokens . add ( getFederationToken ( set ) ) ; } return tokens ; }","nl":"Returns the list of possible federation tokens for this Gitblit instance."}
{"code":"void function ( EaseUser user ) { SuperWeChatDBManager . getInstance ( ) . saveContact ( user ) ; }","nl":"save a contact"}
{"code":"int function ( ) { return p2shHeader ; }","nl":"First byte of a base58 encoded P2SH address.  P2SH addresses are defined as part of BIP0013."}
{"code":"int function ( int index ) { return getStep ( index ) . y ; }","nl":"Get the y coordinate for the step at the given index"}
{"code":"List < String > function ( ) { return DEFAULT_SCHEME_PRIORITY ; }","nl":"Returns default list of auth scheme names in their order of preference."}
{"code":"void function ( ) { LogManager . shutdown ( ) ; XLog . Info . reset ( ) ; XLogStreamer . Filter . reset ( ) ; }","nl":"Destroy the log service."}
{"code":"DirectionsLeg [ ] function ( double originLat , double originLon , double destLat , double destLon ) { DirectionsRoute [ ] result = DirectionsApi . newRequest ( mapsClient . getContext ( ) ) . origin ( new LatLng ( originLat , originLon ) ) . destination ( new LatLng ( destLat , destLon ) ) . mode ( TravelMode . WALKING ) . await ( ) ; if ( null != result ) { return result [ 0 ] . legs ; } return new DirectionsLeg [ 0 ] ; }","nl":"Returns"}
{"code":"String function ( ) { return propName ; }","nl":"Returns the CSS name of this property, e.g. \"font-family\"."}
{"code":"Message function ( Message message ) { return message ; }","nl":"Give a chance for a Binding to customize their message"}
{"code":"Filters function ( ) { return this . filters ; }","nl":"Get the filters"}
{"code":"String function ( String select , Document document ) { try { return engine . evaluate ( select , new DOMSource ( document ) ) ; } catch ( XMLUnitException ex ) { throw new XpathException ( ex . getCause ( ) ) ; } }","nl":"Evaluate the result of executing the specified xpath syntax select expression on the specified document"}
{"code":"void function ( ) { links . clear ( ) ; }","nl":"Clears all connections but keeps location position informations."}
{"code":"java . lang . Object function ( ) { try { return forName ( literalName ) ; } catch ( java . lang . IllegalArgumentException e ) { throw new java . io . InvalidObjectException ( e . getMessage ( ) ) ; } }","nl":"Resolves serialized instance of enumeration value."}
{"code":"void function ( String identifier , DifferenceGroup differenceGroup ) { this . differenceGroups . put ( identifier , differenceGroup ) ; }","nl":"Add a difference group. If the difference group identifier already exists the old difference group will be overwritten."}
{"code":"JSONWriter function ( ) { beforeValue ( ) ; mWriter . write ( JSON . LSQUARE ) ; mStack . push ( mState ) ; mState = new State ( ARRAY ) ; return this ; }","nl":"array begin."}
{"code":"void function ( ) { double hdop = instance . getHorizontalDOP ( ) ; assertEquals ( 1.6 , hdop , 0.001 ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.GSAParser#getHorizontalDOP()}."}
{"code":"void function ( ResourceBundle b ) { Set < Object > set = new HashSet < Object > ( ) ; for ( Enumeration e = b . getKeys ( ) ; e . hasMoreElements ( ) ; ) { Object c = e . nextElement ( ) ; Assert . assertTrue ( \"Duplicate key \"\" + c + \"\" in \" + b . getClass ( ) . getName ( ) , ! set . contains ( c ) ) ; set . add ( c ) ; } }","nl":"check that no key is entered twice"}
{"code":"String function ( ) { return logPath ; }","nl":"Get Application LOG path. Used to backup database files also"}
{"code":"int function ( String data , OutputStream out ) { return encoder . decode ( data , out ) ; }","nl":"decode the Hex encoded String data writing it to the given output stream, whitespace characters will be ignored."}
{"code":"boolean function ( Object property ) { if ( property == null ) { return false ; } return Boolean . FALSE . equals ( property ) || \"false\" . equalsIgnoreCase ( property . toString ( ) ) ; }","nl":"It might seem odd to return 'true' if a property == FALSE, but it is required sometimes. Returns false if a value is either the String \"false\" (regardless of case)  or Boolean.FALSE."}
{"code":"int function ( ) { return _all . size ( ) ; }","nl":"size of the set"}
{"code":"void function ( ) { try { dataStore . flushEvents ( ) ; if ( monitor != null ) { monitor . clientFlushedEvents ( - 1 , System . currentTimeMillis ( ) ) ; } } catch ( final DataException e ) { e . printStackTrace ( ) ; } }","nl":"Flushes the events from the datastore."}
{"code":"Thread function ( ) { return this . waiter ; }","nl":"Obtains the thread, if there is one."}
{"code":"void function ( InputStream is ) { if ( is != null ) is . close ( ) ; }","nl":"Input Stream management not safe"}
{"code":"void function ( ) { RPCFileWriteRequest req = new RPCFileWriteRequest ( TEMP_UFS_FILE_ID , - 1 , LENGTH , null ) ; assertInvalid ( req ) ; }","nl":"Tests the constructor with a negative offset."}
{"code":"java . util . List function ( ) { return typeName ; }","nl":"Returns fully qualified name of the enumeration type."}
{"code":"BufferedImage function ( int width , int height ) { BufferedImage image = ImageUtil . createCompatibleBufferedImage ( width , height , BufferedImage . TYPE_INT_RGB ) ; ImageUtil . clearImage ( image ) ; return image ; }","nl":"Returns a BufferedImage using the specified width and height. By default this returns an image compatible with the screen (if not in \"headless\" mode) formatted for RGB."}
{"code":"File function ( ) { File tmpdir = null ; try { tmpdir = File . createTempFile ( \"argouml\" , null ) ; tmpdir . delete ( ) ; if ( ! tmpdir . mkdir ( ) ) { return null ; } return tmpdir ; } catch ( IOException ioe ) { LOG . error ( \"Error while creating a temporary directory\" , ioe ) ; return null ; } }","nl":"Create a temporary directory."}
{"code":"void function ( Date fetcherStartTimeStamp ) { this . fetcherStartTimeStamp = fetcherStartTimeStamp ; }","nl":"Sets the fetcher start time stamp."}
{"code":"float function ( ) { return ( ( float ) setFoundFragments ) / ( ( float ) setFragmentsCount ) ; }","nl":"Returns the naive similarity score."}
{"code":"int function ( ) { return yPosition ; }","nl":"return the vertical position of this ball"}
{"code":"void function ( String id ) { this . id = id ; }","nl":"Set the ID of satellite vehicle, for example \"05\"."}
{"code":"boolean function ( T key ) { return nodePosition . containsKey ( key ) ; }","nl":"Checks where the key exists in heap or not"}
{"code":"InetAddress function ( final SipHeaderValue via ) { final String baseValue = via . getBaseValue ( ) ; final String hostString = StringUtils . substringAfterLast ( baseValue , \" \" ) ; return InetAddress . getByName ( hostString ) ; }","nl":"Extracts the sent-by host from a Via header."}
{"code":"String function ( ) { return elem2 ; }","nl":"Gets the value of the elem2 property."}
{"code":"void function ( ) { Time t = new Time ( 1 , 2 , 3.4 ) ; instance . setTime ( t ) ; assertTrue ( instance . toString ( ) . contains ( \",E,010203.400,A*\" ) ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.GLLParser#setTime(Time)}."}
{"code":"boolean function ( final ByteBufferExt bb ) { final int checkSumIndex = bb . position ( ) + RudpConstants . CHECKSUM_INDEX ; final UInt checksum = bb . getUInt ( checkSumIndex ) ; final UInt zero = new UIntImpl ( 0 ) ; bb . putUInt ( checkSumIndex , zero ) ; final UInt expectedChecksum = getChecksum ( bb ) ; return checksum . equals ( expectedChecksum ) ; }","nl":"Returns whether the checksum held in a byte buffer holding a RUDP segment is correct."}
{"code":"List < Vertice > function ( Grafo grafo ) { return obterVerticesOrdenados ( grafo . getVertices ( ) ) ; }","nl":"Recebe um  {@link Grafo} e retorna uma {@link List} com os seus vertices ordenados."}
{"code":"void function ( Item item ) { this . mob . setCurrentItemOrArmor ( 0 , new ItemStack ( item ) ) ; }","nl":"Sets the equipped item of the AI"}
{"code":"ListStatusOptions function ( LoadMetadataType loadMetadataType ) { mLoadMetadataType = loadMetadataType ; return this ; }","nl":"Sets the  {@link ListStatusOptions#mLoadMetadataType}."}
{"code":"AbstractPlugin function ( String pluginName ) { for ( AbstractPlugin plugin : plugins ) { if ( plugin . getName ( ) . equals ( pluginName ) ) { return plugin ; } } return null ; }","nl":"Get plugin by its name"}
{"code":"void function ( boolean exclusive_only ) { if ( ! exclusive_only ) { inclusive_time = System . currentTimeMillis ( ) - inclusive_time ; } exclusive_time = System . currentTimeMillis ( ) - exclusive_time ; }","nl":"Start or stop the pass timer."}
{"code":"void function ( ) { mThrown . expect ( BlockDoesNotExistException . class ) ; mThrown . expectMessage ( ExceptionMessage . BLOCK_META_NOT_FOUND . getMessage ( TEST_BLOCK_ID ) ) ; mMetaManagerView . getBlockMeta ( TEST_BLOCK_ID ) ; }","nl":"Tests that an exception is thrown in the  {@link BlockMetadataManagerView#getBlockMeta(long)}method when the block does not exist."}
{"code":"Permission function ( ) { mMode = mMode . applyUMask ( Mode . getUMask ( ) ) . applyUMask ( FILE_UMASK ) ; return this ; }","nl":"Applies the default umask for newly created files to the mode bits."}
{"code":"String function ( String s ) { String out ; try { out = URLEncoder . encode ( s , UTF8_CHARSET ) . replace ( \"+\" , \"%20\" ) . replace ( \"*\" , \"%2A\" ) . replace ( \"%7E\" , \"~\" ) ; } catch ( UnsupportedEncodingException e ) { out = s ; } return out ; }","nl":"Percent-encode values according the RFC 3986. The built-in Java URLEncoder does not encode according to the RFC, so we make the extra replacements."}
{"code":"void function ( String filePath ) { File file = new File ( filePath ) ; com . google . common . io . Files . createParentDirs ( file ) ; if ( ! file . createNewFile ( ) ) { throw new IOException ( \"File already exists \" + filePath ) ; } }","nl":"Creates an empty file and its intermediate directories if necessary."}
{"code":"void function ( ) { assertEquals ( 7 , rmc . getDate ( ) . getMonth ( ) ) ; }","nl":"Test method for  {@link net.sf.marineapi.nmea.parser.RMCParser#getMonth()}."}
{"code":"void function ( Document doc ) { this . doc = doc ; eval ( ) ; }","nl":"Sets the current working Document."}
{"code":"USAddress function ( ) { return billTo ; }","nl":"Gets the value of the billTo property."}
{"code":"void function ( ) { String errorMessage = \"protocol doesn't support output\" ; when ( mHttpConMock . getOutputStream ( ) ) . thenThrow ( new IOException ( errorMessage ) ) ; mThrown . expect ( IOException . class ) ; mThrown . expectMessage ( errorMessage ) ; new SwiftOutputStream ( mHttpConMock ) . close ( ) ; }","nl":"Tests to ensure IOException is thrown if  {@link HttpURLConnection#getOutputStream()} throws anIOException."}
{"code":"byte [ ] function ( ) { return secret ; }","nl":"Get the secret"}
{"code":"symbol function ( ) { return _on_symbol ; }","nl":"The symbol we make the transition on."}
{"code":"void function ( DAVTransaction transaction , DAVResource resource ) { transaction . setHeader ( \"Content-Type\" , resource . getContentType ( ) ) ; transaction . setHeader ( \"Allow\" , DAVProcessor . METHODS ) ; transaction . setStatus ( 200 ) ; }","nl":"Process the OPTIONS method."}
{"code":"boolean function ( Object d2 ) { if ( ! ( d2 instanceof Decision ) ) { return false ; } return ( ( Decision ) d2 ) . getName ( ) . equals ( getName ( ) ) ; }","nl":"Two decisions are considered to be equal if their names are equal. The priority is not considered. {@inheritDoc}"}
{"code":"AddressingProperties function ( Message message , boolean isProviderContext , boolean isOutbound ) { return org . apache . cxf . ws . addressing . ContextUtils . retrieveMAPs ( message , isProviderContext , isOutbound ) ; }","nl":"Retrieves the addressing properties from the current message."}
{"code":"GetOfferDetailsResponse . Return . DetailOfferData . Products . Product function ( ) { return new GetOfferDetailsResponse . Return . DetailOfferData . Products . Product ( ) ; }","nl":"Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.Products.Product }"}
{"code":"void function ( ) { acitivityController . deregisterUserSession ( null , mockServerMessage ) ; }","nl":"Test method for  {@link ActivityController#deregisterUserSession(ServerSession,ServerMessage)}Verifies that  {@code NullPointerException} is thrown when {@code ServerSession} is null."}
{"code":"void function ( ) { wireParser . closeConnection ( ) ; }","nl":"Disconnects the network connection but doesn't request the server to settle the channel first (literally just unplugs the network socket and marks the stored channel state as inactive)."}
{"code":"boolean function ( Authentication authentication , Serializable targetId , String targetType , Object permission ) { throw new UnsupportedOperationException ( ) ; }","nl":"Implementation of  {@code PermissionEvaluator}. We do not support this method call."}
{"code":"void function ( String [ ] args ) { Locale . setDefault ( Locale . US ) ; OsmViewerPlusApp demo = new OsmViewerPlusApp ( args ) ; demo . getFrame ( ) . readMap ( DataResource . getULMFileResource ( ) ) ; demo . showFrame ( ) ; }","nl":"Start application with program arg -screenwidth=xx (with xx the width in cm) or -screensize=yy (with yy measured diagonally in inch)."}
{"code":"void function ( ) { assertEquals ( 7.0 , ttm . getSpeed ( ) , 0.001 ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#getSpeed()} ."}
{"code":"void function ( ) { System . out . println ( \"getCapabilities\" ) ; Device instance = null ; ArrayList < Capability > expResult = null ; ArrayList < Capability > result = instance . getCapabilities ( ) ; assertEquals ( expResult , result ) ; fail ( \"The test case is a prototype.\" ) ; }","nl":"Test of getCapabilities method, of class Device."}
{"code":"Position function ( Position pos1 , Position pos2 ) { if ( ! isComparable ( pos1 , pos2 ) ) return null ; if ( pos1 . endLine > pos2 . endLine ) return pos1 ; if ( pos1 . endLine == pos2 . endLine && pos1 . endColumn >= pos2 . endColumn ) return pos1 ; return pos2 ; }","nl":"Returns the last of the given 2 positions i.e. if pos1 ends after pos2, then last(pos1, pos2) = pos1. Returns null if the given 2 positions are not comparable."}
{"code":"void function ( String transformedTokenIdentifier ) { this . transformedTokenIdentifier = transformedTokenIdentifier ; }","nl":"Set the identifier corresponding to a transformed version of this token"}
{"code":"List < VertexLabelType > function ( ) { return vertexLabels ; }","nl":"Returns the labels of all vertices within the graph."}
{"code":"void function ( ) { assertTrue ( rte . isActiveRoute ( ) ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.RTEParser#isActiveRoute()}."}
{"code":"float function ( ) { return ( float ) Position . getDistKM ( latMax , lonMin , latMin , lonMin ) ; }","nl":"Returns the distance between latMax and latMin in Kilometers."}
{"code":"void function ( ) { final double value = 180.000001 ; try { hdg . setDeviation ( value ) ; fail ( \"Did not throw exception\" ) ; } catch ( IllegalArgumentException iae ) { } catch ( Exception e ) { fail ( e . getMessage ( ) ) ; } }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.HDGParser#setDeviation(double)}."}
{"code":"boolean function ( ) { return mConnected ; }","nl":"Returns the connected status of the client."}
{"code":"Calendar function ( String dateString ) { return getCalendar ( dateString , DateUtils . getTimeZone ( \"UTC\" ) ) ; }","nl":"Create a Calendar instance for UTC time zone using the specified date."}
{"code":"void function ( ) { DataNettyBuffer data = new DataNettyBuffer ( mBuffer , LENGTH ) ; Assert . assertEquals ( LENGTH , data . getLength ( ) ) ; }","nl":"Tests the  {@link DataNettyBuffer#getLength()} method."}
{"code":"void function ( String testId ) { this . testId = testId ; }","nl":"Sets the test id."}
{"code":"void function ( ) { assertEquals ( 1.2 , hdg . getDeviation ( ) , 0.1 ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.HDGParser#getDeviation()}."}
{"code":"void function ( ) { System . out . println ( \"getNumberRequests\" ) ; LogEntryInterval instance = new LogEntryInterval ( ) ; int expResult = 0 ; int result = instance . getNumberRequests ( ) ; assertEquals ( expResult , result ) ; }","nl":"Test of getNumberRequests method, of class LogEntryInterval."}
{"code":"void function ( char [ ] array , int start , int end ) { while ( start < end ) { char temp = array [ start ] ; array [ start ] = array [ end ] ; array [ end ] = temp ; start ++ ; end -- ; } }","nl":"reverse char array"}
{"code":"void function ( ) { Assert . assertEquals ( Mode . Bits . WRITE_EXECUTE , Mode . Bits . WRITE . or ( Mode . Bits . EXECUTE ) ) ; Assert . assertEquals ( Mode . Bits . READ_EXECUTE , Mode . Bits . READ . or ( Mode . Bits . EXECUTE ) ) ; Assert . assertEquals ( Mode . Bits . READ_WRITE , Mode . Bits . WRITE . or ( Mode . Bits . READ ) ) ; }","nl":"Tests the  {@link Mode.Bits#or(Mode.Bits)} method."}
{"code":"void function ( Intent intent , int code ) { activity . startActivityForResult ( intent , code ) ; }","nl":"Start an activity. This method is defined to allow different methods of activity starting for newer versions of Android and for compatibility library."}
{"code":"double function ( DenseMatrix64F param , DenseMatrix64F X , DenseMatrix64F Y ) { func . compute ( param , X , temp0 ) ; double error = diffNormF ( temp0 , Y ) ; return error * error / ( double ) X . numRows ; }","nl":"Computes the \"cost\" for the parameters given. cost = (1/N) Sum (f(x;p) - y)^2"}
{"code":"DAVResource function ( URI uri ) { if ( uri == null ) return factory . getResource ( this , this . root ) ; if ( ! uri . isAbsolute ( ) ) uri = this . base . resolve ( uri ) . normalize ( ) ; return factory . getResource ( this , new File ( uri ) . getAbsoluteFile ( ) ) ; }","nl":"Return the  {@link DAVResource} associated with a {@link URI}. If the specified  {@link URI} is relative it will be resolved againstthe root of this  {@link DAVRepository}."}
{"code":"void function ( String currentMessage ) { if ( isRunningOnServer ( ) ) return ; progressMonitor . currentMessage = currentMessage ; progressMonitor . log . append ( currentMessage + \" \" ) ; if ( progressMonitor . consoleMode ) { System . out . println ( currentMessage ) ; } }","nl":"Logs a Message."}
{"code":"boolean function ( Pattern pattern , String subject ) { if ( subject != null && ! \"\" . equals ( subject ) ) { Matcher matcher = pattern . matcher ( subject ) ; if ( matcher . find ( ) ) { return true ; } } return false ; }","nl":"Simple commodity method (also designed to increase readability of source code, and to decrease import in the calling class). Provide a pattern and a subject, it'll do the proper matching."}
{"code":"boolean function ( UserModel model ) { return userService . updateUserModel ( model ) ; }","nl":"Updates/writes a complete user object."}
{"code":"void function ( String alternateUfsRoot ) { UnderFileSystemUtils . deleteDir ( alternateUfsRoot ) ; }","nl":"Deletes the alternate under file system directory."}
{"code":"String function ( File file ) { BufferedReader in = new BufferedReader ( new FileReader ( file ) ) ; return readFile ( in ) ; }","nl":"Retrieves the Content from the Specified File."}
{"code":"void function ( ) { testEventProperties . put ( ActivityEvent . ID_KEY , \"\" ) ; acitivityController . handleEvent ( new Event ( ActivityEvent . EVENT_TOPIC , testEventProperties ) ) ; }","nl":"Test method for  {@link ActivityController#handleEvent(org.osgi.service.event.Event)}Verifies that  {@code IllegalArgumentException} is thrown when {@code Event}'s  {@link ActivityEvent#ID_KEY} property is empty."}
{"code":"String function ( Class < ? > type ) { String name = SHORT_NAMES_BY_TYPE . get ( type ) ; return name == null ? type . getName ( ) : name ; }","nl":"Return the name of the type in its short form if its known to us otherwise return its name fully packaged."}
{"code":"AccessibilityRecordCompat function ( AccessibilityEvent event , int index ) { return new AccessibilityRecordCompat ( IMPL . getRecord ( event , index ) ) ; }","nl":"Gets the record at a given index."}
{"code":"QRDecomposition < DenseMatrix64F > function ( int numRows , int numCols ) { return new QRDecompositionHouseholderColumn_D64 ( ) ; }","nl":" Returns a  {@link org.ejml.interfaces.decomposition.QRDecomposition} that has been optimized for the specified matrix size."}
{"code":"void function ( byte [ ] value ) { _messageBody = value ; }","nl":"Sets the message body."}
{"code":"MenuItem function ( OnMenuItemClickListener menuItemClickListener ) { mMenuItem . setOnMenuItemClickListener ( menuItemClickListener ) ; return this ; }","nl":"Set a custom listener for invocation of this menu item."}
{"code":"void function ( ) { assertTrue ( vhw . getTalkerId ( ) == TalkerId . VW ) ; assertTrue ( SentenceId . valueOf ( vhw . getSentenceId ( ) ) == SentenceId . VHW ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.VHWParser#VHWParser(java.lang.String)}."}
{"code":"void function ( ) { LOG . trace ( \"Processing input buffer...\" ) ; this . m_protocolHandler . handleMessages ( this . m_readBuffer , this . m_inetSocketAddress ) ; this . m_readBuffer . clear ( ) ; }","nl":"Processes the internal buffer, converting it into packets if enough data is available."}
{"code":"double function ( ) { checkState ( count > 1 ) ; if ( isNaN ( sumOfSquaresOfDeltas ) ) { return NaN ; } return ensureNonNegative ( sumOfSquaresOfDeltas ) / ( count - 1 ) ; }","nl":"Returns the unbiased sample variance of the values. If this dataset is a sample drawn from a population, this is an unbiased estimator of the population variance of the population. The count must be greater than one. This is not guaranteed to return zero when the dataset consists of the same value multiple times, due to numerical errors. However, it is guaranteed never to return a negative result. Non-finite values If the dataset contains any non-finite values ( {@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or  {@link Double#NaN}) then the result is  {@link Double#NaN}."}
{"code":"Object function ( String name ) { for ( Object mFeature : obsoleteFeatures ) { if ( Model . getFacade ( ) . isAMethod ( mFeature ) && name . equals ( Model . getFacade ( ) . getName ( mFeature ) ) ) { return mFeature ; } } return null ; }","nl":"Get a method from the current classifier not yet modeled."}
{"code":"void function ( final HttpParams params , boolean value ) { if ( params == null ) { throw new IllegalArgumentException ( \"HTTP parameters may not be null\" ) ; } params . setBooleanParameter ( CoreConnectionPNames . TCP_NODELAY , value ) ; }","nl":"Sets value of the  {@link CoreConnectionPNames#TCP_NODELAY} parameter."}
{"code":"boolean function ( final HttpServletRequest request ) { return ( request == null ) ? false : check ( request . getHeader ( \"user-agent\" ) ) ; }","nl":"Just a wrapper to  {@link #check(String)}."}
{"code":"void function ( AbstractReportNode child ) { childNodes . add ( 0 , child ) ; child . parentNode = this ; }","nl":"Adds the child in front of any other childs."}
{"code":"boolean function ( ) { return bufferSize == 0 ; }","nl":"Determines if the buffer is empty."}
{"code":"Function < Object , T > function ( Supplier < T > supplier ) { return new SupplierFunction < T > ( supplier ) ; }","nl":"Returns a function that ignores its input and returns the result of  {@code supplier.get()}. Java 8 users: use the lambda expression  {@code o -> supplier.get()} instead."}
{"code":"void function ( ) { final double value = 359.9 ; hdg . setHeading ( value ) ; assertEquals ( value , hdg . getHeading ( ) , 0.1 ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.HDGParser#setHeading(double)}."}
{"code":"StorageTierView function ( StorageTierView tierView ) { int nextOrdinal = tierView . getTierViewOrdinal ( ) + 1 ; if ( nextOrdinal < mTierViews . size ( ) ) { return mTierViews . get ( nextOrdinal ) ; } return null ; }","nl":"Gets the next storage tier view."}
{"code":"void function ( final String str ) { final File outFile = new File ( \"YouTubeErrorResults.xml\" ) ; outFile . delete ( ) ; final OutputStream os = new FileOutputStream ( outFile ) ; final Reader is = new StringReader ( str ) ; IOUtils . copy ( is , os ) ; os . flush ( ) ; os . close ( ) ; is . close ( ) ; }","nl":"Just for debugging XML feeds."}
{"code":"void function ( THashSet < String > whitelist ) { mWhitelist . addAll ( whitelist ) ; }","nl":"Add whitelist to this host file. This supports simple regex in entries."}
{"code":"int function ( String fldname ) { if ( p1 . schema ( ) . hasField ( fldname ) ) return p1 . distinctValues ( fldname ) ; else return p2 . distinctValues ( fldname ) ; }","nl":"Estimates the distinct number of field values in the join. Since the join does not increase or decrease field values, the estimate is the same as in the appropriate underlying query."}
{"code":"File function ( File path ) { try { return path . getCanonicalFile ( ) ; } catch ( IOException e ) { return path . getAbsoluteFile ( ) ; } }","nl":"Returns the exact path for a file. This path will be the canonical path unless an exception is thrown in which case it will be the absolute path."}
{"code":"int function ( ) { return pref_group_len ; }","nl":"Get the preferred group length."}
{"code":"double function ( D1Matrix64F a ) { double total = 0 ; int size = a . getNumElements ( ) ; for ( int i = 0 ; i < size ; i ++ ) { double val = a . get ( i ) ; total += val * val ; } return Math . sqrt ( total ) ; }","nl":" This implementation of the Frobenius norm is a straight forward implementation and can be susceptible for overflow/underflow issues.  A more resilient implementation is {@link #normF}. "}
{"code":"double function ( D1Matrix64F m ) { double total = 0 ; int N = m . getNumElements ( ) ; for ( int i = 0 ; i < N ; i ++ ) { double d = m . data [ i ] ; total += d * d ; } return total ; }","nl":"Sums up the square of each element in the matrix.  This is equivalent to the Frobenius norm squared."}
{"code":"boolean function ( Message message ) { Boolean requestor = ( Boolean ) message . get ( Message . REQUESTOR_ROLE ) ; return requestor != null && requestor . booleanValue ( ) ; }","nl":"Determine if current messaging role is that of requestor."}
{"code":"String function ( ) { return fldname ; }","nl":"Returns the field whose values will be modified"}
{"code":"void function ( String type , String unit , List < String > imageLocations ) { List < File > files = new ArrayList < > ( ) ; for ( String s : imageLocations ) { File f = new File ( s ) ; files . add ( f ) ; } this . saveFiles ( type , unit , files ) ; }","nl":"Takes in a list of file locations instead of actual files and renames/saves them"}
{"code":"boolean function ( ActivityRequest activityRequest ) { if ( activityRequest == null ) { return false ; } if ( activityRequest . getFeedId ( ) == null ) { return false ; } return activityRequest . getConfigProperties ( ) != null ; }","nl":"Validate the incoming request for mandatory parameters."}
{"code":"byte [ ] function ( byte [ ] src , int destLen ) { return decompress ( src , 0 , destLen ) ; }","nl":"Convenience method, equivalent to calling {@link #decompress(byte[],int,int) decompress(src, 0, destLen)}."}
{"code":"void function ( String text ) { String [ ] array = text . replaceAll ( \"|pP\" , \" \" ) . toLowerCase ( ) . split ( \"|s+\" ) ; for ( int i = 0 ; i < array . length ; i ++ ) { String term = array [ i ] ; incrementTermCount ( term ) ; } }","nl":"Splits `text` into words and counts them."}
{"code":"AdaptableHeuristicFunction function ( Object goal , Map map ) { this . goal = goal ; this . map = map ; return this ; }","nl":"Modifies goal and map information and returns the modified heuristic function."}
{"code":"int function ( ) { return this . emptyAnnotationRejects ; }","nl":"Provide number of REJECT decisions for Emtpy Annotation Mutations."}
{"code":"void function ( ) { mTestStream . setWrittenBytes ( BLOCK_LENGTH ) ; Assert . assertEquals ( 0L , mTestStream . remaining ( ) ) ; mTestStream . setWrittenBytes ( 40L ) ; Assert . assertEquals ( BLOCK_LENGTH - 40L , mTestStream . remaining ( ) ) ; mTestStream . setWrittenBytes ( 0L ) ; Assert . assertEquals ( BLOCK_LENGTH , mTestStream . remaining ( ) ) ; }","nl":"Tests for the  {@link BufferedBlockOutStream#remaining()} method."}
{"code":"List < StorageTierView > function ( String tierAlias ) { int ordinal = getTierView ( tierAlias ) . getTierViewOrdinal ( ) ; return mTierViews . subList ( ordinal + 1 , mTierViews . size ( ) ) ; }","nl":"Gets all tierViews before certain tierView. Throws an  {@link IllegalArgumentException} if thetierAlias is not found."}
{"code":"DeterministicKey function ( ) { if ( ! hasPrivate ( ) ) return this ; final DeterministicKey parentPub = getParent ( ) == null ? null : getParent ( ) . getPubOnly ( ) ; return new DeterministicKey ( getChildNumberPath ( ) , getChainCode ( ) , getPubPoint ( ) , null , parentPub ) ; }","nl":"Returns the same key with the private part removed. May return the same instance."}
{"code":"Future < ? > function ( ) { RecomputePlan plan = mPlanner . plan ( ) ; if ( plan != null && ! plan . isEmpty ( ) ) { return mRecomputeLauncherService . submit ( new RecomputeLauncher ( plan ) ) ; } return Futures . < Void > immediateFuture ( null ) ; }","nl":"A version of  {@code heartbeat} which returns a {@link Future} representing completion of therecompute plan. This is especially useful for tests."}
{"code":"void function ( final String propertyName , final PropertyChangeListener listener ) { m_PropertyChangeSupport . removePropertyChangeListener ( propertyName , listener ) ; }","nl":"Remove PropertyChangeListener."}
{"code":"String function ( ) { return withExceptionHandling ( new Trans < String > ( ) { public String transform ( ) { return transformation . transformToString ( ) ; } } ) ; }","nl":"Perform the XSLT transformation specified in the constructor"}
{"code":"ArrayList function ( ) { return parameters ; }","nl":"Gets all Parameters."}
{"code":"BigDecimal function ( ) { return this . fileSize ; }","nl":"Gets the file size."}
{"code":"void function ( String key , String value ) { switch ( key ) { case \"background-color\" : if ( addBackgroundColor ( value ) ) { properties . put ( key , value ) ; } break ; case \"width\" : if ( addWidth ( value ) ) { properties . put ( key , value ) ; } break ; } }","nl":"Adds a CSS property to a component. e.g.: key = background-color value = yellow"}
{"code":"StatSource function ( int id ) { if ( id > 0 ) { return this . statSources . get ( id ) ; } else { return null ; } }","nl":"Return linked stat source"}
{"code":"void function ( HttpRequest request , HttpResponse response ) { }","nl":"Called when the connection is being finalized after receiving the response. Use this to do any cleanup / resource freeing."}
{"code":"void function ( Node node ) { List < Node > nodes = nodeNameToNodes . get ( node . toString ( ) ) ; if ( nodes != null ) { nodes . add ( node ) ; } }","nl":"Index a single node for visitation by rules."}
{"code":"long function ( ) { return this . testId ; }","nl":"Gets the test id."}
{"code":"void function ( short value ) { format . checkType ( 'h' , true ) ; packLong ( value , true ) ; }","nl":"Add a short field to the stream. \\param value The short value to be added."}
{"code":"TransactionOutputChanges function ( ) { return txOutChanges ; }","nl":"Get the transaction output changes if they have been calculated, otherwise null. Only one of this and getTransactions() will return a non-null value."}
{"code":"void function ( String callbackHandlerClass ) { this . callbackHandlerClass = callbackHandlerClass ; LOG . fine ( \"Setting callbackHandlerClass: \" + callbackHandlerClass ) ; }","nl":"Set the String corresponding to the CallbackHandler class."}
{"code":"int function ( ) { return this . peakEnd - this . peakStart ; }","nl":"Calculates the size of the ROI"}
{"code":"void function ( String x ) { tree = parseTree ( x ) ; mapS = new HashMap < MTDFragmentAST , Tuple > ( ) ; mapN = new HashMap < String , IntegerHolder > ( ) ; decorate ( tree , new IntegerHolder ( 0 ) ) ; }","nl":"Internal method that updates the Tree from the String"}
{"code":"void function ( THashSet < String > blacklist ) { mBlacklist . addAll ( blacklist ) ; }","nl":"Add blacklist to this hosts file"}
{"code":"BigDecimal function ( ) { return this . expDataSetId ; }","nl":"Gets the exp data set id."}
{"code":"void function ( String errorMsg ) { this . errorMsg = errorMsg ; }","nl":"Sets the exp msg."}
{"code":"MetadataEditorCompat function ( int key , Bitmap bitmap ) { if ( HAS_REMOTE_CONTROL_APIS ) { ( ( RemoteControlClient . MetadataEditor ) mActualMetadataEditor ) . putBitmap ( key , bitmap ) ; } return this ; }","nl":"Sets the album / artwork picture to be displayed on the remote control."}
{"code":"String function ( String actionName ) { return getWorkflow ( ) . getWorkflowInstance ( ) . getVar ( actionName + WorkflowInstance . NODE_VAR_SEPARATOR + ACTION_EXTERNAL_ID ) ; }","nl":"Return the external ID of an action."}
{"code":"String function ( ConfigurationKey key ) { return getString ( key , \"\" ) ; }","nl":"Returns the string value of a configuration property."}
{"code":"int function ( ) { int itemLen = 0 ; if ( format . available ( ) == 1 ) { itemLen = valueLen - valueOff ; } else { itemLen = unpackInt ( false ) ; } return itemLen ; }","nl":"Finds the length of a byte array. Either by decoding the length from the format or using the remaining size of the stream."}
{"code":"String function ( int i ) { if ( i == 0 ) { return \"teens\" ; } else if ( i == 1 ) { return \"twenties\" ; } else { return \"thirtees\" ; } }","nl":"returns the class name corresponding to a number"}
{"code":"void function ( ) { hdm . setHeading ( 123.45 ) ; assertEquals ( 123.5 , hdm . getHeading ( ) , 0.1 ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.HDMParser#setHeading(double)}."}
{"code":"void function ( T entry ) { if ( position >= max ) { position = 0 ; haveOverflow = true ; } if ( circularArray . size ( ) > position ) { circularArray . remove ( position ) ; } circularArray . add ( position , entry ) ; position ++ ; }","nl":"add an entry"}
{"code":"void function ( ) { mMasterThread . start ( ) ; }","nl":"Starts the master."}
{"code":"void function ( String identifier ) { this . identifier = identifier ; }","nl":"Set the identifier associated with this token"}
{"code":"void function ( byte [ ] buf , int pos , int len ) { if ( pos + len > buf . length ) { throw new ArrayIndexOutOfBoundsException ( ) ; } }","nl":"Ensures that the given buffer contains at least the given number of bytes after the given offset."}
{"code":"void function ( ) { mWriteLock . lock ( ) ; Assert . assertFalse ( mWriteLock . tryLock ( ) ) ; }","nl":"Tests the  {@link ClientRWLock#tryLock()} method."}
{"code":"Long function ( ) { return testId ; }","nl":"Gets the test id."}
{"code":"List < String > function ( ) { return log ; }","nl":"Returns the entries as a List."}
{"code":"void function ( ) { assertEquals ( - 6.1 , rmc . getVariation ( ) , 0.001 ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.RMCParser#getVariation()} ."}
{"code":"int function ( Date date , boolean roundup ) { return minutesAgo ( date , System . currentTimeMillis ( ) , roundup ) ; }","nl":"Return the difference in minutes between now and the date."}
{"code":"File function ( Context context ) { File libsDirectory = getLibsDirectory ( context ) ; if ( ! libsDirectory . isDirectory ( ) && ! libsDirectory . mkdirs ( ) ) { throw new RuntimeException ( \"could not create libs directory\" ) ; } return libsDirectory ; }","nl":"Return the directory into which we put our self-extracted native libraries and make sure it exists."}
{"code":"Set < String > function ( final ResourceTypeHandler type ) { return extensionsDenied . get ( type ) ; }","nl":"Getter for the denied extensions of a file type."}
{"code":"void function ( ) { RPCFileReadResponse resp = new RPCFileReadResponse ( TEMP_UFS_FILE_ID , OFFSET , LENGTH , null , STATUS ) ; int encodedLength = resp . getEncodedLength ( ) ; resp . encode ( mBuffer ) ; Assert . assertEquals ( encodedLength , mBuffer . readableBytes ( ) ) ; }","nl":"Tests the  {@link RPCBlockReadResponse#getEncodedLength()} method."}
{"code":"String function ( String template , Object ... args ) { return String . format ( Locale . ROOT , template , args ) ; }","nl":"Format the template with args, only supports the placeholder {@code %s}."}
{"code":"List < T > function ( T o1 , T o2 , T o3 ) { List < T > l = new ArrayList < > ( 3 ) ; l . add ( o1 ) ; l . add ( o2 ) ; l . add ( o3 ) ; return l ; }","nl":"Return a list containing  {@code o1}, ...,  {@code o3}."}
{"code":"void function ( Class < ? > clazz , Object obj ) { isInstanceOf ( clazz , obj , \"\" ) ; }","nl":"Assert that the provided object is an instance of the provided class. Assert.instanceOf(Foo.class, foo);"}
{"code":"Definition function ( Server server ) { Service service = server . getEndpoint ( ) . getService ( ) ; ServiceWSDLBuilder wsdlBuilder = new ServiceWSDLBuilder ( bus , service . getServiceInfos ( ) . get ( 0 ) ) ; wsdlBuilder . setUseSchemaImports ( false ) ; return wsdlBuilder . build ( ) ; }","nl":"Return a WSDL definition model for a server."}
{"code":"String function ( String dataPath ) { return getList ( dataPath ) . get ( 0 ) ; }","nl":"Used to read only single data"}
{"code":"boolean function ( ) { long now = System . currentTimeMillis ( ) ; for ( SentenceEvent se : events ) { long age = now - se . getTimeStamp ( ) ; if ( age > 1000 ) { return false ; } } return isValid ( ) ; }","nl":"Validates the collected sentences by checking the ages of each sentence and then by calling  {@link #isValid()}. If extending implementation has no validation criteria, it should return always true."}
{"code":"void function ( ) { NoFileAssertListener listener = new NoFileAssertListener ( 1 ) ; cpd . setCpdListener ( listener ) ; cpd . add ( new File ( \"./\" + BASE_TEST_RESOURCE_PATH , \"real-file.txt\" ) ) ; listener . verify ( ) ; }","nl":"Add a file with a relative path - should still be added and not be detected as a sym link."}
{"code":"Method function ( Class type , Method bridgeMethod ) { return ReflectionUtils . findMethod ( type , bridgeMethod . getName ( ) , bridgeMethod . getParameterTypes ( ) ) ; }","nl":"If the supplied  {@link Class} has a declared {@link Method} whose signature matchesthat of the supplied  {@link Method}, then this matching  {@link Method} is returned,otherwise  {@code null} is returned."}
{"code":"void function ( Map < K , V > map , Parcel out , int flags ) { if ( map != null ) { out . writeInt ( map . size ( ) ) ; for ( Entry < K , V > entry : map . entrySet ( ) ) { out . writeParcelable ( entry . getKey ( ) , flags ) ; out . writeParcelable ( entry . getValue ( ) , flags ) ; } } else { out . writeInt ( - 1 ) ; } }","nl":"Write a HashMap to a Parcel, class of key and value can parcelable both"}
{"code":"String function ( ) { return title ; }","nl":"Gets the title attribute of the StylesheetInfo object"}
{"code":"void function ( Timestamp modifiedDate ) { this . modifiedDate = modifiedDate ; }","nl":"Sets the modified date."}
{"code":"boolean function ( ) { return false ; }","nl":"Currently unused"}
{"code":"boolean function ( final String key , final Map map ) { if ( map == null ) { return false ; } Object o = map . get ( key ) ; if ( ! ( o instanceof Boolean ) ) { return false ; } return ( ( Boolean ) o ) . booleanValue ( ) ; }","nl":"Utility function to determine the presence of a key.  The default is false."}
{"code":"ListenableFuture < PaymentChannelClientConnection > function ( ) { return channelOpenFuture ; }","nl":"Gets a future which returns this when the channel is successfully opened, or throws an exception if there is an error before the channel has reached the open state. After this future completes successfully, you may call {@link PaymentChannelClientConnection#incrementPayment(java.math.BigInteger)} to begin paying the server."}
{"code":"String function ( ) { return \"}\" ; }","nl":"Returns a string that is used to end a graph."}
{"code":"Timestamp function ( ) { return this . modifiedDate ; }","nl":"Gets the modified date."}
{"code":"void function ( final int x , final byte [ ] buf , final int offset ) { buf [ offset ] = ( byte ) x ; buf [ offset + 1 ] = ( byte ) ( x >> 8 ) ; buf [ offset + 2 ] = ( byte ) ( x >> 16 ) ; buf [ offset + 3 ] = ( byte ) ( x >> 24 ) ; }","nl":"Int to little-endian bytes: writes x to buf[offset ..]."}
{"code":"void function ( String graphPath , Bundle parameters , RequestListener listener , final Object state ) { request ( graphPath , parameters , \"GET\" , listener , state ) ; }","nl":"Make a request to the Facebook Graph API with the given string parameters using an HTTP GET (default method).  See http://developers.facebook.com/docs/api  Note that this method is asynchronous and the callback will be invoked in a background thread; operations that affect the UI will need to be posted to the UI thread or an appropriate handler.  This method is deprecated.  See  {@link Facebook} and {@link com.facebook.Request} for more info."}
{"code":"ServiceBuilder function ( Class < ? extends Api > apiClass ) { this . api = createApi ( apiClass ) ; return this ; }","nl":"Configures the  {@link Api}"}
{"code":"boolean function ( CSSPrimitiveValue primitive ) { short type = 0 ; type = ( ( CSSPrimitiveValue ) primitive ) . getPrimitiveType ( ) ; return isAbsoluteUnit ( type ) ; }","nl":"Returns true if the specified value was absolute (even if we have a computed value for it), meaning that either the value can be used directly (e.g. pixels) or there is a fixed context-independent conversion for it (e.g. inches). Proportional types (e.g. %) return false."}
{"code":"boolean function ( ) { return ( System . getProperty ( \"mrj.version\" ) != null ) ; }","nl":"Check whether we deal with a Macintosh."}
{"code":"void function ( ) { assertEquals ( 25.0 , instance . getLongitude ( ) , 0.0000001 ) ; }","nl":"Test for getLongitude()"}
{"code":"void function ( ) { RPCFileReadRequest req = new RPCFileReadRequest ( TEMP_UFS_FILE_ID , OFFSET , LENGTH ) ; assertValid ( req ) ; req = new RPCFileReadRequest ( TEMP_UFS_FILE_ID , OFFSET , 0 ) ; assertValid ( req ) ; }","nl":"Tests the  {@link RPCFileReadRequest#RPCFileReadRequest(long,long,long)} constructor with avalid length."}
{"code":"boolean function ( StoredBlock other ) { return chainWork . compareTo ( other . chainWork ) > 0 ; }","nl":"Returns true if this objects chainWork is higher than the others."}
{"code":"void function ( ) { dataSetFieldColumnMapping = fetcherRegDataUnitVerifier . buildFieldAndColumnMapping ( new PCLDataSetEntity ( ) ) ; }","nl":"Inits the."}
{"code":"void function ( ) { if ( connection != null && connection . isOpen ( ) ) { try { connection . close ( ) ; } catch ( IOException e ) { handleException ( \"Error while closing the connection ..\" , e ) ; } finally { connection = null ; } } }","nl":"Close the connection"}
{"code":"Sha256Hash function ( ) { return hash ; }","nl":"The hash of the transaction which holds this output."}
{"code":"void function ( ) { ASTElement elm = element ( \"a\" ) ; ASTElement elm2 = element ( \"b\" ) ; ASTElement elm3 = element ( \"b\" ) ; tagList . openTag ( elm ) ; tagList . openTag ( elm2 ) ; tagList . openTag ( elm3 ) ; tagList . closeTag ( elm ) ; assertFalse ( elm . isUnclosed ( ) ) ; assertTrue ( elm2 . isUnclosed ( ) ) ; assertTrue ( elm3 . isUnclosed ( ) ) ; }","nl":"&lt;a&gt; &lt;b&gt; &lt;b&gt; &lt;/a&gt;"}
{"code":"void function ( char ch [ ] , int start , int length ) { try { writer . writeCharacters ( ch , start , length ) ; } catch ( XMLStreamException e ) { throw new SAXException ( e ) ; } }","nl":"Method ignorableWhitespace."}
{"code":"HashCodeBuilder function ( Object [ ] array ) { if ( array == null ) { iTotal = iTotal * iConstant ; } else { for ( Object element : array ) { append ( element ) ; } } return this ; }","nl":" Append a hashCode for an Object array. "}
{"code":"void function ( String value ) { this . filepath = value ; }","nl":"Sets the value of the filepath property."}
{"code":"void function ( ) { _sharedContext . flushFonts ( ) ; ( ( SWTReplacedElementFactory ) _sharedContext . getReplacedElementFactory ( ) ) . clean ( ) ; UserAgentCallback uac = _sharedContext . getUac ( ) ; if ( uac instanceof NaiveUserAgent ) { ( ( NaiveUserAgent ) uac ) . disposeCache ( ) ; } }","nl":"Dispose resources used by this  {@link PrinterRenderer}. This does NOT dispose the attached  {@link Printer}."}
{"code":"String function ( ) { String s = uniqueName ; if ( s != null ) { if ( ! s . endsWith ( getZipFileExtension ( ) ) ) { s += getZipFileExtension ( ) ; } } return s ; }","nl":"In contrast to  {@link #getZipName()} returns the member'sname without the prepended name of the project (but with the extension).  TODO: This is not used anywhere - shall we remove it?"}
{"code":"long function ( ) { return this . value ; }","nl":"Returns the number of satoshis of this monetary value. It's deprecated in favour of accessing  {@link #value}directly."}
{"code":"boolean function ( ) { return THIS . equals ( image ) || SUPER . equals ( image ) ; }","nl":"Simply return true is the image is equal to keyword 'this' or 'super'."}
{"code":"void function ( ) { Time t = ttm . getTime ( ) ; assertNotNull ( t ) ; assertEquals ( 17 , t . getHour ( ) ) ; assertEquals ( 55 , t . getMinutes ( ) ) ; assertEquals ( 50.24 , t . getSeconds ( ) , 0.001 ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#getTime()} ."}
{"code":"String function ( ) { return string1 ; }","nl":"Gets the value of the string1 property."}
{"code":"void function ( String userName ) { this . userName = userName ; }","nl":"Sets the username of the user"}
{"code":"void function ( ) { this . m_markedForRemoval = true ; }","nl":"Marks this directory as one that has been removed, indicating we should also remove all the directory contents."}
{"code":"boolean function ( Object e ) { return isLink ( e ) && uac . isVisited ( nsh . getLinkUri ( ( Element ) e ) ) ; }","nl":"Gets the visited attribute of the StandardAttributeResolver object"}
{"code":"Object function ( String command ) { return webEngine . executeScript ( command ) ; }","nl":"Executes the specified JavaScript Command"}
{"code":"Result function ( ResultLevel level ) { Result ret = new Result ( ) ; for ( ResultEntry l : this . log ) { if ( l . getLevel ( ) . compareTo ( level ) <= 0 ) { ret . add ( l ) ; } } return ret ; }","nl":"Complementary operation to filterOnly"}
{"code":"double function ( OperationMetricKey key , ASTMethodOrConstructorDeclaration node ) { return TOP_LEVEL_PACKAGE . compute ( key , node , false ) ; }","nl":"Computes a metric identified by its code on a operation AST node."}
{"code":"void function ( final PropertyChangeListener listener , Object modelElement , PropertyChangeEvent pce ) { if ( Model . getUmlFactory ( ) . isRemoved ( modelElement ) ) { LOG . warn ( \"Encountered deleted object during delete of \" + modelElement ) ; return ; } cleanListener ( listener , modelElement ) ; initialiseListener ( listener , modelElement ) ; }","nl":"Update the set of listeners based on the given event.  The default implementation just removes all listeners, and then  re-initialises completely - this is method 1.  A more efficient way would be to dissect  the propertyChangeEvent, and only adapt the listeners that need to be adapted - this is method 2.  Method 2 is explained by the code below that is commented out. Method 1 is the easiest to implement, since at every arrival of an event, we just remove all old listeners, and then inspect the current model,  and add listeners where we need them. I.e. the advantage is  that we only need to traverse the model structure in one location, i.e.  the initialiseListener() method."}
{"code":"LinearSolver < DenseMatrix64F > function ( int numRows , int numCols ) { if ( numRows == numCols ) return linear ( numRows ) ; else return leastSquares ( numRows , numCols ) ; }","nl":"Creates a general purpose solver.  Use this if you are not sure what you need."}
{"code":"Long function ( ) { return dataSetId ; }","nl":"Gets the data set id."}
{"code":"void function ( Timestamp modifiedDate ) { this . modifiedDate = modifiedDate ; }","nl":"Sets the modified date."}
{"code":"void function ( ) { initInternal ( \"\" ) ; }","nl":"Alternate initialization entry point for use by ArgoEclipse. It leaves out telling GEF about bundles that it won't be able to access. NOTE: This must be called before any other methods are called to work properly."}
{"code":"long function ( byte [ ] input , int offset , int length ) { long result = 0 ; int limit = Math . min ( length , 8 ) ; for ( int i = 0 ; i < limit ; i ++ ) { result |= ( input [ offset + i ] & 0xFFL ) << ( i * 8 ) ; } return result ; }","nl":"Similar to load64, but allows offset + 8 > input.length, padding the result with zeroes. This has to explicitly reverse the order of the bytes as it packs them into the result which makes it slower than the native version."}
{"code":"int function ( ConfigurationKey key , int defaultValue ) { return config . getInteger ( key , defaultValue ) ; }","nl":"Returns the numeric value of a configuration property."}
{"code":"void function ( ) { progressMonitor . curValue ++ ; }","nl":"Increments the Current Value."}
{"code":"Collection < Edge > function ( Node node ) { return graph . getIncidentEdges ( node ) ; }","nl":"Returns the collection of nodes in this network which are connected to edge."}
{"code":"HttpHost function ( ) { InetSocketAddress address = localServer . getServiceAddress ( ) ; return new HttpHost ( address . getHostName ( ) , address . getPort ( ) , \"http\" ) ; }","nl":"Obtains the address of the local test server."}
{"code":"String function ( ) { return namespaceURI ; }","nl":"Get the WS-ReliableMessaging namespace to be used for encoding and decoding messages."}
{"code":"void function ( @ PathVariable long device_id ) { repository . delete ( device_id ) ; }","nl":"Remove a terminal"}
{"code":"int function ( String fldname ) { return si . distinctValues ( fldname ) ; }","nl":"Estimates the number of distinct field values in the table, which is obtainable from the statistics manager."}
{"code":"void function ( long sequenceNumber ) { while ( ! session . isShutdown ( ) && ! haveAcknowledgementFor ( sequenceNumber ) ) { waitForSeqAckLatch . set ( new CountDownLatch ( 1 ) ) ; waitForSeqAckLatch . get ( ) . await ( 10 , TimeUnit . MILLISECONDS ) ; } }","nl":"wait until the given sequence number has been acknowledged"}
{"code":"void function ( ) { RPCFileWriteRequest req = new RPCFileWriteRequest ( TEMP_UFS_FILE_ID , OFFSET , LENGTH , null ) ; int encodedLength = req . getEncodedLength ( ) ; req . encode ( mBuffer ) ; Assert . assertEquals ( encodedLength , mBuffer . readableBytes ( ) ) ; }","nl":"Tests the  {@link RPCFileReadRequest#getEncodedLength()} method."}
{"code":"SpringChain function ( ) { return new SpringChain ( ) ; }","nl":"Factory method for creating a new SpringChain with default SpringConfig."}
{"code":"boolean function ( String path ) { File file = new File ( path ) ; if ( file . exists ( ) ) { return true ; } return false ; }","nl":"Check whether a given file exists in the system"}
{"code":"String function ( ) { return this . checksumType ; }","nl":"Gets the checksum type."}
{"code":"void function ( AbstractDosPlugin instance ) { String result = instance . getName ( ) ; assertTrue ( result . length ( ) > 0 ) ; }","nl":"Test of getName method, of class TestDosAttack."}
{"code":"long function ( ) { return inactivityTimeout == null ? 0 : inactivityTimeout . longValue ( ) ; }","nl":"Get the number of milliseconds for the inactivity timeout."}
{"code":"ELEvaluator function ( Date nominalTime , Configuration conf ) { ELEvaluator eval = Services . get ( ) . get ( ELService . class ) . createEvaluator ( \"coord-sla-create\" ) ; setConfigToEval ( eval , conf ) ; SyncCoordAction appInst = new SyncCoordAction ( ) ; appInst . setNominalTime ( nominalTime ) ; CoordELFunctions . configureEvaluator ( eval , null , appInst ) ; return eval ; }","nl":"Create a SLA evaluator to be used during Materialization"}
{"code":"Sentence function ( String nmea ) { String sid = SentenceId . parseStr ( nmea ) ; return createParserImpl ( sid , nmea ) ; }","nl":"Creates a parser for specified NMEA 0183 sentence String. The parser implementation is selected from registered parsers according to sentence type. The returned instance must be cast in to correct sentence interface, for which the type should first be checked by using the {@link Sentence#getSentenceId()} method."}
{"code":"TimestampService function ( ) { return new TimestampServiceImpl ( ) ; }","nl":"Returns the timestamp service."}
{"code":"void function ( String lastVersion ) { this . lastVersion = lastVersion ; }","nl":"manually set the last version name - for testing purposes only"}
{"code":"void function ( InputStream is ) { }","nl":"Initialize the Hessian stream with the underlying input stream."}
{"code":"void function ( boolean verifyProofOfPossession ) { this . verifyProofOfPossession = verifyProofOfPossession ; }","nl":"Set whether proof of possession is required or not to cancel a token"}
{"code":"PolicyPublisher function ( ) { return policyPublisher ; }","nl":"This method returns policy publisher"}
{"code":"Options function ( ) { return options ; }","nl":"Get Application options. Currently only video options."}
{"code":"void function ( ARDrone drone ) { this . drone = drone ; this . cmd = this . drone . getCommandManager ( ) ; }","nl":"Should be called before once before any other method is called"}
{"code":"void function ( T container , String uri , BitmapDisplayConfig config , long total , long current ) { }","nl":"Call back when loading."}
{"code":"void function ( ErrorQueue eq ) { Report . eq = eq ; }","nl":"Set the error queue."}
{"code":"void function ( Stylesheet stylesheet ) { this . stylesheet = stylesheet ; }","nl":"Sets the stylesheet attribute of the StylesheetInfo object"}
{"code":"Auth function ( ) { return auth ; }","nl":"Gets the value of the auth property."}
{"code":"void function ( final JSONObject json , final String name , final Long value ) { try { json . put ( name , value ) ; } catch ( final JSONException e ) { LOG . warn ( \"JSON error\" , e ) ; } }","nl":"Puts the specified name/value pair in the specified JSON object."}
{"code":"boolean function ( View host , AccessibilityEvent event ) { return IMPL . dispatchPopulateAccessibilityEvent ( DEFAULT_DELEGATE , host , event ) ; }","nl":"Dispatches an  {@link AccessibilityEvent} to the host {@link View} first and thento its children for adding their text content to the event.  The default implementation behaves as {@link View#dispatchPopulateAccessibilityEvent(AccessibilityEvent) View#dispatchPopulateAccessibilityEvent(AccessibilityEvent)} forthe case of no accessibility delegate been set. "}
{"code":"Optional < String > function ( String hexString ) { int hexColor = Integer . parseInt ( hexString , 16 ) ; int r = ( hexColor & 0xFF0000 ) >> 16 ; int g = ( hexColor & 0xFF00 ) >> 8 ; int b = ( hexColor & 0xFF ) ; return getNamedColor ( r , g , b ) ; }","nl":"Get the color name of the color that is exactly equal to the given hex color value (as a 6-digit hex String)."}
{"code":"Schema function ( ) { return sch ; }","nl":"Returns the schema of the index join."}
{"code":"Long function ( ) { return batchId ; }","nl":"Gets the batch id."}
{"code":"void function ( String fromLocation , String toLocation , Double distance ) { links . set ( fromLocation , toLocation , distance ) ; }","nl":"Adds a one-way connection to the map."}
{"code":"void function ( String fldname , int length ) { addField ( fldname , VARCHAR , length ) ; }","nl":"Adds a string field to the schema. The length is the conceptual length of the field. For example, if the field is defined as varchar(8), then its length is 8."}
{"code":"void function ( Collection collection , String message ) { if ( CollectionUtils . isEmpty ( collection ) ) { throw new IllegalArgumentException ( message ) ; } }","nl":"Assert that a collection has elements; that is, it must not be {@code null} and must have at least one element.Assert.notEmpty(collection, \"Collection must have elements\");"}
{"code":"void function ( ) { mClient = Mockito . mock ( AmazonS3Client . class ) ; mManager = Mockito . mock ( TransferManager . class ) ; mS3UnderFileSystem = new S3AUnderFileSystem ( new AlluxioURI ( \"\" ) , mClient , BUCKET_NAME , BUCKET_PREFIX , BUCKET_MODE , ACCOUNT_OWNER , mManager ) ; }","nl":"Set up."}
{"code":"int function ( ) { return blockSize ; }","nl":"Gets the bloack size."}
{"code":"boolean function ( CSSName cssName ) { return cascadedProperties . get ( cssName ) != null ; }","nl":"Returns true if property has been defined in this style."}
{"code":"boolean function ( ) { if ( errorCode != 0 ) { return true ; } return false ; }","nl":"Checks if is SP error out."}
{"code":"OutputStream function ( ) { return this . response . getOutputStream ( ) ; }","nl":"Write the body of the response."}
{"code":"String function ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( String s : log ) { sb . append ( s ) . append ( ( \" \" ) ) ; } return sb . toString ( ) . trim ( ) ; }","nl":"Returns the list as a String representation."}
{"code":"int function ( ) { return 8 * y + x ; }","nl":"The hashCode of a move is 8y+x."}
{"code":"void function ( Scan s ) { Constant newval = s . getVal ( fldname ) ; if ( newval . compareTo ( val ) > 0 ) val = newval ; }","nl":"Replaces the current maximum by the field value in the current record, if it is higher."}
{"code":"boolean function ( ) { return StringUtils . contains ( content , \"Connection reset\" ) || StringUtils . contains ( content , \"Software caused connection abort: recv failed\" ) ; }","nl":"Check for Connection reset"}
{"code":"U2FService function ( ) { if ( u2FService == null ) { synchronized ( U2FService . class ) { if ( u2FService == null ) { u2FService = new U2FService ( ) ; return u2FService ; } else { return u2FService ; } } } else { return u2FService ; } }","nl":"Gets a U2FService instance."}
{"code":"ResponseEntity < DishCollection > function ( @ PathVariable String id ) { log . debug ( \"REST request to get DishCollection : {}\" , id ) ; DishCollection dishCollection = dishCollectionService . findOne ( id ) ; return Optional . ofNullable ( dishCollection ) . map ( result -> new ResponseEntity < > ( result , HttpStatus . OK ) ) . orElse ( new ResponseEntity < > ( HttpStatus . NOT_FOUND ) ) ; }","nl":"GET  /dish-collections/:id : get the \"id\" dishCollection."}
{"code":"Script function ( TransactionSignature signature ) { return new ScriptBuilder ( ) . data ( signature . encodeToBitcoin ( ) ) . build ( ) ; }","nl":"Creates a scriptSig that can redeem a pay-to-pubkey output."}
{"code":"void function ( ) { Mockito . when ( mockServerConfig . getIssuer ( ) ) . thenReturn ( \"www.badexample.net\" ) ; RegisteredClient actualClient = service . getClientConfiguration ( mockServerConfig ) ; assertThat ( actualClient , is ( nullValue ( ) ) ) ; }","nl":"Checks the behavior when the issuer is not known."}
{"code":"Builder function ( String id ) { this . id = id ; return this ; }","nl":"Provide the id to the ExtraDhcpOption's Builder."}
{"code":"void function ( Boolean accountNonExpired ) { this . accountNonExpired = accountNonExpired ; }","nl":"Setea si la cuenta esta expirada o no."}
{"code":"String function ( Object e ) { return nsh . getLang ( ( Element ) e ) ; }","nl":"Gets the lang attribute of the StandardAttributeResolver object"}
{"code":"AbstractAction function ( ) { return redoAction ; }","nl":"Get the action that can redo the last undone action."}
{"code":"Collection < Device > function ( ) { return devices . values ( ) ; }","nl":"Return list of devices as Collection"}
{"code":"void function ( Boolean accountNonLocked ) { this . accountNonLocked = accountNonLocked ; }","nl":"Setea si la cuenta esta bloqueada o no."}
{"code":"List < Station > function ( ) { return stationDao . find ( ) . asList ( ) ; }","nl":"Return all stations"}
{"code":"void function ( ) { for ( Block blk : pins ) { Buffer buff = buffers . get ( blk ) ; bufferMgr . unpin ( buff ) ; } buffers . clear ( ) ; pins . clear ( ) ; }","nl":"Unpins any buffers still pinned by this transaction."}
{"code":"void function ( String message ) { if ( this . debug ) this . doLog ( message , null ) ; }","nl":"Log a debug message to the context logger."}
{"code":"boolean function ( ) { return settings . getBoolean ( Keys . git . enableGitServlet , true ) || ( settings . getInteger ( Keys . git . daemonPort , 0 ) > 0 ) || ( settings . getInteger ( Keys . git . sshPort , 0 ) > 0 ) ; }","nl":"Determine if this Gitblit instance is actively serving git repositories or if it is merely a repository viewer."}
{"code":"void function ( byte [ ] value ) { this . addByteArray ( value , 0 , value . length ) ; }","nl":"Add a byte array field to the stream. \\param value The byte array value to be added."}
{"code":"HashMap < String , GeneticProfile > function ( ) { return getDefaultGeneticProfileMap ( false , true ) ; }","nl":"Gets a hashMap of the default mutation profiles."}
{"code":"String function ( ) { return executionEndDateTime ; }","nl":"Gets the value of the executionEndDateTime property."}
{"code":"void function ( ) { assertEquals ( 11 , ttm . getNumber ( ) ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#getNumber()} ."}
{"code":"Mode function ( ) { return applyUMask ( getUMask ( ) ) ; }","nl":"Creates a new mode by applying the umask specified in configuration to this mode."}
{"code":"int function ( ReceiverLossListEntry o ) { return ( int ) ( sequenceNumber - o . sequenceNumber ) ; }","nl":"order by increasing sequence number"}
{"code":"void function ( long idletime , TimeUnit tunit ) { if ( tunit == null ) { throw new IllegalArgumentException ( \"Time unit must not be null.\" ) ; } poolLock . lock ( ) ; try { idleConnHandler . closeIdleConnections ( tunit . toMillis ( idletime ) ) ; } finally { poolLock . unlock ( ) ; } }","nl":"Closes idle connections."}
{"code":"void function ( IRtfListener listener ) { listener . processBinaryBytes ( data ) ; }","nl":"Pass the event to the listener."}
{"code":"void function ( ) { assertEquals ( 13.7 , ttm . getBearing ( ) , 0.001 ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#getBearing()} ."}
{"code":"boolean function ( int index ) { AbstractPlugin toRemove = getByIndex ( index ) ; return remove ( toRemove ) ; }","nl":"Remove a plugin from this container by its index"}
{"code":"Map < Class < ? extends Annotation > , Collection < Class < ? >>> function ( Collection < String > basePackages , List < Class < ? extends Annotation >> annotations ) { return findClasses ( basePackages , annotations , null ) ; }","nl":"Scans list of base packages for all classes marked with specific annotations."}
{"code":"void function ( java . io . ObjectOutputStream s ) { s . defaultWriteObject ( ) ; int length = length ( ) ; s . writeInt ( length ) ; for ( int i = 0 ; i < length ; i ++ ) { s . writeDouble ( get ( i ) ) ; } }","nl":"Saves the state to a stream (that is, serializes it)."}
{"code":"void function ( Date fetcherEndTimeStamp ) { this . fetcherEndTimeStamp = fetcherEndTimeStamp ; }","nl":"Sets the fetcher end time stamp."}
{"code":"String function ( ) { return user ; }","nl":"Return the user name."}
{"code":"void function ( final String path ) { UnderFileSystem ufs = UnderFileSystem . get ( path ) ; OutputStream os = ufs . create ( path ) ; os . close ( ) ; }","nl":"Creates an empty file."}
{"code":"void function ( ) { if ( with_the_ad ) { withad . notifyDataSetChanged ( ) ; } else { noad . notifyDataSetChanged ( ) ; } }","nl":"once it is called, the list will restart from the zero scroll"}
{"code":"BufferedImage function ( ) { if ( coverArtImage != null ) { if ( image == null ) { try { image = ImageIO . read ( coverArtImage . getLargeThumbnail ( ) ) ; } catch ( IOException ex ) { Popup . error ( ex ) ; } } } return image ; }","nl":"Get image"}
{"code":"CertificateInfo function ( ) { return new CertificateInfo ( ) ; }","nl":"Create an instance of  {@link CertificateInfo }"}
{"code":"SharedContext function ( ) { return panel . getSharedContext ( ) ; }","nl":"Gets the SharedContext for layout and rendering."}
{"code":"ApplicationManagementService function ( ) { return ApplicationManagementServiceImpl . getInstance ( ) ; }","nl":"Get ApplicationManagementService instance."}
{"code":"void function ( ) { locks = null ; }","nl":"Destroy the memory locks service."}
{"code":"BufferedByteWriter function ( byte [ ] value ) { ensureCapacity ( 2 + value . length ) ; mWriter . putShort ( ( short ) value . length ) ; mWriter . put ( value ) ; return this ; }","nl":"Write the 16-bit length of the given data followed by the data itself"}
{"code":"int function ( int value ) { if ( value < 253 ) return 1 ; else if ( value < 65536 ) return 3 ; return 5 ; }","nl":"Gets the minimum encoded size of the given value."}
{"code":"CoordinatorEngine function ( String user , String authToken ) { return new CoordinatorEngine ( user , authToken ) ; }","nl":"Return a Coordinator engine."}
{"code":"Coin function ( final int coins , final int cents ) { checkArgument ( cents < 100 ) ; checkArgument ( cents >= 0 ) ; checkArgument ( coins >= 0 ) ; final Coin coin = COIN . multiply ( coins ) . add ( CENT . multiply ( cents ) ) ; checkArgument ( coin . compareTo ( NetworkParameters . MAX_MONEY ) <= 0 ) ; return coin ; }","nl":"Convert an amount expressed in the way humans are used to into satoshis."}
{"code":"void function ( URL url ) { openUrl ( url . toString ( ) ) ; }","nl":"Open an URL in the system's default browser."}
{"code":"Position function ( polyglot . types . TypeObject t ) { Position p = t . position ( ) ; if ( p == null ) p = Position . compilerGenerated ( 0 ) ; return p ; }","nl":"Return a position for a type object. Generate one if the type doesn't have one."}
{"code":"Integer function ( ) { return errorCode ; }","nl":"Gets the error code."}
{"code":"void function ( int hash ) { tokenHash = hash ; }","nl":"Set a hash code associated with this token."}
{"code":"DiffBuilder function ( Object test ) { testSource = getSource ( test ) ; return this ; }","nl":"Set the Test-Source from all kind of types supported by  {@link Input#from(Object)}."}
{"code":"String function ( ) { return id ; }","nl":"Get the ID of satellite vehicle, for example \"05\"."}
{"code":"EndpointReferenceType function ( EndpointInfo ei , Bus bus ) { return getTargetReference ( ei , null , bus ) ; }","nl":"Get the target reference ."}
{"code":"RoleList function ( ) { return new RoleList ( ) ; }","nl":"Create an instance of  {@link RoleList }"}
{"code":"void function ( Object instance , String fieldName , Object value ) { Field field ; if ( instance instanceof Class ) field = getFieldImpl ( ( Class ) instance , fieldName ) ; else field = getFieldImpl ( instance . getClass ( ) , fieldName ) ; field . setAccessible ( true ) ; field . set ( instance , value ) ; }","nl":"Sets the value of the named field."}
{"code":"byte [ ] function ( ) { return scriptBytes ; }","nl":"The backing script bytes which can be turned into a Script object."}
{"code":"boolean function ( Object e ) { return ui . isActive ( ( Element ) e ) ; }","nl":"Gets the active attribute of the StandardAttributeResolver object"}
{"code":"void function ( String command ) { try { processWriter . write ( command + \" \" ) ; processWriter . flush ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }","nl":"Takes in any valid UCI command and executes it"}
{"code":"void function ( ContextFactory factory ) { dim . attachTo ( factory ) ; }","nl":"Attaches the debugger to the given  {@link ContextFactory}."}
{"code":"void function ( ) { this . parent . remove ( this . credential . toString ( ) ) ; parent = null ; }","nl":"Delete the authentication. That is important if the Authentication turned out to invalid. For example during login, if no ClientIdentity was associated with the given Credentials"}
{"code":"boolean function ( String name ) { if ( name . startsWith ( userRepoPrefix ) ) return true ; return false ; }","nl":"Test if a repository path is for a personal repository."}
{"code":"boolean function ( String input ) { mIPv6Matcher = mIPv6Pattern . matcher ( input ) ; try { return mIPv6Matcher . matches ( ) ; } catch ( Exception e ) { Log . e ( Constants . TAG , \"Error in isValidIPv6\" , e ) ; return true ; } }","nl":"Check if input is a valid IPv6 address"}
{"code":"MapMaker function ( ) { return setKeyStrength ( Strength . WEAK ) ; }","nl":"Specifies that each key (not value) stored in the map should be wrapped in a {@link WeakReference} (by default, strong references are used).Warning: when this method is used, the resulting map will use identity ( {@code ==}) comparison to determine equality of keys, which is a technical violation of the  {@link Map}specification, and may not be what you expect."}
{"code":"void function ( ) { DenseMatrix64F A = RandomMatrices . createRandom ( 5 , 5 , rand ) ; checkItAll ( A ) ; }","nl":"Decomposes the matrix, extracts H and Q, then sees if it can recompute A using similar matrix stuff."}
{"code":"String function ( ) { return pmids ; }","nl":"Gets the PMIDs."}
{"code":"ResultEntry function ( int index ) { return log . get ( index ) ; }","nl":"Get by index"}
{"code":"ConfigurationKey function ( String k1 , String k2 , String k3 , String k4 ) { return new ConfigurationKeyImpl ( k1 , k2 , k3 , k4 ) ; }","nl":"Create a four-component configuration key."}
{"code":"String function ( ) { return \"maxof\" + fldname ; }","nl":"Returns the field's name, prepended by \"maxof\"."}
{"code":"long function ( ) { final long now = System . currentTimeMillis ( ) ; final long elapsedTime = now - this . m_startTime ; return elapsedTime ; }","nl":"Returns the elapsed time from the start time.  This method assumes that the start time was previously set."}
{"code":"void function ( ) { assertEquals ( 2 , time . getMinutes ( ) ) ; }","nl":"Test method for  {@link net.sf.marineapi.nmea.util.Time#getMinutes()}."}
{"code":"Set < String > function ( ) { return jedis . keys ( \"TermCounter:*\" ) ; }","nl":"Returns TermCounter keys for the URLS that have been indexed. Should be used for development and testing, not production."}
{"code":"Site function ( String id ) { log . debug ( \"Request to get Site : {}\" , id ) ; Site site = siteRepository . findOne ( id ) ; return site ; }","nl":"Get one site by id."}
{"code":"ResultFunction function ( ) { return resultFunction ; }","nl":"Returns the description of what each action does."}
{"code":"String function ( Date date ) { return timeAgo ( date , false ) ; }","nl":"Returns the string representation of the duration between now and the date."}
{"code":"void function ( String emsg ) { try { throw new Exception ( emsg ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; System . exit ( 0 ) ; } }","nl":"Handle an unexpected condition (and print the error code)."}
{"code":"void function ( ) { funcObjects = new ObjArray ( ) ; functionVarMappings = new ArrayList ( ) ; }","nl":"Reset the static members for the TokenMapper."}
{"code":"void function ( HttpServletRequest request ) { request . getSession ( ) . removeAttribute ( EMAIL ) ; }","nl":"Logs out the User."}
{"code":"int function ( String b ) { try { if ( b . equals ( \"n\" ) || b . equals ( \"*\" ) ) { return - 1 ; } else { return Integer . parseInt ( b ) ; } } catch ( Exception ex ) { throw new IllegalArgumentException ( \"illegal range bound : \" + b ) ; } }","nl":"Convert a MultiplicityRange bound string to an integer."}
{"code":"String function ( ) { return mainMethodClassName ; }","nl":"Get the name of the class for main method implementation."}
{"code":"byte function ( final int bit ) { assert bit >= 0 ; assert bit < 8 ; return ( byte ) ( 1 << bit ) ; }","nl":"Returns a byte bitfield with a given bit set."}
{"code":"NotationProvider function ( int type , Object object ) { NotationName name = Notation . findNotation ( currentLanguage ) ; return getNotationProvider ( type , object , name ) ; }","nl":"Get a NotationProvider for the given language."}
{"code":"void function ( String fileName , byte [ ] arrFile ) { try { fos = new FileOutputStream ( fileName ) ; fos . write ( arrFile ) ; fos . close ( ) ; } catch ( Exception ex ) { System . err . println ( \"Error during saving wave file \" + fileName + \" to disk\" + ex . toString ( ) ) ; } System . out . println ( \"WAV Audio data saved to \" + fileName ) ; }","nl":"saving the file's bytearray"}
{"code":"void function ( DirectedAcyclicGraphNode < T > child ) { Preconditions . checkState ( mChildren . contains ( child ) ) ; mChildren . remove ( child ) ; }","nl":"Removes a child node from the node."}
{"code":"Object function ( Object instance , String methodName , Object [ ] args ) { Class [ ] classTypes = null ; if ( args != null ) { classTypes = new Class [ args . length ] ; for ( int i = 0 ; i < args . length ; i ++ ) { if ( args [ i ] != null ) classTypes [ i ] = args [ i ] . getClass ( ) ; } } return invokeMethod ( instance , methodName , args , classTypes ) ; }","nl":"Calls a method on the given object instance with the given arguments."}
{"code":"void function ( String name , OperationSignature sig ) { if ( ! operations . containsKey ( sig ) ) { operations . put ( sig , new HashMap < String , OperationStats > ( ) ) ; } operations . get ( sig ) . put ( name , new OperationStats ( name ) ) ; }","nl":"Adds an operation to the class."}
{"code":"Script function ( List < byte [ ] > signatures ) { checkArgument ( signatures . size ( ) <= 16 ) ; ScriptBuilder builder = new ScriptBuilder ( ) ; builder . smallNum ( 0 ) ; for ( byte [ ] signature : signatures ) builder . data ( signature ) ; return builder . build ( ) ; }","nl":"Create a program that satisfies an OP_CHECKMULTISIG program, using pre-encoded signatures."}
{"code":"void function ( ) { try { time . setHour ( - 1 ) ; fail ( \"Did not throw exception\" ) ; } catch ( IllegalArgumentException e ) { } }","nl":"Test method for  {@link net.sf.marineapi.nmea.util.Time#setHour(int)}."}
{"code":"UntypedItem function ( PlatformLayerKey key , Tag uniqueTag , String data , Format dataFormat ) { return platformLayerClient . putItemByTag ( key , uniqueTag , data , dataFormat ) ; }","nl":"If using directly, consider using OwnedItem instead"}
{"code":"void function ( ) { RPCBlockReadRequest req = new RPCBlockReadRequest ( BLOCK_ID , OFFSET , LENGTH , LOCK_ID , SESSION_ID ) ; int encodedLength = req . getEncodedLength ( ) ; req . encode ( mBuffer ) ; Assert . assertEquals ( encodedLength , mBuffer . readableBytes ( ) ) ; }","nl":"Tests the  {@link RPCBlockReadRequest#getEncodedLength()} method."}
{"code":"int function ( ) { return offset ; }","nl":"Gets the offset of the data stored in this datagram packet."}
{"code":"ArrayList < String > function ( ) { Map < String , Double > out = this . evaluate ( ) ; return sortByValue ( out ) ; }","nl":"Calls evaluate method and returns sorted outcome."}
{"code":"String function ( MessageReader reader ) { String ref = readAttributeValue ( reader , SOAP_ENCODING_REF_1_2 ) ; if ( ref == null ) { ref = readAttributeValue ( reader , SOAP_ENCODING_REF_1_1 ) ; } return ref ; }","nl":"Reads the SOAP 1.2 or SOAP 1.1 reference attribute."}
{"code":"String function ( ) { return Util . selectRandomlyFromList ( getLocations ( ) ) ; }","nl":"Returns a location which is selected by random."}
{"code":"ShareOpenGraphObject function ( final String key ) { final Object value = this . bundle . get ( key ) ; return ( value instanceof ShareOpenGraphObject ? ( ShareOpenGraphObject ) value : null ) ; }","nl":"Gets an object value out of the object."}
{"code":"void function ( ) { if ( connectedHandler != null ) connectedHandler . close ( ) ; }","nl":"If a handler is connected, call its  {@link com.google.bitcoin.protocols.channels.PaymentChannelServer#close()}method thus disconnecting the TCP connection."}
{"code":"Date function ( String date , String format ) { if ( date == null ) return null ; ParsePosition pos = new ParsePosition ( 0 ) ; SimpleDateFormat simpledateformat = new SimpleDateFormat ( format ) ; Date stringDate = simpledateformat . parse ( date , pos ) ; return stringDate ; }","nl":"Convert String date to Date type"}
{"code":"boolean function ( ) { return selected ; }","nl":"is selected ?"}
{"code":"void function ( Object ele ) { mArray . add ( ele ) ; }","nl":"add item."}
{"code":"boolean function ( String oldRole , String newRole ) { return userService . renameRepositoryRole ( oldRole , newRole ) ; }","nl":"Renames a repository role."}
{"code":"void function ( BundleContext context ) { for ( AutoSIMConnectionConfig connectionConfig : config . connections ) { environments . deregisterConnectionFactory ( connectionConfig . name ) ; factories . remove ( connectionConfig . name ) ; } }","nl":"Implements BundleActivator.stop(). Does nothing since the framework will automatically unregister any registered services."}
{"code":"void function ( int n ) { unifiedBreak ( n , 1 , \" \" , 1 ) ; }","nl":"The most common use of \"unifiedBreak\": level 1, with an alternative of a single space."}
{"code":"void function ( ) { CollisionDJBX33X instance = new CollisionDJBX33X ( ) ; int result = instance . hashForth ( \"QCMWaIO\" ) ; assertEquals ( 998537770 , result ) ; System . out . println ( \" - HashForth QCMWaIO = \" + ( instance . hashForth ( \"QCMWaIO\" ) ) ) ; }","nl":"Hash forward first 7 Characters"}
{"code":"void function ( ) { EntityAttributeManager . instance ( ) . clearHash ( ) ; nodes . clear ( ) ; ways . clear ( ) ; pois . clear ( ) ; markers . clear ( ) ; tracks . clear ( ) ; entityTree = null ; boundingBox = null ; fireMapDataEvent ( new MapEvent ( this , MapEvent . Type . MAP_CLEARED ) ) ; }","nl":"No data available after this reset."}
{"code":"boolean function ( ) { return this . results . isEmpty ( ) ; }","nl":"Gets whether this result object is empty, i.e. contains no information flows"}
{"code":"void function ( int width , int height ) { if ( initialized ) { framingRect = getFramingRect ( ) ; Log . d ( TAG , \"Calculated manual framing rect: \" + framingRect ) ; framingRectInPreview = null ; } else { requestedFramingRectWidth = width ; requestedFramingRectHeight = height ; } }","nl":"Allows third party apps to specify the scanning rectangle dimensions, rather than determine them automatically based on screen resolution."}
{"code":"String function ( ) { return this . token ; }","nl":"Gets the string representing the access token."}
{"code":"Map < String , String > function ( String groupName ) { return null ; }","nl":"Retrieve the group attributes by group name"}
{"code":"int function ( ) { long time = getTime ( ) ; int delta = ( int ) ( time - lastFrame ) ; lastFrame = time ; return delta ; }","nl":"Calculate how many milliseconds have passed since last frame."}
{"code":"boolean function ( DenseMatrix64F A ) { blockA . reshape ( A . numRows , A . numCols , false ) ; BlockMatrixOps . convert ( A , blockA ) ; return alg . setA ( blockA ) ; }","nl":"Converts 'A' into a block matrix and call setA() on the block matrix solver."}
{"code":"T function ( T resource , long endTimeMs ) { if ( isHealthy ( resource ) ) { return resource ; } else { LOG . info ( \"Clearing unhealthy resource {}.\" , resource ) ; remove ( resource ) ; closeResource ( resource ) ; return acquire ( endTimeMs - mClock . millis ( ) , TimeUnit . MILLISECONDS ) ; } }","nl":"Check whether the resource is healthy. If not retry. When this called, the resource is not in mResourceAvailable."}
{"code":"void function ( ) { assertEquals ( Units . METER , mwv . getSpeedUnit ( ) ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.MWVParser#getSpeedUnit()}."}
{"code":"void function ( ) { ResourceSet rs = new ResourceSet ( ) ; rs . setId ( 1L ) ; resourceSetService . saveNew ( rs ) ; }","nl":"Test method for  {@link org.mitre.uma.service.impl.DefaultResourceSetService#saveNew(org.mitre.uma.model.ResourceSet)}."}
{"code":"void function ( ) { System . out . println ( fis . getFunctionBlock ( null ) . getVariables ( ) . toString ( ) ) ; }","nl":"Prints input in console for debugging."}
{"code":"void function ( String fldname ) { addField ( fldname , INTEGER , 0 ) ; }","nl":"Adds an integer field to the schema."}
{"code":"int function ( ) { return url . hashCode ( ) ; }","nl":"Defines the hashcode."}
{"code":"Set < String > function ( ) { return Collections . unmodifiableSet ( instances . keySet ( ) ) ; }","nl":"Gets the ids of the registered object instances."}
{"code":"void function ( ) { mStream . flush ( ) ; mStream . close ( ) ; Mockito . verify ( mLocalOutputStream ) . flush ( ) ; }","nl":"Tests to ensure  {@link S3AOutputStream#flush()} calls the underlying output stream."}
{"code":"void function ( ) { throw new UnsupportedOperationException ( ) ; }","nl":"Guaranteed to throw an exception and leave the underlying data unmodified."}
{"code":"Class function ( Class parent , String name ) { Class clazz = getClassImpl ( parent , name ) ; return clazz ; }","nl":"Returns the class 'name' that was declared by class 'parent'."}
{"code":"LocalAlluxioMaster function ( final String workDirectory ) { UnderFileSystemUtils . mkdirIfNotExists ( workDirectory ) ; return new LocalAlluxioMaster ( ) ; }","nl":"Creates a new local Alluxio master with a isolated port."}
{"code":"void function ( ) { ByteBuffer . setUseDirectBuffers ( false ) ; ByteBuffer . setAllocator ( new SimpleByteBufferAllocator ( ) ) ; }","nl":"MINA does some funky things if we don't do this first."}
{"code":"ConditionsProvider function ( ) { return conditionsProvider ; }","nl":"Get the ConditionsProvider"}
{"code":"void function ( ) { if ( blk != null ) { tx . unpin ( blk ) ; blk = null ; } }","nl":"Closes the manager, by unpinning the block."}
{"code":"void function ( String tokenId ) { this . tokenId = tokenId ; }","nl":"Set the token Id"}
{"code":"String function ( ) { String result = \"\" ; try { result = address . getCountrySubentityCode ( ) . getValue ( ) ; } catch ( NullPointerException npe ) { } return result ; }","nl":"getState returns a String representing the state in a UBL address."}
{"code":"void function ( Lock lock , long blockId ) { lock . unlock ( ) ; releaseBlockLockIfUnused ( blockId ) ; }","nl":"Unlocks the given lock and releases the block lock for the given block id if the lock no longer in use."}
{"code":"double function ( ) { final String versionString = System . getProperty ( \"org.lastbamboo.client.version\" , \"0.00\" ) ; return Double . parseDouble ( versionString ) ; }","nl":"Accessor for the version of the client we're running. If we're running on the main line, this just returns 0.00."}
{"code":"void function ( ) { long badLockId = 1 ; mThrown . expect ( BlockDoesNotExistException . class ) ; mThrown . expectMessage ( ExceptionMessage . LOCK_RECORD_NOT_FOUND_FOR_LOCK_ID . getMessage ( badLockId ) ) ; mLockManager . unlockBlock ( badLockId ) ; }","nl":"Tests that an exception is thrown when trying to unlock a block via {@link BlockLockManager#unlockBlock(long)} which is not locked."}
{"code":"String function ( ) { return this . checksumType ; }","nl":"Gets the checksum type."}
{"code":"void function ( int z ) { String command ; String zDirection = String . valueOf ( z ) ; command = \"axis-cgi/com/ptz.cgi?camera=\" + channel ; command = command + \"&zoom=\" ; command = command + zDirection ; try { runUrl ( command ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }","nl":"Sends a zoom command to the camera according to the user control"}
{"code":"void function ( ) { System . out . println ( \"getAddress\" ) ; Device instance = null ; int expResult = 0 ; int result = instance . getAddress ( ) ; assertEquals ( expResult , result ) ; fail ( \"The test case is a prototype.\" ) ; }","nl":"Test of getAddress method, of class Device."}
{"code":"long function ( ) { return maxLifetime ; }","nl":"Get the maximum lifetime in seconds for issued SAML token if requestor specifies lifetime element"}
{"code":"RouteCalculator function ( ) { return new RouteCalculator ( ) ; }","nl":"Factory method for the routing component. Subclasses can override it and provide more advanced routing algorithms."}
{"code":"void function ( String filePath , String perms ) { Files . setPosixFilePermissions ( Paths . get ( filePath ) , PosixFilePermissions . fromString ( perms ) ) ; }","nl":"Changes local file's permission."}
{"code":"void function ( InputStream stream ) { if ( reader . isRunning ( ) ) { stop ( ) ; } reader = new DefaultDataReader ( stream , this ) ; }","nl":"Sets the InputStream to be used as data source. If reader is running, it is first stopped and you must call  {@link #start()} to resume reading."}
{"code":"void function ( ) { try { connection . close ( ) ; } catch ( SQLException ex ) { Jamuz . getLogger ( ) . log ( Level . SEVERE , \"DbConn.disconnect()\" , ex ) ; } }","nl":"Disconnect database"}
{"code":"List < Date > function ( ) { if ( dates == null ) { dates = new ArrayList < Date > ( ) ; } return this . dates ; }","nl":"Gets the value of the dates property.  This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a set method for the dates property.  For example, to add a new item, do as follows:  getDates().add(newItem);   Objects of the following type(s) are allowed in the list {@link String }"}
{"code":"void function ( float x , float y , float z , float height , float width , float length ) { glPushMatrix ( ) ; glBegin ( GL_QUADS ) ; glColor3f ( 0.39f , 0.39f , 0.39f ) ; glVertex3f ( x , y , - z ) ; glVertex3f ( x + width , y , - ( z + length ) ) ; glVertex3f ( x + width , y + height , - ( z + length ) ) ; glVertex3f ( x , y + height , - z ) ; glEnd ( ) ; glPopMatrix ( ) ; }","nl":"Render the walls"}
{"code":"void function ( ) { initInternal ( \"\" ) ; Localizer . addResource ( \"UMLMenu\" , \"org.argouml.i18n.UMLResourceBundle\" ) ; }","nl":"Default Locale is set and resources Bundles are loaded."}
{"code":"String function ( String path ) { String cleanedPath = cleanPath ( path ) ; String name = FilenameUtils . getName ( cleanedPath ) ; String parent = cleanedPath . substring ( 0 , cleanedPath . length ( ) - name . length ( ) - 1 ) ; if ( parent . isEmpty ( ) ) { return AlluxioURI . SEPARATOR ; } return parent ; }","nl":"Gets the parent of the file at a path."}
{"code":"void function ( TrustManager [ ] trustMgrs ) { trustManagers = trustMgrs ; }","nl":"Sets the TrustManagers associated with this endpoint. This parameter may be set to null for system default behavior."}
{"code":"void function ( EndpointReferenceType ref ) { replyTo = ref ; }","nl":"Mutator for the ReplyTo property."}
{"code":"String function ( Date date ) { SimpleDateFormat sdf = new SimpleDateFormat ( \"yyyy-MM-dd'T'HH:mm'Z'\" ) ; sdf . setTimeZone ( TimeZone . getTimeZone ( \"UTC\" ) ) ; return sdf . format ( date ) ; }","nl":"Return the UTC date and time in W3C format down to second (yyyy-MM-ddTHH:mm:ssZ). i.e.: 1997-07-16T19:20:30Z"}
{"code":"void function ( RowHeaderType r , ColumnHeaderType c , ValueType v ) { rows . get ( r ) . put ( c , v ) ; }","nl":"Maps the specified row and column to the specified value in the table. Neither the row nor the column nor the value can be null  The value can be retrieved by calling the get method with a row and column that is equal to the original row and column."}
{"code":"void function ( List < String > acceptedSignatureAlgorithms ) { this . acceptedSignatureAlgorithms = acceptedSignatureAlgorithms ; }","nl":"Set the list of accepted signature algorithms. A request can contain a wst:SignatureAlgorithm uri to use to sign an issued token. The algorithm specified must be contained in this list. The default algorithms are RSA-SHA1."}
{"code":"void function ( ) { System . out . println ( \"setResponseString\" ) ; String responseString = \"test\" ; instance . setResponseString ( responseString ) ; }","nl":"Test of setResponseString method, of class LogEntryRequest."}
{"code":"Map < String , String > function ( ) { return this . namespaceMap ; }","nl":"Provide explicit mappings to ReflectionServiceFactory.  {@inheritDoc}"}
{"code":"void function ( ) { assertEquals ( FaaMode . AUTOMATIC , rmc . getMode ( ) ) ; }","nl":"Test method for  {@link net.sf.marineapi.nmea.parser.RMCParser#getMode()}."}
{"code":"void function ( ) { assertEquals ( Direction . RIGHT , rmb . getSteerTo ( ) ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.RMBParser#getSteerTo()}."}
{"code":"int function ( ) { return ii . recordsOutput ( ) ; }","nl":"Estimates the number of output records in the index selection, which is the same as the number of search key values for the index."}
{"code":"String function ( ) { return msg ; }","nl":"Get the Msg value."}
{"code":"int function ( ) { return priority ; }","nl":"Return the priority of the command."}
{"code":"String function ( String uri ) { String uniquePrefix = getPrefix ( uri ) ; if ( uniquePrefix == null ) { do { uniquePrefix = NS_PREFIX_PREFIX + nsPrefixCount ++ ; } while ( getURI ( uniquePrefix ) != null ) ; add ( uniquePrefix , uri ) ; } return uniquePrefix ; }","nl":"Add a new declaration to the current scope using a unique prefix and return the prefix. This is useful when one just wants to add a decl and doesn't want to have to deal with creating unique prefixes. If the namespace name is already declared and in scope, then the previously declared prefix is returned."}
{"code":"Actual function ( Actual value ) { return value ; }","nl":"When adding a new substitution A-&gt;B to the map, we need to check if  there are already any existing substitutions, say C-&gt;A, and if so, replace them appropriately, in this case with C-&gt;B. This method allows subclasses to perform substitution on a value in the substitution map (B in the  example above). Subclasses may need to override this if the keys and values are not the same object."}
{"code":"BrowseOffersResponse . Return . OfferData . OfferMedia . OfferImage . Entry . Value function ( ) { return new BrowseOffersResponse . Return . OfferData . OfferMedia . OfferImage . Entry . Value ( ) ; }","nl":"Create an instance of  {@link BrowseOffersResponse.Return.OfferData.OfferMedia.OfferImage.Entry.Value }"}
{"code":"void function ( ) { try { rte . setSentenceIndex ( - 1 ) ; fail ( \"Did not throw exception\" ) ; } catch ( IllegalArgumentException e ) { assertTrue ( e . getMessage ( ) . contains ( \"cannot be negative\" ) ) ; } catch ( Exception e ) { fail ( e . getMessage ( ) ) ; } }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.RTEParser#setSentenceIndex(int)}."}
{"code":"void function ( ) { step -- ; if ( step < 0 ) step = 0 ; undoAction ( step ) ; if ( item != null ) item . changed ( ) ; }","nl":"Step back."}
{"code":"float function ( MotionEvent event , int pointerIndex ) { return IMPL . getX ( event , pointerIndex ) ; }","nl":"Call  {@link MotionEvent#getX(int)}. If running on a pre- {@android.os.Build.VERSION_CODES #HONEYCOMB} device,{@link IndexOutOfBoundsException} is thrown."}
{"code":"long function ( ) { return mDir . getCommittedBytes ( ) ; }","nl":"Gets committed bytes for this dir. This includes all blocks, locked, pinned, committed etc."}
{"code":"void function ( ) { long len = new Random ( ) . nextLong ( ) ; CompleteFileOptions options = CompleteFileOptions . defaults ( ) ; options . setUfsLength ( len ) ; CompleteFileTOptions thriftOptions = options . toThrift ( ) ; Assert . assertEquals ( len , thriftOptions . getUfsLength ( ) ) ; }","nl":"Tests conversion to thrift representation."}
{"code":"ClassLoader function ( ) { return getClassLoader ( ClassHelper . class ) ; }","nl":"Return the default ClassLoader to use: typically the thread context ClassLoader, if available; the ClassLoader that loaded the ClassUtils class will be used as fallback.  Call this method if you intend to use the thread context ClassLoader in a scenario where you absolutely need a non-null ClassLoader reference: for example, for class path resource loading (but not necessarily for Class.forName, which accepts a null ClassLoader reference as well)."}
{"code":"Wrapper function ( Class < ? > c ) { while ( ClassGenerator . isDynamicClass ( c ) ) c = c . getSuperclass ( ) ; if ( c == Object . class ) return OBJECT_WRAPPER ; Wrapper ret = WRAPPER_MAP . get ( c ) ; if ( ret == null ) { ret = makeWrapper ( c ) ; WRAPPER_MAP . put ( c , ret ) ; } return ret ; }","nl":"get wrapper."}
{"code":"Scan function ( ) { Scan s = p . open ( ) ; return new ProjectScan ( s , schema . fields ( ) ) ; }","nl":"Creates a project scan for this query."}
{"code":"void function ( int grado ) { this . grado = grado ; }","nl":"Asigna un nuevo grado al polonomio"}
{"code":"Response function ( RestUtils . RestCallable < T > callable ) { try { return createResponse ( callable . call ( ) ) ; } catch ( Exception e ) { LOG . error ( \"Unexpected error invoking rest endpoint\" , e ) ; return createErrorResponse ( e . getMessage ( ) ) ; } }","nl":"Calls the given  {@link RestUtils.RestCallable} and handles any exceptions thrown."}
{"code":"void function ( ) { try { instance . setYear ( 10000 ) ; fail ( \"Did not throw IllegalArgumentException\" ) ; } catch ( IllegalArgumentException e ) { } }","nl":"Test method for  {@link net.sf.marineapi.nmea.util.Date#setYear(int)}."}
{"code":"QualifiedName function ( ASTConstructorDeclaration node ) { ASTClassOrInterfaceDeclaration parent = node . getFirstParentOfType ( ASTClassOrInterfaceDeclaration . class ) ; return makeOperationOf ( parent . getQualifiedName ( ) , parent . getImage ( ) , node . getFirstDescendantOfType ( ASTFormalParameters . class ) ) ; }","nl":"Builds the qualified name of a constructor declaration."}
{"code":"void function ( ApplicationManagementService applicationMgtService ) { if ( log . isDebugEnabled ( ) ) { log . debug ( \"ApplicationManagementService unset in Identity OAuth2ServiceComponent bundle\" ) ; } OAuth2ServiceComponentHolder . setApplicationMgtService ( null ) ; }","nl":"Unset Application management service implementation"}
{"code":"List < String > function ( CertificateConstraintsType certConstraints ) { if ( certConstraints != null && certConstraints . isSetSubjectDNConstraints ( ) ) { DNConstraintsType constraints = certConstraints . getSubjectDNConstraints ( ) ; return constraints . getRegularExpression ( ) ; } return java . util . Collections . emptyList ( ) ; }","nl":"Get a List of Strings that corresponds to the subject regular expression constraints from a JAXB CertificateConstraintsType"}
{"code":"void function ( ) { notificationController . deregisterUserSession ( null , mockServerMessage ) ; }","nl":"Test method for {@link NotificationController#deregisterUserSession(ServerSession,ServerMessage)}Verifies that  {@code NullPointerException} is thrown when {@code ServerSession} is null."}
{"code":"TiledMap function ( String mapName , String resourceType ) { TiledMap map = null ; if ( this . rpgMaps != null && FileMap . resourcesToDirectory . containsKey ( resourceType ) ) { map = game . getAssets ( ) . get ( FileMap . resourcesToDirectory . get ( resourceType ) + mapName + \".tmx\" , TiledMap . class ) ; } return map ; }","nl":"Retrieves a Tiled map (.tmx) from the system."}
{"code":"boolean function ( Collection source , Collection candidates ) { if ( isEmpty ( source ) || isEmpty ( candidates ) ) { return false ; } for ( Object candidate : candidates ) { if ( source . contains ( candidate ) ) { return true ; } } return false ; }","nl":"Return  {@code true} if any element in '{@code candidates}' is contained in ' {@code source}'; otherwise returns  {@code false}."}
{"code":"void function ( ) { assertEquals ( CompassPoint . NORTH , instance . getLatitudeHemisphere ( ) ) ; }","nl":"Test for getLatHemisphere()"}
{"code":"PasswordCredentials function ( ) { return new PasswordCredentials ( ) ; }","nl":"Create an instance of  {@link PasswordCredentials }"}
{"code":"void function ( ) { final ViolationNode node1 = createViolationNode ( \"Foo.java\" , 1 , 1 , 5 , 15 , \"\" ) ; final ViolationNode node2 = createViolationNode ( \"Foo.java\" , 1 , 1 , 7 , 15 , \"\" ) ; assertFalse ( \"Two violations with different beginColumn should result in not equal nodes\" , node1 . equalsNode ( node2 ) ) ; }","nl":"Verifies that two violations nodes with different  {@code beginColumn} arenot equal."}
{"code":"BigDecimal function ( ) { return this . expDataUnitId ; }","nl":"Gets the exp data unit id."}
{"code":"void function ( ) { assertTrue ( instance . equals ( instance ) ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.util.Date#equals(java.lang.Object)}."}
{"code":"void function ( List < RegPCLTestResultDetailsEntity > regPclTestResultDetails ) { this . regPclTestResultDetails = regPclTestResultDetails ; }","nl":"Sets the reg pcl test result details."}
{"code":"void function ( ) { try { time . setMinutes ( 60 ) ; fail ( \"Did not throw exception\" ) ; } catch ( IllegalArgumentException e ) { } }","nl":"Test method for  {@link net.sf.marineapi.nmea.util.Time#setMinutes(int)}."}
{"code":"T function ( ) { return allNodes . get ( 0 ) . key ; }","nl":"Get the heap min without extracting the key"}
{"code":"String function ( ) { String myName = name ; if ( myName . equalsIgnoreCase ( \"uml\" ) ) { myName = myName . toUpperCase ( ) ; } if ( version == null || version . equals ( \"\" ) ) { return myName ; } return myName + \" \" + version ; }","nl":"Gets a textual title for the notation suitable for use in a combo box or other such visual location."}
{"code":"TopKSelector < T > function ( int k ) { return greatest ( k , Ordering . natural ( ) ) ; }","nl":"Returns a  {@code TopKSelector} that collects the greatest {@code k} elements added to it,relative to the natural ordering of the elements, and returns them via  {@link #topK} indescending order."}
{"code":"void function ( String key , XKMSCacheToken cacheToken ) { cache . put ( new Element ( key , cacheToken , false ) ) ; }","nl":"Store an XKMSCacheToken in the Cache using the given key"}
{"code":"Bundle function ( ) { return ( Bundle ) this . bundle . clone ( ) ; }","nl":"Returns the values in the container packaged in a bundle."}
{"code":"int function ( ) { return quality ; }","nl":"Gets the quality."}
{"code":"String function ( ) { return album ; }","nl":"Get the value of album"}
{"code":"void function ( int hours ) { if ( hours < - 13 || hours > 13 ) { throw new IllegalArgumentException ( \"Offset out of bounds [-13..13]\" ) ; } this . offsetHours = hours ; }","nl":"Set time zone offset hours."}
{"code":"InetSocketAddress [ ] function ( long timeoutValue , TimeUnit timeoutUnit ) { try { return allPeers ( ) ; } catch ( UnknownHostException e ) { throw new PeerDiscoveryException ( e ) ; } }","nl":"Returns an array containing all the Bitcoin nodes within the list."}
{"code":"void function ( Source s ) { sources . add ( s ) ; validator . setSchemaSources ( sources . toArray ( new Source [ 0 ] ) ) ; }","nl":"Adds a source for the schema defintion."}
{"code":"void function ( final TMXTiledMap pTMXTiledMap , final int pGlobalTileID ) { this . mGlobalTileID = pGlobalTileID ; this . mTextureRegion = pTMXTiledMap . getTextureRegionFromGlobalTileID ( pGlobalTileID ) ; }","nl":"Note this will also set the  {@link TextureRegion} with the associated pGlobalTileID of the {@link TMXTiledMap}."}
{"code":"void function ( Piloto piloto ) { Comando comando = null ; try { comando = piloto . proximoComando ( ) ; comando . ejecutar ( this . getPartida ( ) ) ; } catch ( Exception error ) { this . notificarObservadoresException ( piloto , comando , error ) ; } }","nl":"Ejecuta un turno para el Piloto dado."}
{"code":"void function ( boolean timeoutEnabled ) { this . timeoutEnabled = timeoutEnabled ; resetTimeout ( ) ; }","nl":"Enables or disables the timeout entirely. This may be useful if you want to store the timeout value but wish to temporarily disable/enable timeouts. The default is for timeoutEnabled to be true but timeoutMillis to be set to 0 (ie disabled). This call will reset the current progress towards the timeout."}
{"code":"Coin function ( ) { return value ; }","nl":"The value which this Transaction output holds."}
{"code":"Items function ( ) { return items ; }","nl":"Gets the value of the items property."}
{"code":"String function ( String queryString ) { Map < String , String > params = this . createParameterMap ( queryString ) ; return this . sign ( params ) ; }","nl":"This method signs requests in query-string form. It returns a URL that should be used to fetch the response. The URL returned should not be modified in any way, doing so will invalidate the signature and Amazon will reject the request."}
{"code":"Node function ( ) { return node ; }","nl":"retrieves the underlying node"}
{"code":"void function ( ) { long badLockId = 1 ; mThrown . expect ( BlockDoesNotExistException . class ) ; mThrown . expectMessage ( ExceptionMessage . LOCK_RECORD_NOT_FOUND_FOR_LOCK_ID . getMessage ( badLockId ) ) ; mLockManager . validateLock ( TEST_SESSION_ID , TEST_BLOCK_ID , badLockId ) ; }","nl":"Tests that an exception is thrown when trying to validate a lock of a block via {@link BlockLockManager#validateLock(long,long,long)} which is not locked."}
{"code":"ServiceBuilder function ( String callback ) { Preconditions . checkNotNull ( callback , \"Callback can't be null\" ) ; this . callback = callback ; return this ; }","nl":"Adds an OAuth callback url"}
{"code":"void function ( ExtensionInfo extInfo , ClassDecl cd ) { ClassType ct = cd . type ( ) ; EfgClassInfo efmi = get ( ct ) ; if ( efmi == null ) { efmi = new EfgClassInfo ( extInfo , EfgClassInfo . State . AUTO , cd . position ( ) , ct ) ; factoryMappings . put ( ct , efmi ) ; } efmi . addAuto ( cd ) ; }","nl":"Autogenerates a factory mapping skeleton for the given class."}
{"code":"String function ( ) { return id ; }","nl":"Return the task launch id for the task."}
{"code":"void function ( Iterable < Range < C >> ranges ) { for ( Range < C > range : ranges ) { remove ( range ) ; } }","nl":"Removes all of the specified ranges from this range set (optional operation). This is equivalent to calling  {@link #remove} on each of the ranges in {@code other} inturn."}
{"code":"String function ( ) { return testId ; }","nl":"Gets the test id."}
{"code":"boolean function ( final MoverDState < DsT > state ) { final MoverDState . VisitorAdapter < Boolean , DsT > visitor = new MoverDState . VisitorAdapter < Boolean , DsT > ( Boolean . FALSE ) { @ Override public Boolean visitDownloading ( final Downloading < DsT > downloadingState ) { return Boolean . TRUE ; } } ; return state . accept ( visitor ) . booleanValue ( ) ; }","nl":"Returns whether a given state is the downloading state."}
{"code":"SessionFactory function ( ) { LOG . debug ( \"Building session factory...\" ) ; final SchemaExport export = new SchemaExport ( this . m_config ) ; if ( this . m_createTables ) { export . create ( false , true ) ; } return this . m_config . buildSessionFactory ( ) ; }","nl":"Creates a new Hibernate session factory."}
{"code":"void function ( String uri ) { this . uri = uri ; }","nl":"Sets the uri attribute of the StylesheetInfo object"}
{"code":"Texture function ( String textureName , String resourceType ) { Texture texture = null ; if ( this . textures != null && FileMap . resourcesToDirectory . containsKey ( resourceType ) ) { texture = game . getAssets ( ) . get ( FileMap . resourcesToDirectory . get ( resourceType ) + textureName + \".png\" , Texture . class ) ; } return texture ; }","nl":"Retrieves a Texture from the file system."}
{"code":"boolean function ( ) { return getExpiration ( ) == null ? false : System . currentTimeMillis ( ) > getExpiration ( ) . getTime ( ) ; }","nl":"Has this token expired?"}
{"code":"String function ( String fldname ) { if ( s1 . hasField ( fldname ) ) return s1 . getString ( fldname ) ; else return s2 . getString ( fldname ) ; }","nl":"Returns the string value of the specified field. The value is obtained from whichever scan contains the field."}
{"code":"void function ( String uri ) { namespaceURI = uri ; }","nl":"Used to specify a different WS-Addressing namespace URI,  so as to cause MAPs to be exposed (i.e. encoded in externalized message with a different WS-Addressing version)."}
{"code":"String function ( ) { return _stack_type ; }","nl":"String for the type of object used for the symbol on the parse stack."}
{"code":"String function ( ) { return mUri . getPath ( ) ; }","nl":"Gets the path component of the  {@link AlluxioURI}."}
{"code":"boolean function ( int height , Sha256Hash hash ) { Sha256Hash checkpointHash = checkpoints . get ( height ) ; return checkpointHash == null || checkpointHash . equals ( hash ) ; }","nl":"Returns true if the block height is either not a checkpoint, or is a checkpoint and the hash matches."}
{"code":"void function ( byte [ ] data ) { handleEvent ( new BinaryBytesEvent ( data ) ) ; }","nl":"Handle event from the RawRtfParser."}
{"code":"int function ( int defaultValue ) { try { if ( ! StringUtils . isEmpty ( currentValue ) ) { return Integer . parseInt ( currentValue . trim ( ) ) ; } } catch ( NumberFormatException e ) { } return defaultValue ; }","nl":"Returns the integer value for the currentValue. If the currentValue can not be interpreted as an integer, the defaultValue is returned."}
{"code":"void function ( DirectedAcyclicGraphNode < T > parent ) { mParents . add ( parent ) ; }","nl":"Adds a parent node to the node."}
{"code":"void function ( String type ) { this . response . setContentType ( type ) ; }","nl":"Set the HTTP Content-Type header."}
{"code":"String function ( ) { return testId ; }","nl":"Gets the test id."}
{"code":"void function ( Source s ) { styleSheet = s ; }","nl":"Set the stylesheet to use."}
{"code":"File function ( final String type , final String ext ) { final File dir = new File ( Environment . getExternalStoragePublicDirectory ( type ) , DIR_NAME ) ; Log . d ( TAG , \"path=\" + dir . toString ( ) ) ; dir . mkdirs ( ) ; if ( dir . canWrite ( ) ) { return new File ( dir , getDateTimeString ( ) + ext ) ; } return null ; }","nl":"generate output file"}
{"code":"String function ( InputStream inStream ) { BufferedReader in = new BufferedReader ( new InputStreamReader ( inStream ) ) ; StringBuffer buf = new StringBuffer ( ) ; String line = in . readLine ( ) ; while ( line != null ) { buf . append ( line ) ; buf . append ( \" \" ) ; line = in . readLine ( ) ; } return buf . toString ( ) ; }","nl":"Reads in the Response String from Server."}
{"code":"void function ( PropPanelFactory factory ) { ppfactories . remove ( factory ) ; }","nl":"For modules, it would be usefule to be able to remove their factories. TODO: The effect of this method is not yet tested!"}
{"code":"void function ( ) { this . m_selectorManager . addChannelInterestLater ( this . m_socketChannel , SelectionKey . OP_WRITE ) ; }","nl":"Activates interest in writing from a thread other than the selector thread."}
{"code":"void function ( ) { String out = WebUtils . convertMsToClockTime ( TimeUnit . MINUTES . toMillis ( 1 ) ) ; Assert . assertEquals ( \"0 day(s), 0 hour(s), 1 minute(s), and 0 second(s)\" , out ) ; }","nl":"Tests the  {@link WebUtils#convertMsToClockTime(long)} method with one minute."}
{"code":"void function ( TerminalDevice device ) { repository . save ( device ) ; }","nl":"Add a terminal"}
{"code":"boolean function ( ) { return ( this . errorLevel > 0 ) ; }","nl":"Returns if result is not valid"}
{"code":"void function ( ) { mClient = Mockito . mock ( OSSClient . class ) ; mOSSUnderFileSystem = new OSSUnderFileSystem ( new AlluxioURI ( \"\" ) , mClient , BUCKET_NAME , BUCKET_PREFIX ) ; }","nl":"Set up."}
{"code":"void function ( ) { if ( currentblk != null ) tx . unpin ( currentblk ) ; currentblk = null ; }","nl":"Closes the page by unpinning its buffer."}
{"code":"EndpointReferenceType function ( ) { return from ; }","nl":"Accessor for the From property."}
{"code":"String function ( ) { String result ; result = \"transition on \" + on_symbol ( ) . name ( ) + \" to state [\" ; result += _to_state . index ( ) ; result += \"]\" ; return result ; }","nl":"Convert to a string."}
{"code":"String function ( final Element element , final String tagName , final String attribute ) { final NodeList nodes = element . getElementsByTagName ( tagName ) ; final Element node = ( Element ) nodes . item ( 0 ) ; if ( node == null ) { return StringUtils . EMPTY ; } return node . getAttribute ( attribute ) ; }","nl":"Accesses a float attribute from a tag name and an attribute name within the element identified by that tag."}
{"code":"Object function ( ) { return mClassifier ; }","nl":"Get the current classifier."}
{"code":"void function ( String url ) { this . url = url ; }","nl":"Sets the remote URL."}
{"code":"int function ( ) { return text . length ( ) ; }","nl":"Get the length of the text in the element."}
{"code":"void function ( ) { m_sipProxy . start ( ) ; m_turnServer . start ( ) ; try { synchronized ( this ) { wait ( ) ; } } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } }","nl":"Launches any services that should be launched only if this peer is on the open Internet, such as running a TURN server or a SIP proxy."}
{"code":"void function ( SshDataReceivedEvent ev ) { System . out . println ( \"here baby\" ) ; System . out . print ( ev . getData ( ) ) ; }","nl":"Captures SshDataReceivedEvent"}
{"code":"Integer function ( T key ) { Integer value = counter . get ( key ) ; if ( value == null ) { return 0 ; } return value ; }","nl":"Returns the count to which the specified key is mapped in this frequency counter, or 0 if the map contains no mapping for this key."}
{"code":"GenericJSONBuilder function ( double longtitude , double latitude ) { lng = longtitude ; lat = latitude ; return this ; }","nl":"Not required"}
{"code":"XYLocation function ( ) { return north ( ) ; }","nl":"Returns the location one unit above this location."}
{"code":"Collection < GrantedAuthority > function ( ) { return this . grantedAuthorities ; }","nl":"Devuelve los roles aosciados a este usuario."}
{"code":"void function ( DenseMatrix64F seed ) { this . seed = seed ; }","nl":"Sets the value of the vector to use in the start of the iterations."}
{"code":"GetOfferDetailsResponse . Return . DetailOfferData . OfferMedia . OfferImage . Entry . Value . Item function ( ) { return new GetOfferDetailsResponse . Return . DetailOfferData . OfferMedia . OfferImage . Entry . Value . Item ( ) ; }","nl":"Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage.Entry.Value.Item }"}
{"code":"Named function ( String name ) { try { return head . find ( name ) ; } catch ( NoClassException e ) { return tail . find ( name ) ; } }","nl":"Find a type object by name."}
{"code":"void function ( final ResourceTypeHandler type , final String extensionsList ) { if ( extensionsList != null ) { extensionsDenied . put ( type , Utils . getSet ( extensionsList ) ) ; extensionsAllowed . get ( type ) . clear ( ) ; } }","nl":"Setter for the denied extensions of a file type. The allowed extensions will be cleared. If extensionsList is null, denied extensions are kept untouched."}
{"code":"void function ( String id ) { putId ( id , ttl ) ; }","nl":"Add the given identifier to the cache. It will be cached for a default amount of time."}
{"code":"DomainRestoreInfo function ( CSP csp ) { DomainRestoreInfo result = new DomainRestoreInfo ( ) ; FIFOQueue < Variable > queue = new FIFOQueue < Variable > ( ) ; for ( Variable var : csp . getVariables ( ) ) queue . add ( var ) ; reduceDomains ( queue , csp , result ) ; return result . compactify ( ) ; }","nl":"Makes a CSP consisting of binary constraints arc-consistent."}
{"code":"double function ( ) { return altitude ; }","nl":"Gets the position altitude from mean sea level. Notice that most sentences with position don't provide this value. When missing, the default value in Position is 0.0."}
{"code":"List < Object > function ( int index ) { Object val = values . get ( index ) ; if ( val instanceof List ) { return ( List ) val ; } else { throw new IllegalStateException ( ) ; } }","nl":"Returns result value as array."}
{"code":"boolean function ( ) { Assert . assertNotNull ( instance ) ; return instance . mHasPenDigitizer ; }","nl":"Test whether the device has an active pen"}
{"code":"void function ( boolean b , Parcel out ) { out . writeInt ( b ? 1 : 0 ) ; }","nl":"write boolean"}
{"code":"void function ( EndpointResolver resolver ) { resolvers . remove ( resolver ) ; }","nl":"Unregister an endpoint resolver."}
{"code":"PrintStream function ( ) { return debugGui . getConsole ( ) . getErr ( ) ; }","nl":"Returns a  {@link PrintStream} for stderr in the Debugger's internalConsole window."}
{"code":"int function ( ) { return getInterval ( ) - 1 ; }","nl":"The number of previous blocks to look at when calculating the next Block's difficulty"}
{"code":"ComplexNode function ( ) { return new ComplexNode ( ) ; }","nl":"Create an instance of  {@link ComplexNode }"}
{"code":"void function ( ArrayList < CanonicalGene > genes_in_ROI ) { this . genes_in_ROI = genes_in_ROI ; }","nl":"Sets the genes in the ROI"}
{"code":"void function ( final Callable < ? > task , int timeoutInSeconds ) { Future < ? > future = WaitForAsyncUtils . asyncFx ( task ) ; WaitForAsyncUtils . waitFor ( timeoutInSeconds , TimeUnit . SECONDS , future ) ; WaitForAsyncUtils . waitForFxEvents ( ) ; }","nl":"Runs the given Callable in the JavaFX thread, waiting for it to complete before returning. Also attempts to wait for any other JavaFX events that may have been queued in the Callable to complete. If any Exception is thrown during execution of the Callable, that exception will be re-thrown from invokeAndWait."}
{"code":"void function ( String message ) { log . add ( message ) ; }","nl":"Append a simple string."}
{"code":"int function ( ) { return 0xCafe123 ; }","nl":"Compute a hash code."}
{"code":"byte [ ] function ( ) { return m_byteArray ; }","nl":"Accessor for the tie breaker bytes."}
{"code":"void function ( BigDecimal fileCount ) { this . fileCount = fileCount ; }","nl":"Sets the file count."}
{"code":"int function ( ) { return step * 100 / getNumSteps ( ) ; }","nl":"An integer between 0 and 100, shows percent done. The current ArgoUML user interface shows different PostIt note icons for 0, 1-25, 26-50. 51-75, and 76-100."}
{"code":"BrowseOffersResponse . Return . OfferData . Geo . Region function ( ) { return new BrowseOffersResponse . Return . OfferData . Geo . Region ( ) ; }","nl":"Create an instance of  {@link BrowseOffersResponse.Return.OfferData.Geo.Region }"}
{"code":"int function ( ) { return defaultPort ; }","nl":"Obtains the default port."}
{"code":"void function ( ) { for ( Item i : invMap . keySet ( ) ) { System . out . println ( i . getUnlocalizedName ( ) + \" x\" + invMap . get ( i ) ) ; } }","nl":"Prints the inventory list for debugging purposes."}
{"code":"void function ( long length ) { this . length = new FileSizeComparable ( length ) ; }","nl":"set length"}
{"code":"LanguageVersion function ( File sourceFile ) { return getDefaultLanguageVersionForFile ( sourceFile . getName ( ) ) ; }","nl":"Get the default LanguageVersion for the first Language of a given source file."}
{"code":"void function ( ) { System . out . println ( \"getImage\" ) ; Device instance = null ; Image expResult = null ; Image result = instance . getImage ( ) ; assertEquals ( expResult , result ) ; fail ( \"The test case is a prototype.\" ) ; }","nl":"Test of getImage method, of class Device."}
{"code":"int function ( ) { return - 1 ; }","nl":"Checkpoint records have no associated transaction, and so the method returns a \"dummy\", negative txid."}
{"code":"Builder function ( ) { return new Builder ( ) . fromNetworkSegment ( this ) ; }","nl":"Gets a Builder configured as this object."}
{"code":"void function ( ) { System . out . println ( \"setNumberRequests\" ) ; int numberRequests = 0 ; LogEntryInterval instance = new LogEntryInterval ( ) ; instance . setNumberRequests ( numberRequests ) ; }","nl":"Test of setNumberRequests method, of class LogEntryInterval."}
{"code":"Reader function ( String path , int maxLen ) { return new InputStreamReader ( getResourceAsStream ( path , maxLen ) ) ; }","nl":"Return a classpath resource as a reader.  It is assumed that the resource is a text resource."}
{"code":"void function ( ) { DataNettyBuffer data = new DataNettyBuffer ( mBuffer , LENGTH ) ; ByteBuffer readOnlyBuffer = data . getReadOnlyByteBuffer ( ) ; Assert . assertTrue ( readOnlyBuffer . isReadOnly ( ) ) ; Assert . assertEquals ( mBuffer . nioBuffer ( ) , readOnlyBuffer ) ; }","nl":"Tests the  {@link DataNettyBuffer#getReadOnlyByteBuffer()} method."}
{"code":"boolean function ( String uri ) { return false ; }","nl":"Gets the visited attribute of the NaiveUserAgent object"}
{"code":"void function ( Object object , Json json , ArrayList < String > skipFields ) { Field [ ] fields = object . getClass ( ) . getFields ( ) ; for ( Field field : fields ) { if ( ! skipFields . contains ( field . getName ( ) ) ) { System . out . println ( \"Writing: \" + field . getName ( ) ) ; json . writeValue ( field . getName ( ) , field . get ( object ) ) ; } } }","nl":"Serializes an object into a Json object."}
{"code":"List < MeanValue > function ( ) { return Collections . unmodifiableList ( metrics ) ; }","nl":"get a read-only list containing all metrics"}
{"code":"void function ( ) { AttackModel model = new AttackModel ( ) ; ChartObject chartObject = new ChartObject ( model ) ; JFreeChart chart = chartObject . createOverlaidChart ( ) ; assertNotNull ( \"Should contain chart object\" , chart ) ; }","nl":"Test of createOverlaidChart method, of class ChartObject."}
{"code":"int function ( CharSequence msg , int startpos ) { int count = 0 ; int len = msg . length ( ) ; int idx = startpos ; if ( idx < len ) { char ch = msg . charAt ( idx ) ; while ( isDigit ( ch ) && idx < len ) { count ++ ; idx ++ ; if ( idx < len ) { ch = msg . charAt ( idx ) ; } } } return count ; }","nl":"Determines the number of consecutive characters that are encodable using numeric compaction."}
{"code":"int function ( ) { return x ; }","nl":"Returns the x-coordinate of the move."}
{"code":"void function ( Long testId ) { this . testId = testId ; }","nl":"Sets the test id."}
{"code":"void function ( View host , AccessibilityEvent event ) { IMPL . onInitializeAccessibilityEvent ( DEFAULT_DELEGATE , host , event ) ; }","nl":"Initializes an  {@link AccessibilityEvent} with information about thethe host View which is the event source.  The default implementation behaves as {@link ViewCompat#onInitializeAccessibilityEvent(View v,AccessibilityEvent event) ViewCompat#onInitalizeAccessibilityEvent(View v, AccessibilityEvent event)} forthe case of no accessibility delegate been set. "}
{"code":"int function ( boolean advance ) { int valueLen = 0 ; int countOff ; for ( countOff = 0 ; Character . isDigit ( format . charAt ( formatOff + countOff ) ) ; countOff ++ ) { valueLen *= 10 ; valueLen += Character . digit ( format . charAt ( formatOff + countOff ) , 10 ) ; } if ( advance ) { formatOff += countOff ; } return valueLen ; }","nl":"Decode an integer from the format string, return zero if not starting on a digit. \\param advance whether to move the stream position."}
{"code":"String function ( ) { return this . actValue ; }","nl":"Gets the act value."}
{"code":"EaseUserProfileProvider function ( ) { return userProvider ; }","nl":"get user profile provider"}
{"code":"void function ( int value ) { this . value = value ; }","nl":"Sets the value of the internal integer."}
{"code":"void function ( ) { testEventProperties . put ( Notification . NOTIFICATION_KEY_TITLE , null ) ; notificationController . handleEvent ( new Event ( Notification . NOTIFICATION_TOPIC_BROADCAST , testEventProperties ) ) ; }","nl":"Test method for  {@link NotificationController#handleEvent(org.osgi.service.event.Event)}Verifies that  {@code IllegalArgumentException} is thrown when {@code Event}'s {@link Notification#NOTIFICATION_KEY_TITLE} property is null."}
{"code":"String function ( ) { return moduleName ; }","nl":"Gets the value of the moduleName property."}
{"code":"boolean function ( Class < ? > type ) { return WRAPPER_TO_PRIMITIVE_TYPE . containsKey ( checkNotNull ( type ) ) ; }","nl":"Returns  {@code true} if {@code type} is one of the nine primitive-wrapper types, such as{@link Integer}."}
{"code":"void function ( DenseMatrix64F A ) { double val = normF ( A ) ; if ( val == 0 ) return ; int size = A . getNumElements ( ) ; for ( int i = 0 ; i < size ; i ++ ) { A . div ( i , val ) ; } }","nl":"Normalizes the matrix such that the Frobenius norm is equal to one."}
{"code":"String function ( ) { al = new ArrayList < String > ( ) ; traverse ( root , \"\" ) ; return \" Ternary Search Tree : \" + al ; }","nl":"function to print tree"}
{"code":"ExceptionListener function ( ) { return exceptionListener ; }","nl":"Returns the exception call-back listener."}
{"code":"void function ( ) { mHostname = NetworkAddressUtils . getLocalHostName ( 100 ) ; }","nl":"Sets hostname."}
{"code":"void function ( BattlePlatform platform , Image img , float delta ) { }","nl":"Execution of the card action."}
{"code":"Map < String , String > function ( ) { return this . attributes ; }","nl":"Return a map of attributes for the launched task. The specific keys and values returned are dependent on the runtime where the task has been launched. This may include extra information such as execution location or specific error messages in the case of failure."}
{"code":"BigDecimal function ( ) { return this . feedId ; }","nl":"Gets the feed id."}
{"code":"Complex64F function ( int index ) { return eig . getEigenvalue ( index ) ; }","nl":" Returns an eigenvalue as a complex number.  For symmetric matrices the returned eigenvalue will always be a real number, which means the imaginary component will be equal to zero.   NOTE: The order of the eigenvalues is dependent upon the decomposition algorithm used.  This means that they may or may not be ordered by magnitude.  For example the QR algorithm will returns results that are partially ordered by magnitude, but this behavior should not be relied upon. "}
{"code":"CoordinatorStore function ( ) { try { return new CoordinatorStore ( false ) ; } catch ( Exception ex ) { throw new StoreException ( ErrorCode . E0600 , ex . getMessage ( ) , ex ) ; } }","nl":"Return a workflow store instance with a fresh transaction.  The coordinator store has to be committed and then closed to commit changes, if only close it rolls back."}
{"code":"long function ( ) { return index ; }","nl":"The index of the output in transaction to which we refer"}
{"code":"Script function ( byte [ ] data ) { checkArgument ( data . length <= 40 ) ; return new ScriptBuilder ( ) . op ( OP_RETURN ) . data ( data ) . build ( ) ; }","nl":"Creates a script of the form OP_RETURN [data]. This feature allows you to attach a small piece of data (like a hash of something stored elsewhere) to a zero valued output which can never be spent and thus does not pollute the ledger."}
{"code":"Class < ? extends Service > function ( ) { return SchedulerService . class ; }","nl":"Return the public interface for scheduler service."}
{"code":"void function ( String idPName ) { try { idPMgtStub . deleteIdP ( idPName ) ; } catch ( Exception e ) { log . error ( \"Error in deleting the Identity Provider for a given tenant\" , e ) ; throw new Exception ( \"Error in deleting the Identity Provider\" ) ; } }","nl":"Deletes an Identity Provider from a given tenant"}
{"code":"boolean function ( ) { return debugGui . isVisible ( ) ; }","nl":"Returns whether the debugger GUI frame is visible."}
{"code":"Document function ( String xmlString ) { return stringToDom ( xmlString , false ) ; }","nl":"Converts a String to a DOM. Sometimes, you might prefer DOM to SOAPElement. No namespace prefixes are used by default."}
{"code":"int function ( long value ) { if ( value <= 0 ) { return 0 ; } else if ( value >= ( 1L << 32 ) ) { return - 1 ; } else { return ( int ) value ; } }","nl":"Returns the  {@code int} value that, when treated as unsigned, is nearest in value to{@code value}."}
{"code":"java . lang . String function ( ) { return literalName ; }","nl":"Returns a string representation of the enumeration value."}
{"code":"void function ( ) { ServerConfiguration result = service . getServerConfiguration ( \"www.badexample.net\" ) ; assertThat ( result , is ( nullValue ( ) ) ) ; }","nl":"Checks the behavior when the issuer is not known."}
{"code":"void function ( String oldIdPName , IdentityProvider identityProvider ) { try { idPMgtStub . updateIdP ( oldIdPName , identityProvider ) ; } catch ( Exception e ) { log . error ( \"Error in updating the Identity Provider for a given tenant\" , e ) ; throw new Exception ( e . getMessage ( ) ) ; } }","nl":"Updates a given Identity Provider information"}
{"code":"boolean function ( final HttpParams params ) { if ( params == null ) { throw new IllegalArgumentException ( \"HTTP parameters may not be null\" ) ; } return params . getBooleanParameter ( INTEREST_OPS_QUEUEING , false ) ; }","nl":"Obtains the value of  {@link NIOReactorPNames#INTEREST_OPS_QUEUEING} parameter.If not set, defaults to false."}
{"code":"void function ( String policyAlgorithm ) { try { stub . setGlobalPolicyAlgorithm ( policyAlgorithm ) ; } catch ( Exception e ) { handleException ( e . getMessage ( ) , e ) ; } }","nl":"Set policy combining algorithm globally"}
{"code":"long function ( ) { return packetMagic ; }","nl":"The header bytes that identify the start of a packet on this network."}
{"code":"Map < String , String > function ( ) { Map < String , String > map = new LinkedHashMap < String , String > ( ) ; for ( String string : getStrings ( ) ) { String [ ] kvp = string . split ( \"=\" , 2 ) ; String key = kvp [ 0 ] ; String value = kvp [ 1 ] ; map . put ( key , value ) ; } return map ; }","nl":"Returns a map of strings from the current value."}
{"code":"IssuerServiceResponse function ( HttpServletRequest request ) { return new IssuerServiceResponse ( getIssuer ( ) , null , null ) ; }","nl":"Always returns the configured issuer URL"}
{"code":"Delegator function ( ) { try { return this . getClass ( ) . newInstance ( ) ; } catch ( Exception ex ) { throw Context . throwAsScriptRuntimeEx ( ex ) ; } }","nl":"Crete new Delegator instance. The default implementation calls this.getClass().newInstance()."}
{"code":"BigInteger function ( ) { DHPublicKey pubKey = ( DHPublicKey ) keyPair . getPublic ( ) ; return pubKey . getY ( ) ; }","nl":"Return the generated public value for this key agreement operation as a BigInteger."}
{"code":"long function ( ) { return geneA ; }","nl":"Gets Entrez Gene ID for Gene A."}
{"code":"String function ( Repository repository , String repositoryName , String text ) { String html = StringUtils . escapeForHtml ( text , false ) ; html = processTextRegex ( repository , repositoryName , html ) ; return StringUtils . breakLinesForHtml ( html ) ; }","nl":"Returns an html version of the commit message with any global or repository-specific regular expression substitution applied. This method assumes the commit message is plain text."}
{"code":"Double function ( String fromLocation , String toLocation ) { return links . get ( fromLocation , toLocation ) ; }","nl":"Returns the travel distance between the two specified locations if they are linked by a connection and null otherwise."}
{"code":"JsonElement function ( Set < String > value , boolean preserveEmpty ) { if ( ! preserveEmpty && value != null && value . isEmpty ( ) ) { return JsonNull . INSTANCE ; } else { return gson . toJsonTree ( value , new TypeToken < Set < String >> ( ) { } . getType ( ) ) ; } }","nl":"Translate a set of strings to a JSON array, optionally preserving the empty array. Otherwise (default) empty array is returned as null."}
{"code":"void function ( Context context , View view ) { if ( view == null ) return ; InputMethodManager inputMethodManager = ( InputMethodManager ) context . getSystemService ( Context . INPUT_METHOD_SERVICE ) ; inputMethodManager . showSoftInput ( view , 0 ) ; }","nl":"Show keyboard"}
{"code":"Timestamp function ( ) { return this . receiptDate ; }","nl":"Gets the receipt date."}
{"code":"ConduitSelector function ( ) { return conduitSelector ; }","nl":"Gets the conduit selector"}
{"code":"SpringChain function ( int mainTension , int mainFriction , int attachmentTension , int attachmentFriction ) { return new SpringChain ( mainTension , mainFriction , attachmentTension , attachmentFriction ) ; }","nl":"Factory method for creating a new SpringChain with the provided SpringConfig."}
{"code":"GenericJSONBuilder function ( int radius ) { loc_radius = radius ; return this ; }","nl":"Not required"}
{"code":"Map < Variable , Term > function ( FOLNode x , FOLNode y ) { return unify ( x , y , new LinkedHashMap < Variable , Term > ( ) ) ; }","nl":"Returns a Map representing the substitution (i.e. a set of variable/term pairs) or null which is used to indicate a failure to unify."}
{"code":"String function ( @ Nonnull PublicKey pubkey ) { return getKeyHash ( pubkey , \"SHA-256\" ) ; }","nl":"Create hash for a key, use default algorithm SHA-256"}
{"code":"void function ( ) { this . map = ShadowStruggles . getInstance ( ) . getTiledMap ( mapName ) ; this . tileLayer = ( TiledMapTileLayer ) map . getLayers ( ) . get ( tileLayerString ) ; }","nl":"Retrieves the TiledMap and the current layer using the mapName and tileLayer attributes."}
{"code":"Document function ( Source s ) { Document d = tryExtractDocFromDOMSource ( s ) ; return d != null ? d : toDocument ( s , DocumentBuilderFactory . newInstance ( ) ) ; }","nl":"Creates a DOM Document from a TraX Source. If the source is a  {@link DOMSource} holding a DocumentNode, this one will be returned.  Otherwise  {@link #toInputSource} and a namespace aware DocumentBuilder (createdby the default DocumentBuilderFactory) will be used to read the source.  This may involve an XSLT identity transform in toInputSource."}
{"code":"String function ( String name ) { return \"subgraph \" + name + \" {\" ; }","nl":"Returns a string that is used to start a subgraph."}
{"code":"void function ( BundleContext context ) { for ( AutoSIMConnectionConfig connectionConfig : config . connections ) { environments . deregisterConnectionFactory ( connectionConfig . name ) ; factories . remove ( connectionConfig . name ) ; } }","nl":"Implements BundleActivator.stop(). Does nothing since the framework will automatically unregister any registered services."}
{"code":"boolean function ( String pluginName ) { AbstractPlugin toRemove = getByName ( pluginName ) ; return remove ( toRemove ) ; }","nl":"Remove a plugin from this container by its unique name"}
{"code":"production function ( ) { return _the_production ; }","nl":"The production for the item."}
{"code":"void function ( ) { System . out . println ( \"toString\" ) ; Device instance = null ; String expResult = \"\" ; String result = instance . toString ( ) ; assertEquals ( expResult , result ) ; fail ( \"The test case is a prototype.\" ) ; }","nl":"Test of toString method, of class Device."}
{"code":"List < String > function ( ) { return getChangedRefs ( Constants . R_TAGS ) ; }","nl":"Returns the list of tags changed by the push."}
{"code":"Object function ( String key ) { return this . json . get ( key ) ; }","nl":"Get a value from the internal JSONObject"}
{"code":"void function ( int movement ) { recordedMovement [ 4 ] = recordedMovement [ 3 ] ; recordedMovement [ 3 ] = recordedMovement [ 2 ] ; recordedMovement [ 2 ] = recordedMovement [ 1 ] ; recordedMovement [ 1 ] = recordedMovement [ 0 ] ; recordedMovement [ 0 ] = movement ; }","nl":"Add Last Movement"}
{"code":"void function ( ) { Preconditions . checkState ( mNettyBuf != null ) ; Preconditions . checkState ( mNettyBuf . refCnt ( ) == 1 , \"Reference count of the netty buffer is %s (1 expected).\" , mNettyBuf . refCnt ( ) ) ; Preconditions . checkState ( mNettyBuf . release ( ) , \"Release Netty ByteBuf failed.\" ) ; }","nl":"Release the Netty ByteBuf."}
{"code":"void function ( ) { skipInternal ( mBlockStream , 0 ) ; }","nl":"Tests the  {@link UnderStoreBlockInStream#skip(long)} method for the first block of the file."}
{"code":"BookPreview function ( Book book ) { return getPreview ( book . getUUID ( ) ) ; }","nl":"Find the stored preview for the given book"}
{"code":"String function ( ) { int hr = getHour ( ) ; int min = getMinutes ( ) ; int sec = ( int ) Math . floor ( getSeconds ( ) ) ; int tzHr = getOffsetHours ( ) ; int tzMin = getOffsetMinutes ( ) ; return String . format ( TIME_PATTERN , hr , min , sec , tzHr , tzMin ) ; }","nl":"Returns the ISO 8601 representation of time (hh:mm:ss+hh:mm)."}
{"code":"void function ( String feedId ) { this . feedId = feedId ; }","nl":"Sets the feed id."}
{"code":"void function ( ) { Object str = new String ( \"foobar\" ) ; Object dbl = new Double ( 123 ) ; assertFalse ( instance . equals ( str ) ) ; assertFalse ( instance . equals ( dbl ) ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.util.Date#equals(java.lang.Object)}."}
{"code":"AppStatus function ( ) { return status ; }","nl":"Return a new instance of  {@code AppStatus} based onthe provided individual app instances via {@link #with(AppInstanceStatus)}."}
{"code":"void function ( ) { final ViolationNode node1 = createViolationNode ( \"Foo.java\" , 1 , 1 , 5 , 15 , \"\" ) ; final ViolationNode node2 = createViolationNode ( \"Bar.java\" , 1 , 1 , 5 , 15 , \"\" ) ; assertFalse ( \"Two violations with different filename should result in not equal nodes\" , node1 . equalsNode ( node2 ) ) ; }","nl":"Verifies that two violations nodes with different  {@code filename} arenot equal."}
{"code":"DataTypesHelper function ( ) { return impl ; }","nl":"The component we are decorating."}
{"code":"void function ( int numRows ) { this . numRows = numRows ; }","nl":"Sets the number of rows."}
{"code":"void function ( String errorMsg ) { this . errorMsg = errorMsg ; }","nl":"Sets the exp msg."}
{"code":"void function ( ) { for ( int k = 0 ; k < 10000000 ; k ++ ) { } }","nl":"Common empty loop utility that serves the purpose of warming up the JVM before performance microbenchmarks."}
{"code":"Locale [ ] function ( ) { return new Locale [ ] { Locale . ENGLISH , Locale . FRENCH , new Locale ( \"es\" , \"\" ) , Locale . GERMAN , Locale . ITALIAN , new Locale ( \"nb\" , \"\" ) , new Locale ( \"pt\" , \"\" ) , new Locale ( \"ru\" , \"\" ) , Locale . CHINESE , Locale . UK } ; }","nl":"For Locale selection. TODO: Detect the available locales from the available files."}
{"code":"Instrumentation function ( ) { return instrumentation ; }","nl":"Return the  {@link Instrumentation} instance in use."}
{"code":"int function ( ) { return ( int ) ( System . currentTimeMillis ( ) - lastMark ) ; }","nl":"Returns the amount of milliseconds that have elapsed since mark() was last called.  This timer runs irrespective of Greenfoot's act() cycle, so if you call it many times during the same Greenfoot frame, you may well get different answers."}
{"code":"String function ( ) { return pclFeedId ; }","nl":"Gets the pcl feed id."}
{"code":"int function ( ) { return elem3 ; }","nl":"Gets the value of the elem3 property."}
{"code":"String function ( ) { return \"1\" + \"000\" + \"000\" + \"000\" + \"00000\" ; }","nl":"Gets the elementStylingOrder attribute of the Selector class"}
{"code":"void function ( ) { head = reverse ( head ) ; }","nl":"reverse linked list recursive"}
{"code":"OpenFileOptions function ( CreateFileOptions op ) { if ( op . getAlluxioStorageType ( ) . isStore ( ) ) { return OpenFileOptions . defaults ( ) . setReadType ( ReadType . CACHE ) ; } return OpenFileOptions . defaults ( ) . setReadType ( ReadType . NO_CACHE ) ; }","nl":"Converts a  {@link CreateFileOptions} object to an {@link OpenFileOptions} object with amatching Alluxio storage type."}
{"code":"Element function ( ) { return m_KeyInfoEl ; }","nl":"Get KeyInfo element of an encrypted element."}
{"code":"void function ( AddressingProperties maps , Message message , boolean isOutbound , boolean isRequestor ) { org . apache . cxf . ws . addressing . ContextUtils . storeMAPs ( maps , message , isOutbound , isRequestor ) ; }","nl":"Store MAPs in the message."}
{"code":"String function ( Context context ) { return context . getPackageName ( ) + RELOAD_APP_ACTION_SUFFIX ; }","nl":"Intent action for reloading the JS"}
{"code":"void function ( ) { String stringReturn = RequestInput . getString ( \"enter abc, 123 or exit to exit or else will continue in a loop\" , \"abc\" , \"123\" , \"exit\" ) ; System . out . println ( \"Your return string is \" + stringReturn ) ; }","nl":"Test method for {@link com.sqa.em.util.helper.RequestInput#getString(java.lang.String,java.lang.String[])}."}
{"code":"String function ( ) { return getWorkflow ( ) . getGroup ( ) ; }","nl":"Return the job owner group name."}
{"code":"void function ( String value ) { this . moduleName = value ; }","nl":"Sets the value of the moduleName property."}
{"code":"void function ( T obj ) { if ( checkDuplicate ( obj ) ) { throw new IllegalStateException ( \"tried to free object twice: \" + obj ) ; } free ( obj ) ; }","nl":"Frees the object.  If the free list is full, the object will be garbage collected."}
{"code":"void function ( String correlationId ) { this . correlationId = correlationId ; }","nl":"Set correlation id of the message"}
{"code":"void function ( ) { String testUser = \"alluxio\" ; String password = \"anonymous\" ; mPlainSaslServer . evaluateResponse ( getUserInfo ( testUser , password ) ) ; Assert . assertEquals ( testUser , mPlainSaslServer . getAuthorizationID ( ) ) ; }","nl":"Tests the  {@link PlainSaslServer#getAuthorizationID()} to retrieve the correct user."}
{"code":"void function ( ) { handleEvent ( GROUP_END ) ; state = stack . pop ( ) ; }","nl":"Handle event from the RawRtfParser."}
{"code":"Scan function ( ) { Scan src = p . open ( ) ; List < TempTable > runs = splitIntoRuns ( src ) ; src . close ( ) ; while ( runs . size ( ) > 2 ) runs = doAMergeIteration ( runs ) ; return new SortScan ( runs , comp ) ; }","nl":"This method is where most of the action is. Up to 2 sorted temporary tables are created, and are passed into SortScan for final merging."}
{"code":"boolean function ( ) { if ( mSubject . isReadOnly ( ) ) { throw new LoginException ( \"logout Failed: Subject is Readonly.\" ) ; } if ( mUser != null ) { mSubject . getPrincipals ( ) . remove ( mUser ) ; } return true ; }","nl":"Logs out the user  The implementation removes the User associated with the Subject."}
{"code":"String function ( ) { return postId ; }","nl":"Returns the post id, if available."}
{"code":"boolean function ( int version ) { for ( int v : getAcceptableAddressCodes ( ) ) { if ( version == v ) return true ; } return false ; }","nl":"Check if a given address version is valid given the NetworkParameters."}
{"code":"boolean function ( boolean a ) { boolean old = this . appendSemicolon ; this . appendSemicolon = a ; return old ; }","nl":"Set a flag indicating whether to print a ';' after certain statements. This is used when pretty-printing for loops."}
{"code":"void function ( ) { rmc . setMode ( FaaMode . SIMULATED ) ; assertEquals ( FaaMode . SIMULATED , rmc . getMode ( ) ) ; rmc . setMode ( FaaMode . ESTIMATED ) ; assertEquals ( FaaMode . ESTIMATED , rmc . getMode ( ) ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.RMCParser#setFaaMode()}."}
{"code":"void function ( int id ) { currentslot = id ; }","nl":"Sets the current record to be the record having the specified ID."}
{"code":"String function ( String fldname ) { if ( lhs . isFieldName ( ) && lhs . asFieldName ( ) . equals ( fldname ) && rhs . isFieldName ( ) ) return rhs . asFieldName ( ) ; else if ( rhs . isFieldName ( ) && rhs . asFieldName ( ) . equals ( fldname ) && lhs . isFieldName ( ) ) return lhs . asFieldName ( ) ; else return null ; }","nl":"Determines if this term is of the form \"F1=F2\" where F1 is the specified field and F2 is another field. If so, the method returns the name of that field. If not, the method returns null."}
{"code":"void function ( String actValue ) { this . actValue = actValue ; }","nl":"Sets the act value."}
{"code":"DiffBuilder function ( ) { normalizeWhitespace = true ; return this ; }","nl":"Normalize Text-Elements by removing all empty text nodes and normalizing the non-empty ones.  \"normalized\" in this context means all whitespace characters are replaced by space characters and consecutive whitespace characters are collapsed. "}
{"code":"ClaimDTO function ( String realmName ) { RegistryBasedTrustedServiceStore registryBasedTrustedServiceStore = new RegistryBasedTrustedServiceStore ( ) ; return registryBasedTrustedServiceStore . getTrustedServiceClaims ( realmName ) ; }","nl":"Get default claims for given trusted service"}
{"code":"boolean function ( final String key , final boolean defaultValue ) { return this . bundle . getBoolean ( key , defaultValue ) ; }","nl":"Gets a boolean value out of the object."}
{"code":"boolean function ( ArrayList < String > logParts ) { String logLevel = logParts . get ( 0 ) ; String logMessage = logParts . get ( 1 ) ; if ( this . logLevels == null || this . logLevels . containsKey ( logLevel . toUpperCase ( ) ) ) { Matcher logMatcher = filterPattern . matcher ( logMessage ) ; return logMatcher . matches ( ) ; } else { return false ; } }","nl":"Checks if the logLevel and logMessage goes through the logFilter."}
{"code":"BufferedByteWriter function ( byte value ) { return put32 ( value & 0xFF ) ; }","nl":"Write the given int value (32-bit) in big-endian order to the buffer"}
{"code":"AuthenticationHolderEntity function ( ) { return authenticationHolder ; }","nl":"The authentication in place when this token was created."}
{"code":"void function ( ) { Iterator < AbstractPlugin > iter = allPlugins . iterator ( ) ; while ( iter . hasNext ( ) ) { AbstractPlugin plugin = ( AbstractPlugin ) iter . next ( ) ; plugin . removePluginObserver ( this ) ; activePlugins . remove ( plugin ) ; iter . remove ( ) ; } }","nl":"Remove all available plugins"}
{"code":"void function ( float w ) { weight = w ; }","nl":"Set the weight for this node."}
{"code":"void function ( InetSocketAddress address , Channel channel ) { Preconditions . checkArgument ( NETTY_CHANNEL_POOL_MAP . containsKey ( address ) ) ; NETTY_CHANNEL_POOL_MAP . get ( address ) . release ( channel ) ; }","nl":"Releases a netty channel to the channel pools."}
{"code":"String function ( ) { return systemId ; }","nl":"Return the system ID, the value defined in the  {@link #CONF_SYSTEM_ID} configuration property."}
{"code":"E function ( final String key , final ArrayList < ShareOpenGraphObject > value ) { this . bundle . putParcelableArrayList ( key , value ) ; return ( E ) this ; }","nl":"Sets an array of object values in the object."}
{"code":"URIBuilder function ( final String fragment ) { this . fragment = fragment ; this . encodedFragment = null ; return this ; }","nl":"Sets URI fragment. The value is expected to be unescaped and may contain non ASCII characters."}
{"code":"void function ( long keySize ) { this . keySize = keySize ; }","nl":"Set the key size to use when generating a symmetric key. The default is 256 bits."}
{"code":"void function ( ) { mSessionTimeoutMs = Configuration . getInt ( PropertyKey . WORKER_SESSION_TIMEOUT_MS ) ; }","nl":"Sets up the configuration for Alluxio before a test runs."}
{"code":"Map < SpringConfig , String > function ( ) { return Collections . unmodifiableMap ( mSpringConfigMap ) ; }","nl":"retrieve all SpringConfig in the registry"}
{"code":"String function ( ) { SimpleDateFormat sdf = new SimpleDateFormat ( \"yyyy-MM-dd'T'HH:mm:ss'Z'\" ) ; sdf . setTimeZone ( TimeZone . getTimeZone ( \"UTC\" ) ) ; return sdf . format ( new Date ( ) ) ; }","nl":"Return the UTC current date and time in W3C format down to second (yyyy-MM-ddTHH:mm:ssZ). i.e.: 1997-07-16T19:20:30Z"}
{"code":"void function ( ) { this . m_storedDirectoryContents = this . m_newDirectoryContents ; }","nl":"Lets this know the application has been updated with what's on disk, and this should synchronize with the last disk check."}
{"code":"void function ( String path , String tablesSQL ) { addTablesSQL ( path , null , null , tablesSQL ) ; }","nl":"Add mapping between Uri path and SQL which represent one of more (using INNER JOIN or LEFT OUTER JOIN) tables. The base type and sub type will be guessed."}
{"code":"void function ( ) { individualStructures . clear ( ) ; }","nl":"Clear the individual model."}
{"code":"LanguageVersion function ( ) { return this . languageVersion ; }","nl":"Get the LanguageVersion associated with the current source file."}
{"code":"SignatureProperties function ( ) { return signatureProperties ; }","nl":"Get the SignatureProperties to use."}
{"code":"Predicate function ( ) { return pred ; }","nl":"Returns the predicate that describes which records should be modified."}
{"code":"boolean function ( DenseMatrix64F cov ) { return MatrixFeatures . isDiagonalPositive ( cov ) ; }","nl":"This is a fairly light weight check to see of a covariance matrix is valid. It checks to see if the diagonal elements are all positive, which they should be if it is valid.  Not all invalid covariance matrices will be caught by this method."}
{"code":"void function ( final ByteBuffer bb , final int position , final long value ) { bb . putInt ( position , ( int ) ( value & 0xffffffffL ) ) ; }","nl":"Puts an unsigned byte into the buffer."}
{"code":"void function ( UserSubject subject ) { this . subject = subject ; }","nl":"Sets a subject capturing the login name  the end user used to login to the resource server when authorizing a given client request"}
{"code":"void function ( boolean value ) { dim . setBreakOnExceptions ( value ) ; debugGui . getMenubar ( ) . getBreakOnExceptions ( ) . setSelected ( value ) ; }","nl":"Sets whether execution should break when a script exception is thrown."}
{"code":"float function ( int y ) { return originLat - y / dotsPerDeg ; }","nl":"Computes the corresponding latitude for a given view y coordinate."}
{"code":"USAddress function ( ) { return new USAddress ( ) ; }","nl":"Create an instance of  {@link USAddress }"}
{"code":"void function ( ) { }","nl":"Start the service. This method is invoked on the execution thread. By default this method does nothing."}
{"code":"JSONObject function ( int index ) { Object tmp = mArray . get ( index ) ; return tmp == null ? null : tmp instanceof JSONObject ? ( JSONObject ) tmp : null ; }","nl":"get JSONObject value."}
{"code":"double function ( DenseMatrix64F mat ) { PermuteArray perm = new PermuteArray ( mat . numCols ) ; double total = 0 ; int p [ ] = perm . next ( ) ; while ( p != null ) { double prod = 1 ; for ( int i = 0 ; i < mat . numRows ; i ++ ) { prod *= mat . get ( i , p [ i ] ) ; } total += perm . sgn ( ) * prod ; p = perm . next ( ) ; } return total ; }","nl":" Computes the determinant of the matrix using Leibniz's formula   A direct implementation of Leibniz determinant equation.  This is of little practical use because of its slow runtime of O(n!) where n is the width of the matrix. LU decomposition should be used instead.  One advantage of Leibniz's equation is how simplistic it is.   det(A) = Sum( &sigma; in Sn ; sgn(&sigma;) Prod( i = 1 to n ; ai,&sigma;(i)) )  sgn is the sign function of permutations. +1 or -1 for even and odd permutations a set of permutations. if n=3 then the possible permutations are (1,2,3) (1,3,2), (3,2,1), ... etc  "}
{"code":"Dish function ( SiteUrl siteUrl ) { return dishRepository . findBySiteUrl ( siteUrl ) ; }","nl":"Get a dish by site url"}
{"code":"String function ( ) { return ( new java . rmi . server . UID ( ) ) . toString ( ) ; }","nl":"Generates a new unique ID and returns it as a String. The contents of the String is supposed to be unique with respect to all Strings generated by other instances of this class. TODO: We should consider using java.util.UUID for this instead."}
{"code":"void function ( ) { flushed = true ; }","nl":"This method is called to flush the error queue. Subclasses may want to print summary information in this method."}
{"code":"void function ( long xid , int retval , ServiceInfo [ ] info ) { }","nl":"Called as a result of a previous service addition request."}
{"code":"List < String > function ( ) { return registeredScopes ; }","nl":"Get the list of registered scopes"}
{"code":"void function ( File dir ) { try { traverseDir ( dir , new FileAction ( ) { public void act ( File f ) { f . delete ( ) ; } } ) ; } catch ( IOException ioe ) { LOG . error ( \"Exception deleting directory\" , ioe ) ; } }","nl":"Deletes a directory and all of its contents."}
{"code":"String function ( ) { return operation ; }","nl":"Returns the operation string. @return The operation string."}
{"code":"void function ( ) { valid = true ; }","nl":"Argument will be declared valid."}
{"code":"void function ( ) { Collections . shuffle ( this . pilotos ) ; for ( Piloto piloto : this . getPilotos ( ) ) { this . runTurno ( piloto ) ; } this . notificarObservadoresRondaTerminada ( this . rondas . incrementAndGet ( ) ) ; }","nl":"Ejecuta una ronda."}
{"code":"String function ( ) { final String path = this . getOriginalPath ( ) ; if ( ! path . endsWith ( \"/\" ) ) return path ; return path . substring ( 0 , path . length ( ) - 1 ) ; }","nl":"Return the path originally requested by the client."}
{"code":"void function ( ) { long containerId = 1 ; long fileId = IdUtils . createFileId ( containerId ) ; Assert . assertNotEquals ( - 1 , fileId ) ; }","nl":"Tests if output of  {@link IdUtils#createFileId(long)} is valid."}
{"code":"List < PropertyDescriptor < ? >> function ( ) { return new ArrayList < > ( propertyDescriptors ) ; }","nl":"Creates a copied list of the property descriptors and returns it."}
{"code":"InputStream function ( ) { return new ReaderInputStream ( reader ) ; }","nl":"Convert the Reader into an InputStream.  Note: This uses the default encoding. "}
{"code":"void function ( String failedAttrib ) { this . failedAttrib = failedAttrib ; }","nl":"Sets the failed attrib."}
{"code":"void function ( Profile profile ) { getManager ( ) . registerProfile ( profile ) ; }","nl":"Register a profile in the  {@link ProfileManager}."}
{"code":"boolean function ( Method bridgeMethod , Method candidateMethod , Map < TypeVariable , Type > typeVariableMap ) { if ( isResolvedTypeMatch ( candidateMethod , bridgeMethod , typeVariableMap ) ) { return true ; } Method method = findGenericDeclaration ( bridgeMethod ) ; return ( method != null && isResolvedTypeMatch ( method , candidateMethod , typeVariableMap ) ) ; }","nl":"Determines whether or not the bridge  {@link Method} is the bridge for thesupplied candidate  {@link Method}."}
{"code":"void function ( ) { canvas . setForegroundColor ( color ) ; canvas . fillCircle ( xPosition , yPosition , diameter ) ; }","nl":"Draw this ball at its current position onto the canvas."}
{"code":"Object function ( String name ) { if ( ! vars . containsKey ( name ) ) { throw new ELException ( XLog . format ( \"variable [{0}] cannot be resolved\" , name ) ) ; } return vars . get ( name ) ; }","nl":"Resolve a variable name. Used by the EL evaluator implemenation. "}
{"code":"void function ( ) { final Path path = new Path ( \"hdfs://localhost:1234/foo/bar/baz?please=dont&show=up\" ) ; final String output = HadoopUtils . getPathWithoutScheme ( path ) ; Assert . assertFalse ( \"/foo/bar/baz\" . equals ( output ) ) ; }","nl":"This test doesn't work the way you might expect. If you take the URI.create(\"hdfs://localhost:1234/foo/bar/baz?please=dont&amp;show=up\").getPath it will return /foo/bar/baz. If you go through Hadoop's Path using  {@link Path#Path(String)}then Hadoop injects the query params into the path, so when you call toURI it gives a different response."}
{"code":"int function ( ) { return xPosition ; }","nl":"return the horizontal position of this ball"}
{"code":"float function ( short unitType ) { return floatValue ; }","nl":"This method is used to get a float value in a specified unit."}
{"code":"void function ( long blockId , long blockSize ) { if ( mBlocksToMoveIn . add ( blockId ) ) { mBlocksToMoveInSize += blockSize ; } }","nl":"Marks a block to move into this dir view, which is used by the evictor."}
{"code":"WSDLCorbaFactory function ( ) { String factoryImplName = findFactoryImplName ( ) ; return newInstance ( factoryImplName ) ; }","nl":"Get a new instance of a WSDLFactory. This method follows (almost) the same basic sequence of steps that JAXP follows to determine the fully-qualified class name of the class which implements WSDLFactory. The steps (in order) are:  Check the javax.wsdl.factory.WSDLFactory system property. Check the lib/wsdl.properties file in the JRE directory. The key will have the same name as the above system property. Use the default value.  Once an instance of a WSDLFactory is obtained, invoke newDefinition(), newWSDLReader(), or newWSDLWriter(), to create the desired instances."}
{"code":"Set < String > function ( ) { return atMeGroupList ; }","nl":"get groups which I was mentioned"}
{"code":"PropertyDescriptor function ( String propertyName , Object fromObj ) { for ( PropertyDescriptor property : propertyDescriptorsFor ( fromObj , null ) ) { if ( property . getName ( ) . equals ( propertyName ) ) { return property ; } } return null ; }","nl":"Returns the description of the property with the provided name on the provided object's interface."}
{"code":"void function ( int minutes ) { if ( minutes < 0 || minutes > 59 ) { throw new IllegalArgumentException ( \"Valid minutes value is between 0..59\" ) ; } this . minutes = minutes ; }","nl":"Set the minute of hour."}
{"code":"String function ( ) { return PLAIN_FORMAT . format ( this ) . toString ( ) ; }","nl":" Returns the value as a plain string denominated in BTC. The result is unformatted with no trailing zeroes. For instance, a value of 150000 satoshis gives an output string of \"0.0015\" BTC "}
{"code":"void function ( JPanel panel ) { uiStack . addToStack ( panel ) ; }","nl":"Adds a panel on the stack."}
{"code":"boolean function ( ) { return defaultNillable ; }","nl":"Absent any annotations of XML mapping, the value of the nillable attribute on elements."}
{"code":"List < SAXParseException > function ( Source instance ) { try { return problemToExceptionList ( validator . validateInstance ( instance ) . getProblems ( ) ) ; } catch ( XMLUnitException e ) { throw new XMLUnitRuntimeException ( e . getMessage ( ) , e . getCause ( ) ) ; } }","nl":"Obtain a list of all errors in the given instance. The list contains  {@link org.xml.sax.SAXParseException SAXParseException}s."}
{"code":"DiffBuilder function ( final ComparisonListener ... comparisonListeners ) { this . differenceListeners . addAll ( Arrays . asList ( comparisonListeners ) ) ; return this ; }","nl":"Registers a listener that is notified of each comparison with outcome other than  {@link ComparisonResult#EQUAL}."}
{"code":"void function ( ConduitSelector cs ) { this . conduitSelector = cs ; }","nl":"Sets the conduit selector"}
{"code":"FaultMode function ( Message message ) { if ( message != null && message . getExchange ( ) != null && message == message . getExchange ( ) . getOutFaultMessage ( ) ) { FaultMode mode = message . get ( FaultMode . class ) ; if ( null != mode ) { return mode ; } else { return FaultMode . RUNTIME_FAULT ; } } return null ; }","nl":"Determine the fault mode for the underlying (fault) message  (for use on server side only)."}
{"code":"void function ( Context context , View view ) { if ( view == null ) return ; InputMethodManager inputMethodManager = ( InputMethodManager ) context . getSystemService ( Context . INPUT_METHOD_SERVICE ) ; inputMethodManager . hideSoftInputFromWindow ( view . getWindowToken ( ) , 0 ) ; }","nl":"Hide keyboard"}
{"code":"BigDecimal function ( ) { return this . runId ; }","nl":"Gets the run id."}
{"code":"String function ( ) { return tenantDomain ; }","nl":"Get the tenant domain"}
{"code":"Rect function ( ) { return rectValue ; }","nl":"Not supported. This method is used to get the Rect value."}
{"code":"List < Playlist > function ( ) { List list = new ArrayList ( playlists . values ( ) ) ; Collections . sort ( list ) ; return list ; }","nl":"Return playlists as a Collection"}
{"code":"void function ( String jdbcURL , String userName , String password , String driver ) { try { Class . forName ( driver ) . newInstance ( ) ; con = DriverManager . getConnection ( jdbcURL , userName , password ) ; Documents . createDb ( ) ; } catch ( Exception e ) { throw new MoxieException ( e ) ; } }","nl":"Initializes our Documents object and underlying database connection."}
{"code":"void function ( CString value ) { this . paramName = value ; }","nl":"Sets the value of the paramName property."}
{"code":"boolean function ( String uri ) { return false ; }","nl":"Returns true if the given URI was visited, meaning it was requested at some point since initialization."}
{"code":"String function ( String servletName ) { if ( servletName == null ) throw new NullPointerException ( ) ; return DAVRepository . class . getName ( ) + \".\" + servletName ; }","nl":"Retrieve the key in the  {@link ServletContext} where the instance ofthe  {@link DAVRepository} associated with a named {@link DAVServlet}can be found."}
{"code":"void function ( Object object ) { _out . writeStreamingObject ( object ) ; }","nl":"Writes any object to the output stream."}
{"code":"void function ( ) { if ( canTestSymLinks ) { NoFileAssertListener listener = new NoFileAssertListener ( 1 ) ; cpd . setCpdListener ( listener ) ; cpd . add ( new File ( BASE_TEST_RESOURCE_PATH , \"real-file.txt\" ) ) ; cpd . add ( new File ( BASE_TEST_RESOURCE_PATH , \"symlink-for-real-file.txt\" ) ) ; listener . verify ( ) ; } }","nl":"A file should be added only once - even if it was found twice, because of a sym link."}
{"code":"void function ( ) { mGenerator . setNextContainerId ( TEST_ID ) ; Assert . assertEquals ( TEST_ID , mGenerator . getNewContainerId ( ) ) ; Assert . assertEquals ( TEST_ID + 1 , mGenerator . getNewContainerId ( ) ) ; Assert . assertEquals ( TEST_ID + 2 , mGenerator . getNewContainerId ( ) ) ; }","nl":"Tests the  {@link BlockContainerIdGenerator#setNextContainerId(long)} method."}
{"code":"void function ( ) { checkRankNUpdate ( N , N - 2 ) ; checkRankNUpdate ( N * 2 + 1 , N - 2 ) ; checkRankNUpdate ( N - 1 , N - 2 ) ; }","nl":"Tests rankNUpdate with various sized input matrices"}
{"code":"void function ( ) { when ( mockServerSession . getId ( ) ) . thenReturn ( null ) ; notificationController . registerUserSession ( mockServerSession , mockServerMessage ) ; }","nl":"Test method for {@link NotificationController#registerUserSession(ServerSession,ServerMessage)}. Verifies that method throws  {@code NullPointerException} when ServerSession ID is null."}
{"code":"Rectangle function ( ) { if ( panel . getPreferredSize ( ) != null ) { return new Rectangle ( 0 , 0 , ( int ) panel . getPreferredSize ( ) . getWidth ( ) , ( int ) panel . getPreferredSize ( ) . getHeight ( ) ) ; } else { return new Rectangle ( 0 , 0 , panel . getWidth ( ) , panel . getHeight ( ) ) ; } }","nl":"Returns the size image needed to render the document without anything going off the side. Could be different than the dimensions passed into layout because of text that couldn't break or a table that's set to be too big."}
{"code":"DenseMatrix64F function ( ) { return QR ; }","nl":"Inner matrix that stores the decomposition"}
{"code":"InputStream function ( String name ) { InputStream stream = loadResourceAsStream ( name , ResourceLoader . class . getClassLoader ( ) ) ; if ( stream == null ) { throw new RuleSetNotFoundException ( \"Can't find resource \" + name + \". Make sure the resource is a valid file or URL or is on the CLASSPATH\" ) ; } return stream ; }","nl":"Method to find a file, first by finding it as a file (either by the absolute or relative path), then as a URL, and then finally seeing if it is on the classpath.  Caller is responsible for closing the  {@link InputStream}."}
{"code":"int function ( ) { int quantity = 0 ; try { quantity = lineItem . getLineItem ( ) . getQuantity ( ) . getValue ( ) . intValue ( ) ; } catch ( NullPointerException npe ) { } return quantity ; }","nl":"Returns the quantity associated with a line item."}
{"code":"void function ( String cytoband ) { this . cytoband = cytoband ; }","nl":"Sets the cytoband of a gistic"}
{"code":"ValidateAccess function ( ) { return new ValidateAccess ( ) ; }","nl":"Create an instance of  {@link ValidateAccess }"}
{"code":"String function ( HttpServletRequest request ) { String format = request . getParameter ( WebService . FORMAT ) ; return format == null ? format : format . toLowerCase ( ) ; }","nl":"Get the return format requested"}
{"code":"DishCollection function ( DishCollection dishCollection ) { log . debug ( \"Request to save DishCollection : {}\" , dishCollection ) ; DishCollection result = dishCollectionRepository . save ( dishCollection ) ; return result ; }","nl":"Save a dishCollection."}
{"code":"Sha256Hash function ( byte [ ] contents ) { return new Sha256Hash ( Utils . doubleDigest ( contents ) ) ; }","nl":"Calculates the hash of the hash of the contents. This is a standard operation in Bitcoin."}
{"code":"void function ( ) { }","nl":"Destroy the workflow application service."}
{"code":"String function ( ) { return fromCalendar ( GregorianCalendar . getInstance ( ) ) ; }","nl":"Get current date and time formatted as ISO 8601 string."}
{"code":"DiffBuilder function ( final Object control ) { final Source controlSource = getSource ( control ) ; return new DiffBuilder ( controlSource ) ; }","nl":"Create a DiffBuilder from all kind of types supported by  {@link Input#from(Object)}."}
{"code":"void function ( final JSONObject json , final String name , final Collection value ) { try { json . put ( name , value ) ; } catch ( final JSONException e ) { LOG . warn ( \"JSON error\" , e ) ; } }","nl":"Puts the specified name/value pair in the specified JSON object."}
{"code":"T function ( ) { return V ; }","nl":" Returns the orthogonal 'V' matrix. "}
{"code":"String function ( ) { return mAlias ; }","nl":"The alias associated with this certificate."}
{"code":"void function ( final String [ ] args ) { LOG . debug ( \"Launching SIP and TURN servers...\" ) ; final TurnLauncher launcher = new TurnLauncher ( ) ; LOG . debug ( \"Created launcher\" ) ; try { launcher . start ( ) ; LOG . debug ( \"Started launcher\" ) ; } catch ( final Throwable t ) { LOG . error ( \"Could not start!!!\" , t ) ; } }","nl":"Launches the SIP and TURN servers."}
{"code":"void function ( byte [ ] value ) { this . projectSecret = ( ( byte [ ] ) value ) ; }","nl":"Sets the value of the projectSecret property."}
{"code":"String function ( Date dateObj , DateFormatType dateFormatType ) { String strDate = null ; SimpleDateFormat dateFormat = new SimpleDateFormat ( dateFormatType . valueOf ( ) ) ; strDate = dateFormat . format ( dateObj ) ; return strDate ; }","nl":"Format date."}
{"code":"int function ( SymmetricQrAlgorithm alg , double val , double tol ) { int total = 0 ; for ( int i = 0 ; i < alg . getNumberOfEigenvalues ( ) ; i ++ ) { double a = alg . getEigenvalue ( i ) ; if ( Math . abs ( a - val ) <= tol ) { total ++ ; } } return total ; }","nl":"Counts the number of times the specified eigenvalue appears."}
{"code":"BasicNameManager function ( ServiceInfo service ) { BasicNameManager nameManager = new BasicNameManager ( ) ; nameManager . initialize ( service , null ) ; return nameManager ; }","nl":"Factory that just takes a service. Used in tools and unit tests."}
{"code":"ConfigurationHandler function ( ) { return handler ; }","nl":"Returns the customized configuration for the user."}
{"code":"FederationProposal function ( String token ) { List < FederationProposal > list = getPendingFederationProposals ( ) ; for ( FederationProposal proposal : list ) { if ( proposal . token . equals ( token ) ) { return proposal ; } } return null ; }","nl":"Returns the proposal identified by the supplied token."}
{"code":"void function ( String cssText ) { this . _cssText = cssText ; }","nl":"Not supported, class is immutable. Sets the string representation of the current value."}
{"code":"void function ( ) { blk = new Block ( blk . fileName ( ) , blk . number ( ) - 1 ) ; pg . read ( blk ) ; currentrec = pg . getInt ( LogMgr . LAST_POS ) ; }","nl":"Moves to the next log block in reverse order, and positions it after the last record in that block."}
{"code":"Object function ( String targetJndiName ) { Object home = new InitialContext ( ) . lookup ( targetJndiName ) ; Method method = home . getClass ( ) . getMethod ( \"create\" , new Class [ 0 ] ) ; return method . invoke ( home , new Object [ 0 ] ) ; }","nl":"Looks up the target object by EJB local reference."}
{"code":"List < String > function ( ) { return acceptedEncryptionAlgorithms ; }","nl":"Get the list of accepted encryption algorithms. A request can contain a wst:EncryptionAlgorithm uri to use to encrypt an issued token. The algorithm specified must be contained in this list. The default algorithms are 3-DES, AES-128, AES-128 GCM, AES-192, AES-192 GCM, AES-256 and AES-256 GCM."}
{"code":"void function ( BundleContext context ) { for ( AutoSIMConnectionConfig connectionConfig : config . connections ) { environments . deregisterConnectionFactory ( connectionConfig . name ) ; factories . remove ( connectionConfig . name ) ; } }","nl":"Implements BundleActivator.stop(). Does nothing since the framework will automatically unregister any registered services."}
{"code":"String function ( String [ ] headers , Object [ ] [ ] data ) { return of ( headers , data , Borders . FULL ) ; }","nl":"Create a new table with the specified headers and row data."}
{"code":"Node function ( ) { return target ; }","nl":"The actual target."}
{"code":"ActivityGraphsHelper function ( ) { return impl ; }","nl":"The component we are decorating."}
{"code":"void function ( ) { String out = WebUtils . convertMsToClockTime ( TimeUnit . SECONDS . toMillis ( 1 ) ) ; Assert . assertEquals ( \"0 day(s), 0 hour(s), 0 minute(s), and 1 second(s)\" , out ) ; }","nl":"Tests the  {@link WebUtils#convertMsToClockTime(long)} method with one second."}
{"code":"java . lang . String function ( ) { return literalName ; }","nl":"Returns a string representation of the enumeration value."}
{"code":"List < ClassdiagramNode > function ( ) { return downlinks ; }","nl":"Get the downlinks of this node."}
{"code":"String function ( ) { return runtimeDir ; }","nl":"Return the runtime directory of the Oozie instance.  The directory is created under TMP and it is always a new directory per Services initialization."}
{"code":"boolean function ( boolean defaultValue ) { if ( ! StringUtils . isEmpty ( currentValue ) ) { return Boolean . parseBoolean ( currentValue . trim ( ) ) ; } return defaultValue ; }","nl":"Returns the boolean value for the currentValue. If the currentValue can not be interpreted as a boolean, the defaultValue is returned."}
{"code":"void function ( SeekBar slider ) { int current = slider . getProgress ( ) ; if ( current < slider . getMax ( ) ) { slider . setProgress ( current + 1 ) ; } else { slider . setProgress ( current - 1 ) ; } slider . setProgress ( current ) ; }","nl":"Puts the slider back in its original position, but makes it seem as if it has moved, allowing onProgressChanged() to be called"}
{"code":"void function ( ) { assertEquals ( 1 , time . getHour ( ) ) ; }","nl":"Test method for  {@link net.sf.marineapi.nmea.util.Time#getHour()}."}
{"code":"Date function ( DatePicker datePicker ) { int day = datePicker . getDayOfMonth ( ) ; int month = datePicker . getMonth ( ) ; int year = datePicker . getYear ( ) ; Calendar calendar = Calendar . getInstance ( ) ; calendar . set ( year , month , day ) ; return calendar . getTime ( ) ; }","nl":"Get Date from DatePicker"}
{"code":"void function ( Timestamp createdDate ) { this . createdDate = createdDate ; }","nl":"Sets the created date."}
{"code":"boolean function ( Collection < Assertion > assertions , Collection < Assertion > candidates ) { if ( null == candidates || candidates . isEmpty ( ) ) { return true ; } for ( Assertion c : candidates ) { if ( ! contains ( assertions , c ) ) { return false ; } } return true ; }","nl":"Determine if one collection of assertions contains another collection of assertion, using the equal method from the Assertion interface."}
{"code":"NodeVisitor function ( Node n ) { return this ; }","nl":"Begin normal traversal of a subtree rooted at  {@code n}. This gives the visitor the option of changing internal state or returning a new visitor which will be used to visit the children of  {@code n}.  This method is typically called by the method {@link #enter(Node,Node) enter(parent, n)}. If a subclass overrides the method  {@link #enter(Node,Node) enter(parent, n)} then this methodmay not be called."}
{"code":"XsdStringType function ( ) { return paramValue ; }","nl":"Gets the value of the paramValue property."}
{"code":"ConfigSetupType function ( String s ) { try { return valueOf ( s . toUpperCase ( ) ) ; } catch ( IllegalArgumentException e ) { FetcherTesterRestSvcManager . LOGGER . error ( \"exception in fromString\" , e ) ; throw new FetcherTesterServiceException ( \"query parameter [inc]: Invalid value: \" + s , e ) ; } }","nl":"From string."}
{"code":"int function ( ViewConfiguration config ) { return IMPL . getScaledPagingTouchSlop ( config ) ; }","nl":"Call  {@link ViewConfiguration#getScaledPagingTouchSlop()}. If running on a pre- {@android.os.Build.VERSION_CODES #FROYO} device,returns  {@link ViewConfiguration#getScaledTouchSlop()}."}
{"code":"TypeNode function ( String fmt , Object ... os ) { return ( TypeNode ) parse ( TYPE , fmt , os ) ; }","nl":"Parse a string into a  {@code TypeNode} AST node,applying substitutions."}
{"code":"void function ( ) { try { rmb . setSteerTo ( null ) ; fail ( \"Did not throw IllegalArgumentException\" ) ; } catch ( IllegalArgumentException e ) { assertTrue ( e . getMessage ( ) . contains ( \"LEFT or RIGHT\" ) ) ; } catch ( Exception e ) { fail ( e . getMessage ( ) ) ; } }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.RMBParser#setSteerTo(CompassPoint)}."}
{"code":"void function ( ) { if ( connectedHandler != null ) connectedHandler . close ( ) ; }","nl":"If a handler is connected, call its  {@link org.bitcoinj.protocols.channels.PaymentChannelServer#close()}method thus disconnecting the TCP connection."}
{"code":"void function ( final PropertyChangeListener listener ) { m_PropertyChangeSupport . addPropertyChangeListener ( listener ) ; }","nl":"Add PropertyChangeListener."}
{"code":"Client function ( ) { return client ; }","nl":"Returns the  {@link Client} instance"}
{"code":"String function ( AccessibilityServiceInfo info ) { return IMPL . getDescription ( info ) ; }","nl":"Description of the accessibility service.  Statically set from  {@link AccessibilityService#SERVICE_META_DATA meta-data}. "}
{"code":"void function ( Locale locale ) { Locale . setDefault ( locale ) ; bundles = new HashMap < String , ResourceBundle > ( ) ; }","nl":"Change the current Locale.  Only use this before the GUI is initialized."}
{"code":"Script function ( @ Nullable TransactionSignature signature , ECKey pubKey ) { byte [ ] pubkeyBytes = pubKey . getPubKey ( ) ; byte [ ] sigBytes = signature != null ? signature . encodeToBitcoin ( ) : new byte [ ] { } ; return new ScriptBuilder ( ) . data ( sigBytes ) . data ( pubkeyBytes ) . build ( ) ; }","nl":"Creates a scriptSig that can redeem a pay-to-address output. If given signature is null, incomplete scriptSig will be created with OP_0 instead of signature"}
{"code":"Timestamp function ( ) { return this . receiptDate ; }","nl":"Gets the receipt date."}
{"code":"void function ( boolean enforceKnownIssuer ) { this . enforceKnownIssuer = enforceKnownIssuer ; }","nl":"Enforce that the Issuer of the received Response/Assertion is known. The default is true."}
{"code":"ValidateAccess function ( ) { return access ; }","nl":"Gets the value of the access property."}
{"code":"void function ( ) { ApplicationVersion . init ( VERSION ) ; }","nl":"Make the version of ArgoUML public."}
{"code":"void function ( RID rid ) { moveTo ( rid . blockNumber ( ) ) ; rp . moveToId ( rid . id ( ) ) ; }","nl":"Positions the current record as indicated by the specified RID."}
{"code":"void function ( WalkDirection direction ) { viewer . moveCharacter2d ( direction ) ; }","nl":"Method called only from the Model. It sends a command to the Viewer to update the character sprite as the model's character moves."}
{"code":"BlockWorkerClient function ( WorkerNetAddress address ) { Preconditions . checkNotNull ( address , ExceptionMessage . NO_WORKER_AVAILABLE . getMessage ( ) ) ; long clientId = IdUtils . getRandomNonNegativeLong ( ) ; return new RetryHandlingBlockWorkerClient ( address , clientId ) ; }","nl":"Obtains a client for a worker with the given address."}
{"code":"String function ( ) { return this . failedAttrib ; }","nl":"Gets the failed attrib."}
{"code":"void function ( Map < String , Object > headers ) { this . headers = headers ; }","nl":"set all headers for the message"}
{"code":"int function ( ) { return super . hashCode ( ) ; }","nl":"Return the hash code that object would have provided for us so we have a (nearly) unique id for debugging."}
{"code":"ValidatedItemDTO [ ] function ( String samlRequest , boolean isPost ) { try { return stub . validateAuthnRequest ( samlRequest , isPost ) ; } catch ( RemoteException e ) { log . error ( \"Error validating SAML request\" , e ) ; throw new AxisFault ( e . getMessage ( ) , e ) ; } }","nl":"Validate SAML request"}
{"code":"Sha256Hash function ( Block b ) { return b . getHash ( ) ; }","nl":"Gets the hash of the given block for the purpose of checking its PoW"}
{"code":"void function ( String srcPath , String dstPath ) { com . google . common . io . Files . move ( new File ( srcPath ) , new File ( dstPath ) ) ; }","nl":"Moves file from one place to another, can across storage devices (e.g., from memory to SSD) when  {@link File#renameTo} may not work.Current implementation uses  {@link com.google.common.io.Files#move(File,File)}, may change if there is a better solution."}
{"code":"List < JsonCoordinatorAction > function ( JSONArray array ) { List < JsonCoordinatorAction > list = new ArrayList < JsonCoordinatorAction > ( ) ; for ( Object obj : array ) { list . add ( new JsonCoordinatorAction ( ( JSONObject ) obj ) ) ; } return list ; }","nl":"Convert a JSONArray into a nodes list."}
{"code":"void function ( ) { md5Cache . clear ( ) ; }","nl":"clean the md5 cache"}
{"code":"String function ( ) { return this . inactivationReasonType ; }","nl":"Gets the inactivation reason type."}
{"code":"void function ( String msg , Exception e ) { log . error ( msg , e ) ; throw new AxisFault ( msg , e ) ; }","nl":"Logs and wraps the given exception."}
{"code":"ByteBuffer function ( int start , int len ) { ByteBuffer ret = ByteBuffer . allocate ( len * 4 ) ; for ( int k = 0 ; k < len ; k ++ ) { ret . putInt ( start + k ) ; } ret . flip ( ) ; return ret ; }","nl":"Gets a  {@link ByteBuffer} containing an increasing sequence of integers starting at the givenvalue."}
{"code":"int function ( ) { return lane_id ; }","nl":"Gets the lane_id."}
{"code":"boolean function ( String s ) { if ( s . length ( ) == 0 || ! Character . isJavaIdentifierStart ( s . charAt ( 0 ) ) ) { return false ; } for ( int i = 1 ; i < s . length ( ) ; i ++ ) { if ( ! Character . isJavaIdentifierPart ( s . charAt ( i ) ) ) { return false ; } } return true ; }","nl":"Returns true if s is a legal Java identifier. more info."}
{"code":"boolean function ( ) { return config . loadDefault ( ) ; }","nl":"Load the configuration from the default location. The configuration will be automatically loaded from the default location the first time a value is queried or modified, if it had not been previously loaded.  Only the first load request will be honored, so if the configuration is to be loaded from a non-default location, load(name) must be used prior to any other call.  The configuration can be loaded only one time. Implementations must ignore load requests once a load is already successful, and must return false for each of those ignored requests."}
{"code":"void function ( List < Double > utilityValues ) { profits . add ( utilityValues ) ; }","nl":"Add the utility values of an itemset to this sequence"}
{"code":"long function ( ) { return index ; }","nl":"The index of the output in transaction to which we refer"}
{"code":"InStreamOptions function ( long bufferSizeBytes ) { mSeekBufferSizeBytes = bufferSizeBytes ; return this ; }","nl":"Sets  {@link #mSeekBufferSizeBytes}."}
{"code":"String function ( ) { return formatUTC ( new Date ( ) , DateTimeFormat . SQL , false ) ; }","nl":"Get current UTC dateTime in SQL format."}
{"code":"void function ( T key ) { Integer value = counter . get ( key ) ; if ( value == null ) { counter . put ( key , 1 ) ; } else { counter . put ( key , value + 1 ) ; } }","nl":"Increments the count to which the specified key is mapped in this frequency counter, or puts 1 if the map contains no mapping for this key."}
{"code":"void function ( List < TestResultDTO > testResultLst ) { this . testResultLst = testResultLst ; }","nl":"Sets the test result lst."}
{"code":"Scriptable function ( Context cx , Scriptable scope , Object javaObject , Class < ? > staticType ) { Scriptable wrap ; wrap = new NativeJavaObject ( scope , javaObject , staticType ) ; return wrap ; }","nl":"Wrap Java object as Scriptable instance to allow full access to its methods and fields from JavaScript.  {@link #wrap(Context,Scriptable,Object,Class)} and{@link #wrapNewObject(Context,Scriptable,Object)} call this methodwhen they can not convert javaObject to JavaScript primitive value or JavaScript array.  Subclasses can override the method to provide custom wrappers for Java objects."}
{"code":"String function ( ) { return mTierAlias ; }","nl":"Gets the storage tier alias of the location."}
{"code":"PaymentChannelServerState function ( Wallet wallet , TransactionBroadcaster broadcaster ) { if ( state == null ) state = new PaymentChannelServerState ( this , wallet , broadcaster ) ; checkArgument ( wallet == state . wallet ) ; return state ; }","nl":"Gets the canonical  {@link PaymentChannelServerState} object for this channel, either by returning an existing oneor by creating a new one."}
{"code":"String function ( XmlSchemaAttribute attribute , boolean qualified ) { if ( qualified ) { String prefix = getPrefix ( attribute . getQName ( ) . getNamespaceURI ( ) ) ; collect ( prefix , attribute . getQName ( ) . getNamespaceURI ( ) ) ; return prefix + \":\" + attribute . getName ( ) ; } return attribute . getName ( ) ; }","nl":"Obtain a suitable name for use in Javascript for an attribute. This function is purely a tribute to the awful modularity of XmlSchema."}
{"code":"Scan function ( ) { TempTable tt = copyRecordsFrom ( rhs ) ; TableInfo ti = tt . getTableInfo ( ) ; Scan leftscan = lhs . open ( ) ; return new MultiBufferProductScan ( leftscan , ti , tx ) ; }","nl":"A scan for this query is created and returned, as follows. First, the method materializes its RHS query. It then determines the optimal chunk size, based on the size of the materialized file and the number of available buffers. It creates a chunk plan for each chunk, saving them in a list. Finally, it creates a multiscan for this list of plans, and returns that scan."}
{"code":"void function ( boolean value ) { _highPriority = value ; }","nl":"Sets whether the message should be trated as high priority or not."}
{"code":"ServerSession function ( String userId ) { return userSessionMap . get ( userId ) ; }","nl":"Obtains the  {@link ServerSession} associated with a given user id."}
{"code":"String function ( ) { return applicationDescription ; }","nl":"Gets the description of the third-party application."}
{"code":"List < String > function ( ) { return links . getVertexLabels ( ) ; }","nl":"Returns a list of all locations."}
{"code":"Constant function ( String fldname ) { if ( groupfields . contains ( fldname ) ) return groupval . getVal ( fldname ) ; for ( AggregationFn fn : aggfns ) if ( fn . fieldName ( ) . equals ( fldname ) ) return fn . value ( ) ; throw new RuntimeException ( \"field \" + fldname + \" not found.\" ) ; }","nl":"Gets the Constant value of the specified field. If the field is a group field, then its value can be obtained from the saved group value. Otherwise, the value is obtained from the appropriate aggregation function."}
{"code":"String function ( ) { return testData ; }","nl":"Gets the value of the testData property."}
{"code":"LocalAlluxioClusterResource function ( PropertyKey key , Object value ) { mConfiguration . put ( key , value . toString ( ) ) ; return this ; }","nl":"Adds a property to the cluster resource."}
{"code":"String function ( String input , String ... blackListPatterns ) { if ( StringUtils . isEmpty ( input ) || isValidOverBlackListPatterns ( input , blackListPatterns ) ) { return input ; } throw new IdentityValidationException ( msgSection1 + String . format ( msgSection3 , getPatternString ( blackListPatterns ) ) ) ; }","nl":"Returns the input if valid over the given black list patterns else throws an IdentityValidationException"}
{"code":"Schema function ( ) { return srcplan . schema ( ) ; }","nl":"Returns the schema of the materialized table, which is the same as in the underlying plan."}
{"code":"Result function ( List < String > sources ) { Result ret = new Result ( ) ; for ( ResultEntry l : this . log ) { if ( sources . contains ( l . getSource ( ) ) ) { ret . add ( l ) ; } } return ret ; }","nl":"Complementary operation to filterOnly"}
{"code":"Map < T , String > function ( Set < T > keys ) { Map < T , String > colorMap = new HashMap < T , String > ( ) ; for ( T key : keys ) { Color color = tintColor ( getRandomColor ( ) , FIXED_TINT_FACTOR ) ; colorMap . put ( key , getColorString ( color ) ) ; } return colorMap ; }","nl":"Builds a map of the supplied keys to random colors. Each color is selected randomly and tinted with a fixed tint."}
{"code":"void function ( ) { setPopulationSize ( 0 ) ; setIterations ( 0 ) ; }","nl":"Sets the population size and number of iterations to zero."}
{"code":"void function ( Document document , Element rootElement ) { Element domainAssignment = document . createElement ( \"domainassignment\" ) ; rootElement . appendChild ( domainAssignment ) ; for ( SourceSinkDomPair spec : this . document . getDomainAssignment ( ) ) writeSourceSinkDomPair ( spec , document , domainAssignment ) ; }","nl":"Writes out the domains assignments section of the RIFL document"}
{"code":"int function ( ) { return values . size ( ) ; }","nl":"Returns number of top level result values."}
{"code":"String function ( ) { return \"UTF-8\" ; }","nl":"Supply the encoding to be used throughout the persistence mechanism."}
{"code":"void function ( Object caller , String msg , String color ) { Class callerClass = caller . getClass ( ) ; XDebugMessage message = new XDebugMessage ( callerClass . getName ( ) , msg , color ) ; messages . add ( message ) ; }","nl":"Logs a new message with the specified color code."}
{"code":"MetadataEditorCompat function ( int key , long value ) { if ( HAS_REMOTE_CONTROL_APIS ) { ( ( RemoteControlClient . MetadataEditor ) mActualMetadataEditor ) . putLong ( key , value ) ; } return this ; }","nl":"Adds numerical information to be displayed. Note that none of the information added after {@link #apply()} has been called, will be displayed."}
{"code":"void function ( ) { SpaceXGUI . getInstance ( ) . appendToConsole ( TAG , \" - spinning left\" ) ; cmd . setLedsAnimation ( LEDAnimation . BLINK_RED , 3 , ( spinTime / 1000 ) ) ; cmd . spinLeft ( spinSpeed ) . doFor ( spinTime ) ; cmd . hover ( ) . doFor ( hoverTime ) ; }","nl":"SpinLeft spins the drone a little to the left"}
{"code":"ResponseEntity < Ingredient > function ( @ PathVariable String id ) { log . debug ( \"REST request to get Ingredient : {}\" , id ) ; Ingredient ingredient = ingredientService . findOne ( id ) ; return Optional . ofNullable ( ingredient ) . map ( result -> new ResponseEntity < > ( result , HttpStatus . OK ) ) . orElse ( new ResponseEntity < > ( HttpStatus . NOT_FOUND ) ) ; }","nl":"GET  /ingredients/:id : get the \"id\" ingredient."}
{"code":"void function ( Element element ) { unhandled ( element ) ; }","nl":"Template delegator for testNode() method. OVERRIDE to add custom logic"}
{"code":"String function ( ResultSet rs , String source ) { return getStringValue ( rs , source , true ) ; }","nl":"Get string value from database, replacing empty string with {Empty}"}
{"code":"String function ( String classFullName ) { int lastDot = classFullName . lastIndexOf ( '.' ) ; return ( lastDot < 0 ) ? \"\" : classFullName . substring ( 0 , lastDot ) ; }","nl":"Returns the package name of  {@code classFullName} according to the Java Language Specification(section 6.7). Unlike  {@link Class#getPackage}, this method only parses the class name, without attempting to define the  {@link Package} and hence load files."}
{"code":"boolean function ( Object obj ) { return internalEquals ( obj ) || internalEqualsNext ( obj ) ; }","nl":"{@inheritDoc} Additionally - two  {@link SimpleTypedNameDeclaration} are equal, if theycontain types, that can be cast into each other. "}
{"code":"String function ( ) { String num = \"\" ; try { num = lineItem . getLineItem ( ) . getItem ( ) . getSellersItemIdentification ( ) . getID ( ) . getValue ( ) ; } catch ( NullPointerException npe ) { } return num ; }","nl":"Returns the part number associated with a line item."}
{"code":"void function ( int parameter ) { state . unicodeAlternateSkipCount = parameter ; }","nl":"Set the number of bytes to skip after a Unicode character."}
{"code":"void function ( final TextureRegion pTextureRegion ) { this . mTextureRegion = pTextureRegion ; }","nl":"You'd probably want to call  {@link TMXTile#setGlobalTileID(TMXTiledMap,int)} instead."}
{"code":"void function ( ) { Assert . assertEquals ( TieredBlockStoreTestUtils . getDefaultTotalCapacityBytes ( ) , mBlockStoreMeta . getCapacityBytes ( ) ) ; }","nl":"Tests the  {@link BlockStoreMeta#getCapacityBytes()} method."}
{"code":"String function ( ) { while ( lines . peek ( ) == null ) { cbuf . clear ( ) ; int read = ( reader != null ) ? reader . read ( buf , 0 , buf . length ) : readable . read ( cbuf ) ; if ( read == - 1 ) { lineBuf . finish ( ) ; break ; } lineBuf . add ( buf , 0 , read ) ; } return lines . poll ( ) ; }","nl":"Reads a line of text. A line is considered to be terminated by any one of a line feed ( {@code '\\n'}), a carriage return ( {@code '\\r'}), or a carriage return followed immediately by a linefeed ( {@code \"\\r\\n\"})."}
{"code":"void function ( ) { gsv . setSentenceCount ( 1 ) ; assertEquals ( 1 , gsv . getSentenceCount ( ) ) ; gsv . setSentenceCount ( 2 ) ; assertEquals ( 2 , gsv . getSentenceCount ( ) ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.GSVParser#setSentenceCount(int)}."}
{"code":"void function ( String iconPath ) { this . iconPath = iconPath ; }","nl":"set icon path"}
{"code":"boolean function ( ) { return ( this . properties . getProxy ( ) != null && this . properties . getProxy ( ) . getAuth ( ) != null && this . properties . getProxy ( ) . getAuth ( ) . getUsername ( ) != null && this . properties . getProxy ( ) . getAuth ( ) . getPassword ( ) != null ) ; }","nl":"Check if the proxy setting has username/password set."}
{"code":"void function ( IRtfSource source , IRtfListener listener ) { handler = new DefaultEventHandler ( listener ) ; IRtfParser reader = new RawRtfParser ( ) ; reader . parse ( source , this ) ; }","nl":"Main entry point: parse RTF data from the input stream, and pass events based on the RTF content to the listener."}
{"code":"Result function ( String source ) { Result ret = new Result ( ) ; for ( ResultEntry l : this . log ) { if ( l . getSource ( ) . equals ( source ) ) { ret . add ( l ) ; } } return ret ; }","nl":"Complementary operation to filterOnly"}
{"code":"void function ( ) { double val = NormOps . conditionP2 ( unzeroMatrix ) ; assertEquals ( 2.1655 , val , 1e-3 ) ; checkUncountable ( NormOps . conditionP2 ( zeroMatrix ) ) ; }","nl":"Tests against the condition number from octave."}
{"code":"void function ( ) { Mockito . when ( mClient . listObjects ( Matchers . any ( ListObjectsRequest . class ) ) ) . thenThrow ( ServiceException . class ) ; boolean result = mOSSUnderFileSystem . delete ( PATH , false ) ; Assert . assertFalse ( result ) ; }","nl":"Test case for  {@link OSSUnderFileSystem#delete(String,boolean)}."}
{"code":"List < Language > function ( File sourceFile ) { return getLanguagesForFile ( sourceFile . getName ( ) ) ; }","nl":"Get the Languages of a given source file."}
{"code":"B function ( Method ... methods ) { return suppressing ( Arrays . asList ( methods ) ) ; }","nl":"Prevents the given methods from being run as part of the test suite. Note: in principle this should never need to be used, but it might be useful if the semantics of an implementation disagree in unforeseen ways with the semantics expected by a test, or to keep dependent builds clean in spite of an erroneous test."}
{"code":"void function ( AudioManager audioManager , RemoteControlClientCompat remoteControlClient ) { if ( ! sHasRemoteControlAPIs ) { return ; } audioManager . registerRemoteControlClient ( ( RemoteControlClient ) remoteControlClient . getActualRemoteControlClientObject ( ) ) ; }","nl":"Registers the instance of RemoteControlClient with the AudioManager."}
{"code":"long function ( ) { return messagesSent ; }","nl":"Get the number of messages sent. This metrics is incremented after a message has been completely and successfully put on the wire."}
{"code":"lalr_item function ( ) { lalr_item result ; if ( _all . values ( ) . size ( ) == 0 ) return null ; result = iterator ( ) . next ( ) ; remove ( result ) ; return result ; }","nl":"Remove and return one item from the set (done in hash order). Return null if there are no items in the set."}
{"code":"URI function ( ) { return theURI ; }","nl":"This field returns the URI associated with the connection in question."}
{"code":"void function ( String msg ) { this . config . getServletContext ( ) . log ( this . config . getFilterName ( ) + \": \" + msg ) ; }","nl":"logs the message prepended by the filter name (copy of  {@link GenericServlet#log(String)})"}
{"code":"String function ( ) { return null ; }","nl":"override only if needed - if claims are controlled by the identity provider, this will return null. If it is connector specific this must return the corresponding claim dialect."}
{"code":"void function ( ) { GSVSentence g = new GSVParser ( \"$GPGSV,3,2,12,15,56,182,51,17,38,163,47\" ) ; List < SatelliteInfo > sat = g . getSatelliteInfo ( ) ; assertEquals ( 2 , sat . size ( ) ) ; testSatelliteInfo ( sat . get ( 0 ) , \"15\" , 56 , 182 , 51 ) ; testSatelliteInfo ( sat . get ( 1 ) , \"17\" , 38 , 163 , 47 ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.GSVParser#getSatelliteInfo()}."}
{"code":"void function ( ) { DataByteBuffer data = new DataByteBuffer ( mBuffer , LENGTH ) ; Object output = data . getNettyOutput ( ) ; Assert . assertTrue ( output instanceof ByteBuf || output instanceof FileRegion ) ; }","nl":"Tests the  {@link DataByteBuffer#getNettyOutput()} method."}
{"code":"boolean function ( ) { return loggingEnabled ; }","nl":"Whether logging is on or off."}
{"code":"RegisteredClient function ( ServerConfiguration issuer ) { return clients . get ( issuer . getIssuer ( ) ) ; }","nl":"Get the client configured for this issuer"}
{"code":"String function ( String fileName ) { String name = fileName ; int index = fileName . lastIndexOf ( '.' ) ; if ( index != - 1 ) { name = fileName . substring ( 0 , index ) ; } return name ; }","nl":"Helper method to get a filename without its extension"}
{"code":"boolean function ( String name , FieldSigMask mask ) { for ( FieldSignature sig : fields . keySet ( ) ) { if ( mask . covers ( sig ) ) { if ( fields . get ( sig ) . contains ( name ) ) { return true ; } } } return false ; }","nl":"Checks whether the class declares a field by the name given which is covered by the signature mask."}
{"code":"void function ( TreePath path ) { Object node = path . getLastPathComponent ( ) ; TreePath parentPath = path . getParentPath ( ) ; if ( parentPath == null ) { fireChildrenChanged ( path , null , null ) ; } else { Object parent = parentPath . getLastPathComponent ( ) ; fireChildChanged ( parentPath , getIndexOfChild ( parent , node ) , node ) ; } }","nl":"Call when the path itself has changed, but no structure changes have occurred."}
{"code":"void function ( long xid , int retval , ServiceInfoStat [ ] info ) { }","nl":"Called as a result of a previous service removal request."}
{"code":"void function ( String testId ) { this . testId = testId ; }","nl":"Sets the test id."}
{"code":"void function ( ) { final Iterator < IoSession > iter = this . m_connections . values ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { final IoSession readerWriter = iter . next ( ) ; readerWriter . close ( ) ; iter . remove ( ) ; } }","nl":"Closes all connections to remote hosts associated with this TURN client."}
{"code":"JSONArray function ( List < ? extends JsonWorkflowJob > workflows ) { JSONArray array = new JSONArray ( ) ; if ( workflows != null ) { for ( JsonWorkflowJob node : workflows ) { array . add ( node . toJSONObject ( ) ) ; } } return array ; }","nl":"Convert a workflows list into a JSONArray."}
{"code":"boolean function ( ) { return ( mrnaValue == MRNA . DOWNREGULATED ) ; }","nl":"Is the Gene mRNA down-regulated?"}
{"code":"Verb function ( ) { return Verb . POST ; }","nl":"Returns the verb for the access token endpoint (defaults to POST)"}
{"code":"DeleteLineageOptions function ( boolean cascade ) { mCascade = cascade ; return this ; }","nl":"Sets the cascade flag for this option."}
{"code":"boolean function ( ) { return ( mrnaValue == MRNA . UPREGULATED ) ; }","nl":"Is the Gene mRNA upregulated?"}
{"code":"int function ( ) { return getWorkflow ( ) . getRun ( ) ; }","nl":"Return the workflow run number, unless a rerun it is always 1."}
{"code":"void function ( DeterministicKey key ) { ImmutableList < ChildNumber > path = key . getPath ( ) ; final DeterministicKey parent = key . getParent ( ) ; if ( parent != null ) lastChildNumbers . put ( parent . getPath ( ) , key . getChildNumber ( ) ) ; keys . put ( path , key ) ; }","nl":"Inserts a key into the heirarchy. Used during deserialization: you normally don't need this. Keys must be inserted in order."}
{"code":"List < TestResultDTO > function ( ) { return testResultLst ; }","nl":"Gets the test result lst."}
{"code":"EncryptedKeyElement function ( ) { return m_EncryptedKeyElement ; }","nl":"Get the EncryptedKeyElement object of the KeyInfoElement object"}
{"code":"void function ( String img ) { failedImages . add ( img ) ; }","nl":"Add an image url that failed loading to be tracked"}
{"code":"void function ( boolean currentScenario ) { isCurrentScenario = currentScenario ; }","nl":"Setter for property 'currentScenario'."}
{"code":"void function ( File ignoreFile ) { Scanner ignoreScanner = new Scanner ( ignoreFile ) ; ignoreScanner . useDelimiter ( \"[^A-Za-z]+\" ) ; while ( ignoreScanner . hasNext ( ) ) { _ignoreWords . add ( ignoreScanner . next ( ) ) ; } ignoreScanner . close ( ) ; }","nl":"Reads file of words to ignore. Ignore words are added to a Set. The IOException is passed to caller because we certinaly don't know what the user interface issue is."}
{"code":"void function ( String checksum ) { this . checksum = checksum ; }","nl":"Sets the checksum."}
{"code":"void function ( final Result result ) { withExceptionHandling ( new Trans < Object > ( ) { public Object transform ( ) { transformation . transformTo ( result ) ; return null ; } } ) ; }","nl":"Perform the actual transformation"}
{"code":"boolean function ( Node node ) { boolean ret = graph . removeVertex ( node ) ; if ( ret ) { nodesByIds . remove ( node . getId ( ) ) ; } return ret ; }","nl":"remove a node"}
{"code":"void function ( RuleSet ruleSet ) { ruleSets . add ( ruleSet ) ; ruleChain . add ( ruleSet ) ; }","nl":"Add a ruleset for a language. Only one ruleset can be added for a specific language. If ruleSet.getLanguage() is null, it is assumed to be a RuleSet of java rules."}
{"code":"void function ( XmlCursor cursor , ObjArray declarations ) { javax . xml . namespace . QName qname = cursor . getName ( ) ; String uri = qname . getNamespaceURI ( ) ; Set prefixes = ( Set ) uriToPrefix . get ( uri ) ; if ( prefixes == null || prefixes . size ( ) == 0 ) { undeclared . add ( uri ) ; if ( declarations != null ) declarations . add ( new Namespace ( lib , uri ) ) ; } }","nl":"Updates the internal state of this NamespaceHelper to reflect the existance of the XML token pointed to by the cursor."}
{"code":"GetOfferDetailsResponse . Return . DetailOfferData function ( ) { return new GetOfferDetailsResponse . Return . DetailOfferData ( ) ; }","nl":"Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData }"}
{"code":"Supplier < T > function ( Supplier < T > delegate ) { return new ThreadSafeSupplier < T > ( Preconditions . checkNotNull ( delegate ) ) ; }","nl":"Returns a supplier whose  {@code get()} method synchronizes on {@code delegate} before callingit, making it thread-safe."}
{"code":"Matrix function ( CategoricalDistribution fromCD ) { double [ ] values = fromCD . getValues ( ) ; return new Matrix ( values , values . length ) ; }","nl":"Convert a Categorical Distribution into a column vector in Matrix form."}
{"code":"List < Node > function ( ) { return evaluationResults ; }","nl":"Retrieves the results of last evaluation."}
{"code":"boolean function ( ) { return services != null ; }","nl":"Check whether the tracker is started."}
{"code":"void function ( int required ) { if ( mWriter . remaining ( ) >= required ) { return ; } byte [ ] buffer = new byte [ ( mBuffer . length + required ) * 2 ] ; System . arraycopy ( mBuffer , 0 , buffer , 0 , mWriter . position ( ) ) ; mBuffer = buffer ; ByteBuffer writer = ByteBuffer . wrap ( buffer ) ; writer . position ( mWriter . position ( ) ) ; mWriter = writer ; }","nl":"Ensure that there is enough space available to write the requested number of bytes. If necessary the internal buffer is resized."}
{"code":"String function ( ) { if ( ! matchStringConstant ( ) ) throw new BadSyntaxException ( ) ; String s = tok . sval ; nextToken ( ) ; return s ; }","nl":"Throws an exception if the current token is not  a string.  Otherwise, returns that string and moves to the next token."}
{"code":"boolean function ( Integer n ) { return graph . addNode ( n ) ; }","nl":"A proxy method that adds the node  {@code n} to the graph being tested. In case of Immutablegraph implementations, this method should add  {@code n} to the graph builder and build a newgraph with the current builder state."}
{"code":"List < String > function ( ) { return produceMediaTypes ; }","nl":"Gets the custom Produces media types"}
{"code":"Message function ( String jsonMessage ) { Object parsed ; try { parsed = JSONValue . parseWithException ( jsonMessage ) ; } catch ( ParseException e ) { throw new ParserException ( \"Unable to parse packet. Error: \" + e . toString ( ) + \". Message:'\" + jsonMessage + \"'\" ) ; } return parseJSONValueToMessage ( parsed ) ; }","nl":"Parses an entire JSON object in the format described by Json communication structure"}
{"code":"void function ( DenseMatrix64F A ) { UBV = A ; m = UBV . numRows ; n = UBV . numCols ; min = Math . min ( m , n ) ; int max = Math . max ( m , n ) ; if ( b . length < max + 1 ) { b = new double [ max + 1 ] ; u = new double [ max + 1 ] ; } if ( gammasU . length < m ) { gammasU = new double [ m ] ; } if ( gammasV . length < n ) { gammasV = new double [ n ] ; } }","nl":"Sets up internal data structures and creates a copy of the input matrix."}
{"code":"String function ( ) { if ( label ( ) != null ) return label ( ) + \":\" ; else return \" \" ; }","nl":"Convert to a string."}
{"code":"String function ( MediaInfo info , int index ) { Uri uri = getImageUri ( info , index ) ; if ( uri != null ) { return uri . toString ( ) ; } return null ; }","nl":"Returns the URL of an image for the  {@link MediaInfo} at the given index. Index should be anumber between 0 and  {@code n-1} where {@code n} is the number of images for that given item."}
{"code":"long function ( ) { return totalElapsed . get ( ) ; }","nl":"get total elapsed."}
{"code":"String function ( BufferedReader unmappedIn ) { String unmappedLine = unmappedIn . readLine ( ) ; while ( unmappedLine != null && unmappedLine . trim ( ) . startsWith ( \"#\" ) ) { unmappedLine = unmappedIn . readLine ( ) ; } return unmappedLine ; }","nl":"Skips any comment lines and retrieves a data line from the unmapped file (created by liftOver)."}
{"code":"void function ( ) { final double mcog = 95.56789 ; vtg . setMagneticCourse ( mcog ) ; assertTrue ( vtg . toString ( ) . contains ( \",095.6,M,\" ) ) ; assertEquals ( mcog , vtg . getMagneticCourse ( ) , 0.1 ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.VTGParser#setMagneticCourse(double)}."}
{"code":"void function ( MessageContext context ) { mc = context ; }","nl":"Sets MessageContext"}
{"code":"int function ( ) { return Objects . hashCode ( mTtlIntervalStartTimeMs ) ; }","nl":"Returns the hash code for the  {@link TtlBucket}."}
{"code":"double function ( int index ) { return W . get ( index , index ) ; }","nl":"Returns the specified singular value."}
{"code":"RuleSet [ ] function ( ) { return ruleSets . toArray ( new RuleSet [ ruleSets . size ( ) ] ) ; }","nl":"Get all the RuleSets."}
{"code":"int function ( String param ) { try { return Integer . parseInt ( params . get ( param ) ) ; } catch ( Exception e ) { return - 1 ; } }","nl":"Gets the value of the given parameter as an integer"}
{"code":"boolean function ( Bits that ) { if ( that != null ) { return ( ordinal ( ) & that . ordinal ( ) ) == that . ordinal ( ) ; } return false ; }","nl":"Checks whether these bits imply the given bits."}
{"code":"void function ( ) { }","nl":"This method is called before the connection is disconnected. Implementations should add any additional operations before the connection is disconnected."}
{"code":"void function ( String isActive ) { this . isActive = isActive ; }","nl":"Sets the checks if is active."}
{"code":"String function ( ) { String result = pg . getString ( pos ) ; pos += STR_SIZE ( result . length ( ) ) ; return result ; }","nl":"Returns the next value of the current log record,  assuming it is a string."}
{"code":"CascadedStyle function ( IdentValue display ) { CSSPrimitiveValue val = new PropertyValue ( display ) ; List props = Collections . singletonList ( new PropertyDeclaration ( CSSName . DISPLAY , val , true , StylesheetInfo . USER ) ) ; return new CascadedStyle ( props . iterator ( ) ) ; }","nl":"Creates a CascadedStyle, setting the display property to to the value of the display parameter."}
{"code":"String function ( ) { if ( title == null ) { title = avoidNull ( xmlParser . getTitle ( ) ) ; } return title ; }","nl":"Returns short message of the log record."}
{"code":"int function ( Object key ) { int mask = _mask ; int hash = System . identityHashCode ( key ) % mask & mask ; Object [ ] keys = _keys ; while ( true ) { Object mapKey = keys [ hash ] ; if ( mapKey == null ) return NULL ; else if ( mapKey == key ) return _values [ hash ] ; hash = ( hash + 1 ) % mask ; } }","nl":"Puts a new value in the property table with the appropriate flags"}
{"code":"int function ( ) { return placementHint ; }","nl":"Get the current placement hint."}
{"code":"URI function ( QName qname ) { for ( ServiceContractResolver resolver : resolvers ) { URI contractLocation = resolver . getContractLocation ( qname ) ; if ( null != contractLocation ) { return contractLocation ; } } return null ; }","nl":"Calls each of the registered ServiceContractResolver instances to resolve the location of the service's contract. It returns the location  from the first resolver that matches the QName to a location."}
{"code":"boolean function ( ) { return ! ( hasMoves ( OthelloSide . BLACK ) || hasMoves ( OthelloSide . WHITE ) ) ; }","nl":"Tests if the game is finished. The game is finished if neither side has a legal move."}
{"code":"void function ( ) { System . out . println ( \"asProperties\" ) ; ResourceBundle bundle = ResourceBundle . getBundle ( DBType . class . getPackage ( ) . getName ( ) + \".test\" ) ; Properties expResult = testProperties ; Properties result = DBType . getResourceBundleAsProperties ( bundle ) ; Assert . assertEquals ( expResult , result ) ; }","nl":"Test of getResourceBundleAsProperties method, of class DBType."}
{"code":"void function ( Runnable task ) { synchronized ( internalLock ) { queue . add ( task ) ; } startQueueWorker ( ) ; }","nl":"Adds a task to the queue and makes sure a worker thread is running, unless the queue has been suspended. If this method throws, e.g. a  {@code RejectedExecutionException} from the delegate executor,execution of tasks will stop until a call to this method or to  {@link #resume()} is made."}
{"code":"void function ( Date expires ) { this . expires = expires ; }","nl":"Set the Date that this Token expires"}
{"code":"int function ( ) { return priority ; }","nl":"Ideally this should be configurable. For the moment, hard code the priority."}
{"code":"int function ( int dividend , int divisor ) { return ( int ) ( toLong ( dividend ) / toLong ( divisor ) ) ; }","nl":"Returns dividend / divisor, where the dividend and divisor are treated as unsigned 32-bit quantities."}
{"code":"Type function ( Type type ) { return getSingleTypeParameter ( type , 0 ) ; }","nl":"Insist that a Type is a parameterized type of one parameter. This is used to decompose Holders, for example."}
{"code":"AegisType function ( AegisContext globalContext , Object value , java . lang . reflect . Type reflectType ) { if ( reflectType == null ) { return getWriteTypeStandalone ( globalContext , value , ( AegisType ) null ) ; } else { return globalContext . getTypeMapping ( ) . getTypeCreator ( ) . createType ( reflectType ) ; } }","nl":"Allow writing of collections when the type of the collection object is known via an  {@link java.lang.reflect.Type} object."}
{"code":"Identifier function ( ) { return reliableEndpoint . getManager ( ) . getIdGenerator ( ) . generateSequenceIdentifier ( ) ; }","nl":"Generates and returns a new sequence identifier."}
{"code":"int function ( String fldname ) { return p . distinctValues ( fldname ) ; }","nl":"Returns the number of distinct field values in the sorted table, which is the same as in the underlying query."}
{"code":"byte function ( ByteBuffer key ) { byte [ ] keyBytes = BufferUtils . newByteArrayFromByteBuffer ( key ) ; return fingerprintHash ( keyBytes ) ; }","nl":"Hashes a key in  {@code ByteBuffer} into a non-zero, one byte fingerprint."}
{"code":"void function ( ) { setMaxLocks ( 1 ) ; final BlockLockManager manager = new BlockLockManager ( ) ; long lockId1 = manager . lockBlock ( TEST_SESSION_ID , 1 , BlockLockType . READ ) ; manager . lockBlock ( TEST_SESSION_ID , 1 , BlockLockType . READ ) ; manager . unlockBlock ( lockId1 ) ; lockExpectingHang ( manager , 2 ) ; }","nl":"Tests that block locks are not returned to the pool when they are still in use."}
{"code":"String function ( String string , int minLength , char padChar ) { checkNotNull ( string ) ; if ( string . length ( ) >= minLength ) { return string ; } StringBuilder sb = new StringBuilder ( minLength ) ; for ( int i = string . length ( ) ; i < minLength ; i ++ ) { sb . append ( padChar ) ; } sb . append ( string ) ; return sb . toString ( ) ; }","nl":"Returns a string, of length at least  {@code minLength}, consisting of  {@code string} prependedwith as many copies of  {@code padChar} as are necessary to reach that length. For example,  {@code padStart(\"7\", 3, '0')} returns {@code \"007\"} {@code padStart(\"2010\", 3, '0')} returns {@code \"2010\"} See  {@link java.util.Formatter} for a richer set of formatting capabilities."}
{"code":"boolean function ( ) { Assert . assertNotNull ( instance ) ; return instance . mHasPressureSensor ; }","nl":"Test whether the device has a working pressure sensor"}
{"code":"void function ( int itemPos , int itemset , int utility , int remainingUtility ) { matrixItemUtility [ itemPos ] [ itemset ] = utility ; matrixItemRemainingUtility [ itemPos ] [ itemset ] = remainingUtility ; }","nl":"Register item in the matrix"}
{"code":"void function ( ) { this . errorLevel = this . errorLevelFolder ; }","nl":"Restores errorLevel to folder one"}
{"code":"String function ( int index , String [ ] parts ) { try { if ( parts [ index ] . length ( ) == 0 ) { return NA_STRING ; } else { return parts [ index ] ; } } catch ( ArrayIndexOutOfBoundsException e ) { return NA_STRING ; } }","nl":"If field is not found in header or data line, or is empty, it just returns empty  field value \"NA\"."}
{"code":"void function ( Long expectedDataUnitId ) { this . expectedDataUnitId = expectedDataUnitId ; }","nl":"Sets the expected data unit id."}
{"code":"void function ( Object obj ) { if ( obj == null ) throw new internal_error ( \"Null object used in set operation\" ) ; }","nl":"Helper function for null test.  Throws an interal_error exception if its parameter is null."}
{"code":"void function ( ) { if ( savePending . getAndSet ( true ) ) return ; executor . schedule ( saver , delay , delayTimeUnit ) ; }","nl":"Queues up a save in the background. Useful for not very important wallet changes."}
{"code":"void function ( ) { checkSymmRankNMinus_U ( N , N - 2 ) ; checkSymmRankNMinus_U ( N * 2 + 1 , N - 2 ) ; checkSymmRankNMinus_U ( N - 1 , N - 2 ) ; }","nl":"Tests symmRankNMinus_U with various sized input matrices"}
{"code":"boolean function ( Goal goal ) { return job ( ) != null && job ( ) == goal . job ( ) ; }","nl":"Return true if this goal conflicts with the other; that is passes running over both goals could access the same data."}
{"code":"String function ( ) { return workflowImplId ; }","nl":"Gets the value of the workflowImplId property."}
{"code":"void function ( boolean ignoreExceptions ) { this . ignoreExceptions = ignoreExceptions ; }","nl":"Configure whether exceptions during applying a rule should be ignored or not. If set to true then such exceptions are logged as warnings and the processing is continued with the next rule - the failing rule is simply skipped. This is the default behavior.  If set to false then the processing will be aborted with the exception. This is especially useful during unit tests, in order to not oversee any exceptions."}
{"code":"String function ( String input , String ... whiteListPatterns ) { if ( StringUtils . isEmpty ( input ) || isValidOverWhiteListPatterns ( input , whiteListPatterns ) ) { return input ; } throw new IdentityValidationException ( msgSection1 + String . format ( msgSection2 , getPatternString ( whiteListPatterns ) ) ) ; }","nl":"Returns the input if valid over the given white list patterns else throws an IdentityValidationException"}
{"code":"void function ( ) { final double speed = 7.75 ; mwv . setSpeed ( speed ) ; assertEquals ( speed , mwv . getSpeed ( ) , 0.1 ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.MWVParser#setSpeed(double)}."}
{"code":"long function ( ) { return delay ; }","nl":"Delay processing for specified milliseconds.  Should be \"small\" to prevent the client from timing out."}
{"code":"void function ( ) { assertEquals ( 25.0 , instance . getLongitude ( ) , 0.0000001 ) ; instance . setLongitude ( 180.0 ) ; assertEquals ( 180 , instance . getLongitude ( ) , 0.0000001 ) ; assertEquals ( CompassPoint . EAST , instance . getLongitudeHemisphere ( ) ) ; }","nl":"Test for setLongitude()"}
{"code":"Iterable < T > function ( final Iterable < T > sequence , final Predicate < ? super T > filter ) { return new Iterable < T > ( ) { @ Override public Iterator < T > iterator ( ) { return new FilteringIterator < T > ( sequence . iterator ( ) , filter ) ; } } ; }","nl":"Exclude all elements from an iterable that don't match a given predicate."}
{"code":"List < CoordinatorActionBean > function ( ) { return actions ; }","nl":"Return the coordiantor actions being returned."}
{"code":"void function ( @ ModelAttribute Schedule schedule ) { repository . save ( schedule ) ; }","nl":"Create schedule"}
{"code":"void function ( long millis , Runnable runnable ) { Future < Void > future = asyncFx ( runnable ) ; waitForMillis ( millis , future ) ; }","nl":"Runs the given  {@link Runnable} on the JavaFX Application Thread at some unspecified timein the future and waits for it  {@code long} milliseconds to finish, otherwise times out with{@link TimeoutException}."}
{"code":"void function ( Logger logger ) { Popup . logger = logger ; }","nl":"Set the logger"}
{"code":"void function ( ) { time . setSeconds ( 45.12345 ) ; assertEquals ( 45.12345 , time . getSeconds ( ) , 0.001 ) ; }","nl":"Test method for  {@link net.sf.marineapi.nmea.util.Time#setSeconds(int)}."}
{"code":"ByteBuffer function ( int len ) { return getIncreasingIntBuffer ( 0 , len ) ; }","nl":"Gets a  {@link ByteBuffer} containing an increasing sequence of integers starting at zero."}
{"code":"Sentence function ( TalkerId talker , String type ) { if ( talker == null ) { throw new IllegalArgumentException ( \"TalkerId cannot be null\" ) ; } return createParserImpl ( type , talker ) ; }","nl":"Creates a parser for specified talker and sentence type. This method is mainly intended to be used when custom parsers have been registered in the factory. The returned instance needs to be cast to corresponding sentence interface."}
{"code":"void function ( BigDecimal feedId ) { this . feedId = feedId ; }","nl":"Sets the feed id."}
{"code":"void function ( ) { RPCBlockReadResponse resp = new RPCBlockReadResponse ( BLOCK_ID , OFFSET , LENGTH , null , STATUS ) ; resp . encode ( mBuffer ) ; RPCBlockReadResponse resp2 = RPCBlockReadResponse . decode ( mBuffer ) ; assertValid ( BLOCK_ID , OFFSET , LENGTH , STATUS , resp ) ; assertValid ( BLOCK_ID , OFFSET , LENGTH , STATUS , resp2 ) ; }","nl":"Tests the  {@link RPCBlockReadResponse#encode(ByteBuf)} and{@link RPCBlockReadResponse#decode(ByteBuf)} methods."}
{"code":"double function ( ) { double price = 0.0 ; try { price = getTheItemPrice ( ) . getPriceAmount ( ) . getValue ( ) . doubleValue ( ) ; } catch ( NullPointerException npe ) { } return price ; }","nl":"Returns the price associated with a line item."}
{"code":"AtomicLongMap < K > function ( ) { return new AtomicLongMap < K > ( new ConcurrentHashMap < > ( ) ) ; }","nl":"Creates an  {@code AtomicLongMap}."}
{"code":"void function ( boolean loggingEnabled ) { XRLog . loggingEnabled = loggingEnabled ; }","nl":"Turns logging on or off, without affecting logging configuration."}
{"code":"boolean function ( long bytesToBeAvailable , EvictionPlan plan , BlockMetadataManager metaManager ) { Preconditions . checkNotNull ( plan ) ; return blocksInTheSameDir ( plan , metaManager ) && requestSpaceSatisfied ( bytesToBeAvailable , plan , metaManager ) ; }","nl":"Assume the plan is returned by a non-cascading evictor, check whether it is valid. a cascading evictor is an evictor that always tries to move from the target tier to the next tier and recursively move down 1 tier until finally blocks are evicted from the final tier."}
{"code":"GetOfferDetailsResponse . Return function ( ) { return new GetOfferDetailsResponse . Return ( ) ; }","nl":"Create an instance of  {@link GetOfferDetailsResponse.Return }"}
{"code":"Element function ( InputStream is ) { ParamChecker . notNull ( is , \"is\" ) ; SAXBuilder saxBuilder = createSAXBuilder ( ) ; Document document = saxBuilder . build ( is ) ; return document . getRootElement ( ) ; }","nl":"Parse a inputstream assuming it is a valid XML document and return an JDOM Element for it."}
{"code":"JobLauncher function ( ) { synchJobLauncher = new SimpleJobLauncher ( ) ; synchJobLauncher . setJobRepository ( jobRepository ) ; return synchJobLauncher ; }","nl":"Provides SimpleJobLauncher Bean"}
{"code":"void function ( Object [ ] array ) { notEmpty ( array , \"[Assertion failed] - this array must not be empty: it must contain at least 1 element\" ) ; }","nl":"Assert that an array has elements; that is, it must not be {@code null} and must have at least one element.Assert.notEmpty(array);"}
{"code":"boolean function ( ) { return useKeyIdentifier ; }","nl":"Get whether to use a KeyIdentifier to refer to this token"}
{"code":"Enumeration function ( Object o ) { return new IteratorEnumeration ( gen2 ( o ) ) ; }","nl":"Reply a java.util.Enumeration of the children of the given Object"}
{"code":"boolean function ( ) { System . out . println ( count + \" >= \" + limit ) ; return count >= limit ; }","nl":"Returns true if inventory is full."}
{"code":"String function ( ) { return canonicalForm ; }","nl":"Returns a string representation of the host specifier suitable for inclusion in a URI. If the host specifier is a domain name, the string will be normalized to all lower case. If the specifier was an IPv6 address without brackets, brackets are added so that the result will be usable in the host part of a URI."}
{"code":"Project function ( ) { return makeEmptyProject ( true ) ; }","nl":"Makes an empty project."}
{"code":"String function ( Table table , DBType dbType ) { return Schema . generateCreateTableScript ( table , dbType , TABLE_COLUMNS . get ( table ) ) ; }","nl":"Generates the create table SQL Statement"}
{"code":"String function ( ) { return _uriResolver . getBaseUri ( ) ; }","nl":"Returns the current baseUrl for this class."}
{"code":"void function ( ) { if ( ! ThreadContext . peek ( ) . isEmpty ( ) ) { ThreadContext . pop ( ) ; } }","nl":"Removes the last last fish tagging."}
{"code":"void function ( ) { Mode mode = new Mode ( Mode . getDefault ( ) ) ; Assert . assertEquals ( Mode . Bits . ALL , mode . getOwnerBits ( ) ) ; Assert . assertEquals ( Mode . Bits . ALL , mode . getGroupBits ( ) ) ; Assert . assertEquals ( Mode . Bits . ALL , mode . getOtherBits ( ) ) ; Assert . assertEquals ( 0777 , mode . toShort ( ) ) ; }","nl":"Tests the  {@link Mode#Mode(Mode)} constructor."}
{"code":"String function ( ) { return elem1 ; }","nl":"Gets the value of the elem1 property."}
{"code":"void function ( RepeatField repeatField ) { if ( repeatField == null ) throw new NullPointerException ( \"null repeatField\" ) ; this . repeatList . add ( repeatField ) ; }","nl":"Add a repeat field."}
{"code":"IConfigurationFactory function ( ) { return ConfigurationFactory . getInstance ( ) ; }","nl":"Returns the configuration factory instance. This is equivalent to ConfigurationFactory.getInstance() but using Configuration.getFactory() is shorter to type and allows us not to have to deal with ConfigurationFactory at all if we don't need to modify or configure it."}
{"code":"boolean function ( byte [ ] bytes , int off , int len ) { int end = off + len ; checkPositionIndexes ( off , end , bytes . length ) ; for ( int i = off ; i < end ; i ++ ) { if ( bytes [ i ] < 0 ) { return isWellFormedSlowPath ( bytes , i , end ) ; } } return true ; }","nl":"Returns whether the given byte array slice is a well-formed UTF-8 byte sequence, as defined by {@link #isWellFormed(byte[])}. Note that this can be false even when  {@code isWellFormed(bytes)} is true."}
{"code":"void function ( CallbackHandler callbackHandler ) { this . callbackHandler = callbackHandler ; }","nl":"Set the CallbackHandler to use with the LoginContext. It can be null."}
{"code":"String [ ] [ ] function ( ) { return matrix ; }","nl":"Gets the Data Matrix."}
{"code":"void function ( ) { mWorkDirectory = AlluxioTestDirectory . createTemporaryDirectory ( \"test-cluster\" ) . getAbsolutePath ( ) ; }","nl":"Sets Alluxio work directory."}
{"code":"boolean function ( HttpServletRequest request ) { String email = getEmailId ( request ) ; if ( email != null ) { return true ; } else { return false ; } }","nl":"Is the User Currently Authenticated?  Determined via Session."}
{"code":"String function ( final ByteBuffer buf ) { DECODER . reset ( ) ; try { return buf . getString ( DECODER ) ; } catch ( final CharacterCodingException e ) { LOG . error ( \"Could not decode: \" + buf , e ) ; return StringUtils . EMPTY ; } }","nl":"Reads an ASCII string from the buffer.  Reads from the buffer's current position to its limit."}
{"code":"void function ( ) { for ( SentenceListener listener : getSentenceListeners ( ) ) { try { listener . readingStopped ( ) ; } catch ( Exception e ) { LOGGER . log ( Level . WARNING , LOG_MSG , e ) ; } } }","nl":"Notifies all listeners that data reading has stopped."}
{"code":"Object function ( Object instance , String methodName , Object arg ) { Object [ ] args = new Object [ 1 ] ; args [ 0 ] = arg ; return invokeMethod ( instance , methodName , args ) ; }","nl":"Calls a method on the given object instance with the given argument."}
{"code":"void function ( ) { try { time . setHour ( 60 ) ; fail ( \"Did not throw exception\" ) ; } catch ( IllegalArgumentException e ) { } }","nl":"Test method for  {@link net.sf.marineapi.nmea.util.Time#setHour(int)}."}
{"code":"Page < Book > function ( Pageable pageable ) { log . debug ( \"Request to get all Books\" ) ; Page < Book > result = bookRepository . findAll ( pageable ) ; return result ; }","nl":"Get all the books."}
{"code":"StoredBlock function ( Block block ) { BigInteger chainWork = this . chainWork . add ( block . getWork ( ) ) ; int height = this . height + 1 ; return new StoredBlock ( block , chainWork , height ) ; }","nl":"Creates a new StoredBlock, calculating the additional fields by adding to the values in this block."}
{"code":"Object function ( ) { return classifier ; }","nl":"Get the current classifier."}
{"code":"void function ( Vector repeatTimes ) { this . repeatList = repeatTimes ; }","nl":"Returns the list of repeat times (r= fields)  specified in the SessionDescription."}
{"code":"boolean function ( boolean sawNewline ) { String separator = sawReturn ? ( sawNewline ? \"  \" : \" \" ) : ( sawNewline ? \" \" : \"\" ) ; handleLine ( line . toString ( ) , separator ) ; line = new StringBuilder ( ) ; sawReturn = false ; return sawNewline ; }","nl":"Called when a line is complete."}
{"code":"java . lang . Object function ( ) { try { return forName ( literalName ) ; } catch ( java . lang . IllegalArgumentException e ) { throw new java . io . InvalidObjectException ( e . getMessage ( ) ) ; } }","nl":"Resolves serialized instance of enumeration value."}
{"code":"void function ( ObjectType objectType ) { this . objectType = objectType ; }","nl":"Sets the ObjectType used to read and write the trailing block instances."}
{"code":"void function ( Timestamp fetcherStartTimestamp ) { this . fetcherStartTimestamp = fetcherStartTimestamp ; }","nl":"Sets the fetcher start timestamp."}
{"code":"void function ( String s ) { this . source = s ; }","nl":"Sets the data source, where this interaction comes from, e.g. REACTOME."}
{"code":"boolean function ( ) { return \"true\" . equalsIgnoreCase ( comments ) ; }","nl":"Checks if is file down loaded to destination."}
{"code":"SearchConditionBuilder function ( ) { return instance ( DEFAULT_LANGUAGE ) ; }","nl":"Creates instance of builder."}
{"code":"File function ( ) { return sourceCodeFile ; }","nl":"Get the File associated with the current source file."}
{"code":"void function ( DataHandler value ) { this . attachinfo = value ; }","nl":"Sets the value of the attachinfo property."}
{"code":"void function ( LocalAlluxioClusterResource localAlluxioClusterResource , AlluxioURI uri ) { waitForPersist ( localAlluxioClusterResource , uri , 15 * Constants . SECOND_MS ) ; }","nl":"Convenience method for calling {@link #waitForPersist(LocalAlluxioClusterResource,AlluxioURI,int)} with a default timeout."}
{"code":"void function ( ) { System . out . println ( \"readFromGameFile\" ) ; String fileName = \"game_1_001\" ; FileHandler instance = new FileHandler ( ) ; String expResult = \"Game\" ; String result = instance . readFromGameFile ( fileName ) . getNodeName ( ) ; assertEquals ( expResult , result ) ; }","nl":"Test of readFromGameFile method, of class FileHandler."}
{"code":"String function ( String graphName , String sdd , String user , String commitMessage , String branchNameA , String branchNameB ) { return String . format ( \"USER \"%s\" %n\" + \"MESSAGE \"%s\" %n\" + \"MERGE AUTO GRAPH <%s> SDD <%s> BRANCH \"%s\" INTO \"%s\"\" , user , commitMessage , graphName , sdd , branchNameA , branchNameB ) ; }","nl":"Create AUTO-MERGE query."}
{"code":"WorkflowStore function ( S store ) { return null ; }","nl":"Return a workflow store instance with an existing transaction.  The workflow store has to be committed and then closed to commit changes, if only close it rolls back."}
{"code":"byte [ ] function ( ) { return chainCode ; }","nl":"Returns the chain code associated with this key. See the specification to learn more about chain codes."}
{"code":"void function ( ) { synchronized ( internalLock ) { suspensions ++ ; } }","nl":"Suspends the running of tasks until  {@link #resume()} is called. This can be called multipletimes to increase the suspensions count and execution will not continue until  {@link #resume}has been called the same number of times as  {@code suspend} has been.Any task that has already been pulled off the queue for execution will be completed before execution is suspended."}
{"code":"Verb function ( ) { return Verb . POST ; }","nl":"Returns the verb for the request token endpoint (defaults to POST)"}
{"code":"UnderFileSystem function ( ) { return mockUnderFileSystem ( Mockito . anyString ( ) ) ; }","nl":"Convenience method for mocking the  {@link UnderFileSystem} for any ufsPath."}
{"code":"int function ( StoredBlock cursor ) { return getInterval ( ) - 1 ; }","nl":"The number of previous blocks to look at when calculating the next Block's difficulty Uses a storedblock cursor as input rather than just returning a constant value"}
{"code":"void function ( ) { try { vCloseRequested = true ; socket . close ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }","nl":"Closes the connection to the server, triggering the  {@link StreamParser#connectionClosed()}event on the network-handling thread where all callbacks occur."}
{"code":"byte function ( byte [ ] key ) { int hash = FINGERPRINT_HASHER . hashBytes ( key ) . asInt ( ) ; hash = ( hash >> 24 ) & 0xff ; return ( byte ) ( ( hash == 0 ) ? 1 : hash ) ; }","nl":"Hashes a key in byte array into a non-zero, one byte fingerprint."}
{"code":"File function ( String fileOrFolder ) { return com . gitblit . utils . FileUtils . resolveParameter ( Constants . baseFolder$ , baseFolder , fileOrFolder ) ; }","nl":"Returns the file object which may have it's base-path determined by environment variables for running on a cloud hosting service. All Gitblit file or folder retrievals are (at least initially) funneled through this method so it is the correct point to globally override/alter filesystem access based on environment or some other indicator."}
{"code":"double function ( ) { return SpecializedOps . qualityTriangular ( true , decomp . getQR ( ) ) ; }","nl":"Computes the quality using diagonal elements the triangular R matrix in the QR decomposition."}
{"code":"void function ( final int trackIndex , final ByteBuffer byteBuf , final MediaCodec . BufferInfo bufferInfo ) { if ( mStatredCount > 0 ) mMediaMuxer . writeSampleData ( trackIndex , byteBuf , bufferInfo ) ; }","nl":"write encoded data to muxer"}
{"code":"FilenameFilter function ( final Filter < File > filter ) { return new FilenameFilter ( ) { @ Override public boolean accept ( File dir , String name ) { return filter . filter ( new File ( dir , name ) ) ; } @ Override public String toString ( ) { return filter . toString ( ) ; } } ; }","nl":"Given a File Filter, expose as a FilenameFilter."}
{"code":"QualifiedName function ( String value ) { return valueOf ( value , XMLUnit . getXpathNamespaceContext ( ) ) ; }","nl":"Parses strings of the form \"{NS-URI}LOCAL-NAME\" or \"prefix:localName\" as QualifiedNames. When using the prefix-version the prefix must be defined inside the current NamespaceContext."}
{"code":"String function ( Attribute attribute ) { return '|'' + attribute . getStringValue ( ) + '|'' ; }","nl":"formats a value for its usage in XPath expressions"}
{"code":"int function ( String fldname ) { return prodscan . getInt ( fldname ) ; }","nl":"Returns the integer value of the specified field. The value is obtained from whichever scan contains the field."}
{"code":"String function ( ) { return url ; }","nl":"Obtains the URL of the HTTP Request."}
{"code":"void function ( String relyingParty ) { this . relyingParty = relyingParty ; }","nl":"Set the relying party of the authentication request"}
{"code":"T function ( String key , Class < T > type ) { Object returnValue = getProperty ( key ) ; if ( returnValue != null ) { return ( T ) returnValue ; } else { return null ; } }","nl":"Gets the property and casts to the appropriate type"}
{"code":"String [ ] function ( ) { return dnsSeeds ; }","nl":"Returns DNS names that when resolved, give IP addresses of active peers."}
{"code":"Map < String , String > function ( final String name , final String value ) { final Map < String , String > params = new HashMap < String , String > ( ) ; params . put ( name , value ) ; return params ; }","nl":"Generates the parameters map.  This is the complete parameters for the common case where a header only has a single parameter.  Otherwise, calling methods can add additional parameters to the map."}
{"code":"void function ( LockedInodePath inodePath ) { List < Inode < ? >> inodeList = inodePath . getInodeList ( ) ; String user = getClientUser ( ) ; List < String > groups = getGroups ( user ) ; if ( isPrivilegedUser ( user , groups ) ) { return ; } checkInodeList ( user , groups , null , inodePath . getUri ( ) . getPath ( ) , inodeList , true ) ; }","nl":"Checks whether the client user is the owner of the path."}
{"code":"void function ( ) { Time t = new Time ( \"010203.4\" ) ; assertEquals ( 1 , t . getHour ( ) ) ; assertEquals ( 2 , t . getMinutes ( ) ) ; assertEquals ( 3.4 , t . getSeconds ( ) , 0.001 ) ; }","nl":"Test method for  {@link net.sf.marineapi.nmea.util.Time(java.lang.String)}."}
{"code":"Socket function ( ) { return m_socket ; }","nl":"Accessor for the socket."}
{"code":"boolean function ( Language language ) { for ( RuleSet ruleSet : ruleSets ) { if ( ruleSet . usesDFA ( language ) ) { return true ; } } return false ; }","nl":"Check if the rules that apply to a source of the given language use DFA."}
{"code":"boolean function ( String tokenType , String realm ) { return STSUtils . TOKEN_TYPE_SCT_05_02 . equals ( tokenType ) || STSUtils . TOKEN_TYPE_SCT_05_12 . equals ( tokenType ) ; }","nl":"Return true if this TokenProvider implementation is capable of providing a token that corresponds to the given TokenType in a given realm. The realm is ignored in this  token provider."}
{"code":"String function ( ) { return propertyName ; }","nl":"Get the name of the message property from which the content type has been extracted."}
{"code":"int function ( int absPos ) { return absPos / 3 ; }","nl":"Note: The graphic representation maps x values on row numbers (x-axis in vertical direction)."}
{"code":"void function ( long millis , Runnable runnable ) { Future < Void > future = async ( runnable ) ; waitForMillis ( millis , future ) ; }","nl":"Runs the given  {@link Runnable} on a new {@link Thread} and waits for it {@code long}milliseconds to finish, otherwise times out with  {@link TimeoutException}."}
{"code":"void function ( DataSet ds ) { List < String > attributes = ds . getNonTargetAttributes ( ) ; this . tree = decisionTreeLearning ( ds , attributes , new ConstantDecisonTree ( defaultValue ) ) ; }","nl":"Induces the decision tree from the specified set of examples"}
{"code":"void function ( ) { this . m_selectorManager . addChannelInterestNow ( this . m_socketChannel , SelectionKey . OP_WRITE ) ; }","nl":"Activates interest in writing from the selector thread."}
{"code":"OutStreamOptions function ( long ttl ) { mTtl = ttl ; return this ; }","nl":"Sets the time to live."}
{"code":"void function ( EntityClassifier < EntityViewInfo > classifier ) { entityClassifier = classifier ; if ( entityTree != null ) { applyClassifierAndUpdateTree ( entityTree . getBoundingBox ( ) ) ; fireMapDataEvent ( new MapEvent ( this , MapEvent . Type . MAP_MODIFIED ) ) ; } }","nl":"Provides the data store with an entity classifier. The classifier strongly influences the generation of the entity tree."}
{"code":"void function ( ) { final double var = - 0.1 ; hdg . setVariation ( var ) ; assertEquals ( var , hdg . getVariation ( ) , 0.1 ) ; assertTrue ( hdg . toString ( ) . contains ( \",000.1,W*\" ) ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.HDGParser#setVariation(double)}."}
{"code":"void function ( Long dataSetId ) { this . dataSetId = dataSetId ; }","nl":"Sets the data set id."}
{"code":"void function ( boolean failLifetimeExceedance ) { this . failLifetimeExceedance = failLifetimeExceedance ; }","nl":"If requested lifetime exceeds shall it fail (default) or overwrite with maximum lifetime"}
{"code":"void function ( ) { async = true ; }","nl":"Can be called in leave_ to do an asynchronous state transition. The current state transition will be on hold in the old state until a final call to Transition is made. This will complete the transition and possibly call the other callbacks."}
{"code":"HashCodeBuilder function ( char value ) { iTotal = iTotal * iConstant + value ; return this ; }","nl":" Append a hashCode for a char. "}
{"code":"String function ( boolean shortNames , String inputFileName ) { return getDataSourceName ( ) ; }","nl":"Return the dataSourceName via the  {@link DataSource} Interface method. Both the parameters are ignored "}
{"code":"void function ( IdentityMapper identityMapper ) { this . identityMapper = identityMapper ; }","nl":"Set the IdentityMapper object to use."}
{"code":"boolean function ( ) { diagSaved = helper . copyDiag ( diagSaved ) ; offSaved = helper . copyOff ( offSaved ) ; vector . setQ ( null ) ; vector . setFastEigenvalues ( true ) ; if ( ! vector . process ( - 1 , null , null ) ) return false ; values = helper . copyEigenvalues ( values ) ; return true ; }","nl":"Computes eigenvalues only"}
{"code":"String function ( ) { if ( claimDialect != null ) { return claimDialect ; } return \"http://wso2.org/claims\" ; }","nl":"Returns the claim dialect for claim mappings"}
{"code":"void function ( ) { String out = WebUtils . convertMsToClockTime ( TimeUnit . HOURS . toMillis ( 1 ) ) ; Assert . assertEquals ( \"0 day(s), 1 hour(s), 0 minute(s), and 0 second(s)\" , out ) ; }","nl":"Tests the  {@link WebUtils#convertMsToClockTime(long)} method with one hour."}
{"code":"void function ( int bufferedImageType ) { this . bufferedImageType = bufferedImageType ; }","nl":"Sets the type for the BufferedImage used as output for this renderer; must be one of the values from {@link java.awt.image.BufferedImage} allowed in that class' constructor as a type argument. See docs forthe type parameter in  {@link java.awt.image.BufferedImage#BufferedImage(int,int,int)}. Defaults to RGB with no support for transparency. The type is used when the image is first created, so to change the default type do so before calling  {@link #getImage()}."}
{"code":"void function ( ) { setFirstRecordPosition ( FIRST_POS ) ; setLastRecordPosition ( LAST_POS ) ; currentpos = 2 * INT_SIZE ; currentblk = mypage . append ( logfile ) ; }","nl":"Clear the current page, and append it to the log file."}
{"code":"List < UserModel > function ( ) { List < UserModel > users = userService . getAllUsers ( ) ; return users ; }","nl":"Returns the list of all users available to the login service."}
{"code":"double function ( ) { return DecompositionFactory . quality ( mat , eig ) ; }","nl":" Computes the quality of the computed decomposition.  A value close to or less than 1e-15 is considered to be within machine precision.   This function must be called before the original matrix has been modified or else it will produce meaningless results. "}
{"code":"boolean function ( ) { return isAuthenticationEnabled ( ) && isAuthorizationEnabled ( ) ; }","nl":"Checks if security is enabled."}
{"code":"void function ( boolean yesNo ) { this . trackNodeReferences = yesNo ; if ( yesNo ) { nodeReferenceMap = new HashMap < Node , Integer > ( ) ; } }","nl":"whether the indices of subsequently tracked nodes should be tracked."}
{"code":"int function ( MatrixPosition position ) { return originalMatrix . matrixItemRemainingUtility [ position . row ] [ position . column ] ; }","nl":"Get the local sequence utility for a given cell in the projected q-matrix"}
{"code":"void function ( ) { hdt . setHeading ( 123.45 ) ; assertEquals ( 123.5 , hdt . getHeading ( ) , 0.1 ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.HDTParser#setHeading(double)}."}
{"code":"int function ( ) { return index - 1 ; }","nl":"Which element in the submatrix was returned by next()"}
{"code":"java . lang . String function ( ) { return literalName ; }","nl":"Returns a string representation of the enumeration value."}
{"code":"int function ( ) { return column ; }","nl":"Operation getColumn returns the value of the attribute _column."}
{"code":"void function ( Crypto signatureCrypto ) { this . signatureCrypto = signatureCrypto ; }","nl":"Set the signature Crypto object"}
{"code":"void function ( ) { final double cog = 90.55555 ; rmc . setCourse ( cog ) ; assertTrue ( rmc . toString ( ) . contains ( \",090.6,\" ) ) ; assertEquals ( cog , rmc . getCourse ( ) , 0.1 ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.RMCParser#setCourse(double)} ."}
{"code":"int function ( ) { return progressMonitor . maxValue ; }","nl":"Gets Max Value."}
{"code":"void function ( Date d ) { GregorianCalendar cal = new GregorianCalendar ( ) ; cal . setTime ( d ) ; double seconds = cal . get ( Calendar . SECOND ) + ( cal . get ( Calendar . MILLISECOND ) / 1000.0 ) ; setHour ( cal . get ( Calendar . HOUR_OF_DAY ) ) ; setMinutes ( cal . get ( Calendar . MINUTE ) ) ; setSeconds ( seconds ) ; }","nl":"Set the time by  {@link java.util.Date}. The date information of is ignored, only hours, minutes and seconds are relevant. Notice also that time zone offset is not affected by this method because {@link java.util.Date} does not contain zone offset."}
{"code":"void function ( Stack < Tag > tags ) { while ( ! tags . empty ( ) ) { Tag t = tags . pop ( ) ; t . end = builder . length ( ) ; Spannable styled = tagStyles . get ( t . tag ) . getStyle ( t . param , builder . subSequence ( t . start + t . tagLength , t . end ) ) ; builder . replace ( t . start , t . end , styled ) ; } }","nl":"Close all tags in the stack and end them at the end of the builder. Used to close any remaining open tags at the end of parsing, since these tags should run to the end of the text"}
{"code":"String [ ] function ( ) { return new String [ ] { \"Depth First\" , \"Breadth First\" , \"Iterative Deepening\" , \"Uniform Cost\" , \"Greedy Best First\" , \"A*\" , \"Recursive Best First\" , \"Hill Climbing\" } ; }","nl":"Returns the names of all search strategies, which are supported by this factory. The indices correspond to the parameter values of method {@link #createSearch(int,int,HeuristicFunction)}."}
{"code":"void function ( String object ) { this . object = object ; }","nl":"Set the object."}
{"code":"ToStringHelper function ( long value ) { return addHolder ( String . valueOf ( value ) ) ; }","nl":"Adds an unnamed value to the formatted output. It is strongly encouraged to use  {@link #add(String,long)} instead and give value areadable name."}
{"code":"HTTPConduit function ( ) { Conduit conduit = getConduit ( ) ; return conduit instanceof HTTPConduit ? ( HTTPConduit ) conduit : null ; }","nl":"Gets the HTTP conduit responsible for a transport-level communication with the remote service."}
{"code":"int function ( ) { setInputMode ( ) ; return this . buffer . remaining ( ) ; }","nl":"Returns available capacity of this buffer."}
{"code":"String function ( ) { if ( keyAlias == null ) { ServerConfiguration serverConfig = ServerConfiguration . getInstance ( ) ; return serverConfig . getFirstProperty ( \"Security.KeyStore.KeyAlias\" ) ; } return keyAlias ; }","nl":"Get the private key alias If the key alias is defined in the Security configuration take it from there otherwise key alias is taken from the Server Configuration"}
{"code":"float function ( double topLength , double bottomLength , double height ) { return ( float ) ( ( .5 * height ) * ( topLength + bottomLength ) ) ; }","nl":"Computes the area of a trapezoid. All the lengths should be of the same unit of measure."}
{"code":"Map < String , String > function ( String name ) { Map < String , String > map = new LinkedHashMap < String , String > ( ) ; for ( String string : getStrings ( name ) ) { String [ ] kvp = string . split ( \"=\" , 2 ) ; String key = kvp [ 0 ] ; String value = kvp [ 1 ] ; map . put ( key , value ) ; } return map ; }","nl":"Returns a map of strings from the specified key."}
{"code":"AbstractAction function ( ) { return undoAction ; }","nl":"Get the action that can undo the last user interaction on this project."}
{"code":"void function ( T event ) { for ( ProviderListener < T > listener : listeners ) { listener . providerUpdate ( event ) ; } }","nl":"Dispatch the TPV event to all listeners."}
{"code":"int function ( Collection < String > source , Collection < String > target ) { int added = 0 ; for ( String item : source ) { if ( target . contains ( item ) ) { continue ; } target . add ( item ) ; added ++ ; } return added ; }","nl":"Add elements from the source to the target as long as they don't already exist there. Return the number of items actually added."}
{"code":"void function ( O word ) { DocumentElement < O > r = data . get ( word ) ; if ( r == null ) { r = new DocumentElement < O > ( word , new IntegerHolder ( 0 ) ) ; data . put ( word , r ) ; } r . inc ( ) ; wordCountMultiSet ++ ; }","nl":"Adds a word to the document."}
{"code":"void function ( FullyQualifiedClassType value ) { this . handlerClass = value ; }","nl":"Sets the value of the handlerClass property."}
{"code":"String function ( ) { return individualUri ; }","nl":"Get the individual URI."}
{"code":"void function ( String str ) { javax . swing . JOptionPane . showMessageDialog ( null , str , appName , JOptionPane . INFORMATION_MESSAGE ) ; }","nl":"Popup an info to the user (ex: \"Process complete.\")"}
{"code":"int function ( ) { return format . length ( ) - formatOff + formatRepeatCount ; }","nl":"Returns the approximate count of elements left in the format. This method does not account for repeat counts or string length encodings - so should be used as a guide only."}
{"code":"void function ( ) { mPlainSaslServer = new PlainSaslServer ( new MockCallbackHandler ( ) ) ; }","nl":"Sets up the server before a test runs."}
{"code":"List < SequenceWithUtility > function ( ) { return sequences ; }","nl":"Get the sequences from this sequence database."}
{"code":"Boolean function ( int index ) { Object val = values . get ( index ) ; if ( val instanceof Boolean ) { return ( Boolean ) val ; } else { throw new IllegalStateException ( ) ; } }","nl":"Returns result value as boolean."}
{"code":"void function ( boolean enabled ) { this . enabled = enabled ; }","nl":"Enable/disable drag/drop"}
{"code":"CommandHandler function ( final String name ) { try { return CommandHandler . valueOf ( name ) ; } catch ( Exception e ) { return null ; } }","nl":"A wrapper for  {@link #valueOf(String)}. It returns null instead of throwing an exception."}
{"code":"void function ( String roleClassifierType ) { this . roleClassifierType = roleClassifierType ; }","nl":"Set the Subject Role Classifier Type to use. Currently accepted values are \"prefix\" or  \"classname\". Must be used in conjunction with the SUBJECT_ROLE_CLASSIFIER. The default  value is \"prefix\"."}
{"code":"String function ( String path ) { String content = null ; URL resource = LessFilter . this . findResource ( path ) ; if ( resource != null ) { InputStream is = resource . openStream ( ) ; content = IOUtils . toString ( is , \"UTF-8\" ) ; IOUtils . closeQuietly ( is ) ; } return content ; }","nl":"loads a resource for the specified path"}
{"code":"void function ( FMLInitializationEvent event ) { proxy . registerRenders ( ) ; }","nl":"Methods to call during initialization"}
{"code":"BigInteger function ( final BigInteger a , final BigInteger b ) { if ( b . compareTo ( BigInteger . ZERO ) == 0 ) { return a ; } return findGCD ( b , a . mod ( b ) ) ; }","nl":"Computes the Greatest Common Divisor of two BigIntegers."}
{"code":"int function ( ) { if ( items != null ) { return items . size ( ) ; } return 0 ; }","nl":"Size."}
{"code":"void function ( String feedId ) { this . feedId = feedId ; }","nl":"Sets the feed id."}
{"code":"short function ( ) { return CSSValue . CSS_PRIMITIVE_VALUE ; }","nl":"A code defining the type of the value as defined above."}
{"code":"int function ( MatrixPosition position ) { return originalMatrix . matrixItemUtility [ position . row ] [ position . column ] ; }","nl":"Get the utility of a cell in the projected q-matrix at a given cell position (row,column)"}
{"code":"void function ( String role ) { AccessPermission permission = AccessPermission . permissionFromRole ( role ) ; String repository = AccessPermission . repositoryFromRole ( role ) . toLowerCase ( ) ; repositories . add ( repository ) ; permissions . put ( repository , permission ) ; }","nl":"Adds a repository permission to the team.  Role may be formatted as:   myrepo.git (this is implicitly RW+)  RW+:myrepo.git "}
{"code":"List < T > function ( List < T > l , T o ) { l . add ( o ) ; return l ; }","nl":"Append  {@code o} to {@code l}, returning  {@code l}."}
{"code":"boolean function ( StoredBlock other ) { return chainWork . compareTo ( other . chainWork ) > 0 ; }","nl":"Returns true if this objects chainWork is higher than the others."}
{"code":"String function ( ) { return this . placeId ; }","nl":"The Id for a place to tag with this content."}
{"code":"void function ( boolean flag ) { }","nl":"Specifies whether to generate \"a=rtpmap:\" attributes for static RTP/AVP format strings. This is recommended but makes messages bigger. The default is not to write such attributes."}
{"code":"ByteBuffer function ( final String str ) { try { final byte [ ] bytes = str . getBytes ( \"US-ASCII\" ) ; return ByteBuffer . wrap ( bytes ) ; } catch ( final UnsupportedEncodingException e ) { LOG . error ( \"Bad encoding?\" , e ) ; return ByteBuffer . allocate ( 0 ) ; } }","nl":"Converts the specified  {@link String} to a {@link ByteBuffer}.  The string encoding is assumed to be ASCII."}
{"code":"DataServerMessage function ( final BlockInfo block ) { return request ( block , 0 , - 1 ) ; }","nl":"Requests a block from the server. This call will read the full block."}
{"code":"boolean function ( ) { if ( expires != null ) { Date rightNow = new Date ( ) ; if ( expires . before ( rightNow ) ) { return true ; } } return false ; }","nl":"Return whether this SecurityToken is expired or not"}
{"code":"Builder function ( @ Nullable String unsafeReplacement ) { this . unsafeReplacement = unsafeReplacement ; return this ; }","nl":"Sets the replacement string for any characters outside the 'safe' range that have no explicit replacement. If  {@code unsafeReplacement} is {@code null} then no replacement will occur, ifit is  {@code \"\"} then the unsafe characters are removed from the output."}
{"code":"boolean function ( final Callable < Boolean > example ) { boolean result ; try { result = example . call ( ) ; } catch ( Exception e ) { LOG . error ( \"Exception running test: \" + example , e ) ; result = false ; } CliUtils . printPassInfo ( result ) ; return result ; }","nl":"Runs an example."}
{"code":"Block function ( int flag ) { return tx . append ( ti . fileName ( ) , new BTPageFormatter ( ti , flag ) ) ; }","nl":"Appends a new block to the end of the specified B-tree file, having the specified flag value."}
{"code":"boolean function ( ) { for ( int i = 0 ; i < monsters . length ; i ++ ) { if ( monstersLiving [ i ] ) { return false ; } } return false ; }","nl":"Check whether finished"}
{"code":"void function ( ) { super . finalize ( ) ; connection . close ( ) ; }","nl":"Destructor cleans up."}
{"code":"void function ( Class clazz , Connection con ) { closeConnection ( clazz . getName ( ) , con ) ; }","nl":"Frees Database Connection."}
{"code":"List < String > function ( ) { return roles ; }","nl":"Return the optional list of user roles which may have  been captured during the authentication process"}
{"code":"Permission function ( Mode umask ) { mMode = mMode . applyUMask ( umask ) ; return this ; }","nl":"Applies umask to the mode bits."}
{"code":"void function ( ) { futa . nextStep ( ) ; }","nl":"Calls nextStep method in Fuzzy Tasker."}
{"code":"int function ( ) { return elements . size ( ) ; }","nl":"Get the support of the itemset represented by this utility-list"}
{"code":"void function ( ) { SpaceXGUI . getInstance ( ) . appendToConsole ( TAG , \" - Right\" ) ; cmd . goRight ( 5 ) . doFor ( 1000 ) ; cmd . hover ( ) . doFor ( hoverTime ) ; }","nl":"Right Move the drone a little to the right"}
{"code":"ELEvaluator function ( ) { return current . get ( ) ; }","nl":"If within the scope of a EL evaluation call, it gives access to the ELEvaluator instance performing the EL evaluation.  This is useful for EL function methods to get access to the variables of the Evaluator. Because of this, ELEvaluator variables can be used to pass context to EL function methods (which must be static methods). "}
{"code":"boolean function ( ) { return isNew ; }","nl":"Returns a boolean indicating whether the file manager had to create a new database directory."}
{"code":"Function < Object , E > function ( @ Nullable E value ) { return new ConstantFunction < E > ( value ) ; }","nl":"Returns a function that ignores its input and always returns  {@code value}. Java 8 users: use the lambda expression  {@code o -> value} instead."}
{"code":"String function ( ) { return wsse11TokenType ; }","nl":"Get the wsse11 TokenType attribute"}
{"code":"void function ( String resultCode ) { this . resultCode = resultCode ; }","nl":"Sets the result code."}
{"code":"RpcConnection function ( String username , char [ ] password , String host , int port , boolean ssl ) { RpcConnection conn = new MsgRpc ( ) ; conn . setup ( username , password , host , port , ssl ) ; return conn ; }","nl":"Creates an RPC connection of the appropriate type and connection details  //@param type     RPC type"}
{"code":"void function ( ) { Mockito . when ( mockRepository . getAll ( ) ) . thenReturn ( blackListedSitesSet ) ; assertTrue ( service . isBlacklisted ( uri1 ) ) ; assertTrue ( service . isBlacklisted ( uri2 ) ) ; Mockito . verify ( mockRepository , times ( 2 ) ) . getAll ( ) ; }","nl":"Test finding blacklisted sites from the repository."}
{"code":"int function ( String string , int radix ) { checkNotNull ( string ) ; long result = Long . parseLong ( string , radix ) ; if ( ( result & INT_MASK ) != result ) { throw new NumberFormatException ( \"Input \" + string + \" in base \" + radix + \" is not in the range of an unsigned integer\" ) ; } return ( int ) result ; }","nl":"Returns the unsigned  {@code int} value represented by a string with the given radix."}
{"code":"AuthenticationHolderEntity function ( ) { return authenticationHolder ; }","nl":"The authentication in place when this token was created."}
{"code":"void function ( ) { try { rte . setSentenceCount ( - 1 ) ; fail ( \"Did not throw exception\" ) ; } catch ( IllegalArgumentException e ) { assertTrue ( e . getMessage ( ) . contains ( \"cannot be negative\" ) ) ; } catch ( Exception e ) { fail ( e . getMessage ( ) ) ; } }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.RTEParser#setSentenceCount(int)}."}
{"code":"Script function ( List < byte [ ] > signatures , @ Nullable byte [ ] multisigProgramBytes ) { checkArgument ( signatures . size ( ) <= 16 ) ; ScriptBuilder builder = new ScriptBuilder ( ) ; builder . smallNum ( 0 ) ; for ( byte [ ] signature : signatures ) builder . data ( signature ) ; if ( multisigProgramBytes != null ) builder . data ( multisigProgramBytes ) ; return builder . build ( ) ; }","nl":"Create a program that satisfies an OP_CHECKMULTISIG program, using pre-encoded signatures.  Optionally, appends the script program bytes if spending a P2SH output."}
{"code":"boolean function ( ) { return ! Configuration . getEnum ( PropertyKey . SECURITY_AUTHENTICATION_TYPE , AuthType . class ) . equals ( AuthType . NOSASL ) ; }","nl":"Checks if authentication is enabled."}
{"code":"void function ( String referencedRevisionLabelB ) { this . referencedRevisionLabelB = referencedRevisionLabelB ; }","nl":"Set the referenced revision label in B."}
{"code":"double [ ] function ( final double [ ] z ) { if ( z == null ) { throw new NullArgumentException ( ) ; } if ( z . length == 0 ) { throw new NoDataException ( ) ; } final double [ ] zAbs = new double [ z . length ] ; for ( int i = 0 ; i < z . length ; ++ i ) { zAbs [ i ] = FastMath . abs ( z [ i ] ) ; } return zAbs ; }","nl":"Calculates |z[i]| for all i"}
{"code":"Builder function ( char safeMin , char safeMax ) { this . safeMin = safeMin ; this . safeMax = safeMax ; return this ; }","nl":"Sets the safe range of characters for the escaper. Characters in this range that have no explicit replacement are considered 'safe' and remain unescaped in the output. If {@code safeMax < safeMin} then the safe range is empty."}
{"code":"void function ( LineListener listener ) { listeners . add ( listener ) ; }","nl":"add a listener"}
{"code":"long function ( ) { return timeElapsed ; }","nl":"Gets the total time elapsed (in milliseconds)."}
{"code":"void function ( Graphics2D g2 ) { g2 . setRenderingHints ( getRenderingHints ( ) ) ; }","nl":"Applies any rendering hints configured for these ScalingOptions to a Graphics2D instance before image operations are called on it. These might be"}
{"code":"String function ( ) { return classnamePrefix ; }","nl":"Get the current classname prefix."}
{"code":"void function ( File file , MapBuilder builder ) { try { parseMap ( createFileStream ( file ) , builder ) ; } catch ( FileNotFoundException e ) { LOG . warning ( \"File \" + file + \" does not exist.\" ) ; } catch ( Exception e ) { LOG . warning ( \"The map could not be read. \" + e ) ; } }","nl":"Reads all data from the file and send it to the sink."}
{"code":"byte [ ] function ( int index ) { Object val = values . get ( index ) ; if ( val instanceof byte [ ] ) { return ( byte [ ] ) val ; } else { throw new IllegalStateException ( ) ; } }","nl":"Returns result value as binary data."}
{"code":"void function ( final BlockLockManager manager , final long blockId ) { Thread thread = new Thread ( new Runnable ( ) { @ Override public void run ( ) { manager . lockBlock ( TEST_SESSION_ID , blockId , BlockLockType . WRITE ) ; } } ) ; thread . start ( ) ; thread . join ( 200 ) ; Assert . assertTrue ( thread . isAlive ( ) ) ; }","nl":"Calls  {@link BlockLockManager#lockBlock(long,long,BlockLockType)} and fails if it doesn'thang."}
{"code":"boolean function ( Object o ) { Type type = ( Type ) o ; boolean removed = false ; for ( Iterator < Type > i = v . iterator ( ) ; i . hasNext ( ) ; ) { Type t = i . next ( ) ; if ( ts . isSubtype ( t , type ) ) { removed = true ; i . remove ( ) ; } } return removed ; }","nl":"Removes all elements  {@code s} in the set such that {@code s} decends from {@code o}"}
{"code":"EndpointReferenceType function ( ) { return faultTo ; }","nl":"Accessor for the FaultTo property."}
{"code":"void function ( String name ) { this . name = name ; }","nl":"set name of emoji icon"}
{"code":"void function ( ) { k ++ ; lastFeedbacktime = Util . getCurrentTime ( ) ; }","nl":"call once when this seqNo is fed back in NAK"}
{"code":"void function ( String roleClassifier ) { this . roleClassifier = roleClassifier ; }","nl":"Set the Subject Role Classifier to use. If this value is not specified, then it tries to get roles from the supplied JAAS Subject (if not null) using the DefaultSecurityContext  in cxf-rt-core. Otherwise it uses this value in combination with the  SUBJECT_ROLE_CLASSIFIER_TYPE to get the roles from the Subject."}
{"code":"void function ( ) { for ( int i = 0 ; i < BLOCK_LENGTH ; i ++ ) { mTestStream . write ( INCREASING_BYTES [ i ] ) ; Assert . assertEquals ( i + 1 , mTestStream . getWrittenBytes ( ) ) ; } Assert . assertArrayEquals ( INCREASING_BYTES , Arrays . copyOfRange ( mTestStream . getBuffer ( ) . array ( ) , 0 , ( int ) BLOCK_LENGTH ) ) ; }","nl":"Tests writing an increasing byte array one byte at a time."}
{"code":"BufferedByteWriter function ( byte value ) { return this . put16 ( ( short ) ( value & 0xFF ) ) ; }","nl":"Write the given short value (16-bit) in big-endian order to the buffer"}
{"code":"void function ( InodeFile file ) { TtlBucket bucket = getBucketContaining ( file ) ; if ( bucket != null ) { bucket . removeFile ( file ) ; } }","nl":"Removes a file from the bucket containing it if the file is in one of the buckets, otherwise, do nothing.  Assume that no file in the buckets has ttl value that equals  {@link Constants#NO_TTL}. If a file with valid ttl value is inserted to the buckets and its ttl value is going to be set to  {@link Constants#NO_TTL} later, be sure to remove the file from the buckets first."}
{"code":"String function ( ) { return noRun ; }","nl":"Gets the value of the noRun property."}
{"code":"void function ( Mode . Bits bits , LockedInodePath inodePath ) { if ( ! mPermissionCheckEnabled ) { return ; } List < Inode < ? >> inodeList = inodePath . getInodeList ( ) ; String user = getClientUser ( ) ; List < String > groups = getGroups ( user ) ; checkInodeList ( user , groups , bits , inodePath . getUri ( ) . getPath ( ) , inodeList , false ) ; }","nl":"Checks whether a user has permission to perform a specific action on a path. This check will pass if the path is invalid."}
{"code":"void function ( String user , String message , String graphName , String revision , String triples ) { String query = String . format ( \"USER \"%s\" %n\" + \"MESSAGE \"%s\" %n\" + \"DELETE DATA { GRAPH <%s> REVISION \"%s\" %n\" + \" { %n\" + \"   %s %n\" + \" } %n\" + \"}\" , user , message , graphName , revision , triples ) ; ep . sparql ( MediaType . TEXT_HTML , query ) ; }","nl":"Execute DELETE query."}
{"code":"void function ( ) { long id = 1 ; mThrown . expect ( LineageDoesNotExistException . class ) ; mThrown . expectMessage ( ExceptionMessage . LINEAGE_DOES_NOT_EXIST . getMessage ( id ) ) ; mLineageStore . deleteLineage ( id ) ; }","nl":"Tests that an exception is thrown when trying to delete a non-existing lineage via the {@link LineageStore#deleteLineage(long)} method."}
{"code":"boolean function ( ) { return false ; }","nl":"Returns whether the socket supports urgent data or not. Subclasses should override this method."}
{"code":"CString function ( ) { if ( handlerName == null ) { handlerName = new CString ( ) ; handlerName . setValue ( \"\" ) ; } return handlerName ; }","nl":"Gets the value of the handlerName property."}
{"code":"void function ( SshDisconnectedEvent ev ) { System . out . println ( \"Disconnected: \" + ev . getHost ( ) + \". Press Enter to exit\" ) ; connected = false ; }","nl":"Captures SshDisconnectedEvent"}
{"code":"long function ( ) { return messageNumber ; }","nl":"Returns the message number of the message within its sequence."}
{"code":"List < String > function ( CertificateConstraintsType certConstraints ) { if ( certConstraints != null && certConstraints . isSetIssuerDNConstraints ( ) ) { DNConstraintsType constraints = certConstraints . getIssuerDNConstraints ( ) ; return constraints . getRegularExpression ( ) ; } return java . util . Collections . emptyList ( ) ; }","nl":"Get a List of Strings that corresponds to the issuer regular expression constraints from a JAXB CertificateConstraintsType"}
{"code":"void function ( List < String > registeredAudiences ) { this . registeredAudiences = registeredAudiences ; }","nl":"Set the list of registered audiences"}
{"code":"Script function ( List < TransactionSignature > signatures ) { List < byte [ ] > sigs = new ArrayList < byte [ ] > ( signatures . size ( ) ) ; for ( TransactionSignature signature : signatures ) { sigs . add ( signature . encodeToBitcoin ( ) ) ; } return createMultiSigInputScriptBytes ( sigs , null ) ; }","nl":"Create a program that satisfies an OP_CHECKMULTISIG program."}
{"code":"long function ( int value ) { return value & INT_MASK ; }","nl":"Returns the value of the given  {@code int} as a {@code long}, when treated as unsigned."}
{"code":"FileDescriptor function ( ) { return fd ; }","nl":"Gets the file descriptor of this socket."}
{"code":"Site function ( String host ) { log . debug ( \"Request to get Site : {}\" , host ) ; return siteRepository . findByHost ( host ) ; }","nl":"Get one site by id."}
{"code":"ByteBuffer function ( int start , int len ) { return ByteBuffer . wrap ( getIncreasingByteArray ( start , len ) ) ; }","nl":"Gets a  {@link ByteBuffer} containing an increasing sequence of bytes starting at the givenvalue."}
{"code":"void function ( ) { ttm . setStatus ( TargetStatus . LOST ) ; assertTrue ( ttm . toString ( ) . contains ( \",T,\" ) ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#setStatus()} ."}
{"code":"boolean function ( String path , boolean slashed ) { int start = slashed ? 1 : 0 ; return path . length ( ) >= start + 2 && ( ! slashed || path . charAt ( 0 ) == '/' ) && path . charAt ( start + 1 ) == ':' && ( ( path . charAt ( start ) >= 'A' && path . charAt ( start ) <= 'Z' ) || ( path . charAt ( start ) >= 'a' && path . charAt ( start ) <= 'z' ) ) ; }","nl":"Checks if the path is a windows path. This should be platform independent."}
{"code":"void function ( final int blockLength , final D1Submatrix64F A , final D1Submatrix64F V , int row , double gamma ) { double val = BlockHouseHolder . innerProdRow ( blockLength , A , row , V , row , 1 ) ; double before = A . get ( row , row + 1 ) ; A . set ( row , row + 1 , 1 ) ; BlockVectorOps . add_row ( blockLength , V , row , 1 , A , row , - 0.5 * gamma * val , V , row , row + 1 , A . col1 - A . col0 ) ; A . set ( row , row + 1 , before ) ; }","nl":" Final computation for a single row of 'v':  v = y -(1/2)&gamma;(y^Tu)u "}
{"code":"String function ( ) { return url . replaceAll ( \"|?.*\" , \"\" ) . replace ( \"|:|d{4}\" , \"\" ) ; }","nl":"Returns the URL without the port and the query string part."}
{"code":"int function ( ) { BitSet result = ( BitSet ) taken . clone ( ) ; result . andNot ( black ) ; return result . cardinality ( ) ; }","nl":"Current count of white stones."}
{"code":"BookPreview function ( UUID uuid ) { for ( BookPreview nb : data ) { if ( nb . getUUID ( ) . equals ( uuid ) ) return nb ; } return null ; }","nl":"Return the preview associated with the given UUID"}
{"code":"boolean function ( ) { return allNodes . size ( ) == 0 ; }","nl":"Checks with heap is empty or not"}
{"code":"DagEngine function ( ) { return new DagEngine ( ) ; }","nl":"Return a Dag engine for a system user (no user, no group)."}
{"code":"void function ( ) { System . out . println ( \"getResourceStream\" ) ; String path = \"\" ; ResourceLoader instance = new ResourceLoader ( ) ; InputStream expResult = null ; InputStream result = instance . getResourceStream ( path ) ; Assert . assertNotNull ( result ) ; }","nl":"Test of getResourceStream method, of class ResourceLoader."}
{"code":"void function ( Iterable < ? extends T > elements ) { offerAll ( elements . iterator ( ) ) ; }","nl":"Adds each member of  {@code elements} as a candidate for the top {@code k} elements. Thisoperation takes amortized linear time in the length of  {@code elements}. If all input data to this  {@code TopKSelector} is in a single {@code Iterable}, prefer  {@link Ordering#leastOf(Iterable,int)}, which provides a simpler API for that use case."}
{"code":"ProjectValidation function ( ) { return new ProjectValidation ( ) ; }","nl":"Create an instance of  {@link ProjectValidation }"}
{"code":"boolean function ( Map < String , String > map , String key , String value ) { if ( map == null || UtilString . isEmpty ( key ) || UtilString . isEmpty ( value ) ) { return false ; } map . put ( key , value ) ; return true ; }","nl":"add key-value pair to map, both key and value need not null or empty"}
{"code":"Object function ( Object o1 , Object o2 ) { return ( o1 != null ) ? o1 : o2 ; }","nl":"Return the first not null value, or null if both are null. Defined for EL as 'Object firstNotNull(Object, Object)'."}
{"code":"String function ( ) { return csr ; }","nl":"Gets the value of the csr property."}
{"code":"void function ( Exception exception ) { if ( sIsLogEnabled ) { Log . e ( sApplicationTag , getContent ( getCurrentStackTraceElement ( ) ) + \" >\" + exception . getMessage ( ) ) ; exception . printStackTrace ( ) ; } }","nl":"Send an ERROR log message."}
{"code":"Set < String > function ( ) { return recentlyGrantedPermissions ; }","nl":"Getter for the recently granted permissions."}
{"code":"boolean function ( Fiat other ) { return compareTo ( other ) < 0 ; }","nl":"Returns true if the monetary value represented by this instance is less than that of the given other Coin, otherwise false."}
{"code":"void function ( String type ) { this . type = type ; }","nl":"Set the type of the request"}
{"code":"String function ( String text ) { return CacheUtil . md5sum ( text ) ; }","nl":"Generates an MD5 key for the given text."}
{"code":"BufferedByteWriter function ( int value ) { ensureCapacity ( 4 ) ; mWriter . putInt ( value ) ; return this ; }","nl":"Write the given int value (32-bit) in big-endian order to the buffer"}
{"code":"String function ( Object obj ) { if ( Model . getFacade ( ) . isAAttribute ( obj ) ) { if ( ! Model . getFacade ( ) . isReadOnly ( obj ) ) { return \"final \" ; } } else { if ( Model . getFacade ( ) . isAOperation ( obj ) ) { if ( Model . getFacade ( ) . isLeaf ( obj ) ) { return \"final \" ; } } } return \"\" ; }","nl":"Generate \"final\" keyword for final operations or attributes."}
{"code":"T function ( ) { return W ; }","nl":"Returns a diagonal matrix with the singular values.  The singular values are ordered from largest to smallest."}
{"code":"OpenIDClaimMapper function ( ) { if ( instance == null ) { instance = new OpenIDClaimMapper ( ) ; } return instance ; }","nl":"Creates and maintains a singleton instance of OpenIDClaimMapper"}
{"code":"void function ( Hessian2StreamingInput in ) { }","nl":"Frees a Hessian 2.0 deserializer"}
{"code":"void function ( String [ ] args ) { SshExample test = new SshExample ( ) ; }","nl":"Main method for SshExample"}
{"code":"String function ( String post ) { String postWithoutFullStpos = post . replaceAll ( \"|.\" , \" \" ) ; String cleanLine = postWithoutFullStpos . replaceAll ( \"[^|w&&[^|s]]\" , \"\" ) ; return cleanLine ; }","nl":"removes all punctuation marks from  a post"}
{"code":"Abstraction function ( ) { return this . abstraction ; }","nl":"Gets the abstraction with which the sink has been reached"}
{"code":"int function ( TtlBucket ttlBucket ) { long startTime1 = getTtlIntervalStartTimeMs ( ) ; long startTime2 = ttlBucket . getTtlIntervalStartTimeMs ( ) ; if ( startTime1 < startTime2 ) { return - 1 ; } if ( startTime1 == startTime2 ) { return 0 ; } return 1 ; }","nl":"Compares this bucket's TTL interval start time to that of another bucket."}
{"code":"Document function ( final InputStream in ) { return extractAll ( in , null , true , true ) ; }","nl":"Extract the content and metadata from the input stream. Depending on media type validation, the detector could be run against input stream in order to ensure that parser supports this type of content."}
{"code":"List < T > function ( ) { Arrays . sort ( buffer , 0 , bufferSize , comparator ) ; if ( bufferSize > k ) { Arrays . fill ( buffer , k , buffer . length , null ) ; bufferSize = k ; threshold = buffer [ k - 1 ] ; } return Collections . unmodifiableList ( Arrays . asList ( Arrays . copyOf ( buffer , bufferSize ) ) ) ; }","nl":"Returns the top  {@code k} elements offered to this {@code TopKSelector}, or all elements if fewer than  {@code k} have been offered, in the order specified by the factory used to createthis  {@code TopKSelector}. The returned list is an unmodifiable copy and will not be affected by further changes to this  {@code TopKSelector}. This method returns in O(k log k) time."}
{"code":"void function ( ) { Time t = zda . getTime ( ) ; assertNotNull ( t ) ; assertEquals ( 3 , t . getHour ( ) ) ; assertEquals ( 29 , t . getMinutes ( ) ) ; assertEquals ( 15.0 , t . getSeconds ( ) , 0.1 ) ; }","nl":"Test method for  {@link net.sf.marineapi.nmea.parser.ZDAParser#getTime()}."}
{"code":"void function ( ) { assertEquals ( cal . get ( Calendar . DAY_OF_MONTH ) , instance . getDay ( ) ) ; }","nl":"Test method for  {@link net.sf.marineapi.nmea.util.Date#getDay()}."}
{"code":"void function ( ) { assertEquals ( expected , LanguageRegistry . findLanguageVersionByTerseName ( terseName ) ) ; }","nl":"Checks that the expected  {@link LanguageVersion} can be found by thecombination of  {@link #terseName} and {@link #version}."}
{"code":"String function ( String text ) { return escape ( text ) . replace ( \"|*\" , \".*\" ) ; }","nl":"Replaces the wildcards with Java's regex semantics."}
{"code":"void function ( BigDecimal expDataUnitId ) { this . expDataUnitId = expDataUnitId ; }","nl":"Sets the exp data unit id."}
{"code":"OperationMetric function ( ) { return calculator ; }","nl":"Returns the object used to calculate the metric. @return The calculator."}
{"code":"void function ( ) { assertEquals ( 2 , gsv . getSentenceIndex ( ) ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.GSVParser#getSentenceIndex()}."}
{"code":"SiteUrl function ( SiteUrl siteUrl ) { log . debug ( \"Request to save SiteUrl : {}\" , siteUrl ) ; SiteUrl result = siteUrlRepository . save ( siteUrl ) ; return result ; }","nl":"Save a siteUrl."}
{"code":"DataServerMessage function ( ) { DataServerMessage ret = new DataServerMessage ( false , RPCMessage . Type . RPC_BLOCK_READ_REQUEST ) ; ret . mHeader = ByteBuffer . allocate ( REQUEST_HEADER_LENGTH ) ; return ret ; }","nl":"Creates a default block request message, just allocates the message header, and no attribute is set. The message is not ready to be sent."}
{"code":"boolean function ( ) { return entityManager . getTransaction ( ) . isActive ( ) ; }","nl":"Check if transaction is active"}
{"code":"void function ( ) { assertEquals ( 20.2 , ttm . getTimeToCPA ( ) , 0.001 ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#getTimeToCPA()} ."}
{"code":"void function ( SshDisconnectedEvent ev ) { System . out . println ( \"Disconnected: \" + ev . getHost ( ) + \". Press Enter to exit\" ) ; connected = false ; }","nl":"Captures SshDisconnectedEvent"}
{"code":"String function ( ) { return value ; }","nl":"Get the Value value."}
{"code":"boolean function ( ) { boolean ok = idx . next ( ) ; if ( ok ) { RID rid = idx . getDataRid ( ) ; ts . moveToRid ( rid ) ; } return ok ; }","nl":"Moves to the next record, which in this case means moving the index to the next record satisfying the selection constant, and returning false if there are no more such index records. If there is a next record, the method moves the  tablescan to the corresponding data record."}
{"code":"void function ( ) { seekInternal ( mEOFBlockStream , ( int ) BLOCK_LENGTH ) ; }","nl":"Tests the  {@link UnderStoreBlockInStream#seek(long)} method for the last block of the file."}
{"code":"void function ( ) { int month = 0 ; try { instance . setMonth ( month ) ; fail ( \"Did not throw exception\" ) ; } catch ( IllegalArgumentException e ) { } month = 32 ; try { instance . setMonth ( month ) ; fail ( \"Did not throw exception\" ) ; } catch ( IllegalArgumentException e ) { } }","nl":"Test method for  {@link net.sf.marineapi.nmea.util.Date#setMonth(int)}."}
{"code":"String function ( Set < String > population , FitnessFunction fitnessFn , int iterations ) { String bestIndividual = null ; validatePopulation ( population ) ; clearInstrumentation ( ) ; setPopulationSize ( population . size ( ) ) ; for ( int i = 0 ; i < iterations ; i ++ ) { bestIndividual = ga ( population , fitnessFn ) ; } setIterations ( iterations ) ; return bestIndividual ; }","nl":"Returns the best individual in the specified population, according to the specified FITNESS-FN and number of iterations."}
{"code":"RPPA function ( ) { return rppaValue ; }","nl":"Gets the RPPA Value."}
{"code":"void function ( QName attribute ) { path . addLast ( path . getLast ( ) . attributes . get ( attribute ) ) ; }","nl":"Moves from the current node to the given attribute."}
{"code":"EncryptionProperties function ( ) { return encryptionProperties ; }","nl":"Get the EncryptionProperties to be used to encrypt tokens issued for this service"}
{"code":"AccessToken function ( List < String > permissions , String uniqueUserTag ) { return getAccessTokenForUser ( permissions , Mode . SHARED , uniqueUserTag ) ; }","nl":"Gets the access token of the shared test user with the tag for the application with the requested permissions."}
{"code":"void function ( @ Nullable Closeable closeable , boolean swallowIOException ) { if ( closeable == null ) { return ; } try { closeable . close ( ) ; } catch ( IOException e ) { if ( swallowIOException ) { logger . log ( Level . WARNING , \"IOException thrown while closing Closeable.\" , e ) ; } else { throw e ; } } }","nl":"Closes a  {@link Closeable}, with control over whether an  {@code IOException} may be thrown.This is primarily useful in a finally block, where a thrown exception needs to be logged but not propagated (otherwise the original exception will be lost). If  {@code swallowIOException} is true then we never throw {@code IOException} but merely logit. Example:     {@code}public void useStreamNicely() throws IOException  SomeStream stream = new SomeStream(\"foo\"); boolean threw = true; try { // ... code which does something with the stream ... threw = false; } finally { // If an exception occurs, rethrow it only if threw==false: Closeables.close(stream, threw); } }}"}
{"code":"void function ( final String key , final String value ) { properties . setProperty ( key , value ) ; }","nl":"Setter for a property. If the property already exists, the value will be overridden. Hint: This method is intended as an alternative way to set properties programmatically instead of using the fckeditor.properties. It should never used inside FCKeditor.Java!!!"}
{"code":"List < RSSItem > function ( ) { return this . _items ; }","nl":"All get methods"}
{"code":"void function ( Item item , int quantity ) { if ( ! this . isFull ( ) ) { quantity = Math . min ( quantity , limit - count ) ; count += quantity ; if ( invMap . containsKey ( item ) ) { int currentQty = invMap . get ( item ) ; quantity += currentQty ; } invMap . put ( item , quantity ) ; } }","nl":"Adds an item stack into the inventory"}
{"code":"void function ( ) { assertEquals ( cal . get ( Calendar . YEAR ) , instance . getYear ( ) ) ; assertEquals ( cal . get ( Calendar . MONTH ) + 1 , instance . getMonth ( ) ) ; assertEquals ( cal . get ( Calendar . DAY_OF_MONTH ) , instance . getDay ( ) ) ; }","nl":"Test method for  {@link net.sf.marineapi.nmea.util.Date#Date()}."}
{"code":"int function ( ) { if ( vstack . empty ( ) ) throw new Exception ( \"Internal parser error: top() called on empty virtual stack\" ) ; return vstack . peek ( ) . intValue ( ) ; }","nl":"Return value on the top of the stack (without popping it)."}
{"code":"String function ( String baseURI ) { int idx = baseURI . lastIndexOf ( '/' ) ; String result = baseURI ; if ( idx != - 1 ) { result = baseURI . substring ( 0 , idx ) ; } return result ; }","nl":"Return everything in the path up to the last slash in a URI."}
{"code":"void function ( ) { SetAttributeOptions options = SetAttributeOptions . defaults ( ) ; Assert . assertNull ( options . getPinned ( ) ) ; Assert . assertNull ( options . getTtl ( ) ) ; Assert . assertNull ( options . getPersisted ( ) ) ; }","nl":"Tests the  {@link SetAttributeOptions#defaults()} method."}
{"code":"int function ( ) { return i ; }","nl":"Returns the uint32 encoded form of the path element, including the most significant bit."}
{"code":"void function ( List < String > types ) { produceMediaTypes = types ; }","nl":"Sets custom Produces media types; can be used to override static {@link Produces} annotation value set on the provider."}
{"code":"boolean function ( ) { return ! rawCommand . isEmpty ( ) ; }","nl":"Checks if this is a valid command or not. Mainly if its just an empty string"}
{"code":"void function ( ) { Mockito . when ( mClient . listObjectsV2 ( Matchers . any ( ListObjectsV2Request . class ) ) ) . thenThrow ( AmazonClientException . class ) ; boolean result = mS3UnderFileSystem . delete ( PATH , true ) ; Assert . assertFalse ( result ) ; }","nl":"Test case for  {@link S3AUnderFileSystem#delete(String,boolean)}."}
{"code":"void function ( int cameraId ) { requestedCameraId = cameraId ; }","nl":"Allows third party apps to specify the camera ID, rather than determine it automatically based on available cameras and their orientation."}
{"code":"List < ByteBuffer > function ( List < ByteBuffer > source ) { List < ByteBuffer > ret = new ArrayList < > ( source . size ( ) ) ; for ( ByteBuffer b : source ) { ret . add ( cloneByteBuffer ( b ) ) ; } return ret ; }","nl":"Clones a list of  {@link ByteBuffer}s."}
{"code":"String function ( ) { return title ; }","nl":"Gets the optional title for the dialog"}
{"code":"void function ( VertexLabelType from , VertexLabelType to , EdgeLabelType el ) { Hashtable < VertexLabelType , EdgeLabelType > localEdgeLookup = checkForNewVertex ( from ) ; localEdgeLookup . put ( to , el ) ; checkForNewVertex ( to ) ; }","nl":"Adds a directed labeled edge to the graph. The end points of the edge are specified by vertex labels. New vertices are automatically identified and added to the graph."}
{"code":"WritableMap function ( @ Nullable String key , String errorMessage ) { WritableMap errorMap = Arguments . createMap ( ) ; errorMap . putString ( \"message\" , errorMessage ) ; if ( key != null ) { errorMap . putString ( \"key\" , key ) ; } return errorMap ; }","nl":"Create Error object to be passed back to the JS callback."}
{"code":"List function ( ) { return new ArrayList ( LOGGER_NAMES ) ; }","nl":"Returns a list of all loggers that will be accessed by XRLog. Each entry is a String with a logger name, which can be used to retrieve the logger using the corresponding Logging API; example name might be \"org.xhtmlrenderer.config\""}
{"code":"void function ( JobsGroup jobsGroup , Context ctx , boolean isMissing ) { this . finishRunningJobs ( ctx ) ; this . jobs . put ( Long . valueOf ( jobsGroup . getId ( ) ) , jobsGroup ) ; jobsGroup . run ( this , isMissing ) ; }","nl":"Adds a JobsGroup to the queue, and starts immediately to execute jobs on that group. If there was a previously group running, this method finishes that execution first."}
{"code":"int function ( ) { return start ; }","nl":"Return the offset of the workflows being returned.  For pagination purposes."}
{"code":"void function ( UriPrefixPair [ ] packagePrefixes ) { this . packagePrefixes = packagePrefixes ; }","nl":"Set the mappings from namespace URI to Javascript name prefixes."}
{"code":"void function ( long seqId ) { this . seqId = seqId ; }","nl":"Sets the seq id."}
{"code":"ProfileData function ( ) { return this . profileData ; }","nl":"Gets the new merged profile data object."}
{"code":"DenseMatrix64F function ( DenseMatrix64F u , double gamma ) { if ( ! MatrixFeatures . isVector ( u ) ) throw new IllegalArgumentException ( \"u must be a vector\" ) ; DenseMatrix64F Q = CommonOps . identity ( u . getNumElements ( ) ) ; CommonOps . multAddTransB ( - gamma , u , u , Q ) ; return Q ; }","nl":" Creates a reflector from the provided vector and gamma.  Q = I - &gamma; u uT   In practice  {@link org.ejml.alg.dense.mult.VectorVectorMult#householder(double,org.ejml.data.D1Matrix64F,org.ejml.data.D1Matrix64F,org.ejml.data.D1Matrix64F)}  multHouseholder}should be used for performance reasons since there is no need to calculate Q explicitly. "}
{"code":"Mode function ( Mode umask ) { return new Mode ( mOwnerBits . and ( umask . mOwnerBits . not ( ) ) , mGroupBits . and ( umask . mGroupBits . not ( ) ) , mOtherBits . and ( umask . mOtherBits . not ( ) ) ) ; }","nl":"Creates a new mode by applying the given umask  {@link Mode} to this mode."}
{"code":"Waypoint function ( String id ) { return new Waypoint ( id , getLatitude ( ) , getLongitude ( ) ) ; }","nl":"Convenience method for creating a waypoint based in the Position."}
{"code":"void function ( long testId ) { this . testId = testId ; }","nl":"Sets the test id."}
{"code":"void function ( boolean saveW ) { this . saveW = saveW ; }","nl":" Sets if it should internally save the W matrix before performing the decomposition.  Must be set before decomposition the matrix.   Saving W can result in about a 5% savings when solving systems around a height of 5k.  The price is that it needs to save a matrix the size of the input matrix. "}
{"code":"void function ( final ProtocolHandler protocolHandler ) { this . m_readHandler . setProtocolHandler ( protocolHandler ) ; }","nl":"Sets the protocol handler to use for this connection."}
{"code":"byte [ ] function ( ) { if ( ! isRaw ) { format . checkType ( 'U' , false ) ; } int itemLen = getByteArrayLength ( ) ; byte [ ] unpacked = new byte [ itemLen ] ; getByteArrayInternal ( itemLen , unpacked , 0 , itemLen ) ; return unpacked ; }","nl":"Retrieves a byte array field from the stream. Creates a new byte array that is the size of the object being retrieved."}
{"code":"LogoutRequestSender function ( ) { return instance ; }","nl":"getInstance method of LogoutRequestSender, as it is a singleton"}
{"code":"int function ( ) { return num ; }","nl":"Returns numerator"}
{"code":"String function ( ) { String path = mUri . getPath ( ) ; int slash = path . lastIndexOf ( SEPARATOR ) ; return path . substring ( slash + 1 ) ; }","nl":"Gets the final component of the  {@link AlluxioURI}."}
{"code":"ResultType function ( RequestAbstractType request , ResultType response ) { response . setRequestId ( request . getId ( ) ) ; return response ; }","nl":"Copies Request ID to response as per XKMS specification http://www.w3.org/TR/xkms2/#XKMS_2_0_Section_1"}
{"code":"Object function ( Object val ) { if ( val instanceof String && ( ( String ) val ) . equals ( \"undefined\" ) ) { return null ; } return val ; }","nl":"JSObject will return the String \"undefined\" at certain times, so we  need to make sure we're not getting a value that looks valid, but isn't."}
{"code":"void function ( ) { getPage ( ) . draw ( view . canvas ) ; view . invalidate ( ) ; }","nl":"Redraw the page"}
{"code":"void function ( ) { final double lat = 25 + ( 01.941 / 60 ) ; instance . setLatitude ( 0 , lat ) ; assertTrue ( instance . toString ( ) . contains ( \",02501.941\" ) ) ; assertEquals ( lat , instance . parseLatitude ( 0 ) , 0.000001 ) ; }","nl":"Test method for {@link net.sf.marineapi.nmea.parser.PositionParser#setLatitude(int,double)}."}
{"code":"void function ( ) { mTextView . removeTextChangedListener ( mChangeListener ) ; }","nl":"Disconnect this undo/redo from the text view."}
{"code":"void function ( String identifier , HighLevelChangeRenaming highLevelChangeRenaming ) { this . highLevelChangesRenaming . put ( identifier , highLevelChangeRenaming ) ; }","nl":"Add a high level change (renaming). If the difference group identifier already exists the old high level change (renaming) will be overwritten."}
{"code":"void function ( String graphPath , Bundle parameters , RequestListener listener , final Object state ) { request ( graphPath , parameters , \"GET\" , listener , state ) ; }","nl":"Make a request to the Facebook Graph API with the given string parameters using an HTTP GET (default method).  See http://developers.facebook.com/docs/api  Note that this method is asynchronous and the callback will be invoked in a background thread; operations that affect the UI will need to be posted to the UI thread or an appropriate handler.  This method is deprecated.  See  {@link Facebook} and {@link com.facebook.Request} for more info."}
{"code":"void function ( Rotation rotation ) { this . rotation = rotation ; for ( StateListener listener : this . listeners ) { listener . onRotationChanged ( this . rotation ) ; } }","nl":"Sets the rotation."}
{"code":"int function ( ) { return pattern . length ; }","nl":"Returns the length of the matched token. It is not required to be meaningful unless addChar has returned true and hasFreePart returned false or endChar returned true."}
{"code":"void function ( ) { mBuffer = BufferUtils . getIncreasingByteBuffer ( LENGTH ) ; }","nl":"Sets up a new  {@link ByteBuffer} before a test runs."}
{"code":"void function ( ) { assertTrue ( rte . isFirst ( ) ) ; }","nl":"Test method for  {@link net.sf.marineapi.nmea.parser.RTEParser#isFirst()}."}
{"code":"void function ( List < RSSItem > items ) { this . _items = items ; }","nl":"All set methods"}
{"code":"void function ( long entrezGeneID ) { this . geneB = entrezGeneID ; }","nl":"Sets Entrez Gene ID for Gene B."}
{"code":"void function ( ) { mThrown . expect ( ClosedChannelException . class ) ; ByteBuffer buf = BufferUtils . getIncreasingByteBuffer ( ( int ) TEST_BLOCK_SIZE ) ; Assert . assertEquals ( TEST_BLOCK_SIZE , mWriter . append ( buf ) ) ; mWriter . close ( ) ; mWriter . append ( buf ) ; }","nl":"Tests that a  {@link ClosedChannelException} is thrown when trying to append to a channel afterclosing it."}
{"code":"void function ( ) { Assert . assertEquals ( 33554431L , BlockId . createBlockId ( 1 , BlockId . getMaxSequenceNumber ( ) ) ) ; Assert . assertEquals ( MAX_SEQUENCE_NUMBER , BlockId . createBlockId ( 0 , BlockId . getMaxSequenceNumber ( ) ) ) ; Assert . assertEquals ( 4294967295L , BlockId . createBlockId ( 255 , BlockId . getMaxSequenceNumber ( ) ) ) ; }","nl":"Tests that the  {@link BlockId#createBlockId(long,long)} method works correctly when creating ablock with the maximum sequence number."}
{"code":"void function ( ) { LOG . debug ( \"Running full download tests...\" ) ; runFullTest ( new YahooImageSearcher ( null , UUID . randomUUID ( ) , \"ajzgmvnV34GrMcdruY9h3vKb4GD5AZoqfiLXhWfazKWcIkuaWZYlyoCqxrEV\" , \"hurricane katrina\" ) ) ; }","nl":"This tests everything that the test for the static file above tests, but it also does the full download."}
{"code":"Stmt function ( String fmt , List < ? > subst ) { return ( Stmt ) parse ( STMT , fmt , subst . toArray ( ) ) ; }","nl":"Parse a string into a  {@code Stmt} AST node,applying substitutions."}
{"code":"List < String > function ( ) { return redirectUris ; }","nl":"Gets a list of URIs the AuthorizationService may return the authorization code to"}
{"code":"byte [ ] function ( ) { return this . errors ; }","nl":"Gets the errors."}
{"code":"int function ( Object o , Object o1 ) { CancerStudy study0 = ( CancerStudy ) o ; CancerStudy study1 = ( CancerStudy ) o1 ; return study0 . getName ( ) . compareTo ( study1 . getName ( ) ) ; }","nl":"Compare two cancer studies."}
{"code":"boolean function ( String host , String domain ) { boolean match = host . equals ( domain ) || ( domain . startsWith ( \".\" ) && host . endsWith ( domain ) ) ; return match ; }","nl":"Performs domain-match as defined by the RFC2965.  Host A's name domain-matches host B's if  their host name strings string-compare equal; or A is a HDN string and has the form NB, where N is a non-empty name string, B has the form .B', and B' is a HDN string.  (So, x.y.com domain-matches .Y.com but not Y.com.) "}
{"code":"ListIterator < BasicLogRecord > function ( ) { flush ( ) ; return new LogIterator ( currentblk ) ; }","nl":"Returns an iterator for the log records, which will be returned in reverse order starting with the most recent."}
{"code":"GetOfferDetailsResponse . Return . DetailOfferData . Merchant . Addresses function ( ) { return new GetOfferDetailsResponse . Return . DetailOfferData . Merchant . Addresses ( ) ; }","nl":"Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.Merchant.Addresses }"}
{"code":"Block function ( String filename ) { return filemgr . append ( filename , contents ) ; }","nl":"Appends the contents of the page to the specified file."}
{"code":"void function ( Node aNode , NodeTest forTest ) { actualNumNodes ++ ; }","nl":"A single Node is always valid"}
{"code":"void function ( int conflictsNotApproved ) { this . conflictsNotApproved = conflictsNotApproved ; }","nl":"Set the number of not approved conflicts."}
{"code":"void function ( VertexLabelType from , VertexLabelType to ) { Hashtable < VertexLabelType , EdgeLabelType > localEdgeLookup = globalEdgeLookup . get ( from ) ; if ( localEdgeLookup != null ) localEdgeLookup . remove ( to ) ; }","nl":"Removes an edge from the graph."}
{"code":"void function ( double moveSpeed ) { this . mob . getNavigator ( ) . tryMoveToEntityLiving ( attackTarget , moveSpeed ) ; }","nl":"Attempts to move the AI to the attack target."}
{"code":"Map < String , String > function ( FederationModel registration ) { String url = asLink ( registration . url , registration . token , FederationRequest . PULL_SETTINGS ) ; Map < String , String > settings = JsonUtils . retrieveJson ( url , SETTINGS_TYPE ) ; return settings ; }","nl":"Tries to pull the gitblit server settings from the remote gitblit instance."}
{"code":"boolean function ( CharSequence string , int index ) { return index >= 0 && index <= ( string . length ( ) - 2 ) && Character . isHighSurrogate ( string . charAt ( index ) ) && Character . isLowSurrogate ( string . charAt ( index + 1 ) ) ; }","nl":"True when a valid surrogate pair starts at the given  {@code index} in the given {@code string}. Out-of-range indexes return false."}
{"code":"String function ( ) { return mAlluxioMaster . getRPCBindHost ( ) ; }","nl":"Gets the actual bind hostname on RPC service (used by unit test only)."}
{"code":"String function ( UnicodeEscaper escaper , int cp ) { return stringOrNull ( escaper . escape ( cp ) ) ; }","nl":"Returns a string that would replace the given character in the specified escaper, or {@code null} if no replacement should be made. This method is intended for use in tests throughthe  {@code EscaperAsserts} class; production users of {@link UnicodeEscaper} should limitthemselves to its public interface."}
{"code":"void function ( ) { Mockito . when ( mClient . listObjects ( Matchers . any ( ListObjectsRequest . class ) ) ) . thenThrow ( ServiceException . class ) ; boolean result = mOSSUnderFileSystem . rename ( SRC , DST ) ; Assert . assertFalse ( result ) ; }","nl":"Test case for  {@link OSSUnderFileSystem#rename(String,String)}."}
{"code":"ScriptBuilder function ( int opcode ) { return op ( chunks . size ( ) , opcode ) ; }","nl":"Adds the given opcode to the end of the program."}
{"code":"void function ( ) { Configuration . set ( PropertyKey . WORKER_ALLOCATOR_CLASS , GreedyAllocator . class . getName ( ) ) ; Allocator allocator = Allocator . Factory . create ( mManagerView ) ; Assert . assertTrue ( allocator instanceof GreedyAllocator ) ; }","nl":"Tests the creation of the  {@link GreedyAllocator} via the{@link Allocator.Factory#create(BlockMetadataManagerView)} method."}
{"code":"void function ( String contentEncoding ) { this . contentEncoding = contentEncoding ; }","nl":"Set content encoding for the message"}
{"code":"void function ( ) { if ( sawReturn || line . length ( ) > 0 ) { finishLine ( false ) ; } }","nl":"Subclasses must call this method after finishing character processing, in order to ensure that any unterminated line in the buffer is passed to  {@link #handleLine}."}
{"code":"void function ( ) { _use_count ++ ; }","nl":"Increment the use count."}
{"code":"void function ( ) { while ( i < documents . length ) { if ( documents [ i ] . isDirectory ( ) ) { File data = new File ( documents [ i ] , fragmentFileName ) ; if ( data . exists ( ) ) { break ; } } i ++ ; } }","nl":"Moves to the next valid document."}
{"code":"void function ( final Intent result , final String txHash ) { result . putExtra ( INTENT_EXTRA_TRANSACTION_HASH , txHash ) ; result . putExtra ( INTENT_EXTRA_TRANSACTION_HASH_OLD , txHash ) ; }","nl":"Put transaction hash into result intent. Meant for usage by Bitcoin wallet applications."}
{"code":"Iterator function ( ) { return new OrderLineTypeFacade . Iterator ( order . getOrderLine ( ) ) ; }","nl":"Returns an iterator over orders line items."}
{"code":"void function ( FolderInfo . CheckedFlag checkedFlag ) { this . checkedFlag = checkedFlag ; }","nl":"Set the value of checkedFlag"}
{"code":"void function ( Bundle state ) { }","nl":"Called to ask the  {@link Presenter} to save its current dynamic state, so itcan later be reconstructed in a new instance of its process is restarted."}
{"code":"String function ( Block blk , int offset ) { concurMgr . sLock ( blk ) ; Buffer buff = myBuffers . getBuffer ( blk ) ; return buff . getString ( offset ) ; }","nl":"Returns the string value stored at the specified offset of the specified block. The method first obtains an SLock on the block, then it calls the buffer to retrieve the value."}
{"code":"BitcoinPacketHeader function ( ByteBuffer in ) { return new BitcoinPacketHeader ( in ) ; }","nl":"Deserializes only the header in case packet meta data is needed before decoding the payload. This method assumes you have already called seekPastMagicBytes()"}
{"code":"void function ( RuleSet ruleSet , Rule rule ) { RuleChainVisitor visitor = getRuleChainVisitor ( rule . getLanguage ( ) ) ; if ( visitor != null ) { visitor . add ( ruleSet , rule ) ; } }","nl":"Add the given Rule if it wants to participate in the RuleChain."}
{"code":"void function ( ) { trigger ( null ) ; }","nl":"Activates the event."}
{"code":"void function ( ) { ASTElement elm = element ( \"a\" ) ; ASTElement elm2 = element ( \"b\" ) ; ASTElement elm3 = element ( \"b\" ) ; tagList . openTag ( elm ) ; tagList . openTag ( elm2 ) ; tagList . openTag ( elm3 ) ; tagList . closeTag ( elm ) ; assertFalse ( elm . isUnclosed ( ) ) ; assertTrue ( elm2 . isUnclosed ( ) ) ; assertTrue ( elm3 . isUnclosed ( ) ) ; }","nl":"&lt;a&gt; &lt;b&gt; &lt;b&gt; &lt;/a&gt;"}
